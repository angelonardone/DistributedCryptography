{"version":3,"names":["POPOVER_SEPARATION_X","POPOVER_SEPARATION_Y","positionTryFlipMap","getOverflowingSize","actionStartPosition","documentSize","popoverSize","popoverRelativePosition","start","end","contentOverflowsWindow","overflowingSize","alignToImplementationMap","_","separation","__","center","actionSize","fromPxToNumber","pxValue","Number","replace","trim","getAlignmentValue","align","flipSupport","alignmentOverflowingSize","alignmentWorstOverflowingSize","Math","min","alignmentPosition","alignmentOverflow","oppositeAlign","oppositePopoverRelativePosition","oppositeAlignmentOverflowingSize","oppositeAlignmentWorstOverflowingSize","setResponsiveAlignment","documentRect","actionRect","actionInlineStart","popoverWidth","popoverHeight","computedStyle","inlineAlign","blockAlign","positionTry","separationX","getPropertyValue","separationY","inlineAlignmentValue","width","blockAlignmentValue","top","height","popoverCss","ChPopoverStyle0","DRAGGING_CLASS","POPOVER_PREVENT_FLICKERING_CLASS","RESIZING_CLASS","POPOVER_ALIGN_BLOCK","POPOVER_ALIGN_INLINE","POPOVER_ACTION_WIDTH","POPOVER_ACTION_HEIGHT","POPOVER_ACTION_LEFT","POPOVER_ACTION_TOP","POPOVER_DRAGGED_X","POPOVER_DRAGGED_Y","POPOVER_BLOCK_SIZE","POPOVER_INLINE_SIZE","POPOVER_MIN_BLOCK_SIZE","POPOVER_MIN_INLINE_SIZE","POPOVER_FORCED_MAX_BLOCK_SIZE","POPOVER_FORCED_MAX_INLINE_SIZE","POPOVER_BORDER_BLOCK_START_SIZE","POPOVER_BORDER_BLOCK_END_SIZE","POPOVER_BORDER_INLINE_START_SIZE","POPOVER_BORDER_INLINE_END_SIZE","POPOVER_RTL_CLASS","POPOVER_RTL","POPOVER_RTL_VALUE","PRECISION_TO_AVOID_FLOATING_POINT_ERRORS","addCursorInDocument","cursor","document","body","style","resizingCursorDictionary","rtl","setProperty","element","property","value","getProperty","addPopoverTargetElement","actionElement","popoverElement","addAction","popoverTargetElement","removePopoverTargetElement","undefined","ChPopover","borderSizeRAF","dragRAF","positionAdjustRAF","resizeRAF","adjustAlignment","checkPositionWatcher","checkBorderSizeWatcher","borderSizeObserver","resizeObserver","rtlWatcher","draggedDistanceX","draggedDistanceY","dragging","initialDragEvent","lastDragEvent","isRTLDirection","currentEdge","draggedDistanceXForResize","draggedDistanceYForResize","maxBlockSize","maxInlineSize","minBlockSize","minInlineSize","resizeWasMade","resizeByDirectionDictionary","block","popoverRect","direction","currentDraggedDistanceY","this","clientY","newBlockSize","newRestrictedBlockSize","forceCSSMinMax","el","inline","currentDraggedDistanceX","clientX","newInlineSize","newRestrictedInlineSize","resizeEdgesAndCornersDictionary","resizeLayer","handleActionChange","newActionElement","oldActionElement","actionById","handleBlockChange","blockSizeWatchChange","newValue","removeProperty","handleInlineChange","inlineSizeWatchChange","resizableChanged","showChanged","newShowValue","showPopover","firstLayer","avoidFlickeringInTheNextRender","hidePopover","popoverOpened","popoverClosed","addClickOutsideWatcherIfNecessary","handlePopoverCloseOnClickOutside","event","composedPath","includes","removeClickOutsideWatcher","show","emit","handlePopoverCloseOnEscapeKey","code","KEY_CODES","ESCAPE","mode","closeOnClickOutside","addEventListener","capture","passive","removeEventListener","addDraggingClass","classList","add","removeDraggingClass","remove","addClass","setPositionWatcher","removePositionWatcher","disconnect","SyncWithRAF","ResizeObserver","entries","popoverWasResized","find","entry","target","updatePosition","updatePositionRAF","observe","requestAnimationFrame","perform","documentElement","getBoundingClientRect","popoverScrollSizes","scrollWidth","scrollHeight","getComputedStyle","getActionInlineStartPosition","left","getPopoverInlineSizeAndFixItIfNecessary","getPopoverBlockSizeAndFixItIfNecessary","alignment","inlineOverflow","blockOverflow","setOverflowBehavior","overflowBehavior","currentMaxInlineSize","currentMaxBlockSize","newMaxInlineSize","newMaxBlockSize","inlineSizeMatch","blockSizeMatch","handlePopoverToggle","willBeOpen","newState","handleMouseDown","trackElementDragRAF","handleDragEnd","trackElementDrag","preventDefault","cancel","handleEdgeResize","edge","resizing","removeBorderSizeWatcher","trackElementResizeRAF","handleResizeEnd","trackElementResize","setBorderSizeWatcher","resizable","updateBorderSizeRAF","box","updateBorderSize","borderBlockStartWidth","borderBlockEndWidth","borderInlineStartWidth","borderInlineEndWidth","connectedCallback","adoptCommonThemes","shadowRoot","adoptedStyleSheets","MutationObserver","isRTL","attributeFilter","componentWillRender","componentDidLoad","disconnectedCallback","render","canAddListeners","h","Host","key","class","allowDrag","SCROLLABLE_CLASS","popover","onMouseDown","onToggle","part","name","ref"],"sources":["src/components/popover/utils.ts","src/components/popover/popover.scss?tag=ch-popover&encapsulation=shadow","src/components/popover/popover.tsx"],"sourcesContent":["import { ChPopoverAlign, ChPopoverPositionTry } from \"./types\";\r\n\r\nconst POPOVER_SEPARATION_X = \"--ch-popover-separation-x\";\r\nconst POPOVER_SEPARATION_Y = \"--ch-popover-separation-y\";\r\n\r\n// Position try\r\nconst positionTryFlipMap = {\r\n  \"outside-start\": \"outside-end\",\r\n  \"outside-end\": \"outside-start\",\r\n  \"inside-start\": \"inside-end\",\r\n  \"inside-end\": \"inside-start\"\r\n} as const satisfies {\r\n  [key in Exclude<ChPopoverAlign, \"center\">]: string;\r\n};\r\n\r\n/**\r\n * Returns how much (in negative value) the content overflows the window size\r\n * in the \"start\" and \"end\" directions.\r\n */\r\nconst getOverflowingSize = (\r\n  actionStartPosition: number,\r\n  documentSize: number,\r\n  popoverSize: number,\r\n  popoverRelativePosition: number\r\n) => ({\r\n  start:\r\n    documentSize -\r\n    (popoverSize + actionStartPosition + popoverRelativePosition),\r\n  end: actionStartPosition + popoverRelativePosition\r\n});\r\n\r\nconst contentOverflowsWindow = (overflowingSize: {\r\n  start: number;\r\n  end: number;\r\n}) => overflowingSize.start < 0 || overflowingSize.end < 0;\r\n\r\nconst alignToImplementationMap: {\r\n  [key in ChPopoverAlign]: (\r\n    actionSize: number,\r\n    popoverSize: number,\r\n    separation: number\r\n  ) => number;\r\n} = {\r\n  \"outside-start\": (_, popoverSize, separation) => -popoverSize - separation,\r\n\r\n  \"inside-start\": (_, __, separation) => separation,\r\n\r\n  center: (actionSize, popoverSize, separation) =>\r\n    actionSize * 0.5 + separation - popoverSize * 0.5,\r\n\r\n  \"inside-end\": (actionSize, popoverSize, separation) =>\r\n    actionSize - (separation + popoverSize),\r\n\r\n  \"outside-end\": (actionSize, _, separation) => actionSize + separation\r\n};\r\n\r\nexport const fromPxToNumber = (pxValue: string) =>\r\n  Number(pxValue.replace(\"px\", \"\").trim());\r\n\r\nconst getAlignmentValue = (\r\n  align: ChPopoverAlign,\r\n  actionStartPosition: number,\r\n  actionSize: number,\r\n  popoverSize: number,\r\n  documentSize: number,\r\n  separation: number,\r\n  flipSupport: boolean\r\n): { alignmentPosition: number; alignmentOverflow: number } => {\r\n  const popoverRelativePosition = alignToImplementationMap[align](\r\n    actionSize,\r\n    popoverSize,\r\n    separation\r\n  );\r\n\r\n  // Check if the current alignment overflows the document window\r\n  const alignmentOverflowingSize = getOverflowingSize(\r\n    actionStartPosition,\r\n    documentSize,\r\n    popoverSize,\r\n    popoverRelativePosition\r\n  );\r\n\r\n  // Find which alignment is the best fit, even if both alignments overflow the\r\n  // window\r\n  const alignmentWorstOverflowingSize = Math.min(\r\n    alignmentOverflowingSize.start,\r\n    alignmentOverflowingSize.end\r\n  );\r\n\r\n  // The configuration does not support flip or the alignment does not overflow\r\n  if (!flipSupport || !contentOverflowsWindow(alignmentOverflowingSize)) {\r\n    return {\r\n      alignmentPosition: popoverRelativePosition,\r\n      alignmentOverflow: alignmentWorstOverflowingSize\r\n    };\r\n  }\r\n\r\n  // Check the alignment with the opposite alignment\r\n  const oppositeAlign = positionTryFlipMap[align];\r\n  const oppositePopoverRelativePosition: number = alignToImplementationMap[\r\n    oppositeAlign\r\n  ](actionSize, popoverSize, separation);\r\n\r\n  const oppositeAlignmentOverflowingSize = getOverflowingSize(\r\n    actionStartPosition,\r\n    documentSize,\r\n    popoverSize,\r\n    oppositePopoverRelativePosition\r\n  );\r\n\r\n  // Find which alignment is the best fit, even if both alignments overflow the\r\n  // window\r\n  const oppositeAlignmentWorstOverflowingSize = Math.min(\r\n    oppositeAlignmentOverflowingSize.start,\r\n    oppositeAlignmentOverflowingSize.end\r\n  );\r\n\r\n  // The opposite alignment is the best fit\r\n  if (!contentOverflowsWindow(oppositeAlignmentOverflowingSize)) {\r\n    return {\r\n      alignmentPosition: oppositePopoverRelativePosition,\r\n      alignmentOverflow: oppositeAlignmentWorstOverflowingSize\r\n    };\r\n  }\r\n\r\n  return alignmentWorstOverflowingSize < oppositeAlignmentWorstOverflowingSize\r\n    ? {\r\n        alignmentPosition: oppositePopoverRelativePosition,\r\n        alignmentOverflow: oppositeAlignmentWorstOverflowingSize\r\n      }\r\n    : {\r\n        alignmentPosition: popoverRelativePosition,\r\n        alignmentOverflow: alignmentWorstOverflowingSize\r\n      };\r\n};\r\n\r\nexport const setResponsiveAlignment = (\r\n  documentRect: DOMRect,\r\n  actionRect: DOMRect,\r\n  actionInlineStart: number,\r\n  popoverWidth: number,\r\n  popoverHeight: number,\r\n  computedStyle: CSSStyleDeclaration,\r\n  inlineAlign: ChPopoverAlign,\r\n  blockAlign: ChPopoverAlign,\r\n  positionTry: ChPopoverPositionTry\r\n): [\r\n  { alignmentPosition: number; alignmentOverflow: number },\r\n  { alignmentPosition: number; alignmentOverflow: number }\r\n] => {\r\n  const separationX = computedStyle.getPropertyValue(POPOVER_SEPARATION_X);\r\n  const separationY = computedStyle.getPropertyValue(POPOVER_SEPARATION_Y);\r\n\r\n  // Alignment\r\n  const inlineAlignmentValue = getAlignmentValue(\r\n    inlineAlign,\r\n    actionInlineStart,\r\n    actionRect.width,\r\n    popoverWidth,\r\n    documentRect.width,\r\n    fromPxToNumber(separationX),\r\n    inlineAlign !== \"center\" && positionTry === \"flip-inline\"\r\n  );\r\n\r\n  const blockAlignmentValue = getAlignmentValue(\r\n    blockAlign,\r\n    actionRect.top,\r\n    actionRect.height,\r\n    popoverHeight,\r\n    documentRect.height,\r\n    fromPxToNumber(separationY),\r\n    blockAlign !== \"center\" && positionTry === \"flip-block\"\r\n  );\r\n\r\n  return [inlineAlignmentValue, blockAlignmentValue];\r\n};\r\n","@import \"../../common/base\";\r\n\r\n@include box-sizing();\r\n\r\n$ch-popover-x--same-layer: calc(\r\n  (var(--ch-popover-inline) + var(--ch-popover-dragged-x)) *\r\n    var(--ch-popover-rtl)\r\n);\r\n\r\n$ch-popover-y--same-layer: calc(\r\n  var(--ch-popover-block) + var(--ch-popover-dragged-y)\r\n);\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-popover-block-size:\r\n   * Specifies the block size of the popover. Useful for scenarios where the\r\n   * popover is resizable.\r\n   * @default max-content\r\n   */\r\n  --ch-popover-block-size: max-content;\r\n\r\n  /**\r\n   * @prop --ch-popover-inline-size:\r\n   * Specifies the inline size of the popover. Useful for scenarios where the\r\n   * popover is resizable.\r\n   * @default max-content\r\n   */\r\n  --ch-popover-inline-size: max-content;\r\n\r\n  /**\r\n   * @prop --ch-popover-max-block-size:\r\n   * Specifies the maximum block size of the popover. Useful for scenarios where the\r\n   * popover is resizable.\r\n   * @default auto\r\n   */\r\n  --ch-popover-max-block-size: auto;\r\n\r\n  /**\r\n     * @prop --ch-popover-max-inline-size:\r\n     * Specifies the maximum inline size of the popover. Useful for scenarios\r\n     * where the popover is resizable.\r\n     * @default auto\r\n     */\r\n  --ch-popover-max-inline-size: auto;\r\n\r\n  /**\r\n   * @prop --ch-popover-min-block-size:\r\n   * Specifies the minimum block size of the popover. Useful for scenarios where the\r\n   * popover is resizable.\r\n   * @default auto\r\n   */\r\n  --ch-popover-min-block-size: auto;\r\n\r\n  /**\r\n    * @prop --ch-popover-min-inline-size:\r\n    * Specifies the minimum inline size of the popover. Useful for scenarios\r\n    * where the popover is resizable.\r\n    * @default auto\r\n    */\r\n  --ch-popover-min-inline-size: auto;\r\n\r\n  /**\r\n   * @prop --ch-popover-resize-threshold:\r\n   * Specifies the size of the threshold to resize the popover.\r\n   * @default 4px\r\n   */\r\n  --ch-popover-resize-threshold: 8px;\r\n\r\n  /**\r\n   * @prop --ch-popover-separation-x:\r\n   * Specifies the separation between the action and popover in the x axis.\r\n   * @default 0px\r\n   */\r\n  --ch-popover-separation-x: 0px;\r\n\r\n  /**\r\n   * @prop --ch-popover-separation-y:\r\n   * Specifies the separation between the action and popover in the y axis.\r\n   * @default 0px\r\n   */\r\n  --ch-popover-separation-y: 0px;\r\n\r\n  --ch-popover-resize-threshold--half-negative: calc(\r\n    var(--ch-popover-resize-threshold) * -0.5\r\n  );\r\n\r\n  --ch-popover-border-inline-start-width: 0px;\r\n  --ch-popover-border-inline-end-width: 0px;\r\n  --ch-popover-border-block-start-width: 0px;\r\n  --ch-popover-border-block-end-width: 0px;\r\n\r\n  --ch-popover-resize__inline-start: calc(\r\n    var(--ch-popover-resize-threshold--half-negative) -\r\n      var(--ch-popover-border-inline-start-width) * 0.5\r\n  );\r\n\r\n  --ch-popover-resize__inline-end: calc(\r\n    var(--ch-popover-resize-threshold--half-negative) -\r\n      var(--ch-popover-border-inline-end-width) * 0.5\r\n  );\r\n\r\n  --ch-popover-resize__block-start: calc(\r\n    var(--ch-popover-resize-threshold--half-negative) -\r\n      var(--ch-popover-border-block-start-width) * 0.5\r\n  );\r\n\r\n  --ch-popover-resize__block-end: calc(\r\n    var(--ch-popover-resize-threshold--half-negative) -\r\n      var(--ch-popover-border-block-end-width) * 0.5\r\n  );\r\n\r\n  --ch-popover-x: calc(\r\n    (\r\n        var(--ch-popover-action-left) + var(--ch-popover-inline) +\r\n          var(--ch-popover-dragged-x)\r\n      ) * var(--ch-popover-rtl)\r\n  );\r\n\r\n  --ch-popover-y: calc(\r\n    var(--ch-popover-action-top) + var(--ch-popover-block) +\r\n      var(--ch-popover-dragged-y)\r\n  );\r\n\r\n  --ch-popover-dragged-x: 0px;\r\n  --ch-popover-dragged-y: 0px;\r\n  --ch-popover-rtl: 1;\r\n\r\n  display: none;\r\n\r\n  // Necessary when the popover is not placed in a new top layer. For example,\r\n  // when nesting dropdowns\r\n  position: fixed;\r\n\r\n  inline-size: var(--ch-popover-inline-size);\r\n  block-size: var(--ch-popover-block-size);\r\n  min-inline-size: var(--ch-popover-min-inline-size);\r\n  min-block-size: var(--ch-popover-min-block-size);\r\n  max-inline-size: var(\r\n    --ch-popover-forced-max-inline-size,\r\n    var(--ch-popover-max-inline-size)\r\n  );\r\n  max-block-size: var(\r\n    --ch-popover-forced-max-block-size,\r\n    var(--ch-popover-max-block-size)\r\n  );\r\n\r\n  // Reset browser defaults\r\n  margin: 0;\r\n  padding: 0;\r\n  background-color: unset;\r\n  border: unset;\r\n  color: unset;\r\n  overflow: visible;\r\n\r\n  top: 0;\r\n  inset-inline-start: 0;\r\n\r\n  // Alignment and Drag\r\n  translate: var(--ch-popover-x) var(--ch-popover-y);\r\n}\r\n\r\n:host([overflow-behavior=\"add-scroll\"]) {\r\n  overflow: auto;\r\n\r\n  // Alignment and Drag\r\n  translate: max(0px, var(--ch-popover-x)) max(0px, var(--ch-popover-y));\r\n}\r\n\r\n:host([show]) {\r\n  display: grid; // Necessary to support gap property\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//             Hidden\r\n// - - - - - - - - - - - - - - - -\r\n\r\n// // content-visibility: hidden is faster for rendering the content back, as\r\n// // it preserves the rendering state of the content (display: none does not)\r\n// @supports (content-visibility: hidden) {\r\n//   :host([hidden]) {\r\n//     content-visibility: hidden;\r\n//   }\r\n// }\r\n\r\n// @supports not (content-visibility: hidden) {\r\n//   :host([hidden]) {\r\n//     visibility: hidden;\r\n//   }\r\n// }\r\n\r\n// Prevents initial flickering\r\n:host(.gx-popover-prevent-flickering) {\r\n  // Necessary to override visibility: inherit from Stencil's hydration\r\n  visibility: hidden !important;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//              Drag\r\n// - - - - - - - - - - - - - - - -\r\n:host(.gx-popover-header-drag) {\r\n  display: grid;\r\n  grid-template-rows: max-content 1fr;\r\n}\r\n\r\n:host(.gx-popover-dragging) {\r\n  cursor: move;\r\n\r\n  // Remove any type of pointer when dragging, to make \"cursor: move\" effective\r\n  ::slotted(*) {\r\n    pointer-events: none;\r\n    user-select: none;\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//            Resizable\r\n// - - - - - - - - - - - - - - - -\r\n:host(.ch-popover-resizing) {\r\n  pointer-events: none;\r\n  user-select: none;\r\n}\r\n\r\n.edge {\r\n  &__block-start,\r\n  &__block-end {\r\n    position: fixed;\r\n    // This calc improves edge positioning when the border-width is much larger\r\n    // than the threshold\r\n    inset-inline: min(\r\n        0px,\r\n        calc(\r\n          (\r\n              var(--ch-popover-resize-threshold) -\r\n                var(--ch-popover-border-inline-start-width)\r\n            ) / 2\r\n        )\r\n      )\r\n      min(\r\n        0px,\r\n        calc(\r\n          (\r\n              var(--ch-popover-resize-threshold) -\r\n                var(--ch-popover-border-inline-end-width)\r\n            ) / 2\r\n        )\r\n      );\r\n    block-size: var(--ch-popover-resize-threshold);\r\n    cursor: ns-resize;\r\n  }\r\n\r\n  &__inline-start,\r\n  &__inline-end {\r\n    position: fixed;\r\n    // This calc improves edge positioning when the border-width is much larger\r\n    // than the threshold\r\n    inset-block: min(\r\n        0px,\r\n        calc(\r\n          (\r\n              var(--ch-popover-resize-threshold) -\r\n                var(--ch-popover-border-block-start-width)\r\n            ) / 2\r\n        )\r\n      )\r\n      min(\r\n        0px,\r\n        calc(\r\n          (\r\n              var(--ch-popover-resize-threshold) -\r\n                var(--ch-popover-border-block-end-width)\r\n            ) / 2\r\n        )\r\n      );\r\n    inline-size: var(--ch-popover-resize-threshold);\r\n    cursor: ew-resize;\r\n  }\r\n\r\n  &__block-start {\r\n    inset-block-start: var(--ch-popover-resize__block-start);\r\n  }\r\n\r\n  &__block-end {\r\n    inset-block-end: var(--ch-popover-resize__block-end);\r\n  }\r\n\r\n  &__inline-start {\r\n    inset-inline-start: var(--ch-popover-resize__inline-start);\r\n  }\r\n\r\n  &__inline-end {\r\n    inset-inline-end: var(--ch-popover-resize__inline-end);\r\n  }\r\n}\r\n\r\n.corner {\r\n  &__block-start-inline-start,\r\n  &__block-end-inline-end {\r\n    position: fixed;\r\n    block-size: var(--ch-popover-resize-threshold);\r\n    inline-size: var(--ch-popover-resize-threshold);\r\n    cursor: nwse-resize;\r\n  }\r\n\r\n  &__block-start-inline-end,\r\n  &__block-end-inline-start {\r\n    position: fixed;\r\n    block-size: var(--ch-popover-resize-threshold);\r\n    inline-size: var(--ch-popover-resize-threshold);\r\n    cursor: nesw-resize;\r\n  }\r\n\r\n  &__block-start-inline-start {\r\n    inset-block-start: var(--ch-popover-resize__block-start);\r\n    inset-inline-start: var(--ch-popover-resize__inline-start);\r\n  }\r\n\r\n  &__block-end-inline-end {\r\n    inset-block-end: var(--ch-popover-resize__block-end);\r\n    inset-inline-end: var(--ch-popover-resize__inline-end);\r\n  }\r\n\r\n  &__block-start-inline-end {\r\n    inset-block-start: var(--ch-popover-resize__block-start);\r\n    inset-inline-end: var(--ch-popover-resize__inline-end);\r\n  }\r\n\r\n  &__block-end-inline-start {\r\n    inset-block-end: var(--ch-popover-resize__block-end);\r\n    inset-inline-start: var(--ch-popover-resize__inline-start);\r\n  }\r\n}\r\n\r\n// \"Rotate\" resize cursors for the corners\r\n:host(.ch-popover-rtl) {\r\n  .corner__block-start-inline-start,\r\n  .corner__block-end-inline-end {\r\n    cursor: nesw-resize;\r\n  }\r\n}\r\n\r\n:host(.ch-popover-rtl) {\r\n  .corner__block-start-inline-end,\r\n  .corner__block-end-inline-start {\r\n    cursor: nwse-resize;\r\n  }\r\n}\r\n\r\n// Useful for observing changes in border size\r\n.resize-layer {\r\n  position: fixed;\r\n  inset: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//         Block alignment\r\n// - - - - - - - - - - - - - - - -\r\n// :host([block-align=\"outside-start\"]) {\r\n//   --ch-popover-block: calc(-100% + var(--ch-popover-separation-y) * -1);\r\n// }\r\n\r\n// :host([block-align=\"inside-start\"]) {\r\n//   --ch-popover-block: var(--ch-popover-separation-y);\r\n// }\r\n\r\n// :host([block-align=\"center\"]) {\r\n//   --ch-popover-block: calc(\r\n//     var(--ch-popover-action-height) / 2 - 50% + var(--ch-popover-separation-y)\r\n//   );\r\n// }\r\n\r\n// :host([block-align=\"inside-end\"]) {\r\n//   --ch-popover-block: calc(\r\n//     var(--ch-popover-action-height) - (100% + var(--ch-popover-separation-y))\r\n//   );\r\n// }\r\n\r\n// :host([block-align=\"outside-end\"]) {\r\n//   --ch-popover-block: calc(\r\n//     var(--ch-popover-action-height) + var(--ch-popover-separation-y)\r\n//   );\r\n// }\r\n\r\n// // - - - - - - - - - - - - - - - -\r\n// //        Inline alignment\r\n// // - - - - - - - - - - - - - - - -\r\n// :host([inline-align=\"outside-start\"]) {\r\n//   --ch-popover-inline: calc(-100% + var(--ch-popover-separation-x) * -1);\r\n// }\r\n\r\n// :host([inline-align=\"inside-start\"]) {\r\n//   --ch-popover-inline: var(--ch-popover-separation-x);\r\n// }\r\n\r\n// :host([inline-align=\"center\"]) {\r\n//   --ch-popover-inline: calc(\r\n//     var(--ch-popover-action-width) / 2 - 50% + var(--ch-popover-separation-x)\r\n//   );\r\n// }\r\n\r\n// :host([inline-align=\"inside-end\"]) {\r\n//   --ch-popover-inline: calc(\r\n//     var(--ch-popover-action-width) - (100% + var(--ch-popover-separation-x))\r\n//   );\r\n// }\r\n\r\n// :host([inline-align=\"outside-end\"]) {\r\n//   --ch-popover-inline: calc(\r\n//     var(--ch-popover-action-width) + var(--ch-popover-separation-x)\r\n//   );\r\n// }\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Watch,\r\n  Prop,\r\n  State,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  ChPopoverAlign,\r\n  ChPopoverResizeElement,\r\n  ChPopoverSizeMatch,\r\n  PopoverActionElement\r\n} from \"./types\";\r\nimport { adoptCommonThemes } from \"../../common/theme\";\r\nimport { forceCSSMinMax, isRTL } from \"../../common/utils\";\r\nimport { SyncWithRAF } from \"../../common/sync-with-frames\";\r\nimport { fromPxToNumber, setResponsiveAlignment } from \"./utils\";\r\nimport { KEY_CODES, SCROLLABLE_CLASS } from \"../../common/reserved-names\";\r\n\r\nconst DRAGGING_CLASS = \"gx-popover-dragging\";\r\nconst POPOVER_PREVENT_FLICKERING_CLASS = \"gx-popover-prevent-flickering\";\r\nconst RESIZING_CLASS = \"ch-popover-resizing\";\r\n\r\n// Custom vars\r\nconst POPOVER_ALIGN_BLOCK = \"--ch-popover-block\";\r\nconst POPOVER_ALIGN_INLINE = \"--ch-popover-inline\";\r\n\r\nconst POPOVER_ACTION_WIDTH = \"--ch-popover-action-width\";\r\nconst POPOVER_ACTION_HEIGHT = \"--ch-popover-action-height\";\r\nconst POPOVER_ACTION_LEFT = \"--ch-popover-action-left\";\r\nconst POPOVER_ACTION_TOP = \"--ch-popover-action-top\";\r\n\r\nconst POPOVER_DRAGGED_X = \"--ch-popover-dragged-x\";\r\nconst POPOVER_DRAGGED_Y = \"--ch-popover-dragged-y\";\r\n\r\nconst POPOVER_BLOCK_SIZE = \"--ch-popover-block-size\";\r\nconst POPOVER_INLINE_SIZE = \"--ch-popover-inline-size\";\r\n\r\nconst POPOVER_MIN_BLOCK_SIZE = \"--ch-popover-min-block-size\";\r\nconst POPOVER_MIN_INLINE_SIZE = \"--ch-popover-min-inline-size\";\r\n\r\nconst POPOVER_FORCED_MAX_BLOCK_SIZE = \"--ch-popover-forced-max-block-size\";\r\nconst POPOVER_FORCED_MAX_INLINE_SIZE = \"--ch-popover-forced-max-inline-size\";\r\n\r\nconst POPOVER_BORDER_BLOCK_START_SIZE = \"--ch-popover-border-block-start-width\";\r\nconst POPOVER_BORDER_BLOCK_END_SIZE = \"--ch-popover-border-block-end-width\";\r\nconst POPOVER_BORDER_INLINE_START_SIZE =\r\n  \"--ch-popover-border-inline-start-width\";\r\nconst POPOVER_BORDER_INLINE_END_SIZE = \"--ch-popover-border-inline-end-width\";\r\n\r\nconst POPOVER_RTL_CLASS = \"ch-popover-rtl\";\r\nconst POPOVER_RTL = \"--ch-popover-rtl\";\r\nconst POPOVER_RTL_VALUE = \"-1\";\r\n\r\nconst PRECISION_TO_AVOID_FLOATING_POINT_ERRORS = 1.5;\r\n\r\nconst addCursorInDocument = (cursor: string) =>\r\n  (document.body.style.cursor = cursor);\r\n\r\nconst resizingCursorDictionary: {\r\n  [key in ChPopoverResizeElement]: (rtl: boolean) => void;\r\n} = {\r\n  \"block-start\": () => addCursorInDocument(\"ns-resize\"),\r\n\r\n  \"block-end\": () => addCursorInDocument(\"ns-resize\"),\r\n\r\n  \"inline-start\": () => addCursorInDocument(\"ew-resize\"),\r\n\r\n  \"inline-end\": () => addCursorInDocument(\"ew-resize\"),\r\n\r\n  \"block-start-inline-start\": rtl =>\r\n    addCursorInDocument(rtl ? \"nesw-resize\" : \"nwse-resize\"),\r\n\r\n  \"block-start-inline-end\": rtl =>\r\n    addCursorInDocument(rtl ? \"nwse-resize\" : \"nesw-resize\"),\r\n\r\n  \"block-end-inline-start\": rtl =>\r\n    addCursorInDocument(rtl ? \"nwse-resize\" : \"nesw-resize\"),\r\n\r\n  \"block-end-inline-end\": rtl =>\r\n    addCursorInDocument(rtl ? \"nesw-resize\" : \"nwse-resize\")\r\n};\r\n\r\n// Utils\r\nconst setProperty = (element: HTMLElement, property: string, value: number) =>\r\n  element.style.setProperty(property, `${value}px`);\r\n\r\nconst getProperty = (element: HTMLElement, property: string): number =>\r\n  Number((element.style.getPropertyValue(property) || \"0px\").replace(\"px\", \"\"));\r\n\r\nconst addPopoverTargetElement = (\r\n  actionElement: PopoverActionElement,\r\n  popoverElement: HTMLElement,\r\n  addAction: boolean\r\n) => {\r\n  if (actionElement && addAction) {\r\n    actionElement.popoverTargetElement = popoverElement;\r\n  }\r\n};\r\n\r\nconst removePopoverTargetElement = (actionElement: PopoverActionElement) => {\r\n  if (actionElement) {\r\n    actionElement.popoverTargetElement = undefined;\r\n  }\r\n};\r\n\r\n/**\r\n * The `ch-popover` component represents a popover container that is positioned\r\n * relative to an element, but placed on the top layer using `position: fixed`.\r\n */\r\n@Component({\r\n  tag: \"ch-popover\",\r\n  styleUrl: \"popover.scss\",\r\n  shadow: true\r\n})\r\nexport class ChPopover {\r\n  // Sync computations with frames\r\n  #borderSizeRAF: SyncWithRAF; // Don't allocate memory until needed when dragging\r\n  #dragRAF: SyncWithRAF; // Don't allocate memory until needed when dragging\r\n  #positionAdjustRAF: SyncWithRAF; // Don't allocate memory until needed\r\n  #resizeRAF: SyncWithRAF; // Don't allocate memory until needed when dragging\r\n\r\n  #adjustAlignment = false;\r\n\r\n  // Watchers\r\n  #checkPositionWatcher = false;\r\n  #checkBorderSizeWatcher = false;\r\n  #borderSizeObserver: ResizeObserver;\r\n  #resizeObserver: ResizeObserver;\r\n  #rtlWatcher: MutationObserver;\r\n\r\n  // Drag\r\n  #draggedDistanceX: number = 0;\r\n  #draggedDistanceY: number = 0;\r\n  #dragging = false;\r\n  #initialDragEvent: MouseEvent;\r\n  #lastDragEvent: MouseEvent;\r\n  #isRTLDirection: boolean;\r\n\r\n  // Resize\r\n  #currentEdge: ChPopoverResizeElement;\r\n  #draggedDistanceXForResize: number = 0;\r\n  #draggedDistanceYForResize: number = 0;\r\n  #maxBlockSize: number = 0;\r\n  #maxInlineSize: number = 0;\r\n  #minBlockSize: number = 0;\r\n  #minInlineSize: number = 0;\r\n  #resizeWasMade = false;\r\n\r\n  #resizeByDirectionDictionary = {\r\n    block: (popoverRect: DOMRect, direction: \"start\" | \"end\") => {\r\n      let currentDraggedDistanceY =\r\n        this.#lastDragEvent.clientY - this.#initialDragEvent.clientY;\r\n\r\n      // Start direction inverts the increment\r\n      if (direction === \"start\") {\r\n        currentDraggedDistanceY = -currentDraggedDistanceY;\r\n      }\r\n\r\n      const newBlockSize = popoverRect.height + currentDraggedDistanceY;\r\n      const newRestrictedBlockSize = forceCSSMinMax(\r\n        newBlockSize,\r\n        this.#minBlockSize,\r\n        this.#maxBlockSize\r\n      );\r\n\r\n      // Do not apply resizes or translations if the control is at the minimum\r\n      // or maximum size\r\n      if (newRestrictedBlockSize === popoverRect.height) {\r\n        return;\r\n      }\r\n\r\n      // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n      // By resizing the start edge the control is translated to improve the UX\r\n      if (direction === \"start\") {\r\n        this.#draggedDistanceYForResize -= currentDraggedDistanceY;\r\n\r\n        setProperty(\r\n          this.el,\r\n          POPOVER_DRAGGED_Y,\r\n          this.#draggedDistanceYForResize\r\n        );\r\n      }\r\n\r\n      setProperty(this.el, POPOVER_BLOCK_SIZE, newRestrictedBlockSize);\r\n    },\r\n\r\n    inline: (popoverRect: DOMRect, direction: \"start\" | \"end\") => {\r\n      let currentDraggedDistanceX =\r\n        this.#lastDragEvent.clientX - this.#initialDragEvent.clientX;\r\n\r\n      if (this.#isRTLDirection) {\r\n        currentDraggedDistanceX = -currentDraggedDistanceX;\r\n      }\r\n\r\n      // Start direction inverts the increment\r\n      if (direction === \"start\") {\r\n        currentDraggedDistanceX = -currentDraggedDistanceX;\r\n      }\r\n\r\n      const newInlineSize = popoverRect.width + currentDraggedDistanceX;\r\n      const newRestrictedInlineSize = forceCSSMinMax(\r\n        newInlineSize,\r\n        this.#minInlineSize,\r\n        this.#maxInlineSize\r\n      );\r\n\r\n      // Do not apply resizes or translations if the control is at the minimum\r\n      // or maximum size\r\n      if (newRestrictedInlineSize === popoverRect.width) {\r\n        return;\r\n      }\r\n\r\n      // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n      // By resizing the start edge the control is translated to improve the UX\r\n      if (direction === \"start\") {\r\n        this.#draggedDistanceXForResize -= currentDraggedDistanceX;\r\n\r\n        setProperty(\r\n          this.el,\r\n          POPOVER_DRAGGED_X,\r\n          this.#draggedDistanceXForResize\r\n        );\r\n      }\r\n\r\n      setProperty(this.el, POPOVER_INLINE_SIZE, newRestrictedInlineSize);\r\n    }\r\n  } as const;\r\n\r\n  #resizeEdgesAndCornersDictionary: {\r\n    [key in ChPopoverResizeElement]: (popoverRect: DOMRect) => void;\r\n  } = {\r\n    \"block-start\": popoverRect =>\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"start\"),\r\n\r\n    \"block-end\": popoverRect =>\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"end\"),\r\n\r\n    \"inline-start\": popoverRect =>\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"start\"),\r\n\r\n    \"inline-end\": popoverRect =>\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"end\"),\r\n\r\n    \"block-start-inline-start\": popoverRect => {\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"start\");\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"start\");\r\n    },\r\n\r\n    \"block-start-inline-end\": popoverRect => {\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"start\");\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"end\");\r\n    },\r\n\r\n    \"block-end-inline-start\": popoverRect => {\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"end\");\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"start\");\r\n    },\r\n\r\n    \"block-end-inline-end\": popoverRect => {\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"end\");\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"end\");\r\n    }\r\n  };\r\n\r\n  // Refs\r\n  #resizeLayer: HTMLDivElement;\r\n\r\n  @Element() el: HTMLChPopoverElement;\r\n\r\n  @State() resizing = false;\r\n\r\n  /**\r\n   * `true` if the `actionElement` binds the ch-popover using an external ID.\r\n   * If so, the `popoverTargetElement` property won't be configured in the\r\n   * action element.\r\n   */\r\n  @Prop() readonly actionById: boolean = false;\r\n\r\n  /**\r\n   * Specifies a reference of the action that controls the popover control.\r\n   */\r\n  @Prop() readonly actionElement?: PopoverActionElement;\r\n  @Watch(\"actionElement\")\r\n  handleActionChange(\r\n    newActionElement: PopoverActionElement,\r\n    oldActionElement: PopoverActionElement\r\n  ) {\r\n    // Reset dragged distance\r\n    this.#draggedDistanceX = 0;\r\n    this.#draggedDistanceY = 0;\r\n\r\n    // Remove previous action element\r\n    removePopoverTargetElement(oldActionElement);\r\n    addPopoverTargetElement(newActionElement, this.el, !this.actionById);\r\n\r\n    // Schedule update for watchers\r\n    this.#checkPositionWatcher = true;\r\n  }\r\n\r\n  /**\r\n   * Specifies the drag behavior of the popover.\r\n   * If `allowDrag === \"header\"`, a slot with the `\"header\"` name will be\r\n   * available to place the header content.\r\n   */\r\n  @Prop() readonly allowDrag: \"box\" | \"header\" | \"no\" = \"no\";\r\n\r\n  /**\r\n   * Specifies the block alignment of the window.\r\n   */\r\n  @Prop() readonly blockAlign: ChPopoverAlign = \"center\";\r\n  @Watch(\"blockAlign\")\r\n  handleBlockChange() {\r\n    this.#adjustAlignment = true;\r\n  }\r\n\r\n  /**\r\n   * Specifies how the popover adapts its block size.\r\n   *  - \"content\": The block size of the control will be determined by its\r\n   *    content block size.\r\n   *  - \"action-element\": The block size of the control will match the block\r\n   *    size of the `actionElement`.\r\n   *  - \"action-element-as-minimum\": The minimum block size of the control\r\n   *    will match the block size of the `actionElement`.\r\n   *\r\n   * If the control is resized at runtime, only the \"action-element-as-minimum\"\r\n   * value will still work.\r\n   */\r\n  @Prop() readonly blockSizeMatch: ChPopoverSizeMatch = \"content\";\r\n  @Watch(\"blockSizeMatch\")\r\n  blockSizeWatchChange(newValue: ChPopoverSizeMatch) {\r\n    if (this.#resizeWasMade) {\r\n      return;\r\n    }\r\n\r\n    // Remove the size constrains\r\n    if (newValue === \"content\") {\r\n      this.el.style.removeProperty(POPOVER_BLOCK_SIZE);\r\n      this.el.style.removeProperty(POPOVER_MIN_BLOCK_SIZE);\r\n    } else if (newValue === \"action-element\") {\r\n      this.el.style.removeProperty(POPOVER_MIN_BLOCK_SIZE);\r\n    } else {\r\n      this.el.style.removeProperty(POPOVER_BLOCK_SIZE);\r\n    }\r\n\r\n    // Queue a position adjustment\r\n    this.#adjustAlignment = true;\r\n  }\r\n\r\n  /**\r\n   * This property only applies for `\"manual\"` mode. In native popovers, when\r\n   * using `\"manual\"` mode the popover doesn't close when clicking outside the\r\n   * control. This property allows to close the popover when clicking outside\r\n   * in `\"manual\"` mode.\r\n   * With this, the popover will close if the click is triggered on any other\r\n   * element than the popover and the `actionElement`. It will also close if\r\n   * the \"Escape\" key is pressed.\r\n   */\r\n  @Prop() readonly closeOnClickOutside: boolean = false;\r\n\r\n  /**\r\n   * `true` if the control is not stacked with another top layer.\r\n   */\r\n  @Prop() readonly firstLayer: boolean = true;\r\n\r\n  /**\r\n   * Specifies the inline alignment of the window.\r\n   */\r\n  @Prop() readonly inlineAlign: ChPopoverAlign = \"center\";\r\n  @Watch(\"inlineAlign\")\r\n  handleInlineChange() {\r\n    this.#adjustAlignment = true;\r\n  }\r\n\r\n  /**\r\n   * Specifies how the popover adapts its inline size.\r\n   *  - \"content\": The inline size of the control will be determined by its\r\n   *    content inline size.\r\n   *  - \"action-element\": The inline size of the control will match the inline\r\n   *    size of the `actionElement`.\r\n   *  - \"action-element-as-minimum\": The minimum inline size of the control\r\n   *    will match the inline size of the `actionElement`.\r\n   *\r\n   * If the control is resized at runtime, only the \"action-element-as-minimum\"\r\n   * value will still work.\r\n   */\r\n  @Prop() readonly inlineSizeMatch: ChPopoverSizeMatch = \"content\";\r\n  @Watch(\"inlineSizeMatch\")\r\n  inlineSizeWatchChange(newValue: ChPopoverSizeMatch) {\r\n    if (this.#resizeWasMade) {\r\n      return;\r\n    }\r\n\r\n    // Remove the size constrains\r\n    if (newValue === \"content\") {\r\n      this.el.style.removeProperty(POPOVER_INLINE_SIZE);\r\n      this.el.style.removeProperty(POPOVER_MIN_INLINE_SIZE);\r\n    } else if (newValue === \"action-element\") {\r\n      this.el.style.removeProperty(POPOVER_MIN_INLINE_SIZE);\r\n    } else {\r\n      this.el.style.removeProperty(POPOVER_INLINE_SIZE);\r\n    }\r\n\r\n    // Queue a position adjustment\r\n    this.#adjustAlignment = true;\r\n  }\r\n\r\n  /**\r\n   * Popovers that have the `\"auto\"` state can be \"light dismissed\" by\r\n   * selecting outside the popover area, and generally only allow one popover\r\n   * to be displayed on-screen at a time. By contrast, `\"manual\"` popovers must\r\n   * always be explicitly hidden, but allow for use cases such as nested\r\n   * popovers in menus.\r\n   */\r\n  @Prop({ attribute: \"popover\" }) readonly mode: \"auto\" | \"manual\" = \"auto\";\r\n\r\n  /**\r\n   * Specifies how the popover behaves when the content overflows the window\r\n   * size.\r\n   *   - \"overflow\": The control won't implement any behavior if the content overflows.\r\n   *   - \"add-scroll\": The control will place a scroll if the content overflows.\r\n   */\r\n  @Prop({ reflect: true }) readonly overflowBehavior:\r\n    | \"overflow\"\r\n    | \"add-scroll\" = \"overflow\";\r\n\r\n  /**\r\n   * Specifies an alternate position to try when the control overflows the\r\n   * window.\r\n   */\r\n  @Prop() readonly positionTry: \"flip-block\" | \"flip-inline\" | \"none\" = \"none\";\r\n\r\n  /**\r\n   * Specifies whether the control can be resized. If `true` the control can be\r\n   * resized at runtime by dragging the edges or corners.\r\n   */\r\n  @Prop() readonly resizable: boolean = false;\r\n  @Watch(\"resizable\")\r\n  resizableChanged() {\r\n    // Schedule update for border size watcher\r\n    this.#checkBorderSizeWatcher = true;\r\n  }\r\n\r\n  /**\r\n   * Specifies whether the popover is hidden or visible.\r\n   */\r\n  // TODO: Remove reflect in a future PR (also add a unit test to verify that the\r\n  // property is not reflected and be careful with the selector `:host([show]) {...}` ).\r\n  @Prop({ mutable: true, reflect: true }) show: boolean = false;\r\n  @Watch(\"show\")\r\n  showChanged(newShowValue: boolean) {\r\n    // Schedule update for watchers\r\n    this.#checkBorderSizeWatcher = true;\r\n    this.#checkPositionWatcher = true;\r\n\r\n    // Update the popover visualization\r\n    if (newShowValue) {\r\n      this.#showPopover();\r\n    } else {\r\n      if (this.firstLayer) {\r\n        this.#avoidFlickeringInTheNextRender(true);\r\n      }\r\n      this.el.hidePopover();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emitted when the popover is opened.\r\n   */\r\n  @Event() popoverOpened: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the popover is closed.\r\n   */\r\n  @Event() popoverClosed: EventEmitter;\r\n\r\n  #showPopover = () => {\r\n    this.el.showPopover();\r\n    this.#addClickOutsideWatcherIfNecessary();\r\n  };\r\n\r\n  #handlePopoverCloseOnClickOutside = (event: MouseEvent) => {\r\n    const composedPath = event.composedPath();\r\n\r\n    if (\r\n      !composedPath.includes(this.el) &&\r\n      // If the click is triggered on the actionElement, the actionElement must\r\n      // determine if the popover should be closed\r\n      !composedPath.includes(this.actionElement)\r\n    ) {\r\n      this.#removeClickOutsideWatcher();\r\n\r\n      this.show = false;\r\n      this.popoverClosed.emit();\r\n    }\r\n  };\r\n\r\n  #handlePopoverCloseOnEscapeKey = (event: KeyboardEvent) => {\r\n    if (event.code === KEY_CODES.ESCAPE) {\r\n      this.#removeClickOutsideWatcher();\r\n\r\n      this.show = false;\r\n      this.popoverClosed.emit();\r\n    }\r\n  };\r\n\r\n  #addClickOutsideWatcherIfNecessary = () => {\r\n    if (this.mode === \"manual\" && this.closeOnClickOutside) {\r\n      document.addEventListener(\r\n        \"click\",\r\n        this.#handlePopoverCloseOnClickOutside,\r\n        // \"capture: true\" must be added for the ch-combo-box use case. When\r\n        // the click is triggered on the combo-box, the control prevents the\r\n        // propagation of the event click\r\n        { capture: true, passive: true }\r\n      );\r\n\r\n      document.addEventListener(\r\n        \"keydown\",\r\n        this.#handlePopoverCloseOnEscapeKey,\r\n        { capture: true, passive: true }\r\n      );\r\n    }\r\n  };\r\n\r\n  #removeClickOutsideWatcher = () => {\r\n    document.removeEventListener(\r\n      \"click\",\r\n      this.#handlePopoverCloseOnClickOutside,\r\n      { capture: true }\r\n    );\r\n\r\n    document.removeEventListener(\r\n      \"keydown\",\r\n      this.#handlePopoverCloseOnEscapeKey,\r\n      { capture: true }\r\n    );\r\n  };\r\n\r\n  #addDraggingClass = () => {\r\n    if (!this.#dragging) {\r\n      this.el.classList.add(DRAGGING_CLASS);\r\n      this.#dragging = true;\r\n    }\r\n  };\r\n\r\n  #removeDraggingClass = () => {\r\n    this.el.classList.remove(DRAGGING_CLASS);\r\n    this.#dragging = false;\r\n  };\r\n\r\n  #avoidFlickeringInTheNextRender = (addClass: boolean) => {\r\n    if (addClass) {\r\n      // Class to prevent flickering in the first position adjustment\r\n      this.el.classList.add(POPOVER_PREVENT_FLICKERING_CLASS);\r\n    } else {\r\n      this.el.classList.remove(POPOVER_PREVENT_FLICKERING_CLASS);\r\n    }\r\n  };\r\n\r\n  #setPositionWatcher = () => {\r\n    if (!this.actionElement || !this.show) {\r\n      this.#removePositionWatcher();\r\n      return;\r\n    }\r\n\r\n    // If it was observing the previous container, disconnect the observer\r\n    if (this.#resizeObserver) {\r\n      this.#resizeObserver.disconnect();\r\n    }\r\n\r\n    this.#positionAdjustRAF ??= new SyncWithRAF();\r\n    this.#resizeObserver ??= new ResizeObserver(\r\n      (entries: ResizeObserverEntry[]) => {\r\n        const popoverWasResized = entries.find(\r\n          entry => entry.target === this.el\r\n        );\r\n\r\n        // If the popover size is changed, update the alignment in the same\r\n        // frame to avoid any flickering. This optimization avoids an extra\r\n        // setResponsiveAlignment fire and improve the UX when using the\r\n        // combo-box and expanding/collapsing the groups\r\n        if (popoverWasResized) {\r\n          this.#updatePosition();\r\n        } else {\r\n          this.#updatePositionRAF();\r\n        }\r\n      }\r\n    );\r\n\r\n    this.#resizeObserver.observe(this.actionElement);\r\n    this.#resizeObserver.observe(document.body);\r\n    this.#resizeObserver.observe(this.el);\r\n\r\n    // Faster first render. Don't wait until the next animation frame\r\n    this.#updatePosition();\r\n\r\n    // The popover's position is now set, so we no longer have to hide it\r\n    if (this.firstLayer) {\r\n      requestAnimationFrame(() => {\r\n        this.#avoidFlickeringInTheNextRender(false);\r\n      });\r\n    }\r\n\r\n    // Listeners\r\n    document.addEventListener(\"scroll\", this.#updatePositionRAF, {\r\n      capture: true,\r\n      passive: true\r\n    });\r\n  };\r\n\r\n  #updatePositionRAF = () => {\r\n    this.#positionAdjustRAF.perform(this.#updatePosition);\r\n  };\r\n\r\n  #updatePosition = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const documentRect = document.documentElement.getBoundingClientRect();\r\n    const actionRect = this.actionElement.getBoundingClientRect();\r\n    const popoverScrollSizes = {\r\n      width: this.el.scrollWidth,\r\n      height: this.el.scrollHeight\r\n    };\r\n    const computedStyle = getComputedStyle(this.el);\r\n\r\n    const actionInlineStart = this.#getActionInlineStartPosition(\r\n      documentRect,\r\n      actionRect\r\n    );\r\n\r\n    this.#setResponsiveAlignment(\r\n      documentRect,\r\n      actionRect,\r\n      actionInlineStart,\r\n      popoverScrollSizes,\r\n      computedStyle\r\n    );\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    setProperty(this.el, POPOVER_ACTION_WIDTH, actionRect.width);\r\n    setProperty(this.el, POPOVER_ACTION_HEIGHT, actionRect.height);\r\n    setProperty(this.el, POPOVER_ACTION_LEFT, actionInlineStart);\r\n    setProperty(this.el, POPOVER_ACTION_TOP, actionRect.top);\r\n  };\r\n\r\n  #getActionInlineStartPosition = (\r\n    documentRect: DOMRect,\r\n    actionRect: DOMRect\r\n  ) =>\r\n    this.#isRTLDirection\r\n      ? documentRect.width - (actionRect.left + actionRect.width)\r\n      : actionRect.left;\r\n\r\n  #setResponsiveAlignment = (\r\n    documentRect: DOMRect,\r\n    actionRect: DOMRect,\r\n    actionInlineStart: number,\r\n    popoverScrollSizes: { width: number; height: number },\r\n    computedStyle: CSSStyleDeclaration\r\n  ) => {\r\n    const popoverWidth = this.#getPopoverInlineSizeAndFixItIfNecessary(\r\n      actionRect,\r\n      popoverScrollSizes\r\n    );\r\n    const popoverHeight = this.#getPopoverBlockSizeAndFixItIfNecessary(\r\n      actionRect,\r\n      popoverScrollSizes\r\n    );\r\n\r\n    const alignment = setResponsiveAlignment(\r\n      documentRect,\r\n      actionRect,\r\n      actionInlineStart,\r\n      popoverWidth,\r\n      popoverHeight,\r\n      computedStyle,\r\n      this.inlineAlign,\r\n      this.blockAlign,\r\n      this.positionTry\r\n    );\r\n\r\n    const inlineOverflow = alignment[0].alignmentOverflow;\r\n    const blockOverflow = alignment[1].alignmentOverflow;\r\n\r\n    this.#setOverflowBehavior(\r\n      popoverWidth,\r\n      popoverHeight,\r\n      inlineOverflow,\r\n      blockOverflow\r\n    );\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    setProperty(this.el, POPOVER_ALIGN_INLINE, alignment[0].alignmentPosition);\r\n    setProperty(this.el, POPOVER_ALIGN_BLOCK, alignment[1].alignmentPosition);\r\n  };\r\n\r\n  #setOverflowBehavior = (\r\n    popoverWidth: number,\r\n    popoverHeight: number,\r\n    inlineOverflow: number,\r\n    blockOverflow: number\r\n  ) => {\r\n    if (this.overflowBehavior !== \"add-scroll\") {\r\n      return;\r\n    }\r\n\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const currentMaxInlineSize = getProperty(\r\n      this.el,\r\n      POPOVER_FORCED_MAX_INLINE_SIZE\r\n    );\r\n\r\n    const currentMaxBlockSize = getProperty(\r\n      this.el,\r\n      POPOVER_FORCED_MAX_BLOCK_SIZE\r\n    );\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n\r\n    // Inline size\r\n    if (inlineOverflow < 0) {\r\n      const newMaxInlineSize = popoverWidth + inlineOverflow;\r\n      setProperty(this.el, POPOVER_FORCED_MAX_INLINE_SIZE, newMaxInlineSize);\r\n    }\r\n    // Check if the forced inline size is no longer needed\r\n    else if (\r\n      currentMaxInlineSize &&\r\n      popoverWidth + PRECISION_TO_AVOID_FLOATING_POINT_ERRORS <\r\n        currentMaxInlineSize + inlineOverflow\r\n    ) {\r\n      this.el.style.removeProperty(POPOVER_FORCED_MAX_INLINE_SIZE);\r\n    }\r\n\r\n    // Block size\r\n    if (blockOverflow < 0) {\r\n      const newMaxBlockSize = popoverHeight + blockOverflow;\r\n      setProperty(this.el, POPOVER_FORCED_MAX_BLOCK_SIZE, newMaxBlockSize);\r\n    }\r\n    // Check if the forced block size is no longer needed\r\n    else if (\r\n      currentMaxBlockSize &&\r\n      popoverHeight + PRECISION_TO_AVOID_FLOATING_POINT_ERRORS <\r\n        currentMaxBlockSize + blockOverflow\r\n    ) {\r\n      this.el.style.removeProperty(POPOVER_FORCED_MAX_BLOCK_SIZE);\r\n    }\r\n  };\r\n\r\n  #getPopoverInlineSizeAndFixItIfNecessary = (\r\n    actionRect: DOMRect,\r\n    popoverRect: { width: number; height: number }\r\n  ) => {\r\n    if (this.inlineSizeMatch === \"action-element-as-minimum\") {\r\n      setProperty(this.el, POPOVER_MIN_INLINE_SIZE, actionRect.width);\r\n      return actionRect.width;\r\n    }\r\n\r\n    // Size is determined by the content\r\n    if (this.#resizeWasMade || this.inlineSizeMatch === \"content\") {\r\n      return popoverRect.width;\r\n    }\r\n\r\n    // Size is the same as the `actionElement`\r\n    setProperty(this.el, POPOVER_INLINE_SIZE, actionRect.width);\r\n    return actionRect.width;\r\n  };\r\n\r\n  #getPopoverBlockSizeAndFixItIfNecessary = (\r\n    actionRect: DOMRect,\r\n    popoverRect: { width: number; height: number }\r\n  ) => {\r\n    if (this.blockSizeMatch === \"action-element-as-minimum\") {\r\n      setProperty(this.el, POPOVER_MIN_BLOCK_SIZE, actionRect.height);\r\n      return actionRect.height;\r\n    }\r\n\r\n    // Size is determined by the content\r\n    if (this.#resizeWasMade || this.blockSizeMatch === \"content\") {\r\n      return popoverRect.height;\r\n    }\r\n\r\n    // Size is the same as the `actionElement`\r\n    setProperty(this.el, POPOVER_BLOCK_SIZE, actionRect.height);\r\n    return actionRect.height;\r\n  };\r\n\r\n  #removePositionWatcher = () => {\r\n    if (this.#resizeObserver) {\r\n      this.#resizeObserver.disconnect();\r\n      this.#resizeObserver = null; // Free the memory\r\n    }\r\n\r\n    // Remove listeners\r\n    document.removeEventListener(\"scroll\", this.#updatePositionRAF, {\r\n      capture: true\r\n    });\r\n  };\r\n\r\n  #handlePopoverToggle = (event: ToggleEvent) => {\r\n    const willBeOpen = event.newState === \"open\";\r\n    this.show = willBeOpen;\r\n\r\n    // Emit events only when the action is committed by the user\r\n    if (willBeOpen) {\r\n      this.popoverOpened.emit();\r\n    } else {\r\n      this.popoverClosed.emit();\r\n    }\r\n  };\r\n\r\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n  //                           Drag implementation\r\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n  #handleMouseDown = (event: MouseEvent) => {\r\n    // We should not add preventDefault in this instance, because we would\r\n    // prevent some normal actions like clicking a button or focusing an input\r\n\r\n    this.#dragRAF ||= new SyncWithRAF();\r\n    this.#initialDragEvent = event;\r\n\r\n    // Add listeners\r\n    document.addEventListener(\"mousemove\", this.#trackElementDragRAF, {\r\n      capture: true\r\n    });\r\n\r\n    document.addEventListener(\"mouseup\", this.#handleDragEnd, {\r\n      capture: true,\r\n      passive: true\r\n    });\r\n  };\r\n\r\n  #trackElementDragRAF = (event: MouseEvent) => {\r\n    this.#dragRAF.perform(this.#trackElementDrag, () => {\r\n      // Improve drag UX by not selecting any button or clicking interactive\r\n      // elements\r\n      event.preventDefault();\r\n\r\n      // We remove the pointer-events and user-select properties after the first\r\n      // \"mousemove\", otherwise double clicking to select text would not work\r\n      this.#addDraggingClass();\r\n\r\n      this.#lastDragEvent = event;\r\n    });\r\n  };\r\n\r\n  #trackElementDrag = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const currentDraggedDistanceX =\r\n      this.#lastDragEvent.clientX - this.#initialDragEvent.clientX;\r\n    const currentDraggedDistanceY =\r\n      this.#lastDragEvent.clientY - this.#initialDragEvent.clientY;\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    // Update total dragged distance in X\r\n    if (currentDraggedDistanceX !== 0) {\r\n      this.#draggedDistanceX += this.#isRTLDirection // Set dragged distance depending on RTL value\r\n        ? -currentDraggedDistanceX\r\n        : currentDraggedDistanceX;\r\n      setProperty(this.el, POPOVER_DRAGGED_X, this.#draggedDistanceX);\r\n    }\r\n\r\n    // Update total dragged distance in Y\r\n    if (currentDraggedDistanceY !== 0) {\r\n      this.#draggedDistanceY += currentDraggedDistanceY;\r\n      setProperty(this.el, POPOVER_DRAGGED_Y, this.#draggedDistanceY);\r\n    }\r\n\r\n    // Update last point\r\n    this.#initialDragEvent = this.#lastDragEvent;\r\n  };\r\n\r\n  #handleDragEnd = () => {\r\n    // Cancel RAF to prevent access to undefined references\r\n    if (this.#dragRAF) {\r\n      this.#dragRAF.cancel();\r\n    }\r\n\r\n    // Remove listeners\r\n    document.removeEventListener(\"mousemove\", this.#trackElementDragRAF, {\r\n      capture: true\r\n    });\r\n\r\n    document.removeEventListener(\"mouseup\", this.#handleDragEnd, {\r\n      capture: true\r\n    });\r\n\r\n    this.#removeDraggingClass();\r\n\r\n    // Free the memory\r\n    this.#dragRAF = null;\r\n    this.#initialDragEvent = null;\r\n    this.#lastDragEvent = null;\r\n  };\r\n\r\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n  //                          Resize implementation\r\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n  #handleEdgeResize = (edge: ChPopoverResizeElement) => (event: MouseEvent) => {\r\n    this.resizing = true;\r\n    this.#resizeRAF ||= new SyncWithRAF();\r\n    this.#currentEdge = edge;\r\n    this.#initialDragEvent = event;\r\n\r\n    // Specify the cursor for the resize operation. Useful to avoid showing\r\n    // incorrect cursors during resizing\r\n    resizingCursorDictionary[this.#currentEdge](this.#isRTLDirection);\r\n\r\n    // Initialize drag variables to improve block-start and inline-start\r\n    // resizing. Otherwise, the popover will always remain in the same X and Y\r\n    // position, even when the block-start or inline-start edges are resized\r\n    this.#draggedDistanceXForResize = this.#draggedDistanceX;\r\n    this.#draggedDistanceYForResize = this.#draggedDistanceY;\r\n\r\n    // Get minimum and maximum sizes on first resize operation\r\n    const computedStyle = getComputedStyle(this.el);\r\n    this.#maxBlockSize = fromPxToNumber(computedStyle.maxBlockSize);\r\n    this.#maxInlineSize = fromPxToNumber(computedStyle.maxInlineSize);\r\n    this.#minBlockSize = fromPxToNumber(computedStyle.minBlockSize);\r\n    this.#minInlineSize = fromPxToNumber(computedStyle.minInlineSize);\r\n\r\n    // Avoid repositioning the popover\r\n    this.#removePositionWatcher();\r\n\r\n    // Avoid watching border changes during the resize\r\n    this.#removeBorderSizeWatcher();\r\n\r\n    // Avoid closing the popover during the resize\r\n    this.#removeClickOutsideWatcher();\r\n\r\n    // Add listeners\r\n    document.addEventListener(\"mousemove\", this.#trackElementResizeRAF, {\r\n      capture: true\r\n    });\r\n\r\n    document.addEventListener(\"mouseup\", this.#handleResizeEnd, {\r\n      capture: true,\r\n      passive: true\r\n    });\r\n  };\r\n\r\n  #trackElementResizeRAF = (event: MouseEvent) => {\r\n    this.#resizeRAF.perform(this.#trackElementResize, () => {\r\n      // Improve drag UX by not selecting any button or clicking interactive\r\n      // elements\r\n      event.preventDefault();\r\n\r\n      // We remove the pointer-events and user-select properties after the first\r\n      // \"mousemove\", otherwise double clicking to select text would not work\r\n      this.#addDraggingClass();\r\n\r\n      this.#lastDragEvent = event;\r\n    });\r\n  };\r\n\r\n  #trackElementResize = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const popoverRect = this.el.getBoundingClientRect();\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    this.#resizeEdgesAndCornersDictionary[this.#currentEdge](popoverRect);\r\n    this.#resizeWasMade = true;\r\n\r\n    // Update last point\r\n    this.#initialDragEvent = this.#lastDragEvent;\r\n  };\r\n\r\n  #handleResizeEnd = () => {\r\n    this.resizing = false;\r\n\r\n    // Cancel RAF to prevent access to undefined references\r\n    if (this.#resizeRAF) {\r\n      this.#resizeRAF.cancel();\r\n    }\r\n\r\n    // Reset document cursor back to normal\r\n    document.body.style.cursor = null;\r\n\r\n    // Reset dragged distance to its original value\r\n    setProperty(this.el, POPOVER_DRAGGED_X, this.#draggedDistanceX);\r\n    setProperty(this.el, POPOVER_DRAGGED_Y, this.#draggedDistanceY);\r\n\r\n    // Update the position of the popover when the resize ends\r\n    this.#setPositionWatcher();\r\n\r\n    // Start again watching border size changes\r\n    this.#setBorderSizeWatcher();\r\n\r\n    // Add again the click outside watcher if necessary. RAF is needed to\r\n    // prevent the popover from closing, since the document click event will be\r\n    // dispatched after the execution of this function (mouseup handler)\r\n    requestAnimationFrame(this.#addClickOutsideWatcherIfNecessary);\r\n\r\n    // Remove listeners\r\n    document.removeEventListener(\"mousemove\", this.#trackElementResizeRAF, {\r\n      capture: true\r\n    });\r\n\r\n    document.removeEventListener(\"mouseup\", this.#handleResizeEnd, {\r\n      capture: true\r\n    });\r\n\r\n    this.#removeDraggingClass();\r\n\r\n    // Free the memory\r\n    this.#resizeRAF = null;\r\n    this.#initialDragEvent = null;\r\n    this.#lastDragEvent = null;\r\n  };\r\n\r\n  /**\r\n   * This observer watches the size of each border in the control to adjust the\r\n   * position of the invisible resize elements (edges and corners).\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #setBorderSizeWatcher = () => {\r\n    if (!this.resizable || !this.show) {\r\n      this.#removeBorderSizeWatcher();\r\n      return;\r\n    }\r\n\r\n    this.#borderSizeRAF ??= new SyncWithRAF();\r\n    this.#borderSizeObserver = new ResizeObserver(this.#updateBorderSizeRAF);\r\n\r\n    // Observe the size of the edges to know if the border\r\n    this.#borderSizeObserver.observe(this.el, { box: \"border-box\" });\r\n    this.#borderSizeObserver.observe(this.#resizeLayer);\r\n  };\r\n\r\n  #updateBorderSizeRAF = () => {\r\n    this.#borderSizeRAF.perform(this.#updateBorderSize);\r\n  };\r\n\r\n  #updateBorderSize = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const computedStyle = getComputedStyle(this.el);\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    this.el.style.setProperty(\r\n      POPOVER_BORDER_BLOCK_START_SIZE,\r\n      computedStyle.borderBlockStartWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      POPOVER_BORDER_BLOCK_END_SIZE,\r\n      computedStyle.borderBlockEndWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      POPOVER_BORDER_INLINE_START_SIZE,\r\n      computedStyle.borderInlineStartWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      POPOVER_BORDER_INLINE_END_SIZE,\r\n      computedStyle.borderInlineEndWidth\r\n    );\r\n  };\r\n\r\n  #removeBorderSizeWatcher = () => {\r\n    if (this.#borderSizeObserver) {\r\n      this.#borderSizeObserver.disconnect();\r\n      this.#borderSizeObserver = null; // Free the memory\r\n    }\r\n\r\n    this.#borderSizeRAF = null; // Free the memory\r\n  };\r\n\r\n  connectedCallback() {\r\n    adoptCommonThemes(this.el.shadowRoot.adoptedStyleSheets);\r\n\r\n    // Set RTL watcher\r\n    this.#rtlWatcher = new MutationObserver(() => {\r\n      this.#isRTLDirection = isRTL();\r\n\r\n      if (this.#isRTLDirection) {\r\n        this.el.style.setProperty(POPOVER_RTL, POPOVER_RTL_VALUE);\r\n        this.el.classList.add(POPOVER_RTL_CLASS);\r\n      } else {\r\n        this.el.style.removeProperty(POPOVER_RTL);\r\n        this.el.classList.remove(POPOVER_RTL_CLASS);\r\n      }\r\n    });\r\n\r\n    if (this.firstLayer) {\r\n      this.#avoidFlickeringInTheNextRender(true);\r\n    }\r\n\r\n    // Observe the dir attribute in the document\r\n    this.#rtlWatcher.observe(document.documentElement, {\r\n      attributeFilter: [\"dir\"]\r\n    });\r\n  }\r\n\r\n  componentWillRender() {\r\n    if (this.#checkPositionWatcher) {\r\n      this.#checkPositionWatcher = false;\r\n\r\n      // Update watchers\r\n      this.#setPositionWatcher();\r\n    }\r\n\r\n    if (this.#checkBorderSizeWatcher) {\r\n      this.#checkBorderSizeWatcher = false;\r\n\r\n      // Wait until the resize edges have been rendered\r\n      requestAnimationFrame(() => {\r\n        this.#setBorderSizeWatcher();\r\n      });\r\n    }\r\n\r\n    if (this.#adjustAlignment) {\r\n      const documentRect = document.documentElement.getBoundingClientRect();\r\n      const actionRect = this.actionElement.getBoundingClientRect();\r\n      const popoverScrollSizes = {\r\n        width: this.el.scrollWidth,\r\n        height: this.el.scrollHeight\r\n      };\r\n      const computedStyle = getComputedStyle(this.el);\r\n\r\n      const actionInlineStart = this.#getActionInlineStartPosition(\r\n        documentRect,\r\n        actionRect\r\n      );\r\n\r\n      this.#setResponsiveAlignment(\r\n        documentRect,\r\n        actionRect,\r\n        actionInlineStart,\r\n        popoverScrollSizes,\r\n        computedStyle\r\n      );\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    // Initialize popoverTargetElement\r\n    addPopoverTargetElement(this.actionElement, this.el, !this.actionById);\r\n\r\n    // Initialize watchers\r\n    this.#setPositionWatcher();\r\n    this.#setBorderSizeWatcher();\r\n\r\n    if (this.show) {\r\n      this.#showPopover();\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.#removePositionWatcher();\r\n    this.#removeBorderSizeWatcher();\r\n\r\n    // If the action element still exists, remove the reference\r\n    removePopoverTargetElement(this.actionElement);\r\n\r\n    // Defensive programming. Make sure the document does not have any unwanted handler\r\n    this.#handleDragEnd();\r\n\r\n    // Avoid leaving handlers in the document\r\n    this.#removeClickOutsideWatcher();\r\n\r\n    // Disconnect RTL watcher\r\n    if (this.#rtlWatcher) {\r\n      this.#rtlWatcher.disconnect();\r\n      this.#rtlWatcher = null; // Free the memory\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const canAddListeners = this.show;\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          \"gx-popover-header-drag\":\r\n            canAddListeners && this.allowDrag === \"header\",\r\n          [RESIZING_CLASS]: this.resizing,\r\n          [SCROLLABLE_CLASS]: this.overflowBehavior === \"add-scroll\"\r\n        }}\r\n        popover={this.mode}\r\n        onMouseDown={\r\n          canAddListeners && this.allowDrag === \"box\"\r\n            ? this.#handleMouseDown\r\n            : null\r\n        }\r\n        // TODO: Should we add this event with popover=\"manual\"???\r\n        // TODO: Check if the actionElement is an instance of Button to add this handler\r\n        onToggle={this.#handlePopoverToggle}\r\n      >\r\n        {this.allowDrag === \"header\" && (\r\n          <div\r\n            class=\"header\"\r\n            part=\"header\"\r\n            onMouseDown={canAddListeners ? this.#handleMouseDown : null}\r\n          >\r\n            <slot name=\"header\" />\r\n          </div>\r\n        )}\r\n\r\n        <slot />\r\n\r\n        {this.resizable &&\r\n          this.show && [\r\n            <div\r\n              class=\"edge__block-start\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-start\")}\r\n            ></div>, // Top\r\n            <div\r\n              class=\"edge__inline-end\"\r\n              onMouseDown={this.#handleEdgeResize(\"inline-end\")}\r\n            ></div>, // Right\r\n            <div\r\n              class=\"edge__block-end\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-end\")}\r\n            ></div>, // Bottom\r\n            <div\r\n              class=\"edge__inline-start\"\r\n              onMouseDown={this.#handleEdgeResize(\"inline-start\")}\r\n            ></div>, // Left\r\n\r\n            <div\r\n              class=\"corner__block-start-inline-start\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-start-inline-start\")}\r\n            ></div>, // Top Left\r\n            <div\r\n              class=\"corner__block-start-inline-end\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-start-inline-end\")}\r\n            ></div>, // Top Right\r\n            <div\r\n              class=\"corner__block-end-inline-start\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-end-inline-start\")}\r\n            ></div>, // Bottom Left\r\n            <div\r\n              class=\"corner__block-end-inline-end\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-end-inline-end\")}\r\n            ></div>, // Bottom Right\r\n\r\n            <div\r\n              class=\"resize-layer\"\r\n              ref={el => (this.#resizeLayer = el)}\r\n            ></div>\r\n          ]}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}