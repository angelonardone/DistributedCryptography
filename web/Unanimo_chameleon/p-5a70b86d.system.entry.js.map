{"version":3,"names":["__extends","HTMLChTabularGridRowElement","_super","_this","call","this","_HTMLChTabularGridRowElement_parts","set","_HTMLChTabularGridRowElement_defineProperties","__classPrivateFieldSet","parts","Object","defineProperty","get","__classPrivateFieldGet","value","_HTMLChTabularGridRowElement_renderAttributes","enumerable","configurable","setAttribute","tokenMap","_b","TABULAR_GRID_PARTS_DICTIONARY","ROW","rowId","toString","prototype","connectedCallback","addEventListener","cellCaretClickedHandler","selected","marked","grid","syncRowState","attributeChangedCallback","name","_oldValue","parentGrid","loadParentGrid","getAttribute","hasAttribute","highlightedClasses","_d","rowHighlightedClass","split","classList","add","apply","removeAttribute","_c","remove","selectedClasses","rowSelectedClass","markedClasses","rowMarkedClass","focusedClasses","rowFocusedClass","querySelector","dispatchEvent","collapsed","CustomEvent","bubbles","composed","detail","getCell","column","concat","physicalOrder","isVisible","Array","from","querySelectorAll","some","cell","ensureVisible","getBoundingClientRect","rect","firstElementChild","DOMRect","lastElementChild","firstCellRect","lastCellRect","x","y","width","height","eventInfo","targetRow","currentTarget","hasChildRows","stopPropagation","closest","HTMLElement","customElements","define","HTMLChTabularGridRowsetElement","computedLevel","rowsetLegendClickedHandler","defineLevel","rowsetId","computeLevel","paddingTop","parseInt","style","getPropertyValue","paddingbottom","mainRect","shadowRoot","firstRowRect","lastRowRect","setProperty","level","getParentRowset","hasLegend","isNestedRow","tagName","parentElement","node","undefined","TabularGridCellType","HTMLChTabularGridCellElement","cellType","Plain","_HTMLChTabularGridCellElement_parts","_HTMLChTabularGridCellElement_defineProperties","_HTMLChTabularGridCellElement_renderAttributes","CELL","cellId","defineFocusHandler","Rich","rowDrag","rowSelector","rowActions","cellIndex","indexOf","row","offsetParent","setSelectorChecked","selector","checked","caretMouseDownHandler","selectorClickHandler","range","shiftKey","selectorLabelClickHandler","dragMouseDownHandler","preventDefault","actionClickHandler","defineRich","TreeNode","defineTreeNode","html","innerHTML","attachShadow","mode","drag","bind","action","selectorLabel","caret","TabularGridManagerColumnDrag","columnId","columns","isRTL","lastTargetOrder","map","element","translateX","order","find","item","forEach","setColumnHiddenRect","dragging","position","sourceOrder","sourceFreeze","freeze","targetOrder","targetOrderChanged","filter","columnOrder","dragDirection","shiftDirection","left","right","swapColumnPosition","resetColumnPosition","dragEnd","getColumnStyle","columnItem","getColumnsFirstLast","itemFirst","itemLast","hidden","columnFirst","columnLast","columnSibling","getPreviousSiblingVisible","getNextSiblingVisible","previous","next","TabularGridManagerColumns","manager","columnsetObserver","MutationObserver","reloadColumns","columnResizeObserver","ResizeObserver","resizeColumnHandler","columnsDisplay","columnsWidth","observeColumnset","defineColumns","defineColumnsVariables","adjustFreezeOrder","adjustBaseLayer","getColumn","getColumns","sorted","sort","fnSortByOrder","getColumnSelector","columnType","richRowSelector","freezeStart","noFreeze","freezeEnd","defineColumnId","defineColumnIndex","defineColumnOrder","defineColumnSize","defineColumnDisplayObserver","defineColumnResizeObserver","defineColumnType","getColumnUniqueId","size","displayObserverClass","i","push","document","createElement","appendChild","observe","box","type","richRowDrag","richRowActions","root","getRootNode","length","selectors","styleInnerHTML","Document","head","insertAdjacentHTML","ShadowRoot","s","id","dataset","innerText","undefineColumns","unobserve","columnDisplay","childList","columnsAdded","includes","columnsRemoved","adjustOrders","entries","_i","entries_1","entry","target","contentRect","setColumnWidthVariables","uniqueId","Date","now","Math","random","substring","__spreadArray","setBaseLayer","columnA","columnB","TabularGridManagerSelection","selectionStateNone","rowFocused","rowsSelected","cellFocused","cellSelected","touchStart","touchEvent","touch","clientX","touches","clientY","isTouchEndSelection","abs","changedTouches","cancelable","select","state","append","rangeStartOn","context","keyboardNavigationMode","rowSelectionMode","rangeStart","rangeValue","lastSelected","rangeRows_1","getRowsRange","Set","preserveInstanceIfSame","getFirstColumn","rowSelected","selectAll","rows","getRows","getFirstRow","selectSet","moveFirstRow","firstRow","movePreviousRow","previousRow","getPreviousRow","moveNextRow","nextRow","getNextRow","moveLastRow","lastRow","getLastRow","movePreviousPageRow","rowsPerPage","getRowsPerPage","previousPageRow","max","moveNextPageRow","nextPageRow","min","movePreviousCell","previousCell","getPreviousCell","moveNextCell","nextCell","getNextCell","markRow","currentRowsMarked","rows_1","lastRowMarked","r","markRows","rowsMarked","markAllRows","syncRowSelector","selectorMode","columnSelector","richRowSelectorMode","indexColumnSelector_1","children","syncColumnSelector","richRowSelectorState","newSelection","oldSelection","every","TabularGridManagerRowDrag","dragMouseMoveFn","dragMouseMoveHandler","dragStart","rowIndex","getGridRowIndex","defineListeners","createRowShadow","floatRow","updateRowPosition","rowHover","rowHoverIndex","rowHoverGridPosition","offsetPosition","rowShadow","dragMouseUpHandler","removeEventListener","dropPosition","rowDrop","before","after","unfloatRow","passive","once","rowHeight","getRowHeight","display","getColumnsWidth","opacity","minWidth","gridRowStart","rowWidth","gridLayout","clientWidth","columnPosition","top","TabularGridManagerRowActions","showOnRowHover","showOnRowActions","showOnRowContext","TabularGridManagerColumnResize","resizingSingle","deltaWidth","columnWidth","columnWidthStart","resizingSplitter","columnSizeStart","convertUnit","columnAfter","columnAfterWidth","columnAfterWidthStart","columnAfterSizeStart","columnResizeMode","resizingFn","resizeEndFn","resizeEndSplitter","parseCSSValue","getNextColumn","resizing","resizeEnd","columnWidthEnd","columnAfterWidthEnd","cssValue","match","number","parseFloat","unit","startSize","startWidth","newWidth","StyleRule","TabularGridManager","styleSheet","CSSStyleSheet","insertRule","BASE_LAYER","COLUMNS_WIDTH","adoptedStyleSheets","adoptCommonThemes","selection","gridLayoutElement","componentDidLoad","getComputedStyle","gridTemplateColumns","getColumnsetHeight","gridColumnsHeight","gridTemplateRows","getScrollOffsetTop","offsetTop","getScrollOffsetLeft","reduce","offsetRight","offsetWidth","getScrollOffsetRight","current","slice","reverse","getPreviousColumn","previousColumn","nextColumn","getRowsetRowIndex","gridRowsHeight","gridHeight","clientHeight","columnsHeight","floor","getRow","start","end","indexStart","indexEnd","getRowEventTarget","composedPath","isRowActionsEventTarget","getCellEventTarget","columnDragStart","columnDragManager","isRTLDirection","columnDragging","columnDragEnd","columnResizeStart","columnResizeManager","columnResizing","columnResizeEnd","rowDragStart","rowDragManager","getGridStyle","__assign","getGridTemplateColumns","getRowBoxSimulationStyle","getDragTransitionStyle","getColumnsStyle","deleteRule","columnIndex","join","ensureRowVisible","ensureCellVisible","isColumnFreeze","scroll","scrollOffsetTop","scrollOffsetLeft","scrollOffsetRight","scrollTop","scrollBy","offsetHeight","scrollLeft","offsetLeft","getColumnSizeStyle","getColumnOrderStyle","getColumnDisplayStyle","getColumnFreezeStyle","getColumnDraggingStyle","getColumnIndentStyle","getColumnFreezeStartStyle","getColumnFreezeEndStyle","calcItems","direction","tabularGridCss","ChTabularGridStyle0","ChTabularGrid","exports","class_1","rowFocusedHandler","focused","cellFocusedHandler","rowHighlightedHandler","highlighted","openRowHover","close","rowsMarkedHandler","rowMarkingChanged","emit","getChangedEventDetail","rowsSelectedHandler","selectionChanged","cellSelectedHandler","cellSelectionChanged","componentWillLoad","el","gridStyle","componentShouldUpdate","_newValue","focusHandler","selectByKeyboardEvent","blurHandler","cellFocusedEventHandler","setCellSelected","windowKeyDownHandler","focusComposedPath","key","keyDownHandler","mouseEventModifierKey","spacePressedEvent","setRowCollapsed","moveByKeyboardEvent","enterPressedHandler","mouseMoveHandler","rowHighlightEnabled","rowHighlighted","selectingBlock","selecting","stopSelecting","selectingRow","selectingCell","isKeyModifierPressed","isMouseButtonRightPressed","mouseEventHasButtonPressed","MouseEventButtons","RIGHT","selectByPointerEvent","mouseLeaveHandler","mouseDownHandler","button","MouseEventButton","mouseUpHandler","clickHandler","emitRowClicked","dblclickHandler","rowDoubleClicked","touchstartHandler","touchendHandler","contextmenuHandler","KEY_SHORTCUT","rowContextMenuEventInfo","rowContextMenu","selectedRowsId","openRowContext","defaultPrevented","columnSelectorClickedHandler","cellSelectorClickedHandler","cellRowActionClickedHandler","openRowActions","columnStyleChangedHandler","columnFreezeChangedHandler","columnResizeStartedHandler","columnResizingHandler","columnResizeFinishedHandler","columnDragStartHandler","columnDraggingHandler","positionX","columnDragEndHandler","rowDragStartHandler","rowEnsureVisibleHandler","cellEnsureVisibleHandler","settingsShowClickedHandler","settingsUI","show","settingsCloseClickedHandler","getFocusedRow","getHoveredRow","getSelectedRows","getMarkedRows","getFocusedCell","getSelectedCell","selectRow","rowId_1","_a","selectAllRows","selectCell","cellId_1","columnId_1","expandRow","collapseRow","rowEnsureVisible","cellEnsureVisible","currentRow","syncRowStateSelected","syncRowStateMarked","syncRowStateSelector","index","splice","rowsId","addedRowsId","removedRowsId","unalteredRowsId","rowEnterPressed","ctrl","shift","markByKeyboardEvent","fn","rowClicked","renderSettings","h","ref","exportparts","part","render","Host","tabindex","class","tabularGridColumnCss","ChTabularGridColumnStyle0","ChTabularGridColumn","settingsClickHandler","showSettings","columnSelectorClicked","selectorTouchEndHandler","class_2","freezeHandler","columnFreezeChanged","hiddenHandler","columnHiddenChanged","orderHandler","columnOrderChanged","sizeHandler","columnSizeChanging","sortDirectionHandler","sortDirection","columnSortChanged","mousedownHandler","sortable","columnSizeChanged","allowColumnReorder","dragMouseMoveStartPositionX","pageX","columnDragStarted","movementX","columnDragEnded","settingsMouseDownHandler","COLUMN","renderSelector","renderName","renderSort","renderResize","onMouseDown","onClick","onTouchEnd","indeterminate","title","columnTooltip","columnNamePosition","columnName","columnIconUrl","columnImage","columnImageSet","src","srcSet","columnNameHidden","settingable","resizable","tabularGridColumnsetCss","ChTabularGridColumnsetStyle0","ChTabularGridColumnset","class_3","columnSortChangedHandler","COLUMNSET","tabularGridRowsetLegendCss","ChTabularGridRowsetLegendStyle0","ChTabularGridRowsetLegend","_getRowsetId","rowset","class_4","rowsetLegendClicked","ROWSET_LEGEND"],"sources":["src/components/tabular-grid/row/tabular-grid-row.ts","src/components/tabular-grid/rowset/tabular-grid-rowset.tsx","src/components/tabular-grid/cell/tabular-grid-cell.ts","src/components/tabular-grid/tabular-grid-manager-column-drag.ts","src/components/tabular-grid/tabular-grid-manager-columns.ts","src/components/tabular-grid/tabular-grid-manager-selection.ts","src/components/tabular-grid/tabular-grid-manager-row-drag.ts","src/components/tabular-grid/tabular-grid-manager-row-actions.ts","src/components/tabular-grid/tabular-grid-manager-column-resize.ts","src/components/tabular-grid/tabular-grid-manager.ts","src/components/tabular-grid/tabular-grid.scss?tag=ch-tabular-grid&encapsulation=shadow","src/components/tabular-grid/tabular-grid.tsx","src/components/tabular-grid/column/tabular-grid-column.scss?tag=ch-tabular-grid-column&encapsulation=shadow","src/components/tabular-grid/column/tabular-grid-column.tsx","src/components/tabular-grid/columnset/tabular-grid-columnset.scss?tag=ch-tabular-grid-columnset","src/components/tabular-grid/columnset/tabular-grid-columnset.tsx","src/components/tabular-grid/rowset/legend/tabular-grid-rowset-legend.scss?tag=ch-tabular-grid-rowset-legend&encapsulation=shadow","src/components/tabular-grid/rowset/legend/tabular-grid-rowset-legend.tsx"],"sourcesContent":["import { ITabularGridCollapsible } from \"../tabular-grid-types\";\r\nimport HTMLChTabularGridCellElement from \"../cell/tabular-grid-cell\";\r\nimport { tokenMap } from \"../../../common/utils\";\r\nimport { TABULAR_GRID_PARTS_DICTIONARY } from \"../../../common/reserved-names\";\r\n\r\n/**\r\n * The `ch-tabular-grid-row` component represents a grid row.\r\n */\r\nexport default class HTMLChTabularGridRowElement\r\n  extends HTMLElement\r\n  implements ITabularGridCollapsible\r\n{\r\n  private parentGrid: HTMLChTabularGridElement;\r\n  #parts: boolean | string;\r\n\r\n  static get observedAttributes() {\r\n    return [\"selected\", \"marked\"];\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.#defineProperties();\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.addEventListener(\"cellCaretClicked\", this.cellCaretClickedHandler);\r\n\r\n    if (this.selected || this.marked) {\r\n      this.grid.syncRowState(this);\r\n    }\r\n\r\n    this.#renderAttributes();\r\n  }\r\n\r\n  attributeChangedCallback(name: string, _oldValue: string, value: string) {\r\n    if (name === \"selected\") {\r\n      this.selected = value !== null ? value !== \"false\" : false;\r\n    }\r\n    if (name === \"marked\") {\r\n      this.marked = value !== null ? value !== \"false\" : false;\r\n    }\r\n\r\n    this.grid?.syncRowState(this);\r\n  }\r\n\r\n  /**\r\n   * Returns the parent ch-tabular-grid element of the grid row.\r\n   */\r\n  get grid(): HTMLChTabularGridElement {\r\n    return this.parentGrid ?? this.loadParentGrid();\r\n  }\r\n\r\n  /**\r\n   * A unique identifier for the row.\r\n   */\r\n  get rowId(): string {\r\n    return this.getAttribute(\"rowid\") ?? \"\";\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is highlighted.\r\n   */\r\n  get highlighted(): boolean {\r\n    return this.hasAttribute(\"highlighted\");\r\n  }\r\n\r\n  set highlighted(value: boolean) {\r\n    const highlightedClasses = this.grid.rowHighlightedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      this.setAttribute(\"highlighted\", \"\");\r\n      if (this.grid.rowHighlightedClass) {\r\n        this.classList.add(...highlightedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"highlighted\");\r\n      if (this.grid.rowHighlightedClass) {\r\n        this.classList.remove(...highlightedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is selected.\r\n   */\r\n  get selected(): boolean {\r\n    return this.hasAttribute(\"selected\");\r\n  }\r\n\r\n  set selected(value: boolean) {\r\n    const selectedClasses = this.grid.rowSelectedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      if (!this.hasAttribute(\"selected\")) {\r\n        this.setAttribute(\"selected\", \"\");\r\n      }\r\n      if (this.grid.rowSelectedClass) {\r\n        this.classList.add(...selectedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"selected\");\r\n      if (this.grid.rowSelectedClass) {\r\n        this.classList.remove(...selectedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is marked.\r\n   */\r\n  get marked(): boolean {\r\n    return this.hasAttribute(\"marked\");\r\n  }\r\n\r\n  set marked(value: boolean) {\r\n    const markedClasses = this.grid.rowMarkedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      if (!this.hasAttribute(\"marked\")) {\r\n        this.setAttribute(\"marked\", \"\");\r\n      }\r\n      if (this.grid.rowMarkedClass) {\r\n        this.classList.add(...markedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"marked\");\r\n      if (this.grid.rowMarkedClass) {\r\n        this.classList.remove(...markedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is focused.\r\n   */\r\n  get focused(): boolean {\r\n    return this.hasAttribute(\"focused\");\r\n  }\r\n\r\n  set focused(value: boolean) {\r\n    const focusedClasses = this.grid.rowFocusedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      this.setAttribute(\"focused\", \"\");\r\n      if (this.grid.rowFocusedClass) {\r\n        this.classList.add(...focusedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"focused\");\r\n      if (this.grid.rowFocusedClass) {\r\n        this.classList.remove(...focusedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the grid row has child rows.\r\n   */\r\n  get hasChildRows(): boolean {\r\n    return !!this.querySelector(\"ch-tabular-grid-rowset\");\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid row is collapsed.\r\n   */\r\n  get collapsed(): boolean {\r\n    return this.hasAttribute(\"collapsed\");\r\n  }\r\n\r\n  set collapsed(value: boolean) {\r\n    const dispatchEvent = this.collapsed !== value;\r\n\r\n    if (value) {\r\n      this.setAttribute(\"collapsed\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"collapsed\");\r\n    }\r\n\r\n    if (dispatchEvent) {\r\n      this.dispatchEvent(\r\n        new CustomEvent(\"rowCollapsedChanged\", {\r\n          bubbles: true,\r\n          composed: true,\r\n          detail: { rowId: this.rowId, collapsed: value }\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid row is a leaf node.\r\n   */\r\n  get leaf(): boolean {\r\n    return this.hasAttribute(\"leaf\");\r\n  }\r\n\r\n  set leaf(value: boolean) {\r\n    if (value === true) {\r\n      this.setAttribute(\"leaf\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"leaf\");\r\n    }\r\n  }\r\n\r\n  public getCell(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): HTMLChTabularGridCellElement {\r\n    return this.querySelector(\r\n      `:scope > ch-tabular-grid-cell:nth-of-type(${column.physicalOrder})`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid row is visible.\r\n   */\r\n  public isVisible(): boolean {\r\n    return Array.from(\r\n      this.querySelectorAll(\":scope > ch-tabular-grid-cell\")\r\n    ).some((cell: HTMLChTabularGridCellElement) => cell.isVisible());\r\n  }\r\n\r\n  /**\r\n   * Ensures that the row is visible within the control, scrolling the contents of the control if necessary.\r\n   */\r\n  public ensureVisible() {\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"rowEnsureVisible\", { bubbles: true, composed: true })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * returns a `DOMRect` object representing the size of the grid row element.\r\n   */\r\n  public getBoundingClientRect(): DOMRect {\r\n    let rect: DOMRect;\r\n\r\n    if (!this.firstElementChild) {\r\n      rect = new DOMRect();\r\n    } else if (this.firstElementChild === this.lastElementChild) {\r\n      rect = this.firstElementChild.getBoundingClientRect();\r\n    } else {\r\n      const firstCellRect = this.firstElementChild.getBoundingClientRect();\r\n      const lastCellRect = this.lastElementChild.getBoundingClientRect();\r\n\r\n      rect = new DOMRect(\r\n        firstCellRect.x,\r\n        firstCellRect.y,\r\n        lastCellRect.x - firstCellRect.x + lastCellRect.width,\r\n        lastCellRect.y - firstCellRect.y + lastCellRect.height\r\n      );\r\n    }\r\n\r\n    return rect;\r\n  }\r\n\r\n  private cellCaretClickedHandler(eventInfo: PointerEvent) {\r\n    const targetRow = eventInfo.currentTarget as HTMLChTabularGridRowElement;\r\n\r\n    if (targetRow.hasChildRows) {\r\n      this.collapsed = !this.collapsed;\r\n    }\r\n    eventInfo.stopPropagation();\r\n  }\r\n\r\n  private loadParentGrid(): HTMLChTabularGridElement {\r\n    this.parentGrid = this.closest(\"ch-tabular-grid\");\r\n    return this.parentGrid;\r\n  }\r\n\r\n  #defineProperties = () => {\r\n    this.#parts = (this as any).parts;\r\n    Object.defineProperty(this, \"parts\", {\r\n      get: () => this.#parts,\r\n      set: value => {\r\n        this.#parts = value;\r\n        this.#renderAttributes();\r\n      },\r\n      enumerable: true,\r\n      configurable: true\r\n    });\r\n  };\r\n\r\n  #renderAttributes = () => {\r\n    if (this.#parts) {\r\n      this.setAttribute(\r\n        \"part\",\r\n        tokenMap({\r\n          [TABULAR_GRID_PARTS_DICTIONARY.ROW]: true,\r\n          [this.rowId]: true,\r\n          [this.#parts.toString()]: typeof this.#parts === \"string\"\r\n        })\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nif (!customElements.get(\"ch-tabular-grid-row\")) {\r\n  customElements.define(\"ch-tabular-grid-row\", HTMLChTabularGridRowElement);\r\n}\r\n","import { ITabularGridCollapsible } from \"../tabular-grid-types\";\r\n\r\n/**\r\n * The `ch-tabular-grid-rowset` component represents a group of rows.\r\n */\r\nexport default class HTMLChTabularGridRowsetElement\r\n  extends HTMLElement\r\n  implements ITabularGridCollapsible\r\n{\r\n  private computedLevel = 0;\r\n  private grid: HTMLChTabularGridElement;\r\n\r\n  rowsetId: string;\r\n\r\n  static get observedAttributes() {\r\n    return [\"rowsetid\"];\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.addEventListener(\r\n      \"rowsetLegendClicked\",\r\n      this.rowsetLegendClickedHandler\r\n    );\r\n    this.defineLevel();\r\n  }\r\n\r\n  attributeChangedCallback(name: string, _oldValue: string, value: string) {\r\n    if (name === \"rowsetid\") {\r\n      this.rowsetId = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid rowset is collapsed.\r\n   */\r\n  get collapsed(): boolean {\r\n    return this.hasAttribute(\"collapsed\");\r\n  }\r\n\r\n  set collapsed(value: boolean) {\r\n    if (value) {\r\n      this.setAttribute(\"collapsed\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"collapsed\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the zero-based depth of the rowset in the tree.\r\n   */\r\n  get level(): number {\r\n    if (!this.computedLevel) {\r\n      this.computeLevel();\r\n    }\r\n\r\n    return this.computedLevel;\r\n  }\r\n\r\n  /**\r\n   * returns a `DOMRect` object representing the size of the grid rowset element.\r\n   */\r\n  public getBoundingClientRect(): DOMRect {\r\n    let rect: DOMRect;\r\n\r\n    const paddingTop = parseInt(this.style.getPropertyValue(\"padding-top\"));\r\n    const paddingbottom = parseInt(\r\n      this.style.getPropertyValue(\"padding-bottom\")\r\n    );\r\n\r\n    if (!this.firstElementChild) {\r\n      const mainRect = this.grid.shadowRoot\r\n        .querySelector(\".main\")\r\n        .getBoundingClientRect();\r\n      rect = new DOMRect(mainRect.x, mainRect.y, mainRect.width, 0);\r\n    } else if (this.firstElementChild === this.lastElementChild) {\r\n      const firstRowRect = this.firstElementChild.getBoundingClientRect();\r\n\r\n      rect = new DOMRect(\r\n        firstRowRect.x,\r\n        firstRowRect.y - paddingTop,\r\n        firstRowRect.x + firstRowRect.width,\r\n        firstRowRect.y + firstRowRect.height + paddingTop + paddingbottom\r\n      );\r\n    } else {\r\n      const firstRowRect = this.firstElementChild.getBoundingClientRect();\r\n      const lastRowRect = this.lastElementChild.getBoundingClientRect();\r\n\r\n      rect = new DOMRect(\r\n        firstRowRect.x,\r\n        firstRowRect.y - paddingTop,\r\n        lastRowRect.x - firstRowRect.x + lastRowRect.width,\r\n        lastRowRect.y -\r\n          firstRowRect.y +\r\n          lastRowRect.height +\r\n          paddingTop +\r\n          paddingbottom\r\n      );\r\n    }\r\n\r\n    return rect;\r\n  }\r\n\r\n  private rowsetLegendClickedHandler(eventInfo: CustomEvent) {\r\n    eventInfo.stopPropagation();\r\n\r\n    this.collapsed = !this.collapsed;\r\n  }\r\n\r\n  private defineLevel() {\r\n    this.style.setProperty(\"--level\", this.level.toString());\r\n  }\r\n\r\n  private computeLevel() {\r\n    this.computedLevel = this.getParentRowset()?.level ?? 0;\r\n\r\n    if (this.hasLegend() || this.isNestedRow()) {\r\n      this.computedLevel++;\r\n    }\r\n  }\r\n\r\n  private hasLegend(): boolean {\r\n    return this.firstElementChild?.tagName === \"CH-TABULAR-GRID-ROWSET-LEGEND\";\r\n  }\r\n\r\n  private isNestedRow(): boolean {\r\n    return this.parentElement.tagName === \"CH-TABULAR-GRID-ROW\";\r\n  }\r\n\r\n  private getParentRowset(): HTMLChTabularGridRowsetElement | undefined {\r\n    const node = this.parentElement.closest(\r\n      \"ch-tabular-grid-rowset, ch-tabular-grid\"\r\n    );\r\n\r\n    if (node.tagName === \"CH-TABULAR-GRID-ROWSET\") {\r\n      return node as HTMLChTabularGridRowsetElement;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n}\r\n\r\nif (!customElements.get(\"ch-tabular-grid-rowset\")) {\r\n  customElements.define(\r\n    \"ch-tabular-grid-rowset\",\r\n    HTMLChTabularGridRowsetElement\r\n  );\r\n}\r\n","import { TABULAR_GRID_PARTS_DICTIONARY } from \"../../../common/reserved-names\";\r\nimport { tokenMap } from \"../../../common/utils\";\r\nimport HTMLChTabularGridRowElement from \"../row/tabular-grid-row\";\r\n\r\n/**\r\n * TabularGridCellType indicates the type of cell.\r\n * \"Plain\" is a simple cell that shows the contents of it.\r\n * \"Rich\" is a rich cell that, in addition to displaying its content, enables\r\n * the user to execute different actions on the row.\r\n * The actions are:\r\n * - allow dragging the row to reorder it.\r\n * - allow to select the row by means of a checkbox.\r\n * - allow displaying actions to be executed in the row.\r\n * \"TreeNode\" is a cell that represents a node of the Tree.\r\n */\r\nexport enum TabularGridCellType {\r\n  Plain = \"plain\",\r\n  Rich = \"rich\",\r\n  TreeNode = \"node\"\r\n}\r\n\r\n/**\r\n * The `ch-tabular-grid-cell` component represents a grid cell.\r\n */\r\nexport default class HTMLChTabularGridCellElement extends HTMLElement {\r\n  private cellType = TabularGridCellType.Plain;\r\n  private caret: HTMLDivElement;\r\n  private drag: HTMLDivElement;\r\n  private action: HTMLButtonElement;\r\n  private selector: HTMLInputElement;\r\n  private selectorLabel: HTMLLabelElement;\r\n  #parts: boolean | string;\r\n\r\n  public rowDrag: boolean;\r\n  public rowSelector: boolean;\r\n  public rowActions: boolean;\r\n\r\n  static get observedAttributes() {\r\n    return [\"cell-type\", \"row-drag\", \"row-selector\", \"row-actions\"];\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.#defineProperties();\r\n    this.defineFocusHandler();\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.#renderAttributes();\r\n    if (this.cellType !== TabularGridCellType.Plain) {\r\n      this.define();\r\n    }\r\n  }\r\n\r\n  attributeChangedCallback(name: string, _oldValue: string, value: string) {\r\n    if (name === \"cell-type\") {\r\n      this.cellType = value as TabularGridCellType;\r\n    }\r\n    if (name === \"row-drag\") {\r\n      this.cellType = TabularGridCellType.Rich;\r\n      this.rowDrag = value !== null ? value !== \"false\" : false;\r\n    }\r\n    if (name === \"row-selector\") {\r\n      this.cellType = TabularGridCellType.Rich;\r\n      this.rowSelector = value !== null ? value !== \"false\" : false;\r\n    }\r\n    if (name === \"row-actions\") {\r\n      this.cellType = TabularGridCellType.Rich;\r\n      this.rowActions = value !== null ? value !== \"false\" : false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * One of \"plain\", \"rich\", or \"node\", indicating the type of cell.\r\n   */\r\n  get type(): TabularGridCellType {\r\n    return this.cellType;\r\n  }\r\n\r\n  set type(value: TabularGridCellType) {\r\n    if (this.cellType !== value) {\r\n      this.cellType = value;\r\n      this.define();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the parent ch-tabular-grid element of the cell.\r\n   */\r\n  get grid(): HTMLChTabularGridElement {\r\n    return this.closest(\"ch-tabular-grid\");\r\n  }\r\n\r\n  /**\r\n   * Returns the ch-tabular-grid-column element of the cell.\r\n   */\r\n  get column(): HTMLChTabularGridColumnElement {\r\n    const cellIndex = Array.prototype.indexOf.call(\r\n      this.row.querySelectorAll(`:scope > ch-tabular-grid-cell`),\r\n      this\r\n    );\r\n    return this.grid.querySelector(\r\n      `ch-tabular-grid-column:nth-of-type(${cellIndex + 1})`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the parent ch-tabular-grid-row element of the cell.\r\n   */\r\n  get row(): HTMLChTabularGridRowElement {\r\n    return this.parentElement as HTMLChTabularGridRowElement;\r\n  }\r\n\r\n  /**\r\n   * A unique identifier for the cell.\r\n   */\r\n  get cellId(): string {\r\n    return this.getAttribute(\"cellid\") ?? \"\";\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the cell is selected.\r\n   */\r\n  get selected(): boolean {\r\n    return this.hasAttribute(\"selected\");\r\n  }\r\n\r\n  set selected(value: boolean) {\r\n    if (value === true) {\r\n      this.setAttribute(\"selected\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"selected\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the cell is focused.\r\n   */\r\n  get focused(): boolean {\r\n    return this.hasAttribute(\"focused\");\r\n  }\r\n\r\n  set focused(value: boolean) {\r\n    if (value === true) {\r\n      this.setAttribute(\"focused\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"focused\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid cell is visible.\r\n   */\r\n  public isVisible(): boolean {\r\n    return this.offsetParent !== null;\r\n  }\r\n\r\n  /**\r\n   * Ensures that the cell is visible within the control, scrolling the contents of the control if necessary.\r\n   */\r\n  public ensureVisible() {\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"cellEnsureVisible\", { bubbles: true, composed: true })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the selector of cell is checked or not.\r\n   */\r\n  public setSelectorChecked(value: boolean) {\r\n    this.selector.checked = value;\r\n\r\n    if (this.selector.checked) {\r\n      this.selector.setAttribute(\"part\", \"selector checked\");\r\n    } else {\r\n      this.selector.setAttribute(\"part\", \"selector\");\r\n    }\r\n  }\r\n\r\n  private defineFocusHandler() {\r\n    this.addEventListener(\"focusin\", () => {\r\n      if (!this.rowSelector) {\r\n        this.dispatchEvent(\r\n          new CustomEvent(\"cellFocused\", { bubbles: true, composed: true })\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  private caretMouseDownHandler(eventInfo: Event) {\r\n    eventInfo.stopPropagation();\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"cellCaretClicked\", { bubbles: true, composed: true })\r\n    );\r\n  }\r\n\r\n  private selectorClickHandler(eventInfo: MouseEvent) {\r\n    eventInfo.stopPropagation();\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent<TabularGridCellSelectorClickedEvent>(\r\n        \"cellSelectorClicked\",\r\n        {\r\n          bubbles: true,\r\n          composed: true,\r\n          detail: {\r\n            checked: this.selector.checked,\r\n            range: eventInfo.shiftKey\r\n          }\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  private selectorLabelClickHandler(eventInfo: MouseEvent) {\r\n    if (!eventInfo.shiftKey) {\r\n      eventInfo.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private dragMouseDownHandler(eventInfo: MouseEvent) {\r\n    eventInfo.preventDefault();\r\n    eventInfo.stopPropagation();\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent<TabularGridRowDragEvent>(\"rowDragStarted\", {\r\n        bubbles: true,\r\n        composed: true,\r\n        detail: {\r\n          row: this.row\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private actionClickHandler() {\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"cellRowActionClicked\", {\r\n        bubbles: true,\r\n        composed: true\r\n      })\r\n    );\r\n  }\r\n\r\n  private define() {\r\n    switch (this.cellType) {\r\n      case TabularGridCellType.Rich:\r\n        this.defineRich();\r\n        break;\r\n      case TabularGridCellType.TreeNode:\r\n        this.defineTreeNode();\r\n        break;\r\n    }\r\n  }\r\n\r\n  private defineRich() {\r\n    let html = \"\";\r\n\r\n    if (!this.shadowRoot || this.shadowRoot.innerHTML === \"\") {\r\n      this.attachShadow({ mode: \"open\" });\r\n\r\n      if (this.rowDrag) {\r\n        html += `\r\n          <div part=\"drag-icon\"></div>\r\n        `;\r\n      }\r\n\r\n      if (this.rowSelector) {\r\n        html += `\r\n          <style>label {display:flex}</style>\r\n          <label part=\"selector-label\">\r\n            <input type=\"checkbox\" part=\"selector\">\r\n          </label>\r\n        `;\r\n      }\r\n\r\n      if (this.rowActions) {\r\n        html += `\r\n          <button part=\"actions-icon\"></button>\r\n        `;\r\n      }\r\n\r\n      this.shadowRoot.innerHTML = `\r\n        ${html}\r\n        <slot></slot>\r\n      `;\r\n\r\n      if (this.rowDrag) {\r\n        this.drag = this.shadowRoot.querySelector(\"[part='drag-icon']\");\r\n        this.drag.addEventListener(\r\n          \"mousedown\",\r\n          this.dragMouseDownHandler.bind(this)\r\n        );\r\n      }\r\n\r\n      if (this.rowActions) {\r\n        this.action = this.shadowRoot.querySelector(\"[part='actions-icon']\");\r\n        this.action.addEventListener(\r\n          \"click\",\r\n          this.actionClickHandler.bind(this)\r\n        );\r\n      }\r\n\r\n      if (this.rowSelector) {\r\n        this.selector = this.shadowRoot.querySelector(\"[part='selector']\");\r\n        this.selector.addEventListener(\"mousedown\", (eventInfo: MouseEvent) =>\r\n          eventInfo.stopPropagation()\r\n        );\r\n        this.selector.addEventListener(\"touchend\", (eventInfo: TouchEvent) =>\r\n          eventInfo.stopPropagation()\r\n        );\r\n        this.selector.addEventListener(\r\n          \"click\",\r\n          this.selectorClickHandler.bind(this)\r\n        );\r\n\r\n        this.selectorLabel = this.shadowRoot.querySelector(\r\n          \"[part='selector-label']\"\r\n        );\r\n        this.selectorLabel.addEventListener(\r\n          \"mousedown\",\r\n          (eventInfo: MouseEvent) => eventInfo.stopPropagation()\r\n        );\r\n        this.selectorLabel.addEventListener(\r\n          \"touchend\",\r\n          (eventInfo: MouseEvent) => eventInfo.stopPropagation()\r\n        );\r\n        this.selectorLabel.addEventListener(\r\n          \"click\",\r\n          this.selectorLabelClickHandler.bind(this)\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private defineTreeNode() {\r\n    if (!this.shadowRoot || this.shadowRoot.innerHTML === \"\") {\r\n      this.attachShadow({ mode: \"open\" });\r\n      this.shadowRoot.innerHTML = `\r\n        <style>:host::before {content: none !important}</style>\r\n        <div part=\"indent\"></div>\r\n        <div part=\"caret\"></div>\r\n        <input type=\"checkbox\" part=\"node-selector\" hidden>\r\n        <div part=\"node-icon\"></div>\r\n        <slot></slot>\r\n      `;\r\n\r\n      this.caret = this.shadowRoot.querySelector(\"[part='caret']\");\r\n      this.caret.addEventListener(\r\n        \"mousedown\",\r\n        this.caretMouseDownHandler.bind(this)\r\n      );\r\n      this.caret.addEventListener(\"click\", eventInfo =>\r\n        eventInfo.stopPropagation()\r\n      );\r\n    }\r\n  }\r\n\r\n  #defineProperties = () => {\r\n    this.#parts = (this as any).parts;\r\n    Object.defineProperty(this, \"parts\", {\r\n      get: () => this.#parts,\r\n      set: value => {\r\n        this.#parts = value;\r\n        this.#renderAttributes();\r\n      },\r\n      enumerable: true,\r\n      configurable: true\r\n    });\r\n  };\r\n\r\n  #renderAttributes = () => {\r\n    this.#parts &&\r\n      this.setAttribute(\r\n        \"part\",\r\n        tokenMap({\r\n          [TABULAR_GRID_PARTS_DICTIONARY.CELL]: true,\r\n          [this.cellId]: !!this.cellId,\r\n          [this.#parts.toString()]: typeof this.#parts === \"string\"\r\n        })\r\n      );\r\n  };\r\n}\r\n\r\nexport interface TabularGridCellSelectorClickedEvent {\r\n  checked: boolean;\r\n  range: boolean;\r\n}\r\n\r\nexport interface TabularGridRowDragEvent {\r\n  row: HTMLChTabularGridRowElement;\r\n  positionX?: number;\r\n  direction?: \"top\" | \"bottom\";\r\n}\r\n\r\nif (!customElements.get(\"ch-tabular-grid-cell\")) {\r\n  customElements.define(\"ch-tabular-grid-cell\", HTMLChTabularGridCellElement);\r\n}\r\n","import { CSSProperties } from \"./tabular-grid-types\";\r\n\r\nexport class TabularGridManagerColumnDrag {\r\n  private column: TabularGridManagerColumnDragItem;\r\n  private columns: TabularGridManagerColumnDragItem[];\r\n  private isRTL: boolean;\r\n  private lastTargetOrder = 0;\r\n\r\n  constructor(\r\n    columnId: string,\r\n    columns: HTMLChTabularGridColumnElement[],\r\n    isRTL: boolean\r\n  ) {\r\n    this.isRTL = isRTL;\r\n    this.columns = columns.map(column => ({\r\n      element: column,\r\n      rect: column.getBoundingClientRect(),\r\n      translateX: 0,\r\n      order: column.order\r\n    }));\r\n    this.column = this.columns.find(item => item.element.columnId === columnId);\r\n\r\n    this.columns.forEach(this.setColumnHiddenRect.bind(this));\r\n  }\r\n\r\n  dragging(position: number): boolean {\r\n    /**\r\n     * Indica el orden inicial de la columna que se está arrastrando\r\n     */\r\n    const sourceOrder = this.column.element.order;\r\n\r\n    /**\r\n     * Indica a qué grupo de fijación pertenece la columna que se está arrastrando\r\n     */\r\n    const sourceFreeze = this.column.element.freeze;\r\n\r\n    let targetOrder = 0;\r\n    let targetOrderChanged = false;\r\n\r\n    this.column.translateX = 0;\r\n    this.columns\r\n      .filter(column => column.element.freeze === sourceFreeze)\r\n      .forEach(column => {\r\n        /**\r\n         * Indica el orden de la columna actual\r\n         */\r\n        const columnOrder = column.element.order;\r\n\r\n        /**\r\n         * Indica si la columna que se está arrastrando estaba a la derecha o\r\n         * a la izquierda de la actual cuando se inició el arrastre para\r\n         * incrementar el orden según corresponda.\r\n         */\r\n        const dragDirection = sourceOrder > columnOrder ? 1 : -1;\r\n\r\n        /**\r\n         * Indica si la columna actual hay que desplazarla a la derecha o\r\n         * a la izquierda cuando se cruce con la columna arrastrada.\r\n         */\r\n        const shiftDirection =\r\n          (sourceOrder > columnOrder ? 1 : -1) * (this.isRTL ? -1 : 1);\r\n\r\n        if (\r\n          column.rect.left < position &&\r\n          position < column.rect.right &&\r\n          columnOrder !== sourceOrder\r\n        ) {\r\n          /*\r\n            La posicion actual del mouse está dentro de la columna actual y\r\n            no es la columna que se está arrastrando\r\n          */\r\n          this.swapColumnPosition(column, shiftDirection);\r\n\r\n          // actualizo el orden de la columna actual\r\n          column.order = column.element.order + dragDirection;\r\n\r\n          targetOrder = columnOrder;\r\n        } else if (\r\n          position < column.rect.left &&\r\n          (this.isRTL ? columnOrder > sourceOrder : columnOrder < sourceOrder)\r\n        ) {\r\n          /*\r\n            La posicion actual del mouse está a la izquierda de la columna actual\r\n            haciendo que la columna arrastrada cruce la actual.\r\n          */\r\n          this.swapColumnPosition(column, shiftDirection);\r\n\r\n          // actualizo el orden de la columna actual\r\n          column.order = column.element.order + dragDirection;\r\n\r\n          if (\r\n            !targetOrder ||\r\n            (this.isRTL ? columnOrder > targetOrder : columnOrder < targetOrder)\r\n          ) {\r\n            targetOrder = columnOrder;\r\n          }\r\n        } else if (\r\n          position > column.rect.right &&\r\n          (this.isRTL ? columnOrder < sourceOrder : columnOrder > sourceOrder)\r\n        ) {\r\n          /*\r\n            La posicion actual del mouse está a la derecha de la columna actual\r\n            haciendo que la columna arrastrada cruce la actual.\r\n          */\r\n          this.swapColumnPosition(column, shiftDirection);\r\n\r\n          // actualizo el orden de la columna actual\r\n          column.order = column.element.order + dragDirection;\r\n\r\n          if (\r\n            !targetOrder ||\r\n            (this.isRTL ? columnOrder < targetOrder : columnOrder > targetOrder)\r\n          ) {\r\n            targetOrder = columnOrder;\r\n          }\r\n        } else if (columnOrder !== sourceOrder) {\r\n          /*\r\n            La posicion actual del mouse NO está dentro de la columna actual ni\r\n            la cruza.\r\n          */\r\n          this.resetColumnPosition(column);\r\n        }\r\n      });\r\n\r\n    this.column.order = targetOrder ? targetOrder : this.column.element.order;\r\n\r\n    targetOrderChanged = targetOrder !== this.lastTargetOrder;\r\n    this.lastTargetOrder = targetOrder;\r\n\r\n    return targetOrderChanged;\r\n  }\r\n\r\n  dragEnd() {\r\n    this.columns.forEach(column => {\r\n      column.element.order = column.order;\r\n      column.translateX = 0;\r\n    });\r\n  }\r\n\r\n  getColumnStyle(column: HTMLChTabularGridColumnElement): CSSProperties {\r\n    return {\r\n      [`--ch-tabular-grid-column-${column.physicalOrder}-transform`]: `translateX(${\r\n        this.columns.find(columnItem => columnItem.element === column)\r\n          .translateX\r\n      }px)`\r\n    };\r\n  }\r\n\r\n  getColumnsFirstLast(): {\r\n    columnFirst: HTMLChTabularGridColumnElement;\r\n    columnLast: HTMLChTabularGridColumnElement;\r\n  } {\r\n    let itemFirst: TabularGridManagerColumnDragItem;\r\n    let itemLast: TabularGridManagerColumnDragItem;\r\n\r\n    this.columns.forEach(item => {\r\n      if (\r\n        !item.element.hidden &&\r\n        (!itemFirst || item.order < itemFirst.order)\r\n      ) {\r\n        itemFirst = item;\r\n      }\r\n      if (!item.element.hidden && (!itemLast || item.order > itemLast.order)) {\r\n        itemLast = item;\r\n      }\r\n    });\r\n\r\n    return {\r\n      columnFirst: itemFirst.element,\r\n      columnLast: itemLast.element\r\n    };\r\n  }\r\n\r\n  private swapColumnPosition(\r\n    column: TabularGridManagerColumnDragItem,\r\n    shiftDirection: number\r\n  ) {\r\n    // desplazo la columna actual para ocupar el espacio que dejó\r\n    // la columna arrastrada\r\n    column.translateX = this.column.rect.width * shiftDirection;\r\n\r\n    // desplazo la columna que se está arrastrando para que ocupe el\r\n    // espacio que dejó la columna actual\r\n    this.column.translateX += column.rect.width * (shiftDirection * -1);\r\n  }\r\n\r\n  private resetColumnPosition(column: TabularGridManagerColumnDragItem) {\r\n    // no desplazo la columna actual\r\n    column.translateX = 0;\r\n\r\n    // asigno su posición original\r\n    column.order = column.element.order;\r\n  }\r\n\r\n  private setColumnHiddenRect(column: TabularGridManagerColumnDragItem) {\r\n    if (column.element.hidden) {\r\n      const columnSibling =\r\n        this.getPreviousSiblingVisible(column) ||\r\n        this.getNextSiblingVisible(column);\r\n\r\n      column.rect = new DOMRect(\r\n        column.element.order < columnSibling.element.order\r\n          ? columnSibling.rect.left\r\n          : columnSibling.rect.right,\r\n        columnSibling.rect.y,\r\n        0,\r\n        columnSibling.rect.height\r\n      );\r\n    }\r\n  }\r\n\r\n  private getPreviousSiblingVisible(\r\n    hidden: TabularGridManagerColumnDragItem\r\n  ): TabularGridManagerColumnDragItem {\r\n    let previous: TabularGridManagerColumnDragItem;\r\n\r\n    this.columns.forEach(column => {\r\n      if (\r\n        !column.element.hidden &&\r\n        column.element.order < hidden.element.order &&\r\n        (!previous || column.element.order > previous.element.order)\r\n      ) {\r\n        previous = column;\r\n      }\r\n    });\r\n\r\n    return previous;\r\n  }\r\n\r\n  private getNextSiblingVisible(\r\n    hidden: TabularGridManagerColumnDragItem\r\n  ): TabularGridManagerColumnDragItem {\r\n    let next: TabularGridManagerColumnDragItem;\r\n\r\n    this.columns.forEach(column => {\r\n      if (\r\n        !column.element.hidden &&\r\n        column.element.order > hidden.element.order &&\r\n        (!next || column.element.order < next.element.order)\r\n      ) {\r\n        next = column;\r\n      }\r\n    });\r\n\r\n    return next;\r\n  }\r\n}\r\n\r\ninterface TabularGridManagerColumnDragItem {\r\n  element: HTMLChTabularGridColumnElement;\r\n  rect: DOMRect;\r\n  translateX: number;\r\n  order: number;\r\n}\r\n","import HTMLChTabularGridCellElement, {\r\n  TabularGridCellType\r\n} from \"./cell/tabular-grid-cell\";\r\nimport { TabularGridManager } from \"./tabular-grid-manager\";\r\n\r\nexport class TabularGridManagerColumns {\r\n  private manager: TabularGridManager;\r\n  private columnsetObserver = new MutationObserver(\r\n    this.reloadColumns.bind(this)\r\n  );\r\n  private columnResizeObserver = new ResizeObserver(\r\n    this.resizeColumnHandler.bind(this)\r\n  );\r\n  private columns: HTMLChTabularGridColumnElement[];\r\n  private columnsDisplay: HTMLChTabularGridColumnDisplayElement[] = [];\r\n  private columnsWidth: number[] = [];\r\n\r\n  constructor(manager: TabularGridManager) {\r\n    this.manager = manager;\r\n    this.columns = Array.from(\r\n      this.manager.grid.querySelectorAll(\"ch-tabular-grid-column\")\r\n    );\r\n\r\n    this.observeColumnset();\r\n\r\n    this.defineColumns(this.columns);\r\n    this.defineColumnsVariables();\r\n\r\n    this.adjustFreezeOrder();\r\n    this.adjustBaseLayer();\r\n  }\r\n\r\n  public getColumn(columnId: string): HTMLChTabularGridColumnElement {\r\n    return this.columns.find(column => column.columnId === columnId);\r\n  }\r\n\r\n  public getColumns(sorted = false): HTMLChTabularGridColumnElement[] {\r\n    if (sorted) {\r\n      return this.columns.sort(this.fnSortByOrder);\r\n    }\r\n    return this.columns;\r\n  }\r\n\r\n  public getColumnsFirstLast(): {\r\n    columnFirst: HTMLChTabularGridColumnElement;\r\n    columnLast: HTMLChTabularGridColumnElement;\r\n  } {\r\n    let columnFirst: HTMLChTabularGridColumnElement;\r\n    let columnLast: HTMLChTabularGridColumnElement;\r\n\r\n    this.columns.forEach(column => {\r\n      if (\r\n        !column.hidden &&\r\n        (!columnFirst || column.order < columnFirst.order)\r\n      ) {\r\n        columnFirst = column;\r\n      }\r\n      if (!column.hidden && (!columnLast || column.order > columnLast.order)) {\r\n        columnLast = column;\r\n      }\r\n    });\r\n\r\n    return {\r\n      columnFirst,\r\n      columnLast\r\n    };\r\n  }\r\n\r\n  public getColumnSelector(): HTMLChTabularGridColumnElement {\r\n    return this.columns.find(\r\n      column => column.columnType === \"rich\" && column.richRowSelector\r\n    );\r\n  }\r\n\r\n  public adjustFreezeOrder() {\r\n    const freezeStart = this.columns\r\n      .filter(column => column.freeze === \"start\")\r\n      .sort(this.fnSortByOrder);\r\n    const noFreeze = this.columns\r\n      .filter(column => column.freeze !== \"start\" && column.freeze !== \"end\")\r\n      .sort(this.fnSortByOrder);\r\n    const freezeEnd = this.columns\r\n      .filter(column => column.freeze === \"end\")\r\n      .sort(this.fnSortByOrder);\r\n    let order = 1;\r\n\r\n    freezeStart.forEach(column => (column.order = order++));\r\n    noFreeze.forEach(column => (column.order = order++));\r\n    freezeEnd.forEach(column => (column.order = order++));\r\n  }\r\n\r\n  private defineColumns(columns: HTMLChTabularGridColumnElement[]) {\r\n    columns.forEach(column => {\r\n      this.defineColumnId(column);\r\n      this.defineColumnIndex(column);\r\n      this.defineColumnOrder(column);\r\n      this.defineColumnSize(column);\r\n      this.defineColumnDisplayObserver(column);\r\n      this.defineColumnResizeObserver(column);\r\n      this.defineColumnType(column);\r\n    });\r\n  }\r\n\r\n  private defineColumnId(column: HTMLChTabularGridColumnElement) {\r\n    column.columnId ||= this.getColumnUniqueId();\r\n  }\r\n\r\n  private defineColumnIndex(column: HTMLChTabularGridColumnElement) {\r\n    column.physicalOrder = this.columns.indexOf(column) + 1;\r\n  }\r\n\r\n  private defineColumnOrder(column: HTMLChTabularGridColumnElement) {\r\n    column.order ||= column.physicalOrder;\r\n  }\r\n\r\n  private defineColumnSize(column: HTMLChTabularGridColumnElement) {\r\n    column.size ||= \"auto\";\r\n  }\r\n\r\n  private defineColumnDisplayObserver(column: HTMLChTabularGridColumnElement) {\r\n    if (column.displayObserverClass && !column.hidden) {\r\n      const i =\r\n        this.columnsDisplay.push(\r\n          document.createElement(\"ch-tabular-grid-column-display\")\r\n        ) - 1;\r\n\r\n      this.columnsDisplay[i].setAttribute(\"slot\", \"column-display\");\r\n      this.columnsDisplay[i].setAttribute(\"class\", column.displayObserverClass);\r\n      this.columnsDisplay[i].column = column;\r\n\r\n      this.manager.grid.appendChild(this.columnsDisplay[i]);\r\n    }\r\n  }\r\n\r\n  private defineColumnResizeObserver(column: HTMLChTabularGridColumnElement) {\r\n    this.columnResizeObserver.observe(column, { box: \"border-box\" });\r\n  }\r\n\r\n  private defineColumnType(column: HTMLChTabularGridColumnElement) {\r\n    switch (column.columnType) {\r\n      case \"tree\":\r\n        this.manager.grid\r\n          .querySelectorAll(\r\n            `ch-tabular-grid-cell:nth-child(${column.physicalOrder})`\r\n          )\r\n          .forEach((cell: HTMLChTabularGridCellElement) => {\r\n            cell.type = TabularGridCellType.TreeNode;\r\n          });\r\n        break;\r\n      case \"rich\":\r\n        this.manager.grid\r\n          .querySelectorAll(\r\n            `ch-tabular-grid-cell:nth-child(${column.physicalOrder})`\r\n          )\r\n          .forEach((cell: HTMLChTabularGridCellElement) => {\r\n            cell.rowDrag = column.richRowDrag;\r\n            cell.rowSelector = column.richRowSelector;\r\n            cell.rowActions = column.richRowActions;\r\n            cell.type = TabularGridCellType.Rich;\r\n          });\r\n        break;\r\n    }\r\n  }\r\n\r\n  private defineColumnsVariables() {\r\n    const root: Document | ShadowRoot = this.manager.grid.getRootNode() as\r\n      | Document\r\n      | ShadowRoot;\r\n    const style = root.querySelector(\"#ch-tabular-grid-columns-variables\");\r\n\r\n    if (\r\n      !style ||\r\n      parseInt(style.getAttribute(\"data-columns\")) < this.columns.length\r\n    ) {\r\n      let selectors = \"\";\r\n      for (let i = 1; i <= this.columns.length; i++) {\r\n        selectors += `ch-tabular-grid-column:nth-child(${i}), ch-tabular-grid-cell:nth-child(${i}) {\r\n                        display: var(--ch-tabular-grid-column-${i}-display, flex);\r\n                        grid-column: var(--ch-tabular-grid-column-${i}-position, ${i});\r\n                        margin-inline-start: var(--ch-tabular-grid-column-${i}-margin-start);\r\n                        border-inline-start: var(--ch-tabular-grid-column-${i}-border-start);\r\n                        padding-inline-start: var(--ch-tabular-grid-column-${i}-padding-start);\r\n                        margin-inline-end: var(--ch-tabular-grid-column-${i}-margin-end);\r\n                        border-inline-end: var(--ch-tabular-grid-column-${i}-border-end);\r\n                        padding-inline-end: var(--ch-tabular-grid-column-${i}-padding-end);\r\n                        left: var(--ch-tabular-grid-column-${i}-left-freeze);\r\n                        right: var(--ch-tabular-grid-column-${i}-right-freeze);\r\n                    }\r\n                    ch-tabular-grid-column:nth-child(${i}) {\r\n                      transform: var(--ch-tabular-grid-column-${i}-transform);\r\n                      z-index: calc(var(--ch-tabular-grid-column-${i}-z-index-freeze, 0) + var(--ch-tabular-grid-column-z-index-head, 0)  + var(--ch-tabular-grid-column-z-index-active, 0));\r\n                    }\r\n                    ch-tabular-grid-cell:nth-child(${i}) {\r\n                      transform: var(--ch-tabular-grid-virtual-scroller-position,) var(--ch-tabular-grid-column-${i}-transform,);\r\n                      z-index: calc(var(--ch-tabular-grid-column-${i}-z-index-freeze, 0) + var(--ch-tabular-grid-cell-z-index-active, 0));\r\n                    }\r\n                    ch-tabular-grid-cell:nth-child(${i})::before {\r\n                      content: var(--ch-tabular-grid-column-${i}-content);\r\n                    }\r\n                `;\r\n      }\r\n\r\n      const styleInnerHTML = `@layer ch-tabular-grid {\r\n        ${selectors}\r\n      }`;\r\n\r\n      if (style) {\r\n        style.setAttribute(\"data-columns\", this.columns.length.toString());\r\n        style.innerHTML = styleInnerHTML;\r\n      } else if (root instanceof Document) {\r\n        root.head.insertAdjacentHTML(\r\n          \"beforeend\",\r\n          `<style id=\"ch-tabular-grid-columns-variables\" data-columns=\"${this.columns.length}\">${styleInnerHTML}</style>`\r\n        );\r\n      } else if (root instanceof ShadowRoot) {\r\n        const s = document.createElement(\"style\");\r\n        s.id = \"ch-tabular-grid-columns-variables\";\r\n        s.dataset.columns = this.columns.length.toString();\r\n        s.innerText = styleInnerHTML;\r\n        root.appendChild(s);\r\n      }\r\n    }\r\n  }\r\n\r\n  private undefineColumns(columns: HTMLChTabularGridColumnElement[]) {\r\n    columns.forEach(column => {\r\n      this.columnResizeObserver.unobserve(column);\r\n      this.columnsDisplay\r\n        .filter(columnDisplay => columnDisplay.column === column)\r\n        .forEach(item => {\r\n          item.remove();\r\n        });\r\n    });\r\n  }\r\n\r\n  private observeColumnset() {\r\n    this.columnsetObserver.observe(\r\n      this.manager.grid.querySelector(\"ch-tabular-grid-columnset\"),\r\n      { childList: true }\r\n    );\r\n  }\r\n\r\n  private reloadColumns() {\r\n    const columns = Array.from(\r\n      this.manager.grid.querySelectorAll(\"ch-tabular-grid-column\")\r\n    );\r\n    const columnsAdded = columns.filter(\r\n      column => !this.columns.includes(column)\r\n    );\r\n    const columnsRemoved = this.columns.filter(\r\n      column => !columns.includes(column)\r\n    );\r\n\r\n    if (columnsAdded.length || columnsRemoved.length) {\r\n      this.columns = columns;\r\n\r\n      this.undefineColumns(columnsRemoved);\r\n      this.defineColumns(columnsAdded);\r\n      this.defineColumnsVariables();\r\n\r\n      this.adjustOrders();\r\n      this.adjustBaseLayer();\r\n    }\r\n  }\r\n\r\n  private resizeColumnHandler(entries: ResizeObserverEntry[]) {\r\n    for (const entry of entries) {\r\n      const column = entry.target as HTMLChTabularGridColumnElement;\r\n      this.columnsWidth[column.physicalOrder - 1] = entry.contentRect.width;\r\n    }\r\n\r\n    this.manager.setColumnWidthVariables(this.columnsWidth);\r\n  }\r\n\r\n  private getColumnUniqueId(): string {\r\n    const uniqueId =\r\n      Date.now().toString(36) + Math.random().toString(36).substring(2);\r\n\r\n    return `ch-tabular-grid-column-auto-${uniqueId}`;\r\n  }\r\n\r\n  private adjustOrders() {\r\n    // adjust physicalOrder\r\n    this.columns.forEach((column, i) => (column.physicalOrder = i + 1));\r\n\r\n    // adjust order, preserving physicalOrder array\r\n    [...this.columns].sort(this.fnSortByOrder).forEach((column, i) => {\r\n      column.order = i + 1;\r\n    });\r\n  }\r\n\r\n  private adjustBaseLayer() {\r\n    this.manager.setBaseLayer(this.columns.length);\r\n  }\r\n\r\n  private fnSortByOrder(\r\n    columnA: HTMLChTabularGridColumnElement,\r\n    columnB: HTMLChTabularGridColumnElement\r\n  ): number {\r\n    if (columnA.order < columnB.order) {\r\n      return -1;\r\n    }\r\n    if (columnA.order > columnB.order) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n}\r\n","import HTMLChTabularGridCellElement from \"./cell/tabular-grid-cell\";\r\nimport HTMLChTabularGridRowElement from \"./row/tabular-grid-row\";\r\nimport { TabularGridManager } from \"./tabular-grid-manager\";\r\n\r\nexport type ManagerSelectionState = {\r\n  rowFocused: HTMLChTabularGridRowElement;\r\n  rowsSelected: HTMLChTabularGridRowElement[];\r\n  cellFocused: HTMLChTabularGridCellElement;\r\n  cellSelected: HTMLChTabularGridCellElement;\r\n};\r\n\r\nexport class TabularGridManagerSelection {\r\n  private manager: TabularGridManager;\r\n  private rangeStart: HTMLChTabularGridRowElement;\r\n  private rangeValue: boolean;\r\n  private lastSelected: HTMLChTabularGridRowElement;\r\n  private lastRowMarked: HTMLChTabularGridRowElement;\r\n  private selectionStateNone: ManagerSelectionState = {\r\n    rowFocused: null,\r\n    rowsSelected: [],\r\n    cellFocused: null,\r\n    cellSelected: null\r\n  };\r\n  private touch: {\r\n    clientX: number;\r\n    clientY: number;\r\n  };\r\n\r\n  selecting: boolean;\r\n  selectingRow: HTMLChTabularGridRowElement;\r\n  selectingCell: HTMLChTabularGridCellElement;\r\n\r\n  constructor(manager: TabularGridManager) {\r\n    this.manager = manager;\r\n  }\r\n\r\n  touchStart(touchEvent: TouchEvent) {\r\n    this.touch = {\r\n      clientX: touchEvent.touches[0].clientX,\r\n      clientY: touchEvent.touches[0].clientY\r\n    };\r\n  }\r\n\r\n  isTouchEndSelection(touchEvent: TouchEvent): boolean {\r\n    return (\r\n      Math.abs(this.touch.clientX - touchEvent.changedTouches[0].clientX) <\r\n        10 &&\r\n      Math.abs(this.touch.clientY - touchEvent.changedTouches[0].clientY) <\r\n        10 &&\r\n      touchEvent.cancelable\r\n    );\r\n  }\r\n\r\n  select(\r\n    state: ManagerSelectionState,\r\n    row: HTMLChTabularGridRowElement,\r\n    cell: HTMLChTabularGridCellElement,\r\n    select: boolean,\r\n    append: boolean,\r\n    range: boolean,\r\n    rangeStartOn: \"focus\" | \"last-selected\",\r\n    context: boolean\r\n  ): ManagerSelectionState {\r\n    const grid = this.manager.grid;\r\n\r\n    if (\r\n      grid.keyboardNavigationMode === \"none\" &&\r\n      grid.rowSelectionMode === \"none\"\r\n    ) {\r\n      return this.selectionStateNone;\r\n    }\r\n    if (grid.rowSelectionMode === \"none\") {\r\n      select = false;\r\n    }\r\n    if (grid.rowSelectionMode !== \"multiple\") {\r\n      append = false;\r\n      range = false;\r\n    }\r\n    if (!row) {\r\n      return state;\r\n    }\r\n\r\n    let { rowFocused, rowsSelected, cellFocused, cellSelected } = state;\r\n\r\n    rowFocused = row;\r\n    cellFocused = cell;\r\n    if (range) {\r\n      if (!this.rangeStart) {\r\n        if (rangeStartOn === \"focus\") {\r\n          this.rangeStart = state.rowFocused;\r\n          this.rangeValue = append ? !state.rowFocused.selected : true;\r\n        } else if (rangeStartOn === \"last-selected\") {\r\n          this.rangeStart = this.lastSelected ?? state.rowFocused;\r\n          this.rangeValue = append ? this.lastSelected.selected : true;\r\n        }\r\n      }\r\n\r\n      const rangeRows = this.manager.getRowsRange(this.rangeStart ?? row, row);\r\n\r\n      if (this.rangeValue) {\r\n        if (append) {\r\n          rowsSelected = Array.from(new Set(rowsSelected.concat(rangeRows)));\r\n        } else {\r\n          rowsSelected = this.preserveInstanceIfSame(\r\n            rangeRows,\r\n            state.rowsSelected\r\n          );\r\n        }\r\n        cellSelected =\r\n          cell ||\r\n          row.getCell(cellSelected?.column || this.manager.getFirstColumn());\r\n      } else {\r\n        rowsSelected = rowsSelected.filter(\r\n          rowSelected => !rangeRows.includes(rowSelected)\r\n        );\r\n        cellSelected = null;\r\n      }\r\n    } else if (append) {\r\n      this.rangeStart = null;\r\n      this.lastSelected = row;\r\n\r\n      if (rowsSelected.includes(row)) {\r\n        rowsSelected = rowsSelected.filter(rowSelected => rowSelected !== row);\r\n        cellSelected = state.cellSelected?.row === row ? null : cellSelected;\r\n      } else {\r\n        rowsSelected = [...rowsSelected, row];\r\n        cellSelected =\r\n          cell ||\r\n          row.getCell(cellSelected?.column || this.manager.getFirstColumn());\r\n      }\r\n    } else if (select) {\r\n      this.rangeStart = null;\r\n      this.lastSelected = row;\r\n\r\n      if (!(context && state.rowsSelected.includes(row))) {\r\n        rowsSelected = this.preserveInstanceIfSame([row], state.rowsSelected);\r\n      }\r\n      cellSelected =\r\n        cell ||\r\n        row.getCell(cellSelected?.column || this.manager.getFirstColumn());\r\n    } else {\r\n      this.rangeStart = null;\r\n    }\r\n\r\n    return { rowFocused, rowsSelected, cellFocused, cellSelected };\r\n  }\r\n\r\n  selectAll(state: ManagerSelectionState, value = true): ManagerSelectionState {\r\n    if (this.manager.grid.rowSelectionMode === \"none\") {\r\n      return this.selectionStateNone;\r\n    }\r\n\r\n    const rows = this.manager.getRows();\r\n    let rowFocused = state.rowFocused;\r\n    let rowsSelected = state.rowsSelected;\r\n    let cellFocused = state.cellFocused;\r\n    let cellSelected = state.cellSelected;\r\n\r\n    rowFocused ??= this.manager.getFirstRow();\r\n    cellFocused ??= rowFocused?.getCell(\r\n      state.cellFocused?.column || this.manager.getFirstColumn()\r\n    );\r\n\r\n    if (value) {\r\n      rowsSelected = rows;\r\n      cellSelected = cellFocused;\r\n    } else {\r\n      rowsSelected = [];\r\n      cellSelected = null;\r\n    }\r\n\r\n    return { rowFocused, rowsSelected, cellFocused, cellSelected };\r\n  }\r\n\r\n  selectSet(\r\n    state: ManagerSelectionState,\r\n    row: HTMLChTabularGridRowElement,\r\n    cell: HTMLChTabularGridCellElement,\r\n    value = true\r\n  ): ManagerSelectionState {\r\n    let append = true;\r\n\r\n    if (this.manager.grid.rowSelectionMode === \"none\") {\r\n      return this.selectionStateNone;\r\n    }\r\n    if (this.manager.grid.rowSelectionMode !== \"multiple\") {\r\n      append = false;\r\n    }\r\n\r\n    let rowFocused = state.rowFocused;\r\n    let rowsSelected = state.rowsSelected;\r\n    let cellFocused = state.cellFocused;\r\n    let cellSelected = state.cellSelected;\r\n\r\n    rowFocused = row;\r\n    cellFocused = cell;\r\n    if (value) {\r\n      if (append) {\r\n        rowsSelected = rowsSelected.includes(row)\r\n          ? rowsSelected\r\n          : [...rowsSelected, row];\r\n      } else {\r\n        rowsSelected = rowsSelected.includes(row) ? rowsSelected : [row];\r\n      }\r\n      cellSelected = cell;\r\n    } else {\r\n      rowsSelected = !rowsSelected.includes(row)\r\n        ? rowsSelected\r\n        : rowsSelected.filter(rowSelected => rowSelected !== row);\r\n      cellSelected = null;\r\n    }\r\n\r\n    return { rowFocused, rowsSelected, cellFocused, cellSelected };\r\n  }\r\n\r\n  moveFirstRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const firstRow = this.manager.getFirstRow();\r\n\r\n    if (firstRow) {\r\n      return this.select(\r\n        state,\r\n        firstRow,\r\n        firstRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  movePreviousRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const previousRow = this.manager.getPreviousRow(state.rowFocused);\r\n\r\n    if (previousRow) {\r\n      return this.select(\r\n        state,\r\n        previousRow,\r\n        previousRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveNextRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const nextRow = this.manager.getNextRow(state.rowFocused);\r\n\r\n    if (nextRow) {\r\n      return this.select(\r\n        state,\r\n        nextRow,\r\n        nextRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveLastRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const lastRow = this.manager.getLastRow();\r\n\r\n    if (lastRow) {\r\n      return this.select(\r\n        state,\r\n        lastRow,\r\n        lastRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  movePreviousPageRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const rows = this.manager.getRows();\r\n    const rowsPerPage = this.manager.getRowsPerPage();\r\n    const previousPageRow =\r\n      rows[Math.max(rows.indexOf(state.rowFocused) - rowsPerPage, 0)];\r\n\r\n    if (previousPageRow) {\r\n      return this.select(\r\n        state,\r\n        previousPageRow,\r\n        previousPageRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveNextPageRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const rows = this.manager.getRows();\r\n    const rowsPerPage = this.manager.getRowsPerPage();\r\n    const nextPageRow =\r\n      rows[\r\n        Math.min(rows.indexOf(state.rowFocused) + rowsPerPage, rows.length - 1)\r\n      ];\r\n\r\n    if (nextPageRow) {\r\n      return this.select(\r\n        state,\r\n        nextPageRow,\r\n        nextPageRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  movePreviousCell(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean\r\n  ): ManagerSelectionState {\r\n    const previousCell = this.manager.getPreviousCell(state.cellFocused);\r\n\r\n    if (previousCell) {\r\n      return this.select(\r\n        state,\r\n        state.rowFocused,\r\n        previousCell,\r\n        select,\r\n        false,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveNextCell(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean\r\n  ): ManagerSelectionState {\r\n    const nextCell = this.manager.getNextCell(state.cellFocused);\r\n\r\n    if (nextCell) {\r\n      return this.select(\r\n        state,\r\n        state.rowFocused,\r\n        nextCell,\r\n        select,\r\n        false,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  markRow(\r\n    row: HTMLChTabularGridRowElement,\r\n    checked: boolean,\r\n    range: boolean,\r\n    currentRowsMarked: HTMLChTabularGridRowElement[]\r\n  ): HTMLChTabularGridRowElement[] {\r\n    if (row) {\r\n      if (range) {\r\n        const value = !row.marked;\r\n        const rows = this.manager.getRowsRange(this.lastRowMarked ?? row, row);\r\n\r\n        this.lastRowMarked = row;\r\n\r\n        if (value) {\r\n          return currentRowsMarked.concat(\r\n            rows.filter(row => !currentRowsMarked.includes(row))\r\n          );\r\n        }\r\n        return currentRowsMarked.filter(row => !rows.includes(row));\r\n      }\r\n      this.lastRowMarked = row;\r\n\r\n      if (checked && !currentRowsMarked.includes(row)) {\r\n        return currentRowsMarked.concat([row]);\r\n      }\r\n      if (!checked && currentRowsMarked.includes(row)) {\r\n        return currentRowsMarked.filter(r => r !== row);\r\n      }\r\n    }\r\n\r\n    return currentRowsMarked;\r\n  }\r\n\r\n  markRows(\r\n    rowFocused: HTMLChTabularGridRowElement,\r\n    rowsMarked: HTMLChTabularGridRowElement[],\r\n    rowsSelected: HTMLChTabularGridRowElement[]\r\n  ): HTMLChTabularGridRowElement[] {\r\n    const rows = rowsSelected.includes(rowFocused)\r\n      ? rowsSelected\r\n      : [rowFocused];\r\n\r\n    if (rows.some(row => !row.marked)) {\r\n      return Array.from(new Set(rowsMarked.concat(rows)));\r\n    }\r\n    return rowsMarked.filter(row => !rows.includes(row));\r\n  }\r\n\r\n  markAllRows(value = true): HTMLChTabularGridRowElement[] {\r\n    if (value) {\r\n      return this.manager.getRows();\r\n    }\r\n    return [];\r\n  }\r\n\r\n  syncRowSelector(\r\n    rows: HTMLChTabularGridRowElement[],\r\n    previous: HTMLChTabularGridRowElement[] = [],\r\n    selectorMode: \"select\" | \"mark\"\r\n  ) {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === selectorMode) {\r\n      const indexColumnSelector = columnSelector.physicalOrder - 1;\r\n\r\n      previous\r\n        ?.filter(x => !rows.includes(x))\r\n        .forEach(row => {\r\n          row.marked = false;\r\n          const cell = row.children[\r\n            indexColumnSelector\r\n          ] as HTMLChTabularGridCellElement;\r\n          cell.setSelectorChecked(false);\r\n        });\r\n\r\n      rows?.forEach(row => {\r\n        row.marked = columnSelector.richRowSelectorMode === \"mark\";\r\n        const cell = row.children[\r\n          indexColumnSelector\r\n        ] as HTMLChTabularGridCellElement;\r\n        cell.setSelectorChecked(true);\r\n      });\r\n\r\n      this.syncColumnSelector(rows.length, columnSelector);\r\n    }\r\n  }\r\n\r\n  syncColumnSelector(\r\n    length: number,\r\n    columnSelector?: HTMLChTabularGridColumnElement\r\n  ) {\r\n    columnSelector ??= this.manager.columns.getColumnSelector();\r\n\r\n    if (length === 0) {\r\n      columnSelector.richRowSelectorState = \"\";\r\n    } else if (length === this.manager.getRows().length) {\r\n      columnSelector.richRowSelectorState = \"checked\";\r\n    } else {\r\n      columnSelector.richRowSelectorState = \"indeterminate\";\r\n    }\r\n  }\r\n\r\n  private preserveInstanceIfSame(\r\n    newSelection: HTMLChTabularGridRowElement[],\r\n    oldSelection: HTMLChTabularGridRowElement[]\r\n  ): HTMLChTabularGridRowElement[] {\r\n    return newSelection.length === oldSelection.length &&\r\n      newSelection.every(item => oldSelection.includes(item))\r\n      ? oldSelection\r\n      : newSelection;\r\n  }\r\n}\r\n","import HTMLChTabularGridRowElement from \"./row/tabular-grid-row\";\r\nimport HTMLChTabularGridCellElement from \"./cell/tabular-grid-cell\";\r\nimport { TabularGridManager } from \"./tabular-grid-manager\";\r\n\r\nexport class TabularGridManagerRowDrag {\r\n  private readonly manager: TabularGridManager;\r\n  private row: HTMLChTabularGridRowElement;\r\n  private rowIndex: number;\r\n  private rowShadow: HTMLDivElement;\r\n  private dragMouseMoveFn = this.dragMouseMoveHandler.bind(this);\r\n\r\n  constructor(manager: TabularGridManager) {\r\n    this.manager = manager;\r\n  }\r\n\r\n  public dragStart(row: HTMLChTabularGridRowElement) {\r\n    this.row = row;\r\n    this.rowIndex = this.manager.getGridRowIndex(row);\r\n\r\n    this.defineListeners();\r\n    this.createRowShadow();\r\n    this.floatRow();\r\n    this.updateRowPosition();\r\n  }\r\n\r\n  private dragMouseMoveHandler(eventInfo: MouseEvent) {\r\n    const target = eventInfo.target as HTMLElement;\r\n    const rowHover = target.closest(\r\n      \"ch-tabular-grid-row\"\r\n    ) as HTMLChTabularGridRowElement;\r\n\r\n    if (\r\n      rowHover &&\r\n      rowHover.parentElement === this.row.parentElement &&\r\n      rowHover.grid === this.manager.grid\r\n    ) {\r\n      const rowHoverIndex = this.manager.getGridRowIndex(rowHover);\r\n      const rowHoverGridPosition = rowHoverIndex + 2; // +1 RowHeaderColumn, +1 array start at 1\r\n      const offsetPosition = this.rowIndex < rowHoverIndex ? -1 : 1;\r\n\r\n      if (\r\n        this.rowShadow.style.getPropertyValue(\"--row-shadow-row-start\") !==\r\n        `${rowHoverGridPosition}`\r\n      ) {\r\n        this.rowShadow.style.setProperty(\r\n          \"--row-shadow-row-start\",\r\n          `${rowHoverGridPosition}`\r\n        );\r\n      } else {\r\n        this.rowShadow.style.setProperty(\r\n          \"--row-shadow-row-start\",\r\n          `${rowHoverGridPosition + offsetPosition}`\r\n        );\r\n      }\r\n\r\n      this.updateRowPosition();\r\n    }\r\n  }\r\n\r\n  private dragMouseUpHandler() {\r\n    document.removeEventListener(\"mousemove\", this.dragMouseMoveFn);\r\n\r\n    const dropPosition = parseInt(\r\n      this.rowShadow.style.getPropertyValue(\"--row-shadow-row-start\")\r\n    );\r\n    const rowDrop = this.manager.grid\r\n      .querySelectorAll(\"ch-tabular-grid-row\")\r\n      .item(dropPosition - 2);\r\n\r\n    if (dropPosition < this.rowIndex + 2) {\r\n      rowDrop.before(this.row);\r\n    }\r\n    if (dropPosition > this.rowIndex + 2) {\r\n      rowDrop.after(this.row);\r\n    }\r\n\r\n    this.unfloatRow();\r\n    this.rowShadow.remove();\r\n\r\n    this.row = null;\r\n    this.rowShadow = null;\r\n  }\r\n\r\n  private defineListeners() {\r\n    document.addEventListener(\"mousemove\", this.dragMouseMoveFn, {\r\n      passive: true\r\n    });\r\n    document.addEventListener(\"mouseup\", this.dragMouseUpHandler.bind(this), {\r\n      once: true\r\n    });\r\n  }\r\n\r\n  private createRowShadow() {\r\n    const rowHeight = this.manager.getRowHeight(this.row);\r\n\r\n    this.rowShadow = document.createElement(\"div\");\r\n    this.rowShadow.style.display = \"contents\";\r\n\r\n    this.manager.getColumnsWidth().forEach(width => {\r\n      const column = document.createElement(\"div\");\r\n\r\n      column.style.opacity = \"0\";\r\n      column.style.minWidth = width;\r\n      column.style.height = `${rowHeight}px`;\r\n      column.style.gridRowStart = \"var(--row-shadow-row-start)\";\r\n\r\n      this.rowShadow.append(column);\r\n    });\r\n  }\r\n\r\n  private floatRow() {\r\n    const columnsWidth = this.manager.getColumnsWidth();\r\n    const rowWidth = this.manager.gridLayout.clientWidth;\r\n\r\n    this.row.before(this.rowShadow);\r\n    this.row.setAttribute(\"dragging\", \"\");\r\n    this.row.style.width = `${rowWidth}px`;\r\n\r\n    this.row\r\n      .querySelectorAll(\":scope > ch-tabular-grid-cell\")\r\n      .forEach((cell: HTMLChTabularGridCellElement, i) => {\r\n        const columnPosition = parseInt(\r\n          this.manager.gridLayout.style.getPropertyValue(\r\n            `--ch-tabular-grid-column-${i + 1}-position`\r\n          )\r\n        );\r\n\r\n        if (!cell.hidden) {\r\n          cell.style.width = columnsWidth[columnPosition - 1];\r\n          cell.style.order = `${columnPosition}`;\r\n        }\r\n      });\r\n  }\r\n\r\n  private unfloatRow() {\r\n    this.row.removeAttribute(\"dragging\");\r\n    this.row.style.width = \"\";\r\n\r\n    this.row\r\n      .querySelectorAll(\":scope > ch-tabular-grid-cell\")\r\n      .forEach((cell: HTMLChTabularGridCellElement) => {\r\n        cell.style.width = \"\";\r\n        cell.style.order = \"\";\r\n      });\r\n  }\r\n\r\n  private updateRowPosition() {\r\n    const rect = this.rowShadow.children[0].getBoundingClientRect();\r\n\r\n    this.row.style.top = `${rect.top}px`;\r\n    this.row.style.left = `${rect.left}px`;\r\n  }\r\n}\r\n","import { TabularGridManager } from \"./tabular-grid-manager\";\r\n\r\nexport class TabularGridManagerRowActions {\r\n  private readonly manager: TabularGridManager;\r\n\r\n  showOnRowHover: HTMLChTabularGridRowActionsElement;\r\n  showOnRowActions: HTMLChTabularGridRowActionsElement;\r\n  showOnRowContext: HTMLChTabularGridRowActionsElement;\r\n\r\n  constructor(manager: TabularGridManager) {\r\n    this.manager = manager;\r\n    this.manager.grid\r\n      .querySelectorAll(\"ch-tabular-grid-row-actions\")\r\n      ?.forEach(rowActions => {\r\n        if (rowActions.showOnRowHover) {\r\n          this.showOnRowHover = rowActions;\r\n        }\r\n        if (rowActions.showOnRowActions) {\r\n          this.showOnRowActions = rowActions;\r\n        }\r\n        if (rowActions.showOnRowContext) {\r\n          this.showOnRowContext = rowActions;\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { TabularGridManager } from \"./tabular-grid-manager\";\r\n\r\nexport class TabularGridManagerColumnResize {\r\n  private manager: TabularGridManager;\r\n  private column: HTMLChTabularGridColumnElement;\r\n  private columnWidthStart: number;\r\n  private columnSizeStart: CssValue;\r\n  private columnAfter: HTMLChTabularGridColumnElement;\r\n  private columnAfterWidthStart: number;\r\n  private columnAfterSizeStart: CssValue;\r\n  private dragDirection: number;\r\n  private resizingFn: (deltaWidth: number) => void;\r\n  private resizeEndFn: () => void;\r\n\r\n  constructor(manager: TabularGridManager, columnId: string, isRTL: boolean) {\r\n    this.manager = manager;\r\n    this.dragDirection = isRTL ? -1 : 1;\r\n\r\n    if (this.manager.grid.columnResizeMode === \"splitter\") {\r\n      this.resizingFn = this.resizingSplitter;\r\n      this.resizeEndFn = this.resizeEndSplitter;\r\n    } else {\r\n      this.resizingFn = this.resizingSingle;\r\n      this.resizeEndFn = null;\r\n    }\r\n\r\n    this.column = this.manager.columns.getColumn(columnId);\r\n    this.columnWidthStart = this.column.getBoundingClientRect().width;\r\n    this.columnSizeStart = this.parseCSSValue(this.column.size);\r\n\r\n    this.columnAfter = this.manager.getNextColumn(this.column);\r\n    this.columnAfterWidthStart =\r\n      this.columnAfter?.getBoundingClientRect().width;\r\n    this.columnAfterSizeStart = this.parseCSSValue(this.columnAfter.size);\r\n  }\r\n\r\n  resizing(deltaWidth: number) {\r\n    this.resizingFn(deltaWidth);\r\n  }\r\n\r\n  resizeEnd() {\r\n    if (this.resizeEndFn) {\r\n      this.resizeEndFn();\r\n    }\r\n  }\r\n\r\n  private resizingSingle = (deltaWidth: number) => {\r\n    const columnWidth = this.columnWidthStart - deltaWidth * this.dragDirection;\r\n    if (columnWidth >= 0) {\r\n      this.column.size = `minmax(min-content, ${columnWidth}px)`;\r\n    }\r\n  };\r\n\r\n  private resizingSplitter = (deltaWidth: number) => {\r\n    const columnWidth = this.columnWidthStart - deltaWidth * this.dragDirection;\r\n    if (columnWidth >= 0) {\r\n      if (this.columnSizeStart) {\r\n        this.column.size = this.convertUnit(\r\n          this.columnSizeStart,\r\n          this.columnWidthStart,\r\n          columnWidth\r\n        );\r\n      } else {\r\n        this.column.size = `minmax(min-content, ${columnWidth}px)`;\r\n      }\r\n    }\r\n\r\n    if (this.columnAfter) {\r\n      const columnAfterWidth =\r\n        this.columnAfterWidthStart + deltaWidth * this.dragDirection;\r\n      if (columnAfterWidth >= 0) {\r\n        if (this.columnAfterSizeStart) {\r\n          this.columnAfter.size = this.convertUnit(\r\n            this.columnAfterSizeStart,\r\n            this.columnAfterWidthStart,\r\n            columnAfterWidth\r\n          );\r\n        } else {\r\n          this.columnAfter.size = `minmax(min-content, ${columnAfterWidth}px)`;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private resizeEndSplitter() {\r\n    const columnWidthEnd = this.column.getBoundingClientRect().width;\r\n    this.column.size = this.convertUnit(\r\n      this.columnSizeStart,\r\n      this.columnWidthStart,\r\n      columnWidthEnd\r\n    );\r\n\r\n    if (this.columnAfter) {\r\n      const columnAfterWidthEnd =\r\n        this.columnAfterWidthStart - (columnWidthEnd - this.columnWidthStart);\r\n      this.columnAfter.size = this.convertUnit(\r\n        this.columnSizeStart,\r\n        this.columnWidthStart,\r\n        columnAfterWidthEnd\r\n      );\r\n    }\r\n  }\r\n\r\n  private parseCSSValue(cssValue: string): CssValue {\r\n    const match = cssValue.match(/([+-]?[\\d.]+)([\\w%]+)/);\r\n    if (match) {\r\n      const number = parseFloat(match[1]);\r\n      const unit = match[2];\r\n      return { number, unit };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private convertUnit(\r\n    startSize: CssValue,\r\n    startWidth: number,\r\n    newWidth: number\r\n  ): string {\r\n    return `${(newWidth * startSize.number) / startWidth}${startSize.unit}`;\r\n  }\r\n}\r\n\r\ntype CssValue = {\r\n  number: number;\r\n  unit: string;\r\n};\r\n","import { ITabularGridCollapsible, CSSProperties } from \"./tabular-grid-types\";\r\nimport { TabularGridManagerColumnDrag } from \"./tabular-grid-manager-column-drag\";\r\n\r\nimport HTMLChTabularGridRowElement from \"./row/tabular-grid-row\";\r\nimport { TabularGridManagerColumns } from \"./tabular-grid-manager-columns\";\r\nimport HTMLChTabularGridCellElement from \"./cell/tabular-grid-cell\";\r\nimport { TabularGridManagerSelection } from \"./tabular-grid-manager-selection\";\r\nimport { TabularGridManagerRowDrag } from \"./tabular-grid-manager-row-drag\";\r\nimport { TabularGridManagerRowActions } from \"./tabular-grid-manager-row-actions\";\r\nimport { adoptCommonThemes } from \"../../common/theme\";\r\nimport { TabularGridManagerColumnResize } from \"./tabular-grid-manager-column-resize\";\r\n\r\nenum StyleRule {\r\n  BASE_LAYER,\r\n  COLUMNS_WIDTH\r\n}\r\n\r\nexport class TabularGridManager {\r\n  private styleSheet = new CSSStyleSheet();\r\n  private gridLayoutElement: HTMLElement;\r\n  private columnDragManager: TabularGridManagerColumnDrag;\r\n  private columnResizeManager: TabularGridManagerColumnResize;\r\n  private rowDragManager: TabularGridManagerRowDrag;\r\n\r\n  readonly grid: HTMLChTabularGridElement;\r\n  readonly selection: TabularGridManagerSelection;\r\n  readonly columns: TabularGridManagerColumns;\r\n  readonly rowActions: TabularGridManagerRowActions;\r\n\r\n  constructor(grid: HTMLChTabularGridElement) {\r\n    this.grid = grid;\r\n\r\n    this.styleSheet.insertRule(`:host {}`, StyleRule.BASE_LAYER);\r\n    this.styleSheet.insertRule(\".main {}\", StyleRule.COLUMNS_WIDTH);\r\n    this.grid.shadowRoot.adoptedStyleSheets.push(this.styleSheet);\r\n    adoptCommonThemes(this.grid.shadowRoot.adoptedStyleSheets);\r\n\r\n    this.columns = new TabularGridManagerColumns(this);\r\n    this.selection = new TabularGridManagerSelection(this);\r\n    this.rowActions = new TabularGridManagerRowActions(this);\r\n  }\r\n\r\n  get gridLayout(): HTMLElement {\r\n    return this.gridLayoutElement;\r\n  }\r\n\r\n  componentDidLoad(gridLayout: HTMLElement) {\r\n    this.gridLayoutElement = gridLayout;\r\n  }\r\n\r\n  getColumns() {\r\n    return this.columns.getColumns();\r\n  }\r\n\r\n  getColumnsWidth(): string[] {\r\n    return getComputedStyle(this.gridLayout).gridTemplateColumns.split(\" \");\r\n  }\r\n\r\n  getColumnsetHeight(): number {\r\n    const gridColumnsHeight = getComputedStyle(\r\n      this.gridLayout\r\n    ).gridTemplateRows.split(\" \");\r\n\r\n    return parseInt(gridColumnsHeight[0]) || 0;\r\n  }\r\n\r\n  getFirstColumn(): HTMLChTabularGridColumnElement {\r\n    return this.columns.getColumnsFirstLast().columnFirst;\r\n  }\r\n\r\n  getFirstRow(): HTMLChTabularGridRowElement {\r\n    return this.grid.querySelector(\"ch-tabular-grid-row\");\r\n  }\r\n\r\n  getScrollOffsetTop(): number {\r\n    return this.gridLayout.offsetTop + this.getColumnsetHeight();\r\n  }\r\n\r\n  getScrollOffsetLeft(): number {\r\n    return this.columns.getColumns(true).reduce((offsetRight, column) => {\r\n      return column.freeze === \"start\" && !column.hidden\r\n        ? offsetRight + column.offsetWidth\r\n        : offsetRight;\r\n    }, 0);\r\n  }\r\n\r\n  getScrollOffsetRight(): number {\r\n    return this.columns.getColumns(true).reduce((offsetRight, column) => {\r\n      return column.freeze === \"end\" && !column.hidden\r\n        ? offsetRight + column.offsetWidth\r\n        : offsetRight;\r\n    }, 0);\r\n  }\r\n\r\n  getPreviousRow(\r\n    current: HTMLChTabularGridRowElement\r\n  ): HTMLChTabularGridRowElement {\r\n    const rows = this.getRows();\r\n    const i = rows.indexOf(current);\r\n\r\n    return rows\r\n      .slice(0, i)\r\n      .reverse()\r\n      .find(row => row.isVisible());\r\n  }\r\n\r\n  getNextRow(\r\n    current: HTMLChTabularGridRowElement\r\n  ): HTMLChTabularGridRowElement {\r\n    const rows = this.getRows();\r\n    const i = rows.indexOf(current);\r\n\r\n    return rows.slice(i + 1).find(row => row.isVisible());\r\n  }\r\n\r\n  getLastRow(): HTMLChTabularGridRowElement {\r\n    const rows = this.getRows();\r\n\r\n    return rows.reverse().find(row => row.isVisible());\r\n  }\r\n\r\n  getPreviousColumn(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): HTMLChTabularGridColumnElement {\r\n    return this.columns.getColumns().reduce((previous, current) => {\r\n      return current.order < column.order &&\r\n        !current.hidden &&\r\n        (!previous || current.order > previous.order)\r\n        ? current\r\n        : previous;\r\n    }, null);\r\n  }\r\n\r\n  getNextColumn(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): HTMLChTabularGridColumnElement {\r\n    return this.columns.getColumns().reduce((previous, current) => {\r\n      return current.order > column.order &&\r\n        !current.hidden &&\r\n        (!previous || current.order < previous.order)\r\n        ? current\r\n        : previous;\r\n    }, null);\r\n  }\r\n\r\n  getPreviousCell(\r\n    current: HTMLChTabularGridCellElement\r\n  ): HTMLChTabularGridCellElement | void {\r\n    const previousColumn = this.getPreviousColumn(current.column);\r\n\r\n    if (previousColumn) {\r\n      return current.row.querySelector(\r\n        `:scope > ch-tabular-grid-cell:nth-of-type(${previousColumn.physicalOrder})`\r\n      ) as HTMLChTabularGridCellElement;\r\n    }\r\n  }\r\n\r\n  getNextCell(\r\n    current: HTMLChTabularGridCellElement\r\n  ): HTMLChTabularGridCellElement | void {\r\n    const nextColumn = this.getNextColumn(current.column);\r\n\r\n    if (nextColumn) {\r\n      return current.row.querySelector(\r\n        `:scope > ch-tabular-grid-cell:nth-of-type(${nextColumn.physicalOrder})`\r\n      ) as HTMLChTabularGridCellElement;\r\n    }\r\n  }\r\n\r\n  getGridRowIndex(row: HTMLChTabularGridRowElement): number {\r\n    return Array.prototype.indexOf.call(\r\n      this.grid.querySelectorAll(\r\n        \"ch-tabular-grid-row, ch-tabular-grid-rowset-legend\"\r\n      ),\r\n      row\r\n    );\r\n  }\r\n\r\n  getRowsetRowIndex(row: HTMLChTabularGridRowElement): number {\r\n    return Array.prototype.indexOf.call(row.parentElement.children, row);\r\n  }\r\n\r\n  getRowHeight(row: HTMLChTabularGridRowElement): number {\r\n    const gridRowsHeight = getComputedStyle(\r\n      this.gridLayout\r\n    ).gridTemplateRows.split(\" \");\r\n    const rowIndex = this.getGridRowIndex(row) + 1;\r\n\r\n    return parseInt(gridRowsHeight[rowIndex]) || 0;\r\n  }\r\n\r\n  getRowsPerPage(): number {\r\n    const gridHeight = this.gridLayout.clientHeight;\r\n    const columnsHeight = this.getColumnsetHeight();\r\n    const rowHeight = this.getRowHeight(this.getFirstRow());\r\n\r\n    return Math.floor((gridHeight - columnsHeight) / rowHeight);\r\n  }\r\n\r\n  getRow(rowId: string): HTMLChTabularGridRowElement {\r\n    return this.grid.querySelector(`ch-tabular-grid-row[rowid=\"${rowId}\"]`);\r\n  }\r\n\r\n  getRows(state: \"all\" | \"visible\" = \"all\"): HTMLChTabularGridRowElement[] {\r\n    const rows = Array.from(\r\n      this.grid.querySelectorAll(`ch-tabular-grid-row`)\r\n    ) as HTMLChTabularGridRowElement[];\r\n\r\n    if (state === \"visible\") {\r\n      return rows.filter(row => row.isVisible());\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  getRowsRange(\r\n    start: HTMLChTabularGridRowElement,\r\n    end: HTMLChTabularGridRowElement\r\n  ): HTMLChTabularGridRowElement[] {\r\n    const rows = this.getRows();\r\n    const indexStart = rows.indexOf(start);\r\n    const indexEnd = rows.indexOf(end);\r\n\r\n    return rows\r\n      .slice(Math.min(indexStart, indexEnd), Math.max(indexStart, indexEnd) + 1)\r\n      .filter(row => row.isVisible());\r\n  }\r\n\r\n  getRowEventTarget(eventInfo: Event): HTMLChTabularGridRowElement {\r\n    return eventInfo\r\n      .composedPath()\r\n      .find(\r\n        (target: HTMLElement) => target.tagName === \"CH-TABULAR-GRID-ROW\"\r\n      ) as HTMLChTabularGridRowElement;\r\n  }\r\n\r\n  isRowActionsEventTarget(eventInfo: Event): boolean {\r\n    return (\r\n      eventInfo\r\n        .composedPath()\r\n        .find(\r\n          (target: HTMLElement) =>\r\n            target.tagName === \"CH-TABULAR-GRID-ROW-ACTIONS\"\r\n        ) != null\r\n    );\r\n  }\r\n\r\n  getCell(\r\n    cellId?: string,\r\n    rowId?: string,\r\n    columnId?: string\r\n  ): HTMLChTabularGridCellElement | void {\r\n    if (cellId) {\r\n      return this.grid.querySelector(\r\n        `ch-tabular-grid-cell[cellid=\"${cellId}\"]`\r\n      ) as HTMLChTabularGridCellElement;\r\n    }\r\n    if (rowId && columnId) {\r\n      const row = this.getRow(rowId);\r\n      const column = this.columns.getColumn(columnId);\r\n\r\n      if (row && column) {\r\n        return row.getCell(column);\r\n      }\r\n    }\r\n  }\r\n\r\n  getCellEventTarget(eventInfo: Event): HTMLChTabularGridCellElement {\r\n    return eventInfo\r\n      .composedPath()\r\n      .find(\r\n        (target: HTMLElement) => target.tagName === \"CH-TABULAR-GRID-CELL\"\r\n      ) as HTMLChTabularGridCellElement;\r\n  }\r\n\r\n  columnDragStart(columnId: string) {\r\n    this.columnDragManager = new TabularGridManagerColumnDrag(\r\n      columnId,\r\n      this.columns.getColumns(),\r\n      this.isRTLDirection()\r\n    );\r\n  }\r\n\r\n  columnDragging(position: number): boolean {\r\n    return this.columnDragManager.dragging(position);\r\n  }\r\n\r\n  columnDragEnd() {\r\n    this.columnDragManager.dragEnd();\r\n    this.columnDragManager = null;\r\n  }\r\n\r\n  columnResizeStart(columnId: string) {\r\n    this.columnResizeManager = new TabularGridManagerColumnResize(\r\n      this,\r\n      columnId,\r\n      this.isRTLDirection()\r\n    );\r\n  }\r\n\r\n  columnResizing(deltaWidth: number) {\r\n    this.columnResizeManager.resizing(deltaWidth);\r\n  }\r\n\r\n  columnResizeEnd() {\r\n    this.columnResizeManager.resizeEnd();\r\n    this.columnResizeManager = null;\r\n  }\r\n\r\n  rowDragStart(row: HTMLChTabularGridRowElement) {\r\n    this.rowDragManager = new TabularGridManagerRowDrag(this);\r\n    this.rowDragManager.dragStart(row);\r\n  }\r\n\r\n  getGridStyle(): CSSProperties {\r\n    return {\r\n      display: \"grid\",\r\n      ...this.getGridTemplateColumns(),\r\n      ...this.getRowBoxSimulationStyle(),\r\n      ...this.getDragTransitionStyle(),\r\n      ...this.getColumnsStyle()\r\n    };\r\n  }\r\n\r\n  setBaseLayer(value: number) {\r\n    this.styleSheet.deleteRule(StyleRule.BASE_LAYER);\r\n    this.styleSheet.insertRule(\r\n      `:host { --ch-tabular-grid-base-layer: ${value}; }`,\r\n      StyleRule.BASE_LAYER\r\n    );\r\n  }\r\n\r\n  setColumnWidthVariables(columnsWidth: number[]) {\r\n    this.styleSheet.deleteRule(StyleRule.COLUMNS_WIDTH);\r\n    this.styleSheet.insertRule(\r\n      `.main { ${columnsWidth\r\n        .map(\r\n          (columnWidth, columnIndex) =>\r\n            `--ch-tabular-grid-column-${\r\n              columnIndex + 1\r\n            }-width:${columnWidth}px;`\r\n        )\r\n        .join(\"\\n\")} }`,\r\n      StyleRule.COLUMNS_WIDTH\r\n    );\r\n  }\r\n\r\n  ensureRowVisible(row: HTMLChTabularGridRowElement) {\r\n    let node: ITabularGridCollapsible = row.parentElement.closest(\r\n      \"ch-tabular-grid-row, ch-tabular-grid-rowset\"\r\n    );\r\n    const { columnFirst } = this.columns.getColumnsFirstLast();\r\n\r\n    while (node) {\r\n      node.collapsed = false;\r\n      node = node.parentElement.closest(\r\n        \"ch-tabular-grid-row, ch-tabular-grid-rowset\"\r\n      );\r\n    }\r\n\r\n    if (row.children[columnFirst.physicalOrder]) {\r\n      this.ensureVisible(\r\n        row.children[columnFirst.physicalOrder] as HTMLChTabularGridCellElement\r\n      );\r\n    }\r\n  }\r\n\r\n  ensureCellVisible(cell: HTMLChTabularGridCellElement) {\r\n    let node: ITabularGridCollapsible = cell.closest(\r\n      \"ch-tabular-grid-row, ch-tabular-grid-rowset\"\r\n    );\r\n\r\n    while (!cell.isVisible() && node) {\r\n      node.collapsed = false;\r\n      node = node.parentElement.closest(\r\n        \"ch-tabular-grid-row, ch-tabular-grid-rowset\"\r\n      );\r\n    }\r\n\r\n    if (!cell.isVisible()) {\r\n      cell.column.hidden = false;\r\n    }\r\n\r\n    this.ensureVisible(cell);\r\n  }\r\n\r\n  private ensureVisible(cell: HTMLChTabularGridCellElement) {\r\n    const isColumnFreeze = [\"start\", \"end\"].includes(cell.column.freeze);\r\n    const scroll = this.gridLayout;\r\n    const scrollOffsetTop = this.getScrollOffsetTop();\r\n    const scrollOffsetLeft = this.getScrollOffsetLeft();\r\n    const scrollOffsetRight = this.getScrollOffsetRight();\r\n\r\n    if (scroll.scrollTop + scrollOffsetTop > cell.offsetTop) {\r\n      scroll.scrollBy({\r\n        top: (scroll.scrollTop - cell.offsetTop + scrollOffsetTop) * -1\r\n      });\r\n    } else if (\r\n      scroll.scrollTop + scroll.offsetHeight <\r\n      cell.offsetTop + cell.offsetHeight\r\n    ) {\r\n      scroll.scrollBy({\r\n        top:\r\n          cell.offsetTop +\r\n          cell.offsetHeight -\r\n          (scroll.scrollTop + scroll.offsetHeight)\r\n      });\r\n    } else if (\r\n      scroll.scrollLeft + scrollOffsetLeft > cell.offsetLeft &&\r\n      !isColumnFreeze\r\n    ) {\r\n      scroll.scrollBy({\r\n        left: (scroll.scrollLeft - cell.offsetLeft + scrollOffsetLeft) * -1\r\n      });\r\n    } else if (\r\n      scroll.scrollLeft + scroll.clientWidth - scrollOffsetRight <\r\n        cell.offsetLeft + cell.offsetWidth &&\r\n      !isColumnFreeze\r\n    ) {\r\n      scroll.scrollBy({\r\n        left:\r\n          cell.offsetLeft +\r\n          cell.offsetWidth -\r\n          (scroll.scrollLeft + scroll.clientWidth - scrollOffsetRight)\r\n      });\r\n    }\r\n  }\r\n\r\n  private getGridTemplateColumns(): CSSProperties {\r\n    return {\r\n      \"grid-template-columns\": this.columns\r\n        .getColumns()\r\n        .map(\r\n          column => `var(--ch-tabular-grid-column-${column.physicalOrder}-size)`\r\n        )\r\n        .join(\" \")\r\n    };\r\n  }\r\n\r\n  private getRowBoxSimulationStyle(): CSSProperties {\r\n    const { columnFirst, columnLast } = this.columnDragManager\r\n      ? this.columnDragManager.getColumnsFirstLast()\r\n      : this.columns.getColumnsFirstLast();\r\n\r\n    if (!columnFirst || !columnLast) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      [`--ch-tabular-grid-column-${columnFirst.physicalOrder}-margin-start`]:\r\n        \"var(--ch-tabular-grid-fallback, inherit)\",\r\n      [`--ch-tabular-grid-column-${columnFirst.physicalOrder}-border-start`]:\r\n        \"var(--ch-tabular-grid-fallback, inherit)\",\r\n      [`--ch-tabular-grid-column-${columnFirst.physicalOrder}-padding-start`]:\r\n        \"var(--ch-tabular-grid-fallback, inherit)\",\r\n      [`--ch-tabular-grid-column-${columnLast.physicalOrder}-margin-end`]:\r\n        \"var(--ch-tabular-grid-fallback, inherit)\",\r\n      [`--ch-tabular-grid-column-${columnLast.physicalOrder}-border-end`]:\r\n        \"var(--ch-tabular-grid-fallback, inherit)\",\r\n      [`--ch-tabular-grid-column-${columnLast.physicalOrder}-padding-end`]:\r\n        \"var(--ch-tabular-grid-fallback, inherit)\"\r\n    };\r\n  }\r\n\r\n  private getDragTransitionStyle(): CSSProperties {\r\n    return {\r\n      \"--column-drag-transition-duration\": this.columnDragManager ? \".2s\" : \"0s\"\r\n    };\r\n  }\r\n\r\n  private getColumnsStyle(): CSSProperties {\r\n    return this.columns.getColumns().reduce((style, column) => {\r\n      return {\r\n        ...style,\r\n        ...this.getColumnStyle(column)\r\n      };\r\n    }, {} as CSSProperties);\r\n  }\r\n\r\n  private getColumnStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    return {\r\n      ...this.getColumnSizeStyle(column),\r\n      ...this.getColumnOrderStyle(column),\r\n      ...this.getColumnDisplayStyle(column),\r\n      ...this.getColumnFreezeStyle(column),\r\n      ...this.getColumnDraggingStyle(column),\r\n      ...this.getColumnIndentStyle(column)\r\n    };\r\n  }\r\n\r\n  private getColumnSizeStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    return {\r\n      [`--ch-tabular-grid-column-${column.order}-size`]: column.hidden\r\n        ? \"0px\"\r\n        : column.size\r\n    };\r\n  }\r\n\r\n  private getColumnOrderStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    return {\r\n      [`--ch-tabular-grid-column-${column.physicalOrder}-position`]:\r\n        column.order.toString()\r\n    };\r\n  }\r\n\r\n  private getColumnFreezeStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    switch (column.freeze) {\r\n      case \"start\":\r\n        return this.getColumnFreezeStartStyle(column);\r\n      case \"end\":\r\n        return this.getColumnFreezeEndStyle(column);\r\n    }\r\n  }\r\n\r\n  private getColumnFreezeStartStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    const calcItems = [\"0px\"];\r\n\r\n    for (let i = 1; i < column.order; i++) {\r\n      calcItems.push(`var(--ch-tabular-grid-column-${i}-width)`);\r\n    }\r\n\r\n    return {\r\n      [`--ch-tabular-grid-column-${column.physicalOrder}-left-freeze`]: `calc(${calcItems.join(\r\n        \" + \"\r\n      )})`,\r\n      [`--ch-tabular-grid-column-${column.physicalOrder}-z-index-freeze`]:\r\n        \"var(--ch-tabular-grid-column-freeze-layer)\"\r\n    };\r\n  }\r\n\r\n  private getColumnFreezeEndStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    const calcItems = [\"0px\"];\r\n    for (let i = this.columns.getColumns().length; i > column.order; i--) {\r\n      calcItems.push(`var(--ch-tabular-grid-column-${i}-width)`);\r\n    }\r\n\r\n    return {\r\n      [`--ch-tabular-grid-column-${column.physicalOrder}-right-freeze`]: `calc(${calcItems.join(\r\n        \" + \"\r\n      )})`,\r\n      [`--ch-tabular-grid-column-${column.physicalOrder}-z-index-freeze`]:\r\n        \"var(--ch-tabular-grid-column-freeze-layer)\"\r\n    };\r\n  }\r\n\r\n  private getColumnDisplayStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    return column.hidden\r\n      ? {\r\n          [`--ch-tabular-grid-column-${column.physicalOrder}-display`]: \"none\"\r\n        }\r\n      : null;\r\n  }\r\n\r\n  private getColumnDraggingStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    return this.columnDragManager\r\n      ? this.columnDragManager.getColumnStyle(column)\r\n      : null;\r\n  }\r\n\r\n  private getColumnIndentStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    return {\r\n      [`--ch-tabular-grid-column-${column.physicalOrder}-content`]:\r\n        column.order === 1 ? \"''\" : \"none\"\r\n    };\r\n  }\r\n\r\n  private isRTLDirection(): boolean {\r\n    return getComputedStyle(this.grid).direction === \"rtl\";\r\n  }\r\n}\r\n",":host {\r\n  display: flex;\r\n  position: relative;\r\n  flex-direction: column;\r\n  inline-size: 100%;\r\n\r\n  --ch-tabular-grid-cell-active-layer: calc(\r\n    var(--ch-tabular-grid-base-layer) * 1\r\n  );\r\n  --ch-tabular-grid-column-header-layer: calc(\r\n    var(--ch-tabular-grid-base-layer) * 2\r\n  );\r\n  --ch-tabular-grid-column-freeze-layer: calc(\r\n    var(--ch-tabular-grid-base-layer) * 4\r\n  );\r\n  --ch-tabular-grid-column-active-layer: calc(\r\n    var(--ch-tabular-grid-base-layer) * 8\r\n  );\r\n  --ch-tabular-grid-settings-layer: calc(\r\n    var(--ch-tabular-grid-base-layer) * 16\r\n  );\r\n}\r\n.main {\r\n  display: none;\r\n  grid-auto-flow: dense; /* necesario para poder reordenar las columnas */\r\n  grid-auto-rows: max-content;\r\n  overflow-x: auto;\r\n  user-select: none;\r\n  block-size: 100%;\r\n}\r\n","import \"./row/tabular-grid-row\";\r\nimport \"./rowset/tabular-grid-rowset\";\r\nimport \"./cell/tabular-grid-cell\";\r\n\r\nimport {\r\n  CSSProperties,\r\n  TabularGridSelectionChangedEvent,\r\n  TabularGridRowClickedEvent,\r\n  TabularGridMarkingChangedEvent,\r\n  TabularGridCellSelectionChangedEvent,\r\n  TabularGridRowPressedEvent,\r\n  TabularGridRowContextMenuEvent\r\n} from \"./tabular-grid-types\";\r\nimport {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Listen,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n  h,\r\n  Method\r\n} from \"@stencil/core\";\r\n\r\nimport { TabularGridManager } from \"./tabular-grid-manager\";\r\nimport HTMLChTabularGridCellElement, {\r\n  TabularGridCellSelectorClickedEvent,\r\n  TabularGridRowDragEvent\r\n} from \"./cell/tabular-grid-cell\";\r\nimport HTMLChTabularGridRowElement from \"./row/tabular-grid-row\";\r\nimport {\r\n  TabularGridColumnDragEvent,\r\n  TabularGridColumnResizeEvent,\r\n  TabularGridColumnSelectorClickedEvent\r\n} from \"./column/tabular-grid-column-types\";\r\nimport {\r\n  MouseEventButton,\r\n  MouseEventButtons,\r\n  focusComposedPath,\r\n  mouseEventHasButtonPressed,\r\n  mouseEventModifierKey\r\n} from \"../common/helpers\";\r\nimport { ManagerSelectionState } from \"./tabular-grid-manager-selection\";\r\n\r\n/**\r\n * The `ch-tabular-grid` component represents a Grid/TreeGrid of data, with rows and cells.\r\n */\r\n@Component({\r\n  tag: \"ch-tabular-grid\",\r\n  styleUrl: \"tabular-grid.scss\",\r\n  shadow: true\r\n})\r\nexport class ChTabularGrid {\r\n  private manager: TabularGridManager;\r\n  private gridLayoutElement: HTMLElement;\r\n  private settingsUI: HTMLChTabularGridSettingsElement;\r\n\r\n  @Element() el: HTMLChTabularGridElement;\r\n\r\n  @State() rowFocused: HTMLChTabularGridRowElement;\r\n  @Watch(\"rowFocused\")\r\n  rowFocusedHandler(\r\n    row: HTMLChTabularGridRowElement,\r\n    previous: HTMLChTabularGridRowElement\r\n  ) {\r\n    if (row) {\r\n      row.focused = true;\r\n    }\r\n    if (previous) {\r\n      previous.focused = false;\r\n    }\r\n  }\r\n\r\n  @State() cellFocused: HTMLChTabularGridCellElement;\r\n  @Watch(\"cellFocused\")\r\n  cellFocusedHandler(\r\n    cell: HTMLChTabularGridCellElement,\r\n    previous: HTMLChTabularGridCellElement\r\n  ) {\r\n    if (cell) {\r\n      cell.focused = true;\r\n    }\r\n    if (previous) {\r\n      previous.focused = false;\r\n    }\r\n  }\r\n\r\n  @State() rowHighlighted: HTMLChTabularGridRowElement;\r\n  @Watch(\"rowHighlighted\")\r\n  rowHighlightedHandler(\r\n    row: HTMLChTabularGridRowElement,\r\n    previous: HTMLChTabularGridRowElement\r\n  ) {\r\n    // highlight\r\n    if (row) {\r\n      row.highlighted = true;\r\n    }\r\n    if (previous) {\r\n      previous.highlighted = false;\r\n    }\r\n\r\n    // actions\r\n    if (row) {\r\n      this.manager.rowActions.showOnRowHover?.openRowHover(row);\r\n    } else {\r\n      this.manager.rowActions.showOnRowHover?.close();\r\n    }\r\n  }\r\n\r\n  @State() rowsMarked: HTMLChTabularGridRowElement[] = [];\r\n  @Watch(\"rowsMarked\")\r\n  rowsMarkedHandler(\r\n    rows: HTMLChTabularGridRowElement[],\r\n    previous: HTMLChTabularGridRowElement[]\r\n  ) {\r\n    this.manager.selection.syncRowSelector(rows, previous, \"mark\");\r\n    this.rowMarkingChanged.emit(this.getChangedEventDetail(rows, previous));\r\n  }\r\n\r\n  @State() rowsSelected: HTMLChTabularGridRowElement[] = [];\r\n  @Watch(\"rowsSelected\")\r\n  rowsSelectedHandler(\r\n    rows: HTMLChTabularGridRowElement[],\r\n    previous: HTMLChTabularGridRowElement[]\r\n  ) {\r\n    if (previous) {\r\n      previous\r\n        .filter(row => !rows.includes(row))\r\n        .forEach(row => (row.selected = false));\r\n    }\r\n    if (rows) {\r\n      rows.forEach(row => (row.selected = true));\r\n    }\r\n\r\n    this.manager.selection.syncRowSelector(rows, previous, \"select\");\r\n    this.selectionChanged.emit(this.getChangedEventDetail(rows, previous));\r\n  }\r\n\r\n  @State() cellSelected: HTMLChTabularGridCellElement;\r\n  @Watch(\"cellSelected\")\r\n  cellSelectedHandler(\r\n    cell: HTMLChTabularGridCellElement,\r\n    previous: HTMLChTabularGridCellElement\r\n  ) {\r\n    if (cell) {\r\n      cell.selected = true;\r\n    }\r\n    if (previous) {\r\n      previous.selected = false;\r\n    }\r\n\r\n    this.cellSelectionChanged.emit({\r\n      cellId: this.cellSelected ? this.cellSelected.cellId : null,\r\n      rowId: this.cellSelected ? this.cellSelected.row.rowId : null,\r\n      columnId: this.cellSelected ? this.cellSelected.column.columnId : null\r\n    });\r\n  }\r\n\r\n  @State() gridStyle: CSSProperties;\r\n\r\n  /**\r\n   * One of \"none\", \"single\" or \"multiple\", indicating how rows can be selected.\r\n   * It can be set to \"none\" if no rows should be selectable,\r\n   * \"single\" if only one row can be selected at a time, or\r\n   * \"multiple\" if multiple rows can be selected at once.\r\n   */\r\n  @Prop() readonly rowSelectionMode: \"none\" | \"single\" | \"multiple\" = \"single\";\r\n\r\n  /**\r\n   * Specifies the keyboard navigation mode for the component.\r\n   * - \"none\": Disables keyboard navigation for the grid rows.\r\n   * - \"select\": Allows keyboard navigation by changing the selection of grid rows.\r\n   * - \"focus\": Allows keyboard navigation by focusing on grid rows, but does not change the selection.\r\n   */\r\n  @Prop() readonly keyboardNavigationMode: \"none\" | \"select\" | \"focus\" =\r\n    \"select\";\r\n\r\n  /**\r\n   * One of \"false\", \"true\" or \"auto\", indicating whether or not rows can be highlighted.\r\n   * \"auto\", row highlighting will be enabled if the row selection mode is set to \"single\" or \"multiple\".\r\n   */\r\n  @Prop() readonly rowHighlightEnabled: boolean | \"auto\" = \"auto\";\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is selected.\r\n   */\r\n  @Prop() readonly rowSelectedClass: string;\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is hovered.\r\n   */\r\n  @Prop() readonly rowHighlightedClass: string;\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is focused.\r\n   */\r\n  @Prop() readonly rowFocusedClass: string;\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is marked.\r\n   */\r\n  @Prop() readonly rowMarkedClass: string;\r\n\r\n  /**\r\n   * A boolean indicating whether the user can drag column headers to reorder columns.\r\n   */\r\n  @Prop() readonly allowColumnReorder: boolean = true;\r\n\r\n  /**\r\n   * One of \"single\" or \"splitter\", indicating the behavior of column resizing.\r\n   * \"single\", resize a single column at a time.\r\n   * \"splitter\", when adjusts the width of one column, the neighboring columns\r\n   *    are also resized proportionally, maintaining the overall width.\r\n   */\r\n  @Prop() readonly columnResizeMode: \"single\" | \"splitter\" = \"single\";\r\n\r\n  /**\r\n   * An object that contains localized strings for the grid.\r\n   */\r\n  @Prop() readonly localization: GridLocalization;\r\n\r\n  /**\r\n   * Event emitted when the row selection is changed.\r\n   */\r\n  @Event() selectionChanged: EventEmitter<TabularGridSelectionChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the row marking is changed.\r\n   */\r\n  @Event() rowMarkingChanged: EventEmitter<TabularGridMarkingChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the cell selection is changed.\r\n   */\r\n  @Event()\r\n  cellSelectionChanged: EventEmitter<TabularGridCellSelectionChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when a row is clicked.\r\n   */\r\n  @Event() rowClicked: EventEmitter<TabularGridRowClickedEvent>;\r\n\r\n  /**\r\n   * Event emitted when a row is double clicked.\r\n   */\r\n  @Event() rowDoubleClicked: EventEmitter<TabularGridRowClickedEvent>;\r\n\r\n  /**\r\n   * Event emitted when Enter is pressed on a row.\r\n   */\r\n  @Event() rowEnterPressed: EventEmitter<TabularGridRowPressedEvent>;\r\n\r\n  /**\r\n   * Event emitted when attempts to open a context menu on a row.\r\n   */\r\n  @Event() rowContextMenu: EventEmitter<TabularGridRowContextMenuEvent>;\r\n\r\n  componentWillLoad() {\r\n    this.manager = new TabularGridManager(this.el);\r\n    this.gridStyle = this.manager.getGridStyle();\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.manager.componentDidLoad(this.gridLayoutElement);\r\n  }\r\n\r\n  // @ts-expect-error: TODO: Fix this error\r\n  componentShouldUpdate(_newValue, _oldValue, name: string) {\r\n    if (\r\n      name === \"rowFocused\" ||\r\n      name === \"rowHighlighted\" ||\r\n      name === \"rowSelected\" ||\r\n      name === \"rowsMarked\" ||\r\n      name === \"cellSelected\"\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  @Listen(\"focus\", { passive: true })\r\n  focusHandler() {\r\n    if (this.keyboardNavigationMode !== \"none\") {\r\n      this.rowFocused ||= this.rowsSelected[0] ?? this.manager.getFirstRow();\r\n      this.cellFocused = this.rowFocused?.getCell(\r\n        this.cellSelected?.column || this.manager.getFirstColumn()\r\n      );\r\n\r\n      if (this.keyboardNavigationMode === \"select\") {\r\n        this.selectByKeyboardEvent(false, false, \"focus\");\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"blur\", { passive: true })\r\n  blurHandler(eventInfo: Event) {\r\n    if (!eventInfo.composedPath().includes(this.el)) {\r\n      this.rowFocused = null;\r\n      this.cellFocused = null;\r\n    }\r\n  }\r\n\r\n  @Listen(\"cellFocused\", { passive: true })\r\n  cellFocusedEventHandler(eventInfo: CustomEvent) {\r\n    const cell = eventInfo.target as HTMLChTabularGridCellElement;\r\n    if (this.rowSelectionMode !== \"none\" && !cell.selected) {\r\n      this.setCellSelected(cell);\r\n    }\r\n  }\r\n\r\n  @Listen(\"keydown\", { target: \"window\" })\r\n  windowKeyDownHandler(eventInfo: KeyboardEvent) {\r\n    if (\r\n      focusComposedPath()[0] === this.el &&\r\n      [\r\n        \" \",\r\n        \"+\",\r\n        \"-\",\r\n        \"Home\",\r\n        \"End\",\r\n        \"PageUp\",\r\n        \"PageDown\",\r\n        \"ArrowUp\",\r\n        \"ArrowDown\",\r\n        \"ArrowLeft\",\r\n        \"ArrowRight\"\r\n      ].includes(eventInfo.key)\r\n    ) {\r\n      eventInfo.preventDefault();\r\n    }\r\n  }\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  keyDownHandler(eventInfo: KeyboardEvent) {\r\n    if (\r\n      focusComposedPath()[0] === this.el &&\r\n      this.keyboardNavigationMode !== \"none\"\r\n    ) {\r\n      const range = eventInfo.shiftKey;\r\n      const append = mouseEventModifierKey(eventInfo);\r\n\r\n      switch (eventInfo.key) {\r\n        case \" \":\r\n          this.spacePressedEvent(\r\n            mouseEventModifierKey(eventInfo),\r\n            eventInfo.shiftKey\r\n          );\r\n          break;\r\n        case \"+\":\r\n          this.setRowCollapsed(this.rowFocused, false);\r\n          break;\r\n        case \"-\":\r\n          this.setRowCollapsed(this.rowFocused, true);\r\n          break;\r\n        case \"Home\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveFirstRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"End\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveLastRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"PageUp\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.movePreviousPageRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"PageDown\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveNextPageRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowUp\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.movePreviousRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowDown\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveNextRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowLeft\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.movePreviousCell,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowRight\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveNextCell,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"Enter\":\r\n          this.enterPressedHandler();\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"mousemove\", { passive: true })\r\n  mouseMoveHandler(eventInfo: MouseEvent) {\r\n    if (\r\n      (this.rowHighlightEnabled === \"auto\" &&\r\n        this.rowSelectionMode !== \"none\") ||\r\n      this.rowHighlightEnabled === true\r\n    ) {\r\n      this.rowHighlighted =\r\n        this.manager.getRowEventTarget(eventInfo) ||\r\n        (this.manager.isRowActionsEventTarget(eventInfo)\r\n          ? this.rowHighlighted\r\n          : null);\r\n    }\r\n\r\n    selectingBlock: {\r\n      if (this.manager.selection.selecting) {\r\n        if (focusComposedPath()[0] !== this.el) {\r\n          this.stopSelecting();\r\n          break selectingBlock;\r\n        }\r\n\r\n        const row = this.manager.getRowEventTarget(eventInfo);\r\n        const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n        if (\r\n          row &&\r\n          (this.manager.selection.selectingRow !== row ||\r\n            this.manager.selection.selectingCell !== cell)\r\n        ) {\r\n          const isKeyModifierPressed = mouseEventModifierKey(eventInfo);\r\n          const isMouseButtonRightPressed = mouseEventHasButtonPressed(\r\n            eventInfo,\r\n            MouseEventButtons.RIGHT\r\n          );\r\n\r\n          this.selectByPointerEvent(\r\n            row,\r\n            cell,\r\n            isKeyModifierPressed && !isMouseButtonRightPressed,\r\n            !isMouseButtonRightPressed,\r\n            isMouseButtonRightPressed\r\n          );\r\n\r\n          this.manager.selection.selectingRow = row;\r\n          this.manager.selection.selectingCell = cell;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"mouseleave\", { passive: true })\r\n  mouseLeaveHandler() {\r\n    this.rowHighlighted &&= null;\r\n  }\r\n\r\n  @Listen(\"mousedown\", { passive: true })\r\n  mouseDownHandler(eventInfo: MouseEvent) {\r\n    const row = this.manager.getRowEventTarget(eventInfo);\r\n    const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n    if (row) {\r\n      this.manager.selection.selecting = true;\r\n      this.selectByPointerEvent(\r\n        row,\r\n        cell,\r\n        mouseEventModifierKey(eventInfo),\r\n        eventInfo.shiftKey,\r\n        eventInfo.button === MouseEventButton.RIGHT\r\n      );\r\n    }\r\n  }\r\n\r\n  @Listen(\"mouseup\", { passive: true })\r\n  mouseUpHandler() {\r\n    if (this.manager.selection.selecting) {\r\n      this.stopSelecting();\r\n    }\r\n  }\r\n\r\n  @Listen(\"click\", { passive: true })\r\n  clickHandler(eventInfo: MouseEvent) {\r\n    const row = this.manager.getRowEventTarget(eventInfo);\r\n    const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n    if (row) {\r\n      this.emitRowClicked(row, cell);\r\n    }\r\n  }\r\n\r\n  @Listen(\"dblclick\", { passive: true })\r\n  dblclickHandler(eventInfo: MouseEvent) {\r\n    const row = this.manager.getRowEventTarget(eventInfo);\r\n    const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n    if (row) {\r\n      this.rowDoubleClicked.emit({\r\n        rowId: row.rowId,\r\n        cellId: cell?.cellId,\r\n        columnId: cell?.column.columnId\r\n      });\r\n    }\r\n  }\r\n\r\n  @Listen(\"touchstart\", { passive: true })\r\n  touchstartHandler(eventInfo: TouchEvent) {\r\n    this.manager.selection.touchStart(eventInfo);\r\n  }\r\n\r\n  @Listen(\"touchend\", { passive: false })\r\n  touchendHandler(eventInfo: TouchEvent) {\r\n    if (eventInfo.cancelable) {\r\n      eventInfo.preventDefault();\r\n    }\r\n\r\n    if (this.manager.selection.isTouchEndSelection(eventInfo)) {\r\n      const columnSelector = this.manager.columns.getColumnSelector();\r\n      const row = this.manager.getRowEventTarget(eventInfo);\r\n      const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n      if (row) {\r\n        this.selectByPointerEvent(\r\n          row,\r\n          cell,\r\n          columnSelector?.richRowSelectorMode !== \"select\",\r\n          false,\r\n          false\r\n        );\r\n\r\n        this.emitRowClicked(row, cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"contextmenu\")\r\n  contextmenuHandler(eventInfo: MouseEvent) {\r\n    let targetRow: HTMLChTabularGridRowElement;\r\n\r\n    if (\r\n      eventInfo.target === this.el &&\r\n      eventInfo.button === MouseEventButton.KEY_SHORTCUT\r\n    ) {\r\n      targetRow = this.rowFocused;\r\n    } else {\r\n      targetRow = this.manager.getRowEventTarget(eventInfo);\r\n    }\r\n\r\n    if (targetRow) {\r\n      const cellFocused =\r\n        this.cellSelected?.row === targetRow ? this.cellSelected : null;\r\n\r\n      const rowContextMenuEventInfo = this.rowContextMenu.emit({\r\n        rowId: targetRow.rowId,\r\n        cellId: cellFocused?.cellId,\r\n        columnId: cellFocused?.column.columnId,\r\n        selectedRowsId: this.rowsSelected.map(row => row.rowId),\r\n        clientX: eventInfo.clientX,\r\n        clientY: eventInfo.clientY\r\n      });\r\n\r\n      this.manager.rowActions.showOnRowContext?.openRowContext(\r\n        eventInfo.clientX,\r\n        eventInfo.clientY\r\n      );\r\n\r\n      if (\r\n        rowContextMenuEventInfo.defaultPrevented ||\r\n        this.manager.rowActions.showOnRowContext\r\n      ) {\r\n        eventInfo.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnSelectorClicked\", { passive: true })\r\n  columnSelectorClickedHandler(\r\n    eventInfo: CustomEvent<TabularGridColumnSelectorClickedEvent>\r\n  ) {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"select\") {\r\n      this.selectAll(eventInfo.detail.checked);\r\n    } else if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markAllRows(\r\n        eventInfo.detail.checked\r\n      );\r\n    }\r\n  }\r\n\r\n  @Listen(\"cellSelectorClicked\", { passive: true })\r\n  cellSelectorClickedHandler(\r\n    eventInfo: CustomEvent<TabularGridCellSelectorClickedEvent>\r\n  ) {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"select\") {\r\n      this.selectByPointerEvent(\r\n        this.manager.getRowEventTarget(eventInfo),\r\n        this.manager.getCellEventTarget(eventInfo),\r\n        true,\r\n        eventInfo.detail.range,\r\n        false\r\n      );\r\n    } else if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markRow(\r\n        this.manager.getRowEventTarget(eventInfo),\r\n        eventInfo.detail.checked,\r\n        eventInfo.detail.range,\r\n        this.rowsMarked\r\n      );\r\n    }\r\n  }\r\n\r\n  @Listen(\"cellRowActionClicked\", { passive: true })\r\n  cellRowActionClickedHandler(eventInfo: CustomEvent) {\r\n    const cell = eventInfo.target as HTMLChTabularGridCellElement;\r\n    this.manager.rowActions.showOnRowActions?.openRowActions(cell);\r\n  }\r\n\r\n  @Listen(\"columnHiddenChanged\")\r\n  @Listen(\"columnOrderChanged\")\r\n  @Listen(\"columnFreezeChanged\")\r\n  @Listen(\"columnSizeChanging\")\r\n  columnStyleChangedHandler() {\r\n    if (this.manager) {\r\n      this.gridStyle = this.manager.getGridStyle();\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnFreezeChanged\")\r\n  columnFreezeChangedHandler() {\r\n    this.manager.columns.adjustFreezeOrder();\r\n  }\r\n\r\n  @Listen(\"columnResizeStarted\")\r\n  columnResizeStartedHandler(\r\n    eventInfo: CustomEvent<TabularGridColumnResizeEvent>\r\n  ) {\r\n    this.manager.columnResizeStart(eventInfo.detail.columnId);\r\n  }\r\n\r\n  @Listen(\"columnResizing\")\r\n  columnResizingHandler(eventInfo: CustomEvent<TabularGridColumnResizeEvent>) {\r\n    this.manager.columnResizing(eventInfo.detail.deltaWidth);\r\n  }\r\n\r\n  @Listen(\"columnResizeFinished\")\r\n  columnResizeFinishedHandler() {\r\n    this.manager.columnResizeEnd();\r\n  }\r\n\r\n  @Listen(\"columnDragStarted\")\r\n  columnDragStartHandler(eventInfo: CustomEvent<TabularGridColumnDragEvent>) {\r\n    this.manager.columnDragStart(eventInfo.detail.columnId);\r\n  }\r\n\r\n  @Listen(\"columnDragging\")\r\n  columnDraggingHandler(eventInfo: CustomEvent<TabularGridColumnDragEvent>) {\r\n    if (this.manager.columnDragging(eventInfo.detail.positionX)) {\r\n      this.gridStyle = this.manager.getGridStyle();\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnDragEnded\")\r\n  columnDragEndHandler() {\r\n    this.manager.columnDragEnd();\r\n    this.gridStyle = this.manager.getGridStyle();\r\n  }\r\n\r\n  @Listen(\"rowDragStarted\")\r\n  rowDragStartHandler(eventInfo: CustomEvent<TabularGridRowDragEvent>) {\r\n    this.manager.rowDragStart(eventInfo.detail.row);\r\n  }\r\n\r\n  @Listen(\"rowEnsureVisible\")\r\n  rowEnsureVisibleHandler(eventInfo: CustomEvent) {\r\n    this.manager.ensureRowVisible(\r\n      eventInfo.target as HTMLChTabularGridRowElement\r\n    );\r\n  }\r\n\r\n  @Listen(\"cellEnsureVisible\")\r\n  cellEnsureVisibleHandler(eventInfo: CustomEvent) {\r\n    this.manager.ensureCellVisible(\r\n      eventInfo.target as HTMLChTabularGridCellElement\r\n    );\r\n  }\r\n\r\n  @Listen(\"settingsShowClicked\")\r\n  settingsShowClickedHandler() {\r\n    this.settingsUI.show = true;\r\n  }\r\n\r\n  @Listen(\"settingsCloseClicked\")\r\n  settingsCloseClickedHandler() {\r\n    this.settingsUI.show = false;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the currently focused row.\r\n   */\r\n  @Method()\r\n  async getFocusedRow(): Promise<string> {\r\n    return this.rowFocused?.rowId;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the currently hovered row.\r\n   */\r\n  @Method()\r\n  async getHoveredRow(): Promise<string> {\r\n    return this.rowHighlighted?.rowId;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the list of rowId of the selected rows.\r\n   */\r\n  @Method()\r\n  async getSelectedRows(): Promise<string[]> {\r\n    return this.rowsSelected.map(row => row.rowId);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the list of rowId of the marked rows.\r\n   */\r\n  @Method()\r\n  async getMarkedRows(): Promise<string[]> {\r\n    return this.rowsMarked.map(row => row.rowId);\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the currently focused cell.\r\n   */\r\n  @Method()\r\n  async getFocusedCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    return {\r\n      cellId: this.cellFocused ? this.cellFocused.cellId : null,\r\n      rowId: this.cellFocused ? this.cellFocused.row.rowId : null,\r\n      columnId: this.cellFocused ? this.cellFocused.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getSelectedCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    return {\r\n      cellId: this.cellSelected ? this.cellSelected.cellId : null,\r\n      rowId: this.cellSelected ? this.cellSelected.row.rowId : null,\r\n      columnId: this.cellSelected ? this.cellSelected.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Selects or deselects a row.\r\n   * @param rowId - The rowId of the row to select or deselect.\r\n   * @param selected - A boolean indicating whether to select or deselect the row.\r\n   */\r\n  @Method()\r\n  async selectRow(rowId: string, selected = true): Promise<void> {\r\n    const row = this.manager.getRow(rowId);\r\n\r\n    if (row) {\r\n      const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n        this.manager.selection.selectSet(\r\n          {\r\n            rowFocused: this.rowFocused,\r\n            rowsSelected: this.rowsSelected,\r\n            cellFocused: this.cellFocused,\r\n            cellSelected: this.cellSelected\r\n          },\r\n          row,\r\n          null,\r\n          selected\r\n        );\r\n\r\n      this.rowFocused = rowFocused;\r\n      this.rowsSelected = rowsSelected;\r\n      this.cellFocused = cellFocused;\r\n      this.cellSelected = cellSelected;\r\n\r\n      rowFocused?.ensureVisible();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects or deselects all rows.\r\n   * @param selected - A boolean indicating whether to select or deselect all rows.\r\n   */\r\n  @Method()\r\n  async selectAllRows(selected = true): Promise<void> {\r\n    this.selectAll(selected);\r\n  }\r\n\r\n  /**\r\n   * Select or deselect a cell.\r\n   * The cell can be identified by the cellId parameter or\r\n   * by using the rowId and columnId pair.\r\n   * @param cellId - The cellId of the cell to select or deselect.\r\n   * @param rowId - The rowId of the row containing the cell.\r\n   * @param columnId - The columnId of the column containing the cell.\r\n   * @param selected - A boolean indicating whether to select or deselect the cell.\r\n   */\r\n  @Method()\r\n  async selectCell(\r\n    cellId?: string,\r\n    rowId?: string,\r\n    columnId?: string,\r\n    selected = true\r\n  ): Promise<void> {\r\n    const cell = this.manager.getCell(cellId, rowId, columnId);\r\n\r\n    if (cell) {\r\n      this.setCellSelected(cell, selected);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark or unmark a row.\r\n   * @param rowId - The rowId of the row to select or deselect.\r\n   * @param marked - A boolean indicating whether to mark or unmark the row.\r\n   */\r\n  @Method()\r\n  async markRow(rowId: string, marked = true): Promise<void> {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n    const row = this.manager.getRow(rowId);\r\n\r\n    if (row && columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markRow(\r\n        row,\r\n        marked,\r\n        false,\r\n        this.rowsMarked\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark or unmark all rows.\r\n   * @param marked - A boolean indicating whether to mark or unmark all rows.\r\n   */\r\n  @Method()\r\n  async markAllRows(marked = true): Promise<void> {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markAllRows(marked);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Expands a row, showing its children.\r\n   * @param rowId - The rowId of the row to expand.\r\n   */\r\n  @Method()\r\n  async expandRow(rowId: string): Promise<void> {\r\n    this.setRowCollapsed(this.manager.getRow(rowId), false);\r\n  }\r\n\r\n  /**\r\n   * Collapses a row, hiding its children.\r\n   * @param rowId - The rowId of the row to collapse.\r\n   */\r\n  @Method()\r\n  async collapseRow(rowId: string): Promise<void> {\r\n    this.setRowCollapsed(this.manager.getRow(rowId), true);\r\n  }\r\n\r\n  /**\r\n   * Ensures that the row is visible within the control, scrolling the contents of the control if necessary.\r\n   * @param rowId - The rowId of the row to ensure visibility.\r\n   */\r\n  @Method()\r\n  async rowEnsureVisible(rowId: string): Promise<void> {\r\n    const row = this.manager.getRow(rowId);\r\n\r\n    if (row) {\r\n      this.manager.ensureRowVisible(row);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensures that the cell is visible within the control, scrolling the contents of the control if necessary.\r\n   * @param cellId - The cellId of the cell to ensure visibility.\r\n   */\r\n  @Method()\r\n  async cellEnsureVisible(cellId: string): Promise<void> {\r\n    const cell = this.manager.getCell(cellId);\r\n\r\n    if (cell) {\r\n      this.manager.ensureCellVisible(cell);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the previous row relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getPreviousRow(): Promise<string | void> {\r\n    const currentRow = this.cellSelected?.row;\r\n\r\n    if (currentRow) {\r\n      return this.manager.getPreviousRow(currentRow)?.rowId || null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the next row relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getNextRow(): Promise<string | void> {\r\n    const currentRow = this.cellSelected?.row;\r\n\r\n    if (currentRow) {\r\n      return this.manager.getNextRow(currentRow)?.rowId || null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the previous cell relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getPreviousCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    const previousCell = this.manager.getPreviousCell(this.cellSelected);\r\n\r\n    return {\r\n      cellId: previousCell ? previousCell.cellId : null,\r\n      rowId: previousCell ? previousCell.row.rowId : null,\r\n      columnId: previousCell ? previousCell.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the next cell relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getNextCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    const nextCell = this.manager.getNextCell(this.cellSelected);\r\n\r\n    return {\r\n      cellId: nextCell ? nextCell.cellId : null,\r\n      rowId: nextCell ? nextCell.row.rowId : null,\r\n      columnId: nextCell ? nextCell.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Synchronizes the state of a row in the grid.\r\n   */\r\n  @Method()\r\n  async syncRowState(el: HTMLElement) {\r\n    const row = el as HTMLChTabularGridRowElement;\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (this.rowSelectionMode !== \"none\") {\r\n      this.syncRowStateSelected(row);\r\n    }\r\n    if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.syncRowStateMarked(row);\r\n    }\r\n\r\n    if (columnSelector) {\r\n      this.syncRowStateSelector(row, columnSelector);\r\n\r\n      if (columnSelector.richRowSelectorMode === \"select\") {\r\n        this.manager.selection.syncColumnSelector(\r\n          this.rowsSelected.length,\r\n          columnSelector\r\n        );\r\n      } else if (columnSelector.richRowSelectorMode === \"mark\") {\r\n        this.manager.selection.syncColumnSelector(\r\n          this.rowsMarked.length,\r\n          columnSelector\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private syncRowStateSelected(row: HTMLChTabularGridRowElement) {\r\n    if (row.selected && this.rowSelectionMode === \"single\") {\r\n      this.rowsSelected[0] = row;\r\n    }\r\n    if (\r\n      row.selected &&\r\n      this.rowSelectionMode === \"multiple\" &&\r\n      !this.rowsSelected.includes(row)\r\n    ) {\r\n      this.rowsSelected.push(row);\r\n    }\r\n\r\n    if (!row.selected) {\r\n      const index = this.rowsSelected.indexOf(row);\r\n\r\n      if (index !== -1) {\r\n        this.rowsSelected.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  private syncRowStateMarked(row: HTMLChTabularGridRowElement) {\r\n    if (row.marked && !this.rowsMarked.includes(row)) {\r\n      this.rowsMarked.push(row);\r\n    }\r\n\r\n    if (!row.marked) {\r\n      const index = this.rowsMarked.indexOf(row);\r\n\r\n      if (index !== -1) {\r\n        this.rowsMarked.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  private syncRowStateSelector(\r\n    row: HTMLChTabularGridRowElement,\r\n    columnSelector: HTMLChTabularGridColumnElement\r\n  ) {\r\n    const cell = row.getCell(columnSelector);\r\n    const value =\r\n      (columnSelector.richRowSelectorMode === \"select\" && row.selected) ||\r\n      (columnSelector.richRowSelectorMode === \"mark\" && row.marked);\r\n\r\n    cell.setSelectorChecked(value);\r\n  }\r\n\r\n  private getChangedEventDetail(\r\n    rows: HTMLChTabularGridRowElement[],\r\n    previous: HTMLChTabularGridRowElement[]\r\n  ): TabularGridSelectionChangedEvent | TabularGridMarkingChangedEvent {\r\n    return {\r\n      rowsId: rows.map(row => row.rowId),\r\n      addedRowsId: rows\r\n        .filter(row => !previous.includes(row))\r\n        .map(row => row.rowId),\r\n      removedRowsId: previous\r\n        .filter(row => !rows.includes(row))\r\n        .map(row => row.rowId),\r\n      unalteredRowsId: rows\r\n        .filter(row => previous.includes(row))\r\n        .map(row => row.rowId)\r\n    };\r\n  }\r\n\r\n  private enterPressedHandler() {\r\n    if (this.rowFocused) {\r\n      this.rowEnterPressed.emit({\r\n        rowId: this.rowFocused.rowId,\r\n        cellId: this.cellFocused ? this.cellFocused.cellId : null,\r\n        columnId: this.cellFocused ? this.cellFocused.column.columnId : null\r\n      });\r\n    }\r\n  }\r\n\r\n  private spacePressedEvent(ctrl: boolean, shift: boolean) {\r\n    if (this.keyboardNavigationMode === \"focus\") {\r\n      this.selectByKeyboardEvent(ctrl, shift, \"last-selected\");\r\n    } else if (this.keyboardNavigationMode === \"select\") {\r\n      this.markByKeyboardEvent();\r\n    }\r\n\r\n    this.emitRowClicked(this.rowFocused, this.cellFocused);\r\n  }\r\n\r\n  private markByKeyboardEvent() {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markRows(\r\n        this.rowFocused,\r\n        this.rowsMarked,\r\n        this.rowsSelected\r\n      );\r\n    }\r\n  }\r\n\r\n  private selectByKeyboardEvent(\r\n    append: boolean,\r\n    range: boolean,\r\n    rangeStartOn: \"focus\" | \"last-selected\"\r\n  ) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.select(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        this.rowFocused,\r\n        this.cellFocused,\r\n        true,\r\n        append,\r\n        range,\r\n        rangeStartOn,\r\n        false\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private selectByPointerEvent(\r\n    row: HTMLChTabularGridRowElement,\r\n    cell: HTMLChTabularGridCellElement,\r\n    append: boolean,\r\n    range: boolean,\r\n    context: boolean\r\n  ) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.select(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        row,\r\n        cell,\r\n        true,\r\n        append,\r\n        range,\r\n        \"last-selected\",\r\n        context\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private moveByKeyboardEvent(\r\n    fn: (\r\n      state: ManagerSelectionState,\r\n      select: boolean,\r\n      range: boolean,\r\n      append: boolean\r\n    ) => ManagerSelectionState,\r\n    range: boolean,\r\n    append: boolean\r\n  ) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } = fn.call(\r\n      this.manager.selection,\r\n      {\r\n        rowFocused: this.rowFocused,\r\n        rowsSelected: this.rowsSelected,\r\n        cellFocused: this.cellFocused,\r\n        cellSelected: this.cellSelected\r\n      },\r\n      this.rowSelectionMode !== \"none\" &&\r\n        this.keyboardNavigationMode === \"select\",\r\n      this.rowSelectionMode === \"multiple\" ? range : false,\r\n      this.rowSelectionMode === \"multiple\" ? range && append : false\r\n    );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private selectAll(value = true) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.selectAll(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        value\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private setRowCollapsed(\r\n    row: HTMLChTabularGridRowElement,\r\n    collapsed: boolean\r\n  ) {\r\n    if (row && collapsed) {\r\n      if (row && row.hasChildRows) {\r\n        row.collapsed = true;\r\n      }\r\n    } else if (row && !collapsed) {\r\n      row.collapsed = false;\r\n    }\r\n  }\r\n\r\n  private setCellSelected(cell: HTMLChTabularGridCellElement, selected = true) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.selectSet(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        cell.row,\r\n        cell,\r\n        selected\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private emitRowClicked(\r\n    row: HTMLChTabularGridRowElement,\r\n    cell: HTMLChTabularGridCellElement\r\n  ) {\r\n    this.rowClicked.emit({\r\n      rowId: row.rowId,\r\n      cellId: cell?.cellId,\r\n      columnId: cell?.column.columnId\r\n    });\r\n  }\r\n\r\n  private stopSelecting() {\r\n    this.manager.selection.selecting = false;\r\n    this.manager.selection.selectingRow = null;\r\n    this.manager.selection.selectingCell = null;\r\n  }\r\n\r\n  private renderSettings() {\r\n    return (\r\n      <ch-tabular-grid-settings\r\n        grid={this.el}\r\n        ref={el => (this.settingsUI = el)}\r\n        exportparts=\"\r\n          mask:settings-mask,\r\n          window:settings-window,\r\n          header:settings-header,\r\n          caption:settings-caption,\r\n          close:settings-close,\r\n          main:settings-main,\r\n          footer:settings-footer\r\n        \"\r\n      >\r\n        <slot name=\"settings\">\r\n          <ch-tabular-grid-settings-columns\r\n            part=\"settings-columns\"\r\n            columns={[...this.manager.getColumns()]}\r\n            exportparts=\"\r\n              column:settings-columns-item,\r\n              column-label:settings-columns-label,\r\n              column-visible:settings-columns-visible,\r\n              column-visible-checked:settings-columns-visible-checked\r\n            \"\r\n          ></ch-tabular-grid-settings-columns>\r\n        </slot>\r\n      </ch-tabular-grid-settings>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host tabindex={this.keyboardNavigationMode !== \"none\" ? \"0\" : false}>\r\n        <header part=\"header\">\r\n          <slot name=\"header\"></slot>\r\n        </header>\r\n        <section\r\n          class=\"main ch-scrollable\"\r\n          style={this.gridStyle}\r\n          part=\"main\"\r\n          ref={el => (this.gridLayoutElement = el)}\r\n        >\r\n          <slot></slot>\r\n        </section>\r\n        <aside>\r\n          {this.renderSettings()}\r\n          <slot name=\"column-display\"></slot>\r\n          <slot name=\"row-actions\"></slot>\r\n        </aside>\r\n        <footer part=\"footer\">\r\n          <slot name=\"footer\"></slot>\r\n        </footer>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nexport interface GridLocalization {\r\n  settingsCaption: string;\r\n  settingsCloseText: string;\r\n  settingsCloseTooltip: string;\r\n}\r\n","@import \"../../common/reset.scss\";\r\n@import \"../helpers/styles.scss\";\r\n\r\n:host {\r\n  display: flex;\r\n  position: sticky;\r\n  top: 0;\r\n  grid-row: 1;\r\n}\r\n\r\n// column-set box simulation\r\n:host {\r\n  @include box-simulation;\r\n  @include column-drag-transition;\r\n}\r\n\r\n// z-index levels\r\n:host {\r\n  --ch-tabular-grid-column-z-index-head: var(\r\n    --ch-tabular-grid-column-header-layer\r\n  );\r\n}\r\n:host([show-settings]),\r\n:host([resizing]) {\r\n  --ch-tabular-grid-column-z-index-active: var(\r\n    --ch-tabular-grid-column-active-layer\r\n  );\r\n}\r\n\r\n:host([sort-direction=\"asc\"]) .bar .sort .sort-asc {\r\n  visibility: visible;\r\n}\r\n:host([sort-direction=\"desc\"]) .bar .sort .sort-desc {\r\n  visibility: visible;\r\n}\r\n\r\n.bar {\r\n  @include reset-list;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  & .selector {\r\n    overflow: hidden;\r\n    order: 0;\r\n    &:not([hidden]) {\r\n      display: flex;\r\n    }\r\n  }\r\n\r\n  & .name {\r\n    display: flex;\r\n    overflow: hidden;\r\n    order: 1;\r\n\r\n    & .name-text {\r\n      white-space: nowrap;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n    }\r\n  }\r\n\r\n  & .sort {\r\n    position: relative;\r\n    align-items: center;\r\n    order: 2;\r\n    &:not([hidden]) {\r\n      display: flex;\r\n    }\r\n\r\n    & .sort-asc {\r\n      visibility: hidden;\r\n      animation-fill-mode: forwards;\r\n    }\r\n    & .sort-desc {\r\n      position: absolute;\r\n      visibility: hidden;\r\n      animation-fill-mode: forwards;\r\n    }\r\n  }\r\n  & .settings {\r\n    order: 3;\r\n  }\r\n  & .resize {\r\n    align-self: stretch;\r\n    margin-inline-start: auto;\r\n    order: 4;\r\n  }\r\n}\r\n\r\n@keyframes column-sort {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  10% {\r\n    opacity: 1;\r\n  }\r\n  90% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h,\r\n  Listen\r\n} from \"@stencil/core\";\r\nimport {\r\n  TabularGridColumnDragEvent,\r\n  TabularGridColumnFreezeChangedEvent,\r\n  TabularGridColumnHiddenChangedEvent,\r\n  TabularGridColumnOrderChangedEvent,\r\n  TabularGridColumnSelectorClickedEvent,\r\n  TabularGridColumnSizeChangedEvent,\r\n  TabularGridColumnSortChangedEvent,\r\n  TabularGridColumnFreeze,\r\n  TabularGridColumnSortDirection\r\n} from \"./tabular-grid-column-types\";\r\nimport { tokenMap } from \"../../../common/utils\";\r\nimport { TABULAR_GRID_PARTS_DICTIONARY } from \"../../../common/reserved-names\";\r\n\r\n/**\r\n * The `ch-tabular-grid-column` component represents a grid column.\r\n */\r\n@Component({\r\n  tag: \"ch-tabular-grid-column\",\r\n  styleUrl: \"tabular-grid-column.scss\",\r\n  shadow: true\r\n})\r\nexport class ChTabularGridColumn {\r\n  private dragging = false;\r\n  private dragMouseMoveFn = this.dragMouseMoveHandler.bind(this);\r\n  private dragMouseMoveStartPositionX: number;\r\n\r\n  @Element() el: HTMLChTabularGridColumnElement;\r\n\r\n  /**\r\n   * A unique identifier for the column.\r\n   */\r\n  @Prop() readonly columnId: string;\r\n\r\n  /**\r\n   * One of \"plain\", \"rich\", or \"tree\", indicating the type of cell displayed in the column.\r\n   */\r\n  @Prop() readonly columnType: \"plain\" | \"rich\" | \"tree\" = \"plain\";\r\n\r\n  /**\r\n   * @deprecated Use \"columnImage\" or \"columnImageSet\" instead.\r\n   * A URL to an icon to display in the column header.\r\n   */\r\n  @Prop() readonly columnIconUrl: string;\r\n\r\n  /**\r\n   * A URL to an icon to display in the column header.\r\n   */\r\n  @Prop() readonly columnImage: string;\r\n\r\n  /**\r\n   * A URL to an icon to display in the column header.\r\n   */\r\n  @Prop() readonly columnImageSet: string;\r\n\r\n  /**\r\n   * The text to display in the column header and settings.\r\n   */\r\n  @Prop() readonly columnName: string;\r\n\r\n  /**\r\n   * Indicates whether the text in the column header is visible or not\r\n   */\r\n  @Prop() readonly columnNameHidden: boolean;\r\n\r\n  /**\r\n   * The text to display when the cursor is placed over the column header.\r\n   */\r\n  @Prop() readonly columnTooltip: string;\r\n\r\n  /**\r\n   * @deprecated Use \"columnTooltip\" and \"columnNameHidden\" instead.\r\n   * One of \"text\" or \"title\", indicating whether the `columnName` should be displayed as the column text or as tooltip of the column image.\r\n   */\r\n  @Prop() readonly columnNamePosition: \"text\" | \"title\" = \"text\";\r\n\r\n  /**\r\n   * A boolean value indicating whether the column cells are draggable to reorder the grid rows (only applicable for columnType=\"rich\").\r\n   */\r\n  @Prop() readonly richRowDrag: boolean;\r\n\r\n  /**\r\n   * A boolean indicating whether the column cells in the grid should have a checkbox selector (only applicable for columnType=\"rich\").\r\n   */\r\n  @Prop() readonly richRowSelector: boolean;\r\n\r\n  /**\r\n   * One of \"select\" or \"mark\", indicating the mode of rich row selector.\r\n   * \"select\" indicates that the row selector is bound to the row selection.\r\n   * \"mark\" allows to mark a row independently of the selection.\r\n   */\r\n  @Prop() readonly richRowSelectorMode: \"select\" | \"mark\" = \"select\";\r\n\r\n  /**\r\n   * Indicate the state of the rich row selector.\r\n   * \"\" indicates that all rows are unchecked.\r\n   * \"checked\" indicates that all rows are checked.\r\n   * \"indeterminate\" indicates that some rows are marked.\r\n   */\r\n  @Prop({ mutable: true }) richRowSelectorState:\r\n    | \"\"\r\n    | \"checked\"\r\n    | \"indeterminate\" = \"\";\r\n\r\n  /**\r\n   * A boolean indicating whether the column cells in the grid should have a set of action buttons (only applicable for columnType=\"rich\").\r\n   */\r\n  @Prop() readonly richRowActions: boolean;\r\n\r\n  /**\r\n   * A CSS class name to apply to the display observer element used to detect changes in the column visibility.\r\n   */\r\n  @Prop() readonly displayObserverClass: string;\r\n\r\n  /**\r\n   * One of \"left\" or \"right\", indicating whether the column should be \"frozen\" (i.e. remain visible when the user scrolls horizontally).\r\n   */\r\n  @Prop() readonly freeze?: TabularGridColumnFreeze;\r\n\r\n  @Watch(\"freeze\")\r\n  freezeHandler() {\r\n    this.columnFreezeChanged.emit({\r\n      columnId: this.columnId,\r\n      freeze: this.freeze\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be hidden.\r\n   * The user can display it from the grid settings.\r\n   */\r\n  @Prop({ reflect: true }) readonly hidden: boolean = false;\r\n\r\n  @Watch(\"hidden\")\r\n  hiddenHandler() {\r\n    this.columnHiddenChanged.emit({\r\n      columnId: this.columnId,\r\n      hidden: this.hidden\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be hideable (i.e. whether the user should be able to show/hide the column).\r\n   */\r\n  @Prop() readonly hideable: boolean = true;\r\n\r\n  /**\r\n   * A number indicating the order in which the column should appear.\r\n   */\r\n  @Prop({ reflect: true }) readonly order: number;\r\n\r\n  @Watch(\"order\")\r\n  orderHandler() {\r\n    this.columnOrderChanged.emit({\r\n      columnId: this.columnId,\r\n      order: this.order\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A boolean or string that controls the parts applied to the column.\r\n   * - When `true`, it automatically applies the part names \"column\" and the column's unique ID.\r\n   * - When a string is provided, it appends that string to the default part names \"column\" and the column's ID.\r\n   */\r\n  @Prop() readonly parts: boolean | string;\r\n\r\n  /**\r\n   * A number indicating the physical order of the column (i.e. its position in the DOM).\r\n   */\r\n  @Prop() readonly physicalOrder: number;\r\n\r\n  /**\r\n   * A string indicating the width of the column.\r\n   * Any value supported by the \"grid-template-columns\" CSS property is valid.\r\n   */\r\n  @Prop({ reflect: true }) readonly size: string;\r\n\r\n  @Watch(\"size\")\r\n  sizeHandler() {\r\n    this.columnSizeChanging.emit({\r\n      columnId: this.columnId,\r\n      size: this.size\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be resizable (i.e. whether the user should be able to drag its width).\r\n   */\r\n  @Prop() readonly resizable: boolean = true;\r\n\r\n  /**\r\n   * A boolean indicating whether the column is currently being resized.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) resizing: boolean;\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be sortable (i.e. whether the user should be able to click the column header to sort the data).\r\n   */\r\n  @Prop() readonly sortable: boolean = true;\r\n\r\n  /**\r\n   * A boolean indicating whether the user should be able to open a settings panel for the column.\r\n   */\r\n  @Prop() readonly settingable: boolean = true;\r\n\r\n  /**\r\n   * One of \"asc\" or \"desc\", indicating the current sort direction.\r\n   */\r\n  @Prop({ mutable: true, reflect: true })\r\n  sortDirection?: TabularGridColumnSortDirection;\r\n\r\n  @Watch(\"sortDirection\")\r\n  sortDirectionHandler() {\r\n    if (this.sortDirection) {\r\n      this.columnSortChanged.emit({\r\n        columnId: this.columnId,\r\n        sortDirection: this.sortDirection\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the settings panel for the column should be visible.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) showSettings = false;\r\n\r\n  /**\r\n   * Event emitted when the `hidden` property is changed.\r\n   */\r\n  @Event()\r\n  columnHiddenChanged: EventEmitter<TabularGridColumnHiddenChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `size` property is currently being changed (i.e. when the user is dragging to resize the column).\r\n   */\r\n  @Event() columnSizeChanging: EventEmitter<TabularGridColumnSizeChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `size` property has been changed (i.e. when the user finishes dragging to resize the column).\r\n   */\r\n  @Event() columnSizeChanged: EventEmitter<TabularGridColumnSizeChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `order` property is changed.\r\n   */\r\n  @Event() columnOrderChanged: EventEmitter<TabularGridColumnOrderChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `sortDirection` property is changed.\r\n   */\r\n  @Event() columnSortChanged: EventEmitter<TabularGridColumnSortChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `freeze` property is changed.\r\n   */\r\n  @Event()\r\n  columnFreezeChanged: EventEmitter<TabularGridColumnFreezeChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user is dragging the column header to move it.\r\n   */\r\n  @Event() columnDragStarted: EventEmitter<TabularGridColumnDragEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user is dragging the column header to move it.\r\n   */\r\n  @Event() columnDragging: EventEmitter<TabularGridColumnDragEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user stops dragging the column header to move it.\r\n   */\r\n  @Event() columnDragEnded: EventEmitter<TabularGridColumnDragEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user clicks the row selector checkbox (only applicable for `richRowSelector=\"true\"`.\r\n   */\r\n  @Event()\r\n  columnSelectorClicked: EventEmitter<TabularGridColumnSelectorClickedEvent>;\r\n\r\n  componentDidLoad() {\r\n    this.el.addEventListener(\"mousedown\", this.mousedownHandler.bind(this));\r\n  }\r\n\r\n  @Listen(\"click\", { passive: true })\r\n  clickHandler() {\r\n    if (!this.dragging) {\r\n      if (this.sortable) {\r\n        this.sortDirection = this.sortDirection === \"asc\" ? \"desc\" : \"asc\";\r\n      }\r\n    } else {\r\n      this.dragging = false;\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnResizeStarted\")\r\n  columnResizeStartedHandler() {\r\n    this.resizing = true;\r\n  }\r\n\r\n  @Listen(\"columnResizeFinished\")\r\n  columnResizeFinishedHandler() {\r\n    this.resizing = false;\r\n\r\n    this.columnSizeChanged.emit({\r\n      columnId: this.columnId,\r\n      size: this.size\r\n    });\r\n  }\r\n\r\n  private allowColumnReorder(): boolean {\r\n    return this.el.closest(\"ch-tabular-grid\").allowColumnReorder;\r\n  }\r\n\r\n  private mousedownHandler(eventInfo: MouseEvent) {\r\n    eventInfo.preventDefault();\r\n    eventInfo.stopPropagation();\r\n\r\n    if (this.allowColumnReorder()) {\r\n      this.dragMouseDownHandler(eventInfo);\r\n\r\n      document.addEventListener(\"mousemove\", this.dragMouseMoveFn, {\r\n        passive: true\r\n      });\r\n      document.addEventListener(\"mouseup\", this.dragMouseUpHandler.bind(this), {\r\n        once: true\r\n      });\r\n    }\r\n  }\r\n\r\n  private dragMouseDownHandler(eventInfo: MouseEvent) {\r\n    this.dragMouseMoveStartPositionX = eventInfo.pageX;\r\n    this.columnDragStarted.emit({ columnId: this.columnId });\r\n  }\r\n\r\n  private dragMouseMoveHandler(eventInfo: MouseEvent) {\r\n    if (\r\n      this.dragging ||\r\n      Math.abs(this.dragMouseMoveStartPositionX - eventInfo.pageX) > 5\r\n    ) {\r\n      this.dragging = true;\r\n\r\n      this.columnDragging.emit({\r\n        columnId: this.columnId,\r\n        positionX: eventInfo.pageX,\r\n        direction: eventInfo.movementX > 0 ? \"right\" : \"left\"\r\n      });\r\n    }\r\n  }\r\n\r\n  private dragMouseUpHandler() {\r\n    document.removeEventListener(\"mousemove\", this.dragMouseMoveFn);\r\n    this.columnDragEnded.emit({ columnId: this.columnId });\r\n  }\r\n\r\n  private settingsMouseDownHandler(eventInfo: MouseEvent) {\r\n    eventInfo.stopPropagation();\r\n  }\r\n\r\n  private settingsClickHandler = (eventInfo: MouseEvent) => {\r\n    eventInfo.stopPropagation();\r\n    this.showSettings = true;\r\n  };\r\n\r\n  private selectorClickHandler = (eventInfo: MouseEvent) => {\r\n    const target = eventInfo.target as HTMLInputElement;\r\n\r\n    this.richRowSelectorState = target.checked ? \"checked\" : \"\";\r\n    this.columnSelectorClicked.emit({\r\n      checked: target.checked\r\n    });\r\n\r\n    eventInfo.stopPropagation();\r\n  };\r\n\r\n  private selectorTouchEndHandler = (eventInfo: TouchEvent) => {\r\n    eventInfo.stopPropagation();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        part={\r\n          this.parts\r\n            ? tokenMap({\r\n                [TABULAR_GRID_PARTS_DICTIONARY.COLUMN]: true,\r\n                [this.columnId]: true,\r\n                [this.parts.toString()]: typeof this.parts === \"string\"\r\n              })\r\n            : null\r\n        }\r\n      >\r\n        <ul class=\"bar\" part=\"bar\">\r\n          {this.renderSelector()}\r\n          {this.renderName()}\r\n          {this.renderSort()}\r\n          {this.renderSettings()}\r\n          {this.renderResize()}\r\n        </ul>\r\n        <ch-tabular-grid-column-settings\r\n          column={this.el}\r\n          onMouseDown={this.settingsMouseDownHandler}\r\n          show={this.showSettings}\r\n          exportparts=\"\r\n            mask:settings-mask,\r\n            window:settings-window,\r\n            header:settings-header,\r\n            caption:settings-caption,\r\n            close:settings-close,\r\n            main:settings-main,\r\n            footer:settings-footer\r\n          \"\r\n        >\r\n          <slot name=\"settings\"></slot>\r\n        </ch-tabular-grid-column-settings>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  private renderSelector() {\r\n    return (\r\n      <li\r\n        class=\"selector\"\r\n        part=\"bar-selector\"\r\n        hidden={!(this.columnType === \"rich\" && this.richRowSelector)}\r\n      >\r\n        <label part=\"selector-label\">\r\n          <input\r\n            type=\"checkbox\"\r\n            part={[\"selector\", this.richRowSelectorState]\r\n              .filter(part => part !== \"\")\r\n              .join(\" \")}\r\n            onClick={this.selectorClickHandler}\r\n            onTouchEnd={this.selectorTouchEndHandler}\r\n            checked={this.richRowSelectorState === \"checked\"}\r\n            indeterminate={this.richRowSelectorState === \"indeterminate\"}\r\n          />\r\n        </label>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderName() {\r\n    return (\r\n      <li\r\n        class=\"name\"\r\n        part=\"bar-name\"\r\n        title={\r\n          this.columnTooltip ||\r\n          (this.columnNamePosition === \"title\" ? this.columnName : null)\r\n        }\r\n      >\r\n        {this.columnIconUrl || this.columnImage || this.columnImageSet ? (\r\n          <img\r\n            class=\"name-icon\"\r\n            part=\"bar-name-icon\"\r\n            src={this.columnImage || this.columnIconUrl}\r\n            srcSet={this.columnImageSet}\r\n          />\r\n        ) : (\r\n          <div class=\"name-icon\" part=\"bar-name-icon\"></div>\r\n        )}\r\n        <span\r\n          class=\"name-text\"\r\n          part=\"bar-name-text\"\r\n          hidden={this.columnNameHidden || this.columnNamePosition !== \"text\"}\r\n        >\r\n          {this.columnName}\r\n        </span>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderSort() {\r\n    return (\r\n      <li class=\"sort\" part=\"bar-sort\" hidden={!this.sortable}>\r\n        <div class=\"sort-asc\" part=\"bar-sort-ascending\"></div>\r\n        <div class=\"sort-desc\" part=\"bar-sort-descending\"></div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderSettings() {\r\n    return (\r\n      <li class=\"settings\" part=\"bar-settings\" hidden={!this.settingable}>\r\n        <button\r\n          class=\"button\"\r\n          part=\"bar-settings-button\"\r\n          onClick={this.settingsClickHandler}\r\n        ></button>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderResize() {\r\n    return (\r\n      <li class=\"resize\" part=\"bar-resize\" hidden={!this.resizable}>\r\n        <ch-tabular-grid-column-resize\r\n          column={this.el}\r\n          class=\"resize-split\"\r\n          part=\"bar-resize-split\"\r\n        ></ch-tabular-grid-column-resize>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","@layer ch-tabular-grid {\r\n  ch-tabular-grid-columnset {\r\n    display: contents;\r\n  }\r\n}\r\n\r\n@import \"../row/tabular-grid-row.scss\";\r\n@import \"../rowset/tabular-grid-rowset.scss\";\r\n@import \"../cell/tabular-grid-cell.scss\";\r\n","import { Component, Element, h, Host, Listen, Prop } from \"@stencil/core\";\r\nimport { TabularGridColumnSortChangedEvent } from \"../column/tabular-grid-column-types\";\r\nimport { TABULAR_GRID_PARTS_DICTIONARY } from \"../../../common/reserved-names\";\r\nimport { tokenMap } from \"../../../common/utils\";\r\n\r\n/**\r\n * The `ch-tabular-grid-columnset` component represents a group of columns.\r\n */\r\n@Component({\r\n  tag: \"ch-tabular-grid-columnset\",\r\n  styleUrl: \"tabular-grid-columnset.scss\",\r\n  shadow: false\r\n})\r\nexport class ChTabularGridColumnset {\r\n  @Element() el: HTMLChTabularGridColumnsetElement;\r\n\r\n  /**\r\n   * A boolean or string that controls the parts applied to the column.\r\n   * - When `true`, it automatically applies the part names \"column\" and the column's unique ID.\r\n   * - When a string is provided, it appends that string to the default part names \"column\" and the column's ID.\r\n   */\r\n  @Prop() readonly parts: boolean | string;\r\n\r\n  @Listen(\"columnSortChanged\")\r\n  columnSortChangedHandler(\r\n    eventInfo: CustomEvent<TabularGridColumnSortChangedEvent>\r\n  ) {\r\n    const columns: HTMLChTabularGridColumnElement[] = Array.from(\r\n      this.el.querySelectorAll(\"ch-tabular-grid-column\")\r\n    );\r\n\r\n    columns.forEach(column => {\r\n      if (column.columnId !== eventInfo.detail.columnId) {\r\n        column.sortDirection = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        part={\r\n          this.parts\r\n            ? tokenMap({\r\n                [TABULAR_GRID_PARTS_DICTIONARY.COLUMNSET]: true,\r\n                [this.parts.toString()]: typeof this.parts === \"string\"\r\n              })\r\n            : null\r\n        }\r\n      ></Host>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: flex;\r\n  grid-column-start: 1;\r\n  grid-column-end: -1;\r\n  margin-inline-start: calc(var(--indent) * (var(--level) - 1));\r\n}\r\n:host::part(selector-label) {\r\n  display: none;\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Listen,\r\n  Event,\r\n  EventEmitter,\r\n  h,\r\n  Host,\r\n  Prop\r\n} from \"@stencil/core\";\r\nimport { tokenMap } from \"../../../../common/utils\";\r\nimport { TABULAR_GRID_PARTS_DICTIONARY } from \"../../../../common/reserved-names\";\r\nimport HTMLChTabularGridRowsetElement from \"../tabular-grid-rowset\";\r\n\r\n/**\r\n * The `ch-tabular-grid-rowset-legend` component represents a caption for the `ch-tabular-grid-rowset` element.\r\n */\r\n@Component({\r\n  tag: \"ch-tabular-grid-rowset-legend\",\r\n  styleUrl: \"tabular-grid-rowset-legend.scss\",\r\n  shadow: true\r\n})\r\nexport class ChTabularGridRowsetLegend {\r\n  @Element() el: HTMLChTabularGridRowsetLegendElement;\r\n\r\n  /**\r\n   * A boolean or string that controls the parts applied to the legend.\r\n   * - When `true`, it automatically applies the part names \"column\" and the column's unique ID.\r\n   * - When a string is provided, it appends that string to the default part names \"column\" and the column's ID.\r\n   */\r\n  @Prop() readonly parts: boolean | string;\r\n\r\n  /**\r\n   * Event emitted when the legend is clicked.\r\n   */\r\n  @Event() rowsetLegendClicked: EventEmitter<CustomEvent>;\r\n\r\n  @Listen(\"click\", { passive: true })\r\n  clickHandler() {\r\n    this.rowsetLegendClicked.emit();\r\n  }\r\n\r\n  #getRowsetId = () => {\r\n    const rowset = this.el.parentElement as HTMLChTabularGridRowsetElement;\r\n    return rowset?.rowsetId;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        part={\r\n          this.parts\r\n            ? tokenMap({\r\n                [TABULAR_GRID_PARTS_DICTIONARY.ROWSET_LEGEND]: true,\r\n                [this.#getRowsetId()]: !!this.#getRowsetId(),\r\n                [this.parts.toString()]: typeof this.parts === \"string\"\r\n              })\r\n            : null\r\n        }\r\n      >\r\n        <div part=\"caret\"></div>\r\n        <label part=\"selector-label\">\r\n          <input type=\"checkbox\" part=\"selector\"></input>\r\n        </label>\r\n        <div part=\"icon\"></div>\r\n        <slot></slot>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"opHASUA,UAAAC,EAAAC,GAUR,SAAAD,IACE,IAAAE,EAAAD,EAAKE,KAAAC,OAAEA,KAPTC,EAAAC,IAAAJ,OAAA,GAgQAK,EAAAD,IAAAJ,GAAoB,WAClBM,uBAAAN,EAAIG,EAAWH,EAAaO,MAAK,KACjCC,OAAOC,eAAeT,EAAM,QAAS,CACnCU,IAAK,WAAM,OAAAC,uBAAAX,EAAIG,EAAA,IAAJ,EACXC,IAAK,SAAAQ,GACHN,uBAAAN,EAAIG,EAAUS,EAAK,KACnBD,uBAAAX,EAAIa,EAAA,KAAkBZ,KAAtBD,E,EAEFc,WAAY,KACZC,aAAc,M,IAIlBF,EAAAT,IAAAJ,GAAoB,W,MAClB,GAAIW,uBAAAX,EAAIG,EAAA,KAAS,CACfH,EAAKgB,aACH,OACAC,GAAQC,EAAA,GACNA,EAACC,EAA8BC,KAAM,KACrCF,EAAClB,EAAKqB,OAAQ,KACdH,EAACP,uBAAAX,EAAIG,EAAA,KAAQmB,mBAAoBX,uBAAAX,EAAIG,EAAA,OAAY,S,SA5QvDQ,uBAAAX,EAAIK,EAAA,KAAkBJ,KAAtBD,G,SANFQ,OAAAC,eAAWX,EAAA,qBAAkB,C,IAA7B,WACE,MAAO,CAAC,WAAY,S,uCAQtBA,EAAAyB,UAAAC,kBAAA,WACEtB,KAAKuB,iBAAiB,mBAAoBvB,KAAKwB,yBAE/C,GAAIxB,KAAKyB,UAAYzB,KAAK0B,OAAQ,CAChC1B,KAAK2B,KAAKC,aAAa5B,K,CAGzBS,uBAAAT,KAAIW,EAAA,KAAkBZ,KAAtBC,K,EAGFJ,EAAAyB,UAAAQ,yBAAA,SAAyBC,EAAcC,EAAmBrB,G,MACxD,GAAIoB,IAAS,WAAY,CACvB9B,KAAKyB,SAAWf,IAAU,KAAOA,IAAU,QAAU,K,CAEvD,GAAIoB,IAAS,SAAU,CACrB9B,KAAK0B,OAAShB,IAAU,KAAOA,IAAU,QAAU,K,EAGrDM,EAAAhB,KAAK2B,QAAI,MAAAX,SAAA,SAAAA,EAAEY,aAAa5B,K,EAM1BM,OAAAC,eAAIX,EAAAyB,UAAA,OAAI,C,IAAR,W,MACE,OAAOL,EAAAhB,KAAKgC,cAAU,MAAAhB,SAAA,EAAAA,EAAIhB,KAAKiC,gB,uCAMjC3B,OAAAC,eAAIX,EAAAyB,UAAA,QAAK,C,IAAT,W,MACE,OAAOL,EAAAhB,KAAKkC,aAAa,YAAQ,MAAAlB,SAAA,EAAAA,EAAI,E,uCAMvCV,OAAAC,eAAIX,EAAAyB,UAAA,cAAW,C,IAAf,WACE,OAAOrB,KAAKmC,aAAa,c,MAG3B,SAAgBzB,G,cACd,IAAM0B,GAAqBC,EAAArC,KAAK2B,KAAKW,uBAAmB,MAAAD,SAAA,SAAAA,EAAEE,MAAM,KAEhE,GAAI7B,IAAU,KAAM,CAClBV,KAAKc,aAAa,cAAe,IACjC,GAAId,KAAK2B,KAAKW,oBAAqB,EACjCtB,EAAAhB,KAAKwC,WAAUC,IAAGC,MAAA1B,EAAIoB,E,MAEnB,CACLpC,KAAK2C,gBAAgB,eACrB,GAAI3C,KAAK2B,KAAKW,oBAAqB,EACjCM,EAAA5C,KAAKwC,WAAUK,OAAMH,MAAAE,EAAIR,E,yCAQ/B9B,OAAAC,eAAIX,EAAAyB,UAAA,WAAQ,C,IAAZ,WACE,OAAOrB,KAAKmC,aAAa,W,MAG3B,SAAazB,G,cACX,IAAMoC,GAAkBT,EAAArC,KAAK2B,KAAKoB,oBAAgB,MAAAV,SAAA,SAAAA,EAAEE,MAAM,KAE1D,GAAI7B,IAAU,KAAM,CAClB,IAAKV,KAAKmC,aAAa,YAAa,CAClCnC,KAAKc,aAAa,WAAY,G,CAEhC,GAAId,KAAK2B,KAAKoB,iBAAkB,EAC9B/B,EAAAhB,KAAKwC,WAAUC,IAAGC,MAAA1B,EAAI8B,E,MAEnB,CACL9C,KAAK2C,gBAAgB,YACrB,GAAI3C,KAAK2B,KAAKoB,iBAAkB,EAC9BH,EAAA5C,KAAKwC,WAAUK,OAAMH,MAAAE,EAAIE,E,yCAQ/BxC,OAAAC,eAAIX,EAAAyB,UAAA,SAAM,C,IAAV,WACE,OAAOrB,KAAKmC,aAAa,S,MAG3B,SAAWzB,G,cACT,IAAMsC,GAAgBX,EAAArC,KAAK2B,KAAKsB,kBAAc,MAAAZ,SAAA,SAAAA,EAAEE,MAAM,KAEtD,GAAI7B,IAAU,KAAM,CAClB,IAAKV,KAAKmC,aAAa,UAAW,CAChCnC,KAAKc,aAAa,SAAU,G,CAE9B,GAAId,KAAK2B,KAAKsB,eAAgB,EAC5BjC,EAAAhB,KAAKwC,WAAUC,IAAGC,MAAA1B,EAAIgC,E,MAEnB,CACLhD,KAAK2C,gBAAgB,UACrB,GAAI3C,KAAK2B,KAAKsB,eAAgB,EAC5BL,EAAA5C,KAAKwC,WAAUK,OAAMH,MAAAE,EAAII,E,yCAQ/B1C,OAAAC,eAAIX,EAAAyB,UAAA,UAAO,C,IAAX,WACE,OAAOrB,KAAKmC,aAAa,U,MAG3B,SAAYzB,G,cACV,IAAMwC,GAAiBb,EAAArC,KAAK2B,KAAKwB,mBAAe,MAAAd,SAAA,SAAAA,EAAEE,MAAM,KAExD,GAAI7B,IAAU,KAAM,CAClBV,KAAKc,aAAa,UAAW,IAC7B,GAAId,KAAK2B,KAAKwB,gBAAiB,EAC7BnC,EAAAhB,KAAKwC,WAAUC,IAAGC,MAAA1B,EAAIkC,E,MAEnB,CACLlD,KAAK2C,gBAAgB,WACrB,GAAI3C,KAAK2B,KAAKwB,gBAAiB,EAC7BP,EAAA5C,KAAKwC,WAAUK,OAAMH,MAAAE,EAAIM,E,yCAQ/B5C,OAAAC,eAAIX,EAAAyB,UAAA,eAAY,C,IAAhB,WACE,QAASrB,KAAKoD,cAAc,yB,uCAM9B9C,OAAAC,eAAIX,EAAAyB,UAAA,YAAS,C,IAAb,WACE,OAAOrB,KAAKmC,aAAa,Y,MAG3B,SAAczB,GACZ,IAAM2C,EAAgBrD,KAAKsD,YAAc5C,EAEzC,GAAIA,EAAO,CACTV,KAAKc,aAAa,YAAa,G,KAC1B,CACLd,KAAK2C,gBAAgB,Y,CAGvB,GAAIU,EAAe,CACjBrD,KAAKqD,cACH,IAAIE,YAAY,sBAAuB,CACrCC,QAAS,KACTC,SAAU,KACVC,OAAQ,CAAEvC,MAAOnB,KAAKmB,MAAOmC,UAAW5C,K,wCAShDJ,OAAAC,eAAIX,EAAAyB,UAAA,OAAI,C,IAAR,WACE,OAAOrB,KAAKmC,aAAa,O,MAG3B,SAASzB,GACP,GAAIA,IAAU,KAAM,CAClBV,KAAKc,aAAa,OAAQ,G,KACrB,CACLd,KAAK2C,gBAAgB,O,wCAIlB/C,EAAAyB,UAAAsC,QAAA,SACLC,GAEA,OAAO5D,KAAKoD,cACV,6CAAAS,OAA6CD,EAAOE,cAAa,K,EAO9DlE,EAAAyB,UAAA0C,UAAA,WACL,OAAOC,MAAMC,KACXjE,KAAKkE,iBAAiB,kCACtBC,MAAK,SAACC,GAAuC,OAAAA,EAAKL,WAAL,G,EAM1CnE,EAAAyB,UAAAgD,cAAA,WACLrE,KAAKqD,cACH,IAAIE,YAAY,mBAAoB,CAAEC,QAAS,KAAMC,SAAU,O,EAO5D7D,EAAAyB,UAAAiD,sBAAA,WACL,IAAIC,EAEJ,IAAKvE,KAAKwE,kBAAmB,CAC3BD,EAAO,IAAIE,O,MACN,GAAIzE,KAAKwE,oBAAsBxE,KAAK0E,iBAAkB,CAC3DH,EAAOvE,KAAKwE,kBAAkBF,uB,KACzB,CACL,IAAMK,EAAgB3E,KAAKwE,kBAAkBF,wBAC7C,IAAMM,EAAe5E,KAAK0E,iBAAiBJ,wBAE3CC,EAAO,IAAIE,QACTE,EAAcE,EACdF,EAAcG,EACdF,EAAaC,EAAIF,EAAcE,EAAID,EAAaG,MAChDH,EAAaE,EAAIH,EAAcG,EAAIF,EAAaI,O,CAIpD,OAAOT,C,EAGD3E,EAAAyB,UAAAG,wBAAA,SAAwByD,GAC9B,IAAMC,EAAYD,EAAUE,cAE5B,GAAID,EAAUE,aAAc,CAC1BpF,KAAKsD,WAAatD,KAAKsD,S,CAEzB2B,EAAUI,iB,EAGJzF,EAAAyB,UAAAY,eAAA,WACNjC,KAAKgC,WAAahC,KAAKsF,QAAQ,mBAC/B,OAAOtF,KAAKgC,U,YAjQNuD,a,0CA+RV,IAAKC,eAAehF,IAAI,uBAAwB,CAC9CgF,eAAeC,OAAO,sBAAuB7F,EAC/C,C,kBCpSUD,UAAA+F,EAAA7F,GAYR,SAAA6F,IACE,IAAA5F,EAAAD,EAAKE,KAAAC,OAAEA,KAVDF,EAAA6F,cAAgB,E,SAKxBrF,OAAAC,eAAWmF,EAAA,qBAAkB,C,IAA7B,WACE,MAAO,CAAC,W,uCAOVA,EAAArE,UAAAC,kBAAA,WACEtB,KAAKuB,iBACH,sBACAvB,KAAK4F,4BAEP5F,KAAK6F,a,EAGPH,EAAArE,UAAAQ,yBAAA,SAAyBC,EAAcC,EAAmBrB,GACxD,GAAIoB,IAAS,WAAY,CACvB9B,KAAK8F,SAAWpF,C,GAOpBJ,OAAAC,eAAImF,EAAArE,UAAA,YAAS,C,IAAb,WACE,OAAOrB,KAAKmC,aAAa,Y,MAG3B,SAAczB,GACZ,GAAIA,EAAO,CACTV,KAAKc,aAAa,YAAa,G,KAC1B,CACLd,KAAK2C,gBAAgB,Y,wCAOzBrC,OAAAC,eAAImF,EAAArE,UAAA,QAAK,C,IAAT,WACE,IAAKrB,KAAK2F,cAAe,CACvB3F,KAAK+F,c,CAGP,OAAO/F,KAAK2F,a,uCAMPD,EAAArE,UAAAiD,sBAAA,WACL,IAAIC,EAEJ,IAAMyB,EAAaC,SAASjG,KAAKkG,MAAMC,iBAAiB,gBACxD,IAAMC,EAAgBH,SACpBjG,KAAKkG,MAAMC,iBAAiB,mBAG9B,IAAKnG,KAAKwE,kBAAmB,CAC3B,IAAM6B,EAAWrG,KAAK2B,KAAK2E,WACxBlD,cAAc,SACdkB,wBACHC,EAAO,IAAIE,QAAQ4B,EAASxB,EAAGwB,EAASvB,EAAGuB,EAAStB,MAAO,E,MACtD,GAAI/E,KAAKwE,oBAAsBxE,KAAK0E,iBAAkB,CAC3D,IAAM6B,EAAevG,KAAKwE,kBAAkBF,wBAE5CC,EAAO,IAAIE,QACT8B,EAAa1B,EACb0B,EAAazB,EAAIkB,EACjBO,EAAa1B,EAAI0B,EAAaxB,MAC9BwB,EAAazB,EAAIyB,EAAavB,OAASgB,EAAaI,E,KAEjD,CACL,IAAMG,EAAevG,KAAKwE,kBAAkBF,wBAC5C,IAAMkC,EAAcxG,KAAK0E,iBAAiBJ,wBAE1CC,EAAO,IAAIE,QACT8B,EAAa1B,EACb0B,EAAazB,EAAIkB,EACjBQ,EAAY3B,EAAI0B,EAAa1B,EAAI2B,EAAYzB,MAC7CyB,EAAY1B,EACVyB,EAAazB,EACb0B,EAAYxB,OACZgB,EACAI,E,CAIN,OAAO7B,C,EAGDmB,EAAArE,UAAAuE,2BAAA,SAA2BX,GACjCA,EAAUI,kBAEVrF,KAAKsD,WAAatD,KAAKsD,S,EAGjBoC,EAAArE,UAAAwE,YAAA,WACN7F,KAAKkG,MAAMO,YAAY,UAAWzG,KAAK0G,MAAMtF,W,EAGvCsE,EAAArE,UAAA0E,aAAA,W,QACN/F,KAAK2F,eAAgB/C,GAAA5B,EAAAhB,KAAK2G,qBAAiB,MAAA3F,SAAA,SAAAA,EAAE0F,SAAK,MAAA9D,SAAA,EAAAA,EAAI,EAEtD,GAAI5C,KAAK4G,aAAe5G,KAAK6G,cAAe,CAC1C7G,KAAK2F,e,GAIDD,EAAArE,UAAAuF,UAAA,W,MACN,QAAO5F,EAAAhB,KAAKwE,qBAAiB,MAAAxD,SAAA,SAAAA,EAAE8F,WAAY,+B,EAGrCpB,EAAArE,UAAAwF,YAAA,WACN,OAAO7G,KAAK+G,cAAcD,UAAY,qB,EAGhCpB,EAAArE,UAAAsF,gBAAA,WACN,IAAMK,EAAOhH,KAAK+G,cAAczB,QAC9B,2CAGF,GAAI0B,EAAKF,UAAY,yBAA0B,CAC7C,OAAOE,C,CAGT,OAAOC,S,YAvID1B,aA2IV,IAAKC,eAAehF,IAAI,0BAA2B,CACjDgF,eAAeC,OACb,yBACAC,EAEJ,CCvIA,IAAYwB,GAAZ,SAAYA,GACVA,EAAA,iBACAA,EAAA,eACAA,EAAA,kBACD,EAJD,CAAYA,MAAmB,K,kBAS2BvH,UAAAwH,EAAAtH,GAiBxD,SAAAsH,IACE,IAAArH,EAAAD,EAAKE,KAAAC,OAAEA,KAjBDF,EAAAsH,SAAWF,EAAoBG,MAMvCC,EAAApH,IAAAJ,OAAA,GAuUAyH,EAAArH,IAAAJ,GAAoB,WAClBM,uBAAAN,EAAIwH,EAAWxH,EAAaO,MAAK,KACjCC,OAAOC,eAAeT,EAAM,QAAS,CACnCU,IAAK,WAAM,OAAAC,uBAAAX,EAAIwH,EAAA,IAAJ,EACXpH,IAAK,SAAAQ,GACHN,uBAAAN,EAAIwH,EAAU5G,EAAK,KACnBD,uBAAAX,EAAI0H,EAAA,KAAkBzH,KAAtBD,E,EAEFc,WAAY,KACZC,aAAc,M,IAIlB2G,EAAAtH,IAAAJ,GAAoB,W,MAClBW,uBAAAX,EAAIwH,EAAA,MACFxH,EAAKgB,aACH,OACAC,GAAQC,EAAA,GACNA,EAACC,EAA8BwG,MAAO,KACtCzG,EAAClB,EAAK4H,UAAW5H,EAAK4H,OACtB1G,EAACP,uBAAAX,EAAIwH,EAAA,KAAQlG,mBAAoBX,uBAAAX,EAAIwH,EAAA,OAAY,S,QA/UvD7G,uBAAAX,EAAIyH,EAAA,KAAkBxH,KAAtBD,GACAA,EAAK6H,qB,SAPPrH,OAAAC,eAAW4G,EAAA,qBAAkB,C,IAA7B,WACE,MAAO,CAAC,YAAa,WAAY,eAAgB,c,uCASnDA,EAAA9F,UAAAC,kBAAA,WACEb,uBAAAT,KAAIwH,EAAA,KAAkBzH,KAAtBC,MACA,GAAIA,KAAKoH,WAAaF,EAAoBG,MAAO,CAC/CrH,KAAKyF,Q,GAIT0B,EAAA9F,UAAAQ,yBAAA,SAAyBC,EAAcC,EAAmBrB,GACxD,GAAIoB,IAAS,YAAa,CACxB9B,KAAKoH,SAAW1G,C,CAElB,GAAIoB,IAAS,WAAY,CACvB9B,KAAKoH,SAAWF,EAAoBU,KACpC5H,KAAK6H,QAAUnH,IAAU,KAAOA,IAAU,QAAU,K,CAEtD,GAAIoB,IAAS,eAAgB,CAC3B9B,KAAKoH,SAAWF,EAAoBU,KACpC5H,KAAK8H,YAAcpH,IAAU,KAAOA,IAAU,QAAU,K,CAE1D,GAAIoB,IAAS,cAAe,CAC1B9B,KAAKoH,SAAWF,EAAoBU,KACpC5H,KAAK+H,WAAarH,IAAU,KAAOA,IAAU,QAAU,K,GAO3DJ,OAAAC,eAAI4G,EAAA9F,UAAA,OAAI,C,IAAR,WACE,OAAOrB,KAAKoH,Q,MAGd,SAAS1G,GACP,GAAIV,KAAKoH,WAAa1G,EAAO,CAC3BV,KAAKoH,SAAW1G,EAChBV,KAAKyF,Q,wCAOTnF,OAAAC,eAAI4G,EAAA9F,UAAA,OAAI,C,IAAR,WACE,OAAOrB,KAAKsF,QAAQ,kB,uCAMtBhF,OAAAC,eAAI4G,EAAA9F,UAAA,SAAM,C,IAAV,WACE,IAAM2G,EAAYhE,MAAM3C,UAAU4G,QAAQlI,KACxCC,KAAKkI,IAAIhE,iBAAiB,iCAC1BlE,MAEF,OAAOA,KAAK2B,KAAKyB,cACf,sCAAAS,OAAsCmE,EAAY,EAAC,K,uCAOvD1H,OAAAC,eAAI4G,EAAA9F,UAAA,MAAG,C,IAAP,WACE,OAAOrB,KAAK+G,a,uCAMdzG,OAAAC,eAAI4G,EAAA9F,UAAA,SAAM,C,IAAV,W,MACE,OAAOL,EAAAhB,KAAKkC,aAAa,aAAS,MAAAlB,SAAA,EAAAA,EAAI,E,uCAMxCV,OAAAC,eAAI4G,EAAA9F,UAAA,WAAQ,C,IAAZ,WACE,OAAOrB,KAAKmC,aAAa,W,MAG3B,SAAazB,GACX,GAAIA,IAAU,KAAM,CAClBV,KAAKc,aAAa,WAAY,G,KACzB,CACLd,KAAK2C,gBAAgB,W,wCAOzBrC,OAAAC,eAAI4G,EAAA9F,UAAA,UAAO,C,IAAX,WACE,OAAOrB,KAAKmC,aAAa,U,MAG3B,SAAYzB,GACV,GAAIA,IAAU,KAAM,CAClBV,KAAKc,aAAa,UAAW,G,KACxB,CACLd,KAAK2C,gBAAgB,U,wCAOlBwE,EAAA9F,UAAA0C,UAAA,WACL,OAAO/D,KAAKmI,eAAiB,I,EAMxBhB,EAAA9F,UAAAgD,cAAA,WACLrE,KAAKqD,cACH,IAAIE,YAAY,oBAAqB,CAAEC,QAAS,KAAMC,SAAU,O,EAO7D0D,EAAA9F,UAAA+G,mBAAA,SAAmB1H,GACxBV,KAAKqI,SAASC,QAAU5H,EAExB,GAAIV,KAAKqI,SAASC,QAAS,CACzBtI,KAAKqI,SAASvH,aAAa,OAAQ,mB,KAC9B,CACLd,KAAKqI,SAASvH,aAAa,OAAQ,W,GAI/BqG,EAAA9F,UAAAsG,mBAAA,eAAA7H,EAAAE,KACNA,KAAKuB,iBAAiB,WAAW,WAC/B,IAAKzB,EAAKgI,YAAa,CACrBhI,EAAKuD,cACH,IAAIE,YAAY,cAAe,CAAEC,QAAS,KAAMC,SAAU,O,MAM1D0D,EAAA9F,UAAAkH,sBAAA,SAAsBtD,GAC5BA,EAAUI,kBACVrF,KAAKqD,cACH,IAAIE,YAAY,mBAAoB,CAAEC,QAAS,KAAMC,SAAU,O,EAI3D0D,EAAA9F,UAAAmH,qBAAA,SAAqBvD,GAC3BA,EAAUI,kBAEVrF,KAAKqD,cACH,IAAIE,YACF,sBACA,CACEC,QAAS,KACTC,SAAU,KACVC,OAAQ,CACN4E,QAAStI,KAAKqI,SAASC,QACvBG,MAAOxD,EAAUyD,Y,EAOnBvB,EAAA9F,UAAAsH,0BAAA,SAA0B1D,GAChC,IAAKA,EAAUyD,SAAU,CACvBzD,EAAUI,iB,GAIN8B,EAAA9F,UAAAuH,qBAAA,SAAqB3D,GAC3BA,EAAU4D,iBACV5D,EAAUI,kBAEVrF,KAAKqD,cACH,IAAIE,YAAqC,iBAAkB,CACzDC,QAAS,KACTC,SAAU,KACVC,OAAQ,CACNwE,IAAKlI,KAAKkI,O,EAMVf,EAAA9F,UAAAyH,mBAAA,WACN9I,KAAKqD,cACH,IAAIE,YAAY,uBAAwB,CACtCC,QAAS,KACTC,SAAU,O,EAKR0D,EAAA9F,UAAAoE,OAAA,WACN,OAAQzF,KAAKoH,UACX,KAAKF,EAAoBU,KACvB5H,KAAK+I,aACL,MACF,KAAK7B,EAAoB8B,SACvBhJ,KAAKiJ,iBACL,M,EAIE9B,EAAA9F,UAAA0H,WAAA,WACN,IAAIG,EAAO,GAEX,IAAKlJ,KAAKsG,YAActG,KAAKsG,WAAW6C,YAAc,GAAI,CACxDnJ,KAAKoJ,aAAa,CAAEC,KAAM,SAE1B,GAAIrJ,KAAK6H,QAAS,CAChBqB,GAAQ,oD,CAKV,GAAIlJ,KAAK8H,YAAa,CACpBoB,GAAQ,6K,CAQV,GAAIlJ,KAAK+H,WAAY,CACnBmB,GAAQ,6D,CAKVlJ,KAAKsG,WAAW6C,UAAY,aAAAtF,OACxBqF,EAAI,mCAIR,GAAIlJ,KAAK6H,QAAS,CAChB7H,KAAKsJ,KAAOtJ,KAAKsG,WAAWlD,cAAc,sBAC1CpD,KAAKsJ,KAAK/H,iBACR,YACAvB,KAAK4I,qBAAqBW,KAAKvJ,M,CAInC,GAAIA,KAAK+H,WAAY,CACnB/H,KAAKwJ,OAASxJ,KAAKsG,WAAWlD,cAAc,yBAC5CpD,KAAKwJ,OAAOjI,iBACV,QACAvB,KAAK8I,mBAAmBS,KAAKvJ,M,CAIjC,GAAIA,KAAK8H,YAAa,CACpB9H,KAAKqI,SAAWrI,KAAKsG,WAAWlD,cAAc,qBAC9CpD,KAAKqI,SAAS9G,iBAAiB,aAAa,SAAC0D,GAC3C,OAAAA,EAAUI,iBAAV,IAEFrF,KAAKqI,SAAS9G,iBAAiB,YAAY,SAAC0D,GAC1C,OAAAA,EAAUI,iBAAV,IAEFrF,KAAKqI,SAAS9G,iBACZ,QACAvB,KAAKwI,qBAAqBe,KAAKvJ,OAGjCA,KAAKyJ,cAAgBzJ,KAAKsG,WAAWlD,cACnC,2BAEFpD,KAAKyJ,cAAclI,iBACjB,aACA,SAAC0D,GAA0B,OAAAA,EAAUI,iBAAV,IAE7BrF,KAAKyJ,cAAclI,iBACjB,YACA,SAAC0D,GAA0B,OAAAA,EAAUI,iBAAV,IAE7BrF,KAAKyJ,cAAclI,iBACjB,QACAvB,KAAK2I,0BAA0BY,KAAKvJ,M,IAMpCmH,EAAA9F,UAAA4H,eAAA,WACN,IAAKjJ,KAAKsG,YAActG,KAAKsG,WAAW6C,YAAc,GAAI,CACxDnJ,KAAKoJ,aAAa,CAAEC,KAAM,SAC1BrJ,KAAKsG,WAAW6C,UAAY,2QAS5BnJ,KAAK0J,MAAQ1J,KAAKsG,WAAWlD,cAAc,kBAC3CpD,KAAK0J,MAAMnI,iBACT,YACAvB,KAAKuI,sBAAsBgB,KAAKvJ,OAElCA,KAAK0J,MAAMnI,iBAAiB,SAAS,SAAA0D,GACnC,OAAAA,EAAUI,iBAAV,G,aAzUkDE,a,0CAmX1D,IAAKC,eAAehF,IAAI,wBAAyB,CAC/CgF,eAAeC,OAAO,uBAAwB0B,EAChD,C,iBCrYE,SAAAwC,EACEC,EACAC,EACAC,GALM9J,KAAA+J,gBAAkB,EAOxB/J,KAAK8J,MAAQA,EACb9J,KAAK6J,QAAUA,EAAQG,KAAI,SAAApG,GAAM,OAC/BqG,QAASrG,EACTW,KAAMX,EAAOU,wBACb4F,WAAY,EACZC,MAAOvG,EAAOuG,MAJiB,IAMjCnK,KAAK4D,OAAS5D,KAAK6J,QAAQO,MAAK,SAAAC,GAAQ,OAAAA,EAAKJ,QAAQL,WAAaA,CAA1B,IAExC5J,KAAK6J,QAAQS,QAAQtK,KAAKuK,oBAAoBhB,KAAKvJ,M,CAGrD2J,EAAAtI,UAAAmJ,SAAA,SAASC,GAAT,IAAA3K,EAAAE,KAIE,IAAM0K,EAAc1K,KAAK4D,OAAOqG,QAAQE,MAKxC,IAAMQ,EAAe3K,KAAK4D,OAAOqG,QAAQW,OAEzC,IAAIC,EAAc,EAClB,IAAIC,EAAqB,MAEzB9K,KAAK4D,OAAOsG,WAAa,EACzBlK,KAAK6J,QACFkB,QAAO,SAAAnH,GAAU,OAAAA,EAAOqG,QAAQW,SAAWD,CAA1B,IACjBL,SAAQ,SAAA1G,GAIP,IAAMoH,EAAcpH,EAAOqG,QAAQE,MAOnC,IAAMc,EAAgBP,EAAcM,EAAc,GAAK,EAMvD,IAAME,GACHR,EAAcM,EAAc,GAAK,IAAMlL,EAAKgK,OAAS,EAAI,GAE5D,GACElG,EAAOW,KAAK4G,KAAOV,GACnBA,EAAW7G,EAAOW,KAAK6G,OACvBJ,IAAgBN,EAChB,CAKA5K,EAAKuL,mBAAmBzH,EAAQsH,GAGhCtH,EAAOuG,MAAQvG,EAAOqG,QAAQE,MAAQc,EAEtCJ,EAAcG,C,MACT,GACLP,EAAW7G,EAAOW,KAAK4G,OACtBrL,EAAKgK,MAAQkB,EAAcN,EAAcM,EAAcN,GACxD,CAKA5K,EAAKuL,mBAAmBzH,EAAQsH,GAGhCtH,EAAOuG,MAAQvG,EAAOqG,QAAQE,MAAQc,EAEtC,IACGJ,IACA/K,EAAKgK,MAAQkB,EAAcH,EAAcG,EAAcH,GACxD,CACAA,EAAcG,C,OAEX,GACLP,EAAW7G,EAAOW,KAAK6G,QACtBtL,EAAKgK,MAAQkB,EAAcN,EAAcM,EAAcN,GACxD,CAKA5K,EAAKuL,mBAAmBzH,EAAQsH,GAGhCtH,EAAOuG,MAAQvG,EAAOqG,QAAQE,MAAQc,EAEtC,IACGJ,IACA/K,EAAKgK,MAAQkB,EAAcH,EAAcG,EAAcH,GACxD,CACAA,EAAcG,C,OAEX,GAAIA,IAAgBN,EAAa,CAKtC5K,EAAKwL,oBAAoB1H,E,KAI/B5D,KAAK4D,OAAOuG,MAAQU,EAAcA,EAAc7K,KAAK4D,OAAOqG,QAAQE,MAEpEW,EAAqBD,IAAgB7K,KAAK+J,gBAC1C/J,KAAK+J,gBAAkBc,EAEvB,OAAOC,C,EAGTnB,EAAAtI,UAAAkK,QAAA,WACEvL,KAAK6J,QAAQS,SAAQ,SAAA1G,GACnBA,EAAOqG,QAAQE,MAAQvG,EAAOuG,MAC9BvG,EAAOsG,WAAa,C,KAIxBP,EAAAtI,UAAAmK,eAAA,SAAe5H,G,MACb,OAAA5C,EAAA,GACEA,EAAC,4BAAA6C,OAA4BD,EAAOE,cAAa,eAAe,cAAAD,OAC9D7D,KAAK6J,QAAQO,MAAK,SAAAqB,GAAc,OAAAA,EAAWxB,UAAYrG,CAAvB,IAC7BsG,WACL,O,GAIJP,EAAAtI,UAAAqK,oBAAA,WAIE,IAAIC,EACJ,IAAIC,EAEJ5L,KAAK6J,QAAQS,SAAQ,SAAAD,GACnB,IACGA,EAAKJ,QAAQ4B,UACZF,GAAatB,EAAKF,MAAQwB,EAAUxB,OACtC,CACAwB,EAAYtB,C,CAEd,IAAKA,EAAKJ,QAAQ4B,UAAYD,GAAYvB,EAAKF,MAAQyB,EAASzB,OAAQ,CACtEyB,EAAWvB,C,KAIf,MAAO,CACLyB,YAAaH,EAAU1B,QACvB8B,WAAYH,EAAS3B,Q,EAIjBN,EAAAtI,UAAAgK,mBAAA,SACNzH,EACAsH,GAIAtH,EAAOsG,WAAalK,KAAK4D,OAAOW,KAAKQ,MAAQmG,EAI7ClL,KAAK4D,OAAOsG,YAActG,EAAOW,KAAKQ,OAASmG,GAAkB,E,EAG3DvB,EAAAtI,UAAAiK,oBAAA,SAAoB1H,GAE1BA,EAAOsG,WAAa,EAGpBtG,EAAOuG,MAAQvG,EAAOqG,QAAQE,K,EAGxBR,EAAAtI,UAAAkJ,oBAAA,SAAoB3G,GAC1B,GAAIA,EAAOqG,QAAQ4B,OAAQ,CACzB,IAAMG,EACJhM,KAAKiM,0BAA0BrI,IAC/B5D,KAAKkM,sBAAsBtI,GAE7BA,EAAOW,KAAO,IAAIE,QAChBb,EAAOqG,QAAQE,MAAQ6B,EAAc/B,QAAQE,MACzC6B,EAAczH,KAAK4G,KACnBa,EAAczH,KAAK6G,MACvBY,EAAczH,KAAKO,EACnB,EACAkH,EAAczH,KAAKS,O,GAKjB2E,EAAAtI,UAAA4K,0BAAA,SACNJ,GAEA,IAAIM,EAEJnM,KAAK6J,QAAQS,SAAQ,SAAA1G,GACnB,IACGA,EAAOqG,QAAQ4B,QAChBjI,EAAOqG,QAAQE,MAAQ0B,EAAO5B,QAAQE,SACpCgC,GAAYvI,EAAOqG,QAAQE,MAAQgC,EAASlC,QAAQE,OACtD,CACAgC,EAAWvI,C,KAIf,OAAOuI,C,EAGDxC,EAAAtI,UAAA6K,sBAAA,SACNL,GAEA,IAAIO,EAEJpM,KAAK6J,QAAQS,SAAQ,SAAA1G,GACnB,IACGA,EAAOqG,QAAQ4B,QAChBjI,EAAOqG,QAAQE,MAAQ0B,EAAO5B,QAAQE,SACpCiC,GAAQxI,EAAOqG,QAAQE,MAAQiC,EAAKnC,QAAQE,OAC9C,CACAiC,EAAOxI,C,KAIX,OAAOwI,C,+BCnOT,SAAAC,EAAYC,GAVJtM,KAAAuM,kBAAoB,IAAIC,iBAC9BxM,KAAKyM,cAAclD,KAAKvJ,OAElBA,KAAA0M,qBAAuB,IAAIC,eACjC3M,KAAK4M,oBAAoBrD,KAAKvJ,OAGxBA,KAAA6M,eAA0D,GAC1D7M,KAAA8M,aAAyB,GAG/B9M,KAAKsM,QAAUA,EACftM,KAAK6J,QAAU7F,MAAMC,KACnBjE,KAAKsM,QAAQ3K,KAAKuC,iBAAiB,2BAGrClE,KAAK+M,mBAEL/M,KAAKgN,cAAchN,KAAK6J,SACxB7J,KAAKiN,yBAELjN,KAAKkN,oBACLlN,KAAKmN,iB,CAGAd,EAAAhL,UAAA+L,UAAA,SAAUxD,GACf,OAAO5J,KAAK6J,QAAQO,MAAK,SAAAxG,GAAU,OAAAA,EAAOgG,WAAaA,CAApB,G,EAG9ByC,EAAAhL,UAAAgM,WAAA,SAAWC,GAAA,GAAAA,SAAA,GAAAA,EAAA,KAAc,CAC9B,GAAIA,EAAQ,CACV,OAAOtN,KAAK6J,QAAQ0D,KAAKvN,KAAKwN,c,CAEhC,OAAOxN,KAAK6J,O,EAGPwC,EAAAhL,UAAAqK,oBAAA,WAIL,IAAII,EACJ,IAAIC,EAEJ/L,KAAK6J,QAAQS,SAAQ,SAAA1G,GACnB,IACGA,EAAOiI,UACNC,GAAelI,EAAOuG,MAAQ2B,EAAY3B,OAC5C,CACA2B,EAAclI,C,CAEhB,IAAKA,EAAOiI,UAAYE,GAAcnI,EAAOuG,MAAQ4B,EAAW5B,OAAQ,CACtE4B,EAAanI,C,KAIjB,MAAO,CACLkI,YAAWA,EACXC,WAAUA,E,EAIPM,EAAAhL,UAAAoM,kBAAA,WACL,OAAOzN,KAAK6J,QAAQO,MAClB,SAAAxG,GAAU,OAAAA,EAAO8J,aAAe,QAAU9J,EAAO+J,eAAvC,G,EAIPtB,EAAAhL,UAAA6L,kBAAA,WACL,IAAMU,EAAc5N,KAAK6J,QACtBkB,QAAO,SAAAnH,GAAU,OAAAA,EAAOgH,SAAW,OAAlB,IACjB2C,KAAKvN,KAAKwN,eACb,IAAMK,EAAW7N,KAAK6J,QACnBkB,QAAO,SAAAnH,GAAU,OAAAA,EAAOgH,SAAW,SAAWhH,EAAOgH,SAAW,KAA/C,IACjB2C,KAAKvN,KAAKwN,eACb,IAAMM,EAAY9N,KAAK6J,QACpBkB,QAAO,SAAAnH,GAAU,OAAAA,EAAOgH,SAAW,KAAlB,IACjB2C,KAAKvN,KAAKwN,eACb,IAAIrD,EAAQ,EAEZyD,EAAYtD,SAAQ,SAAA1G,GAAM,OAAKA,EAAOuG,MAAQA,GAApB,IAC1B0D,EAASvD,SAAQ,SAAA1G,GAAM,OAAKA,EAAOuG,MAAQA,GAApB,IACvB2D,EAAUxD,SAAQ,SAAA1G,GAAM,OAAKA,EAAOuG,MAAQA,GAApB,G,EAGlBkC,EAAAhL,UAAA2L,cAAA,SAAcnD,GAAd,IAAA/J,EAAAE,KACN6J,EAAQS,SAAQ,SAAA1G,GACd9D,EAAKiO,eAAenK,GACpB9D,EAAKkO,kBAAkBpK,GACvB9D,EAAKmO,kBAAkBrK,GACvB9D,EAAKoO,iBAAiBtK,GACtB9D,EAAKqO,4BAA4BvK,GACjC9D,EAAKsO,2BAA2BxK,GAChC9D,EAAKuO,iBAAiBzK,E,KAIlByI,EAAAhL,UAAA0M,eAAA,SAAenK,GACrBA,EAAOgG,WAAPhG,EAAOgG,SAAa5J,KAAKsO,oB,EAGnBjC,EAAAhL,UAAA2M,kBAAA,SAAkBpK,GACxBA,EAAOE,cAAgB9D,KAAK6J,QAAQ5B,QAAQrE,GAAU,C,EAGhDyI,EAAAhL,UAAA4M,kBAAA,SAAkBrK,GACxBA,EAAOuG,QAAPvG,EAAOuG,MAAUvG,EAAOE,c,EAGlBuI,EAAAhL,UAAA6M,iBAAA,SAAiBtK,GACvBA,EAAO2K,OAAP3K,EAAO2K,KAAS,O,EAGVlC,EAAAhL,UAAA8M,4BAAA,SAA4BvK,GAClC,GAAIA,EAAO4K,uBAAyB5K,EAAOiI,OAAQ,CACjD,IAAM4C,EACJzO,KAAK6M,eAAe6B,KAClBC,SAASC,cAAc,mCACrB,EAEN5O,KAAK6M,eAAe4B,GAAG3N,aAAa,OAAQ,kBAC5Cd,KAAK6M,eAAe4B,GAAG3N,aAAa,QAAS8C,EAAO4K,sBACpDxO,KAAK6M,eAAe4B,GAAG7K,OAASA,EAEhC5D,KAAKsM,QAAQ3K,KAAKkN,YAAY7O,KAAK6M,eAAe4B,G,GAI9CpC,EAAAhL,UAAA+M,2BAAA,SAA2BxK,GACjC5D,KAAK0M,qBAAqBoC,QAAQlL,EAAQ,CAAEmL,IAAK,c,EAG3C1C,EAAAhL,UAAAgN,iBAAA,SAAiBzK,GACvB,OAAQA,EAAO8J,YACb,IAAK,OACH1N,KAAKsM,QAAQ3K,KACVuC,iBACC,kCAAAL,OAAkCD,EAAOE,cAAa,MAEvDwG,SAAQ,SAAClG,GACRA,EAAK4K,KAAO9H,EAAoB8B,Q,IAEpC,MACF,IAAK,OACHhJ,KAAKsM,QAAQ3K,KACVuC,iBACC,kCAAAL,OAAkCD,EAAOE,cAAa,MAEvDwG,SAAQ,SAAClG,GACRA,EAAKyD,QAAUjE,EAAOqL,YACtB7K,EAAK0D,YAAclE,EAAO+J,gBAC1BvJ,EAAK2D,WAAanE,EAAOsL,eACzB9K,EAAK4K,KAAO9H,EAAoBU,I,IAEpC,M,EAIEyE,EAAAhL,UAAA4L,uBAAA,WACN,IAAMkC,EAA8BnP,KAAKsM,QAAQ3K,KAAKyN,cAGtD,IAAMlJ,EAAQiJ,EAAK/L,cAAc,sCAEjC,IACG8C,GACDD,SAASC,EAAMhE,aAAa,iBAAmBlC,KAAK6J,QAAQwF,OAC5D,CACA,IAAIC,EAAY,GAChB,IAAK,IAAIb,EAAI,EAAGA,GAAKzO,KAAK6J,QAAQwF,OAAQZ,IAAK,CAC7Ca,GAAa,oCAAAzL,OAAoC4K,EAAC,sCAAA5K,OAAqC4K,EAAC,uEAAA5K,OAChC4K,EAAC,wFAAA5K,OACG4K,EAAC,eAAA5K,OAAc4K,EAAC,kFAAA5K,OACR4K,EAAC,+FAAA5K,OACD4K,EAAC,gGAAA5K,OACA4K,EAAC,8FAAA5K,OACJ4K,EAAC,2FAAA5K,OACD4K,EAAC,4FAAA5K,OACA4K,EAAC,+EAAA5K,OACf4K,EAAC,gFAAA5K,OACA4K,EAAC,iGAAA5K,OAER4K,EAAC,uEAAA5K,OACQ4K,EAAC,mFAAA5K,OACE4K,EAAC,wMAAA5K,OAEf4K,EAAC,yHAAA5K,OAC4D4K,EAAC,oFAAA5K,OAChD4K,EAAC,qJAAA5K,OAEf4K,EAAC,6EAAA5K,OACQ4K,EAAC,sD,CAKzD,IAAMc,EAAiB,qCAAA1L,OACnByL,EAAS,aAGb,GAAIpJ,EAAO,CACTA,EAAMpF,aAAa,eAAgBd,KAAK6J,QAAQwF,OAAOjO,YACvD8E,EAAMiD,UAAYoG,C,MACb,GAAIJ,aAAgBK,SAAU,CACnCL,EAAKM,KAAKC,mBACR,YACA,+DAAA7L,OAA+D7D,KAAK6J,QAAQwF,OAAM,MAAAxL,OAAK0L,EAAc,Y,MAElG,GAAIJ,aAAgBQ,WAAY,CACrC,IAAMC,EAAIjB,SAASC,cAAc,SACjCgB,EAAEC,GAAK,oCACPD,EAAEE,QAAQjG,QAAU7J,KAAK6J,QAAQwF,OAAOjO,WACxCwO,EAAEG,UAAYR,EACdJ,EAAKN,YAAYe,E,IAKfvD,EAAAhL,UAAA2O,gBAAA,SAAgBnG,GAAhB,IAAA/J,EAAAE,KACN6J,EAAQS,SAAQ,SAAA1G,GACd9D,EAAK4M,qBAAqBuD,UAAUrM,GACpC9D,EAAK+M,eACF9B,QAAO,SAAAmF,GAAiB,OAAAA,EAActM,SAAWA,CAAzB,IACxB0G,SAAQ,SAAAD,GACPA,EAAKxH,Q,QAKLwJ,EAAAhL,UAAA0L,iBAAA,WACN/M,KAAKuM,kBAAkBuC,QACrB9O,KAAKsM,QAAQ3K,KAAKyB,cAAc,6BAChC,CAAE+M,UAAW,M,EAIT9D,EAAAhL,UAAAoL,cAAA,eAAA3M,EAAAE,KACN,IAAM6J,EAAU7F,MAAMC,KACpBjE,KAAKsM,QAAQ3K,KAAKuC,iBAAiB,2BAErC,IAAMkM,EAAevG,EAAQkB,QAC3B,SAAAnH,GAAU,OAAC9D,EAAK+J,QAAQwG,SAASzM,EAAvB,IAEZ,IAAM0M,EAAiBtQ,KAAK6J,QAAQkB,QAClC,SAAAnH,GAAU,OAACiG,EAAQwG,SAASzM,EAAlB,IAGZ,GAAIwM,EAAaf,QAAUiB,EAAejB,OAAQ,CAChDrP,KAAK6J,QAAUA,EAEf7J,KAAKgQ,gBAAgBM,GACrBtQ,KAAKgN,cAAcoD,GACnBpQ,KAAKiN,yBAELjN,KAAKuQ,eACLvQ,KAAKmN,iB,GAIDd,EAAAhL,UAAAuL,oBAAA,SAAoB4D,GAC1B,IAAoB,IAAAC,EAAA,EAAAC,EAAAF,EAAAC,EAAAC,EAAArB,OAAAoB,IAAS,CAAxB,IAAME,EAAKD,EAAAD,GACd,IAAM7M,EAAS+M,EAAMC,OACrB5Q,KAAK8M,aAAalJ,EAAOE,cAAgB,GAAK6M,EAAME,YAAY9L,K,CAGlE/E,KAAKsM,QAAQwE,wBAAwB9Q,KAAK8M,a,EAGpCT,EAAAhL,UAAAiN,kBAAA,WACN,IAAMyC,EACJC,KAAKC,MAAM7P,SAAS,IAAM8P,KAAKC,SAAS/P,SAAS,IAAIgQ,UAAU,GAEjE,MAAO,+BAAAvN,OAA+BkN,E,EAGhC1E,EAAAhL,UAAAkP,aAAA,WAENvQ,KAAK6J,QAAQS,SAAQ,SAAC1G,EAAQ6K,GAAC,OAAM7K,EAAOE,cAAgB2K,EAAI,CAAjC,IAG/B4C,cAAA,GAAIrR,KAAK6J,QAAO,MAAE0D,KAAKvN,KAAKwN,eAAelD,SAAQ,SAAC1G,EAAQ6K,GAC1D7K,EAAOuG,MAAQsE,EAAI,C,KAIfpC,EAAAhL,UAAA8L,gBAAA,WACNnN,KAAKsM,QAAQgF,aAAatR,KAAK6J,QAAQwF,O,EAGjChD,EAAAhL,UAAAmM,cAAA,SACN+D,EACAC,GAEA,GAAID,EAAQpH,MAAQqH,EAAQrH,MAAO,CACjC,OAAQ,C,CAEV,GAAIoH,EAAQpH,MAAQqH,EAAQrH,MAAO,CACjC,OAAO,C,CAET,OAAO,C,+BCjRT,SAAAsH,EAAYnF,GAfJtM,KAAA0R,mBAA4C,CAClDC,WAAY,KACZC,aAAc,GACdC,YAAa,KACbC,aAAc,MAYd9R,KAAKsM,QAAUA,C,CAGjBmF,EAAApQ,UAAA0Q,WAAA,SAAWC,GACThS,KAAKiS,MAAQ,CACXC,QAASF,EAAWG,QAAQ,GAAGD,QAC/BE,QAASJ,EAAWG,QAAQ,GAAGC,Q,EAInCX,EAAApQ,UAAAgR,oBAAA,SAAoBL,GAClB,OACEd,KAAKoB,IAAItS,KAAKiS,MAAMC,QAAUF,EAAWO,eAAe,GAAGL,SACzD,IACFhB,KAAKoB,IAAItS,KAAKiS,MAAMG,QAAUJ,EAAWO,eAAe,GAAGH,SACzD,IACFJ,EAAWQ,U,EAIff,EAAApQ,UAAAoR,OAAA,SACEC,EACAxK,EACA9D,EACAqO,EACAE,EACAlK,EACAmK,EACAC,G,UAEA,IAAMlR,EAAO3B,KAAKsM,QAAQ3K,KAE1B,GACEA,EAAKmR,yBAA2B,QAChCnR,EAAKoR,mBAAqB,OAC1B,CACA,OAAO/S,KAAK0R,kB,CAEd,GAAI/P,EAAKoR,mBAAqB,OAAQ,CACpCN,EAAS,K,CAEX,GAAI9Q,EAAKoR,mBAAqB,WAAY,CACxCJ,EAAS,MACTlK,EAAQ,K,CAEV,IAAKP,EAAK,CACR,OAAOwK,C,CAGH,IAAAf,EAAwDe,EAAKf,WAAjDC,EAA4Cc,EAAKd,aAAnCC,EAA8Ba,EAAKb,YAAtBC,EAAiBY,EAAKZ,aAEnEH,EAAazJ,EACb2J,EAAczN,EACd,GAAIqE,EAAO,CACT,IAAKzI,KAAKgT,WAAY,CACpB,GAAIJ,IAAiB,QAAS,CAC5B5S,KAAKgT,WAAaN,EAAMf,WACxB3R,KAAKiT,WAAaN,GAAUD,EAAMf,WAAWlQ,SAAW,I,MACnD,GAAImR,IAAiB,gBAAiB,CAC3C5S,KAAKgT,YAAahS,EAAAhB,KAAKkT,gBAAY,MAAAlS,SAAA,EAAAA,EAAI0R,EAAMf,WAC7C3R,KAAKiT,WAAaN,EAAS3S,KAAKkT,aAAazR,SAAW,I,EAI5D,IAAM0R,EAAYnT,KAAKsM,QAAQ8G,cAAaxQ,EAAA5C,KAAKgT,cAAU,MAAApQ,SAAA,EAAAA,EAAIsF,EAAKA,GAEpE,GAAIlI,KAAKiT,WAAY,CACnB,GAAIN,EAAQ,CACVf,EAAe5N,MAAMC,KAAK,IAAIoP,IAAIzB,EAAa/N,OAAOsP,I,KACjD,CACLvB,EAAe5R,KAAKsT,uBAClBH,EACAT,EAAMd,a,CAGVE,EACE1N,GACA8D,EAAIvE,SAAQmO,IAAY,MAAZA,SAAY,SAAZA,EAAclO,SAAU5D,KAAKsM,QAAQiH,iB,KAC9C,CACL3B,EAAeA,EAAa7G,QAC1B,SAAAyI,GAAe,OAACL,EAAU9C,SAASmD,EAApB,IAEjB1B,EAAe,I,OAEZ,GAAIa,EAAQ,CACjB3S,KAAKgT,WAAa,KAClBhT,KAAKkT,aAAehL,EAEpB,GAAI0J,EAAavB,SAASnI,GAAM,CAC9B0J,EAAeA,EAAa7G,QAAO,SAAAyI,GAAe,OAAAA,IAAgBtL,CAAhB,IAClD4J,IAAezP,EAAAqQ,EAAMZ,gBAAY,MAAAzP,SAAA,SAAAA,EAAE6F,OAAQA,EAAM,KAAO4J,C,KACnD,CACLF,EAAYP,4BAAA,GAAOO,EAAY,OAAE1J,GAAG,OACpC4J,EACE1N,GACA8D,EAAIvE,SAAQmO,IAAY,MAAZA,SAAY,SAAZA,EAAclO,SAAU5D,KAAKsM,QAAQiH,iB,OAEhD,GAAId,EAAQ,CACjBzS,KAAKgT,WAAa,KAClBhT,KAAKkT,aAAehL,EAEpB,KAAM2K,GAAWH,EAAMd,aAAavB,SAASnI,IAAO,CAClD0J,EAAe5R,KAAKsT,uBAAuB,CAACpL,GAAMwK,EAAMd,a,CAE1DE,EACE1N,GACA8D,EAAIvE,SAAQmO,IAAY,MAAZA,SAAY,SAAZA,EAAclO,SAAU5D,KAAKsM,QAAQiH,iB,KAC9C,CACLvT,KAAKgT,WAAa,I,CAGpB,MAAO,CAAErB,WAAUA,EAAEC,aAAYA,EAAEC,YAAWA,EAAEC,aAAYA,E,EAG9DL,EAAApQ,UAAAoS,UAAA,SAAUf,EAA8BhS,G,MAAA,GAAAA,SAAA,GAAAA,EAAA,IAAY,CAClD,GAAIV,KAAKsM,QAAQ3K,KAAKoR,mBAAqB,OAAQ,CACjD,OAAO/S,KAAK0R,kB,CAGd,IAAMgC,EAAO1T,KAAKsM,QAAQqH,UAC1B,IAAIhC,EAAae,EAAMf,WACvB,IAAIC,EAAec,EAAMd,aACzB,IAAIC,EAAca,EAAMb,YACxB,IAAIC,EAAeY,EAAMZ,aAEzBH,IAAU,MAAVA,SAAU,EAAVA,IAAe3R,KAAKsM,QAAQsH,cAC5B/B,IAAW,MAAXA,SAAW,EAAXA,IAAgBF,IAAU,MAAVA,SAAU,SAAVA,EAAYhO,UAC1B3C,EAAA0R,EAAMb,eAAW,MAAA7Q,SAAA,SAAAA,EAAE4C,SAAU5D,KAAKsM,QAAQiH,kBAG5C,GAAI7S,EAAO,CACTkR,EAAe8B,EACf5B,EAAeD,C,KACV,CACLD,EAAe,GACfE,EAAe,I,CAGjB,MAAO,CAAEH,WAAUA,EAAEC,aAAYA,EAAEC,YAAWA,EAAEC,aAAYA,E,EAG9DL,EAAApQ,UAAAwS,UAAA,SACEnB,EACAxK,EACA9D,EACA1D,GAAA,GAAAA,SAAA,GAAAA,EAAA,IAAY,CAEZ,IAAIiS,EAAS,KAEb,GAAI3S,KAAKsM,QAAQ3K,KAAKoR,mBAAqB,OAAQ,CACjD,OAAO/S,KAAK0R,kB,CAEd,GAAI1R,KAAKsM,QAAQ3K,KAAKoR,mBAAqB,WAAY,CACrDJ,EAAS,K,CAGX,IAAIhB,EAAae,EAAMf,WACvB,IAAIC,EAAec,EAAMd,aACzB,IAAIC,EAAca,EAAMb,YACxB,IAAIC,EAAeY,EAAMZ,aAEzBH,EAAazJ,EACb2J,EAAczN,EACd,GAAI1D,EAAO,CACT,GAAIiS,EAAQ,CACVf,EAAeA,EAAavB,SAASnI,GACjC0J,E,+BACIA,EAAY,OAAE1J,GAAG,M,KACpB,CACL0J,EAAeA,EAAavB,SAASnI,GAAO0J,EAAe,CAAC1J,E,CAE9D4J,EAAe1N,C,KACV,CACLwN,GAAgBA,EAAavB,SAASnI,GAClC0J,EACAA,EAAa7G,QAAO,SAAAyI,GAAe,OAAAA,IAAgBtL,CAAhB,IACvC4J,EAAe,I,CAGjB,MAAO,CAAEH,WAAUA,EAAEC,aAAYA,EAAEC,YAAWA,EAAEC,aAAYA,E,EAG9DL,EAAApQ,UAAAyS,aAAA,SACEpB,EACAD,EACAhK,EACAkK,GAEA,IAAMoB,EAAW/T,KAAKsM,QAAQsH,cAE9B,GAAIG,EAAU,CACZ,OAAO/T,KAAKyS,OACVC,EACAqB,EACAA,EAASpQ,QAAQ+O,EAAMb,YAAYjO,QACnC6O,EACAE,EACAlK,EACA,QACA,M,CAGJ,OAAOiK,C,EAGTjB,EAAApQ,UAAA2S,gBAAA,SACEtB,EACAD,EACAhK,EACAkK,GAEA,IAAMsB,EAAcjU,KAAKsM,QAAQ4H,eAAexB,EAAMf,YAEtD,GAAIsC,EAAa,CACf,OAAOjU,KAAKyS,OACVC,EACAuB,EACAA,EAAYtQ,QAAQ+O,EAAMb,YAAYjO,QACtC6O,EACAE,EACAlK,EACA,QACA,M,CAGJ,OAAOiK,C,EAGTjB,EAAApQ,UAAA8S,YAAA,SACEzB,EACAD,EACAhK,EACAkK,GAEA,IAAMyB,EAAUpU,KAAKsM,QAAQ+H,WAAW3B,EAAMf,YAE9C,GAAIyC,EAAS,CACX,OAAOpU,KAAKyS,OACVC,EACA0B,EACAA,EAAQzQ,QAAQ+O,EAAMb,YAAYjO,QAClC6O,EACAE,EACAlK,EACA,QACA,M,CAGJ,OAAOiK,C,EAGTjB,EAAApQ,UAAAiT,YAAA,SACE5B,EACAD,EACAhK,EACAkK,GAEA,IAAM4B,EAAUvU,KAAKsM,QAAQkI,aAE7B,GAAID,EAAS,CACX,OAAOvU,KAAKyS,OACVC,EACA6B,EACAA,EAAQ5Q,QAAQ+O,EAAMb,YAAYjO,QAClC6O,EACAE,EACAlK,EACA,QACA,M,CAGJ,OAAOiK,C,EAGTjB,EAAApQ,UAAAoT,oBAAA,SACE/B,EACAD,EACAhK,EACAkK,GAEA,IAAMe,EAAO1T,KAAKsM,QAAQqH,UAC1B,IAAMe,EAAc1U,KAAKsM,QAAQqI,iBACjC,IAAMC,EACJlB,EAAKxC,KAAK2D,IAAInB,EAAKzL,QAAQyK,EAAMf,YAAc+C,EAAa,IAE9D,GAAIE,EAAiB,CACnB,OAAO5U,KAAKyS,OACVC,EACAkC,EACAA,EAAgBjR,QAAQ+O,EAAMb,YAAYjO,QAC1C6O,EACAE,EACAlK,EACA,QACA,M,CAGJ,OAAOiK,C,EAGTjB,EAAApQ,UAAAyT,gBAAA,SACEpC,EACAD,EACAhK,EACAkK,GAEA,IAAMe,EAAO1T,KAAKsM,QAAQqH,UAC1B,IAAMe,EAAc1U,KAAKsM,QAAQqI,iBACjC,IAAMI,EACJrB,EACExC,KAAK8D,IAAItB,EAAKzL,QAAQyK,EAAMf,YAAc+C,EAAahB,EAAKrE,OAAS,IAGzE,GAAI0F,EAAa,CACf,OAAO/U,KAAKyS,OACVC,EACAqC,EACAA,EAAYpR,QAAQ+O,EAAMb,YAAYjO,QACtC6O,EACAE,EACAlK,EACA,QACA,M,CAGJ,OAAOiK,C,EAGTjB,EAAApQ,UAAA4T,iBAAA,SACEvC,EACAD,EACAhK,GAEA,IAAMyM,EAAelV,KAAKsM,QAAQ6I,gBAAgBzC,EAAMb,aAExD,GAAIqD,EAAc,CAChB,OAAOlV,KAAKyS,OACVC,EACAA,EAAMf,WACNuD,EACAzC,EACA,MACAhK,EACA,QACA,M,CAGJ,OAAOiK,C,EAGTjB,EAAApQ,UAAA+T,aAAA,SACE1C,EACAD,EACAhK,GAEA,IAAM4M,EAAWrV,KAAKsM,QAAQgJ,YAAY5C,EAAMb,aAEhD,GAAIwD,EAAU,CACZ,OAAOrV,KAAKyS,OACVC,EACAA,EAAMf,WACN0D,EACA5C,EACA,MACAhK,EACA,QACA,M,CAGJ,OAAOiK,C,EAGTjB,EAAApQ,UAAAkU,QAAA,SACErN,EACAI,EACAG,EACA+M,G,MAEA,GAAItN,EAAK,CACP,GAAIO,EAAO,CACT,IAAM/H,GAASwH,EAAIxG,OACnB,IAAM+T,EAAOzV,KAAKsM,QAAQ8G,cAAapS,EAAAhB,KAAK0V,iBAAa,MAAA1U,SAAA,EAAAA,EAAIkH,EAAKA,GAElElI,KAAK0V,cAAgBxN,EAErB,GAAIxH,EAAO,CACT,OAAO8U,EAAkB3R,OACvB4R,EAAK1K,QAAO,SAAA7C,GAAO,OAACsN,EAAkBnF,SAASnI,EAA5B,I,CAGvB,OAAOsN,EAAkBzK,QAAO,SAAA7C,GAAO,OAACuN,EAAKpF,SAASnI,EAAf,G,CAEzClI,KAAK0V,cAAgBxN,EAErB,GAAII,IAAYkN,EAAkBnF,SAASnI,GAAM,CAC/C,OAAOsN,EAAkB3R,OAAO,CAACqE,G,CAEnC,IAAKI,GAAWkN,EAAkBnF,SAASnI,GAAM,CAC/C,OAAOsN,EAAkBzK,QAAO,SAAA4K,GAAK,OAAAA,IAAMzN,CAAN,G,EAIzC,OAAOsN,C,EAGT/D,EAAApQ,UAAAuU,SAAA,SACEjE,EACAkE,EACAjE,GAEA,IAAM8B,EAAO9B,EAAavB,SAASsB,GAC/BC,EACA,CAACD,GAEL,GAAI+B,EAAKvP,MAAK,SAAA+D,GAAO,OAACA,EAAIxG,MAAL,IAAc,CACjC,OAAOsC,MAAMC,KAAK,IAAIoP,IAAIwC,EAAWhS,OAAO6P,I,CAE9C,OAAOmC,EAAW9K,QAAO,SAAA7C,GAAO,OAACwL,EAAKrD,SAASnI,EAAf,G,EAGlCuJ,EAAApQ,UAAAyU,YAAA,SAAYpV,GAAA,GAAAA,SAAA,GAAAA,EAAA,IAAY,CACtB,GAAIA,EAAO,CACT,OAAOV,KAAKsM,QAAQqH,S,CAEtB,MAAO,E,EAGTlC,EAAApQ,UAAA0U,gBAAA,SACErC,EACAvH,EACA6J,GADA,GAAA7J,SAAA,GAAAA,EAAA,EAA4C,CAG5C,IAAM8J,EAAiBjW,KAAKsM,QAAQzC,QAAQ4D,oBAE5C,IAAIwI,IAAc,MAAdA,SAAc,SAAdA,EAAgBC,uBAAwBF,EAAc,CACxD,IAAMG,EAAsBF,EAAenS,cAAgB,EAE3DqI,IAAQ,MAARA,SAAQ,SAARA,EACIpB,QAAO,SAAAlG,GAAK,OAAC6O,EAAKrD,SAASxL,EAAf,IACbyF,SAAQ,SAAApC,GACPA,EAAIxG,OAAS,MACb,IAAM0C,EAAO8D,EAAIkO,SACfD,GAEF/R,EAAKgE,mBAAmB,M,IAG5BsL,IAAI,MAAJA,SAAI,SAAJA,EAAMpJ,SAAQ,SAAApC,GACZA,EAAIxG,OAASuU,EAAeC,sBAAwB,OACpD,IAAM9R,EAAO8D,EAAIkO,SACfD,GAEF/R,EAAKgE,mBAAmB,K,IAG1BpI,KAAKqW,mBAAmB3C,EAAKrE,OAAQ4G,E,GAIzCxE,EAAApQ,UAAAgV,mBAAA,SACEhH,EACA4G,GAEAA,IAAc,MAAdA,SAAc,EAAdA,IAAmBjW,KAAKsM,QAAQzC,QAAQ4D,oBAExC,GAAI4B,IAAW,EAAG,CAChB4G,EAAeK,qBAAuB,E,MACjC,GAAIjH,IAAWrP,KAAKsM,QAAQqH,UAAUtE,OAAQ,CACnD4G,EAAeK,qBAAuB,S,KACjC,CACLL,EAAeK,qBAAuB,e,GAIlC7E,EAAApQ,UAAAiS,uBAAA,SACNiD,EACAC,GAEA,OAAOD,EAAalH,SAAWmH,EAAanH,QAC1CkH,EAAaE,OAAM,SAAApM,GAAQ,OAAAmM,EAAanG,SAAShG,EAAtB,IACzBmM,EACAD,C,+BCvfN,SAAAG,EAAYpK,GAFJtM,KAAA2W,gBAAkB3W,KAAK4W,qBAAqBrN,KAAKvJ,MAGvDA,KAAKsM,QAAUA,C,CAGVoK,EAAArV,UAAAwV,UAAA,SAAU3O,GACflI,KAAKkI,IAAMA,EACXlI,KAAK8W,SAAW9W,KAAKsM,QAAQyK,gBAAgB7O,GAE7ClI,KAAKgX,kBACLhX,KAAKiX,kBACLjX,KAAKkX,WACLlX,KAAKmX,mB,EAGCT,EAAArV,UAAAuV,qBAAA,SAAqB3R,GAC3B,IAAM2L,EAAS3L,EAAU2L,OACzB,IAAMwG,EAAWxG,EAAOtL,QACtB,uBAGF,GACE8R,GACAA,EAASrQ,gBAAkB/G,KAAKkI,IAAInB,eACpCqQ,EAASzV,OAAS3B,KAAKsM,QAAQ3K,KAC/B,CACA,IAAM0V,EAAgBrX,KAAKsM,QAAQyK,gBAAgBK,GACnD,IAAME,EAAuBD,EAAgB,EAC7C,IAAME,EAAiBvX,KAAK8W,SAAWO,GAAiB,EAAI,EAE5D,GACErX,KAAKwX,UAAUtR,MAAMC,iBAAiB,4BACtC,GAAAtC,OAAGyT,GACH,CACAtX,KAAKwX,UAAUtR,MAAMO,YACnB,yBACA,GAAA5C,OAAGyT,G,KAEA,CACLtX,KAAKwX,UAAUtR,MAAMO,YACnB,yBACA,GAAA5C,OAAGyT,EAAuBC,G,CAI9BvX,KAAKmX,mB,GAIDT,EAAArV,UAAAoW,mBAAA,WACN9I,SAAS+I,oBAAoB,YAAa1X,KAAK2W,iBAE/C,IAAMgB,EAAe1R,SACnBjG,KAAKwX,UAAUtR,MAAMC,iBAAiB,2BAExC,IAAMyR,EAAU5X,KAAKsM,QAAQ3K,KAC1BuC,iBAAiB,uBACjBmG,KAAKsN,EAAe,GAEvB,GAAIA,EAAe3X,KAAK8W,SAAW,EAAG,CACpCc,EAAQC,OAAO7X,KAAKkI,I,CAEtB,GAAIyP,EAAe3X,KAAK8W,SAAW,EAAG,CACpCc,EAAQE,MAAM9X,KAAKkI,I,CAGrBlI,KAAK+X,aACL/X,KAAKwX,UAAU3U,SAEf7C,KAAKkI,IAAM,KACXlI,KAAKwX,UAAY,I,EAGXd,EAAArV,UAAA2V,gBAAA,WACNrI,SAASpN,iBAAiB,YAAavB,KAAK2W,gBAAiB,CAC3DqB,QAAS,OAEXrJ,SAASpN,iBAAiB,UAAWvB,KAAKyX,mBAAmBlO,KAAKvJ,MAAO,CACvEiY,KAAM,M,EAIFvB,EAAArV,UAAA4V,gBAAA,eAAAnX,EAAAE,KACN,IAAMkY,EAAYlY,KAAKsM,QAAQ6L,aAAanY,KAAKkI,KAEjDlI,KAAKwX,UAAY7I,SAASC,cAAc,OACxC5O,KAAKwX,UAAUtR,MAAMkS,QAAU,WAE/BpY,KAAKsM,QAAQ+L,kBAAkB/N,SAAQ,SAAAvF,GACrC,IAAMnB,EAAS+K,SAASC,cAAc,OAEtChL,EAAOsC,MAAMoS,QAAU,IACvB1U,EAAOsC,MAAMqS,SAAWxT,EACxBnB,EAAOsC,MAAMlB,OAAS,GAAAnB,OAAGqU,EAAS,MAClCtU,EAAOsC,MAAMsS,aAAe,8BAE5B1Y,EAAK0X,UAAU7E,OAAO/O,E,KAIlB8S,EAAArV,UAAA6V,SAAA,eAAApX,EAAAE,KACN,IAAM8M,EAAe9M,KAAKsM,QAAQ+L,kBAClC,IAAMI,EAAWzY,KAAKsM,QAAQoM,WAAWC,YAEzC3Y,KAAKkI,IAAI2P,OAAO7X,KAAKwX,WACrBxX,KAAKkI,IAAIpH,aAAa,WAAY,IAClCd,KAAKkI,IAAIhC,MAAMnB,MAAQ,GAAAlB,OAAG4U,EAAQ,MAElCzY,KAAKkI,IACFhE,iBAAiB,iCACjBoG,SAAQ,SAAClG,EAAoCqK,GAC5C,IAAMmK,EAAiB3S,SACrBnG,EAAKwM,QAAQoM,WAAWxS,MAAMC,iBAC5B,4BAAAtC,OAA4B4K,EAAI,EAAC,eAIrC,IAAKrK,EAAKyH,OAAQ,CAChBzH,EAAK8B,MAAMnB,MAAQ+H,EAAa8L,EAAiB,GACjDxU,EAAK8B,MAAMiE,MAAQ,GAAAtG,OAAG+U,E,MAKtBlC,EAAArV,UAAA0W,WAAA,WACN/X,KAAKkI,IAAIvF,gBAAgB,YACzB3C,KAAKkI,IAAIhC,MAAMnB,MAAQ,GAEvB/E,KAAKkI,IACFhE,iBAAiB,iCACjBoG,SAAQ,SAAClG,GACRA,EAAK8B,MAAMnB,MAAQ,GACnBX,EAAK8B,MAAMiE,MAAQ,E,KAIjBuM,EAAArV,UAAA8V,kBAAA,WACN,IAAM5S,EAAOvE,KAAKwX,UAAUpB,SAAS,GAAG9R,wBAExCtE,KAAKkI,IAAIhC,MAAM2S,IAAM,GAAAhV,OAAGU,EAAKsU,IAAG,MAChC7Y,KAAKkI,IAAIhC,MAAMiF,KAAO,GAAAtH,OAAGU,EAAK4G,KAAI,K,+BC7IpC,SAAA2N,EAAYxM,GAAZ,IAAAxM,EAAAE,K,MACEA,KAAKsM,QAAUA,GACftL,EAAAhB,KAAKsM,QAAQ3K,KACVuC,iBAAiB,kCAA8B,MAAAlD,SAAA,SAAAA,EAC9CsJ,SAAQ,SAAAvC,GACR,GAAIA,EAAWgR,eAAgB,CAC7BjZ,EAAKiZ,eAAiBhR,C,CAExB,GAAIA,EAAWiR,iBAAkB,CAC/BlZ,EAAKkZ,iBAAmBjR,C,CAE1B,GAAIA,EAAWkR,iBAAkB,CAC/BnZ,EAAKmZ,iBAAmBlR,C,kCCPhC,SAAAmR,EAAY5M,EAA6B1C,EAAkBE,GAA3D,IAAAhK,EAAAE,K,MAgCQA,KAAAmZ,eAAiB,SAACC,GACxB,IAAMC,EAAcvZ,EAAKwZ,iBAAmBF,EAAatZ,EAAKmL,cAC9D,GAAIoO,GAAe,EAAG,CACpBvZ,EAAK8D,OAAO2K,KAAO,uBAAA1K,OAAuBwV,EAAW,M,GAIjDrZ,KAAAuZ,iBAAmB,SAACH,GAC1B,IAAMC,EAAcvZ,EAAKwZ,iBAAmBF,EAAatZ,EAAKmL,cAC9D,GAAIoO,GAAe,EAAG,CACpB,GAAIvZ,EAAK0Z,gBAAiB,CACxB1Z,EAAK8D,OAAO2K,KAAOzO,EAAK2Z,YACtB3Z,EAAK0Z,gBACL1Z,EAAKwZ,iBACLD,E,KAEG,CACLvZ,EAAK8D,OAAO2K,KAAO,uBAAA1K,OAAuBwV,EAAW,M,EAIzD,GAAIvZ,EAAK4Z,YAAa,CACpB,IAAMC,EACJ7Z,EAAK8Z,sBAAwBR,EAAatZ,EAAKmL,cACjD,GAAI0O,GAAoB,EAAG,CACzB,GAAI7Z,EAAK+Z,qBAAsB,CAC7B/Z,EAAK4Z,YAAYnL,KAAOzO,EAAK2Z,YAC3B3Z,EAAK+Z,qBACL/Z,EAAK8Z,sBACLD,E,KAEG,CACL7Z,EAAK4Z,YAAYnL,KAAO,uBAAA1K,OAAuB8V,EAAgB,M,KA/DrE3Z,KAAKsM,QAAUA,EACftM,KAAKiL,cAAgBnB,GAAS,EAAI,EAElC,GAAI9J,KAAKsM,QAAQ3K,KAAKmY,mBAAqB,WAAY,CACrD9Z,KAAK+Z,WAAa/Z,KAAKuZ,iBACvBvZ,KAAKga,YAAcha,KAAKia,iB,KACnB,CACLja,KAAK+Z,WAAa/Z,KAAKmZ,eACvBnZ,KAAKga,YAAc,I,CAGrBha,KAAK4D,OAAS5D,KAAKsM,QAAQzC,QAAQuD,UAAUxD,GAC7C5J,KAAKsZ,iBAAmBtZ,KAAK4D,OAAOU,wBAAwBS,MAC5D/E,KAAKwZ,gBAAkBxZ,KAAKka,cAAcla,KAAK4D,OAAO2K,MAEtDvO,KAAK0Z,YAAc1Z,KAAKsM,QAAQ6N,cAAcna,KAAK4D,QACnD5D,KAAK4Z,uBACH5Y,EAAAhB,KAAK0Z,eAAW,MAAA1Y,SAAA,SAAAA,EAAEsD,wBAAwBS,MAC5C/E,KAAK6Z,qBAAuB7Z,KAAKka,cAAcla,KAAK0Z,YAAYnL,K,CAGlE2K,EAAA7X,UAAA+Y,SAAA,SAAShB,GACPpZ,KAAK+Z,WAAWX,E,EAGlBF,EAAA7X,UAAAgZ,UAAA,WACE,GAAIra,KAAKga,YAAa,CACpBha,KAAKga,a,GA0CDd,EAAA7X,UAAA4Y,kBAAA,WACN,IAAMK,EAAiBta,KAAK4D,OAAOU,wBAAwBS,MAC3D/E,KAAK4D,OAAO2K,KAAOvO,KAAKyZ,YACtBzZ,KAAKwZ,gBACLxZ,KAAKsZ,iBACLgB,GAGF,GAAIta,KAAK0Z,YAAa,CACpB,IAAMa,EACJva,KAAK4Z,uBAAyBU,EAAiBta,KAAKsZ,kBACtDtZ,KAAK0Z,YAAYnL,KAAOvO,KAAKyZ,YAC3BzZ,KAAKwZ,gBACLxZ,KAAKsZ,iBACLiB,E,GAKErB,EAAA7X,UAAA6Y,cAAA,SAAcM,GACpB,IAAMC,EAAQD,EAASC,MAAM,yBAC7B,GAAIA,EAAO,CACT,IAAMC,EAASC,WAAWF,EAAM,IAChC,IAAMG,EAAOH,EAAM,GACnB,MAAO,CAAEC,OAAMA,EAAEE,KAAIA,E,CAEvB,OAAO,I,EAGD1B,EAAA7X,UAAAoY,YAAA,SACNoB,EACAC,EACAC,GAEA,MAAO,GAAAlX,OAAIkX,EAAWF,EAAUH,OAAUI,GAAUjX,OAAGgX,EAAUD,K,cC1GrE,IAAKI,GAAL,SAAKA,GACHA,IAAA,8BACAA,IAAA,mCACD,EAHD,CAAKA,MAAS,K,iBAiBZ,SAAAC,EAAYtZ,GAXJ3B,KAAAkb,WAAa,IAAIC,cAYvBnb,KAAK2B,KAAOA,EAEZ3B,KAAKkb,WAAWE,WAAW,WAAYJ,EAAUK,YACjDrb,KAAKkb,WAAWE,WAAW,WAAYJ,EAAUM,eACjDtb,KAAK2B,KAAK2E,WAAWiV,mBAAmB7M,KAAK1O,KAAKkb,YAClDM,EAAkBxb,KAAK2B,KAAK2E,WAAWiV,oBAEvCvb,KAAK6J,QAAU,IAAIwC,EAA0BrM,MAC7CA,KAAKyb,UAAY,IAAIhK,EAA4BzR,MACjDA,KAAK+H,WAAa,IAAI+Q,EAA6B9Y,K,CAGrDM,OAAAC,eAAI0a,EAAA5Z,UAAA,aAAU,C,IAAd,WACE,OAAOrB,KAAK0b,iB,uCAGdT,EAAA5Z,UAAAsa,iBAAA,SAAiBjD,GACf1Y,KAAK0b,kBAAoBhD,C,EAG3BuC,EAAA5Z,UAAAgM,WAAA,WACE,OAAOrN,KAAK6J,QAAQwD,Y,EAGtB4N,EAAA5Z,UAAAgX,gBAAA,WACE,OAAOuD,iBAAiB5b,KAAK0Y,YAAYmD,oBAAoBtZ,MAAM,I,EAGrE0Y,EAAA5Z,UAAAya,mBAAA,WACE,IAAMC,EAAoBH,iBACxB5b,KAAK0Y,YACLsD,iBAAiBzZ,MAAM,KAEzB,OAAO0D,SAAS8V,EAAkB,KAAO,C,EAG3Cd,EAAA5Z,UAAAkS,eAAA,WACE,OAAOvT,KAAK6J,QAAQ6B,sBAAsBI,W,EAG5CmP,EAAA5Z,UAAAuS,YAAA,WACE,OAAO5T,KAAK2B,KAAKyB,cAAc,sB,EAGjC6X,EAAA5Z,UAAA4a,mBAAA,WACE,OAAOjc,KAAK0Y,WAAWwD,UAAYlc,KAAK8b,oB,EAG1Cb,EAAA5Z,UAAA8a,oBAAA,WACE,OAAOnc,KAAK6J,QAAQwD,WAAW,MAAM+O,QAAO,SAACC,EAAazY,GACxD,OAAOA,EAAOgH,SAAW,UAAYhH,EAAOiI,OACxCwQ,EAAczY,EAAO0Y,YACrBD,C,GACH,E,EAGLpB,EAAA5Z,UAAAkb,qBAAA,WACE,OAAOvc,KAAK6J,QAAQwD,WAAW,MAAM+O,QAAO,SAACC,EAAazY,GACxD,OAAOA,EAAOgH,SAAW,QAAUhH,EAAOiI,OACtCwQ,EAAczY,EAAO0Y,YACrBD,C,GACH,E,EAGLpB,EAAA5Z,UAAA6S,eAAA,SACEsI,GAEA,IAAM9I,EAAO1T,KAAK2T,UAClB,IAAMlF,EAAIiF,EAAKzL,QAAQuU,GAEvB,OAAO9I,EACJ+I,MAAM,EAAGhO,GACTiO,UACAtS,MAAK,SAAAlC,GAAO,OAAAA,EAAInE,WAAJ,G,EAGjBkX,EAAA5Z,UAAAgT,WAAA,SACEmI,GAEA,IAAM9I,EAAO1T,KAAK2T,UAClB,IAAMlF,EAAIiF,EAAKzL,QAAQuU,GAEvB,OAAO9I,EAAK+I,MAAMhO,EAAI,GAAGrE,MAAK,SAAAlC,GAAO,OAAAA,EAAInE,WAAJ,G,EAGvCkX,EAAA5Z,UAAAmT,WAAA,WACE,IAAMd,EAAO1T,KAAK2T,UAElB,OAAOD,EAAKgJ,UAAUtS,MAAK,SAAAlC,GAAO,OAAAA,EAAInE,WAAJ,G,EAGpCkX,EAAA5Z,UAAAsb,kBAAA,SACE/Y,GAEA,OAAO5D,KAAK6J,QAAQwD,aAAa+O,QAAO,SAACjQ,EAAUqQ,GACjD,OAAOA,EAAQrS,MAAQvG,EAAOuG,QAC3BqS,EAAQ3Q,UACPM,GAAYqQ,EAAQrS,MAAQgC,EAAShC,OACrCqS,EACArQ,C,GACH,K,EAGL8O,EAAA5Z,UAAA8Y,cAAA,SACEvW,GAEA,OAAO5D,KAAK6J,QAAQwD,aAAa+O,QAAO,SAACjQ,EAAUqQ,GACjD,OAAOA,EAAQrS,MAAQvG,EAAOuG,QAC3BqS,EAAQ3Q,UACPM,GAAYqQ,EAAQrS,MAAQgC,EAAShC,OACrCqS,EACArQ,C,GACH,K,EAGL8O,EAAA5Z,UAAA8T,gBAAA,SACEqH,GAEA,IAAMI,EAAiB5c,KAAK2c,kBAAkBH,EAAQ5Y,QAEtD,GAAIgZ,EAAgB,CAClB,OAAOJ,EAAQtU,IAAI9E,cACjB,6CAAAS,OAA6C+Y,EAAe9Y,cAAa,K,GAK/EmX,EAAA5Z,UAAAiU,YAAA,SACEkH,GAEA,IAAMK,EAAa7c,KAAKma,cAAcqC,EAAQ5Y,QAE9C,GAAIiZ,EAAY,CACd,OAAOL,EAAQtU,IAAI9E,cACjB,6CAAAS,OAA6CgZ,EAAW/Y,cAAa,K,GAK3EmX,EAAA5Z,UAAA0V,gBAAA,SAAgB7O,GACd,OAAOlE,MAAM3C,UAAU4G,QAAQlI,KAC7BC,KAAK2B,KAAKuC,iBACR,sDAEFgE,E,EAIJ+S,EAAA5Z,UAAAyb,kBAAA,SAAkB5U,GAChB,OAAOlE,MAAM3C,UAAU4G,QAAQlI,KAAKmI,EAAInB,cAAcqP,SAAUlO,E,EAGlE+S,EAAA5Z,UAAA8W,aAAA,SAAajQ,GACX,IAAM6U,EAAiBnB,iBACrB5b,KAAK0Y,YACLsD,iBAAiBzZ,MAAM,KACzB,IAAMuU,EAAW9W,KAAK+W,gBAAgB7O,GAAO,EAE7C,OAAOjC,SAAS8W,EAAejG,KAAc,C,EAG/CmE,EAAA5Z,UAAAsT,eAAA,WACE,IAAMqI,EAAahd,KAAK0Y,WAAWuE,aACnC,IAAMC,EAAgBld,KAAK8b,qBAC3B,IAAM5D,EAAYlY,KAAKmY,aAAanY,KAAK4T,eAEzC,OAAO1C,KAAKiM,OAAOH,EAAaE,GAAiBhF,E,EAGnD+C,EAAA5Z,UAAA+b,OAAA,SAAOjc,GACL,OAAOnB,KAAK2B,KAAKyB,cAAc,8BAAAS,OAA8B1C,EAAK,M,EAGpE8Z,EAAA5Z,UAAAsS,QAAA,SAAQjB,GAAA,GAAAA,SAAA,GAAAA,EAAA,KAAgC,CACtC,IAAMgB,EAAO1P,MAAMC,KACjBjE,KAAK2B,KAAKuC,iBAAiB,wBAG7B,GAAIwO,IAAU,UAAW,CACvB,OAAOgB,EAAK3I,QAAO,SAAA7C,GAAO,OAAAA,EAAInE,WAAJ,G,CAE5B,OAAO2P,C,EAGTuH,EAAA5Z,UAAA+R,aAAA,SACEiK,EACAC,GAEA,IAAM5J,EAAO1T,KAAK2T,UAClB,IAAM4J,EAAa7J,EAAKzL,QAAQoV,GAChC,IAAMG,EAAW9J,EAAKzL,QAAQqV,GAE9B,OAAO5J,EACJ+I,MAAMvL,KAAK8D,IAAIuI,EAAYC,GAAWtM,KAAK2D,IAAI0I,EAAYC,GAAY,GACvEzS,QAAO,SAAA7C,GAAO,OAAAA,EAAInE,WAAJ,G,EAGnBkX,EAAA5Z,UAAAoc,kBAAA,SAAkBxY,GAChB,OAAOA,EACJyY,eACAtT,MACC,SAACwG,GAAwB,OAAAA,EAAO9J,UAAY,qBAAnB,G,EAI/BmU,EAAA5Z,UAAAsc,wBAAA,SAAwB1Y,GACtB,OACEA,EACGyY,eACAtT,MACC,SAACwG,GACC,OAAAA,EAAO9J,UAAY,6BAAnB,KACC,I,EAIXmU,EAAA5Z,UAAAsC,QAAA,SACE+D,EACAvG,EACAyI,GAEA,GAAIlC,EAAQ,CACV,OAAO1H,KAAK2B,KAAKyB,cACf,gCAAAS,OAAgC6D,EAAM,M,CAG1C,GAAIvG,GAASyI,EAAU,CACrB,IAAM1B,EAAMlI,KAAKod,OAAOjc,GACxB,IAAMyC,EAAS5D,KAAK6J,QAAQuD,UAAUxD,GAEtC,GAAI1B,GAAOtE,EAAQ,CACjB,OAAOsE,EAAIvE,QAAQC,E,IAKzBqX,EAAA5Z,UAAAuc,mBAAA,SAAmB3Y,GACjB,OAAOA,EACJyY,eACAtT,MACC,SAACwG,GAAwB,OAAAA,EAAO9J,UAAY,sBAAnB,G,EAI/BmU,EAAA5Z,UAAAwc,gBAAA,SAAgBjU,GACd5J,KAAK8d,kBAAoB,IAAInU,EAC3BC,EACA5J,KAAK6J,QAAQwD,aACbrN,KAAK+d,iB,EAIT9C,EAAA5Z,UAAA2c,eAAA,SAAevT,GACb,OAAOzK,KAAK8d,kBAAkBtT,SAASC,E,EAGzCwQ,EAAA5Z,UAAA4c,cAAA,WACEje,KAAK8d,kBAAkBvS,UACvBvL,KAAK8d,kBAAoB,I,EAG3B7C,EAAA5Z,UAAA6c,kBAAA,SAAkBtU,GAChB5J,KAAKme,oBAAsB,IAAIjF,EAC7BlZ,KACA4J,EACA5J,KAAK+d,iB,EAIT9C,EAAA5Z,UAAA+c,eAAA,SAAehF,GACbpZ,KAAKme,oBAAoB/D,SAAShB,E,EAGpC6B,EAAA5Z,UAAAgd,gBAAA,WACEre,KAAKme,oBAAoB9D,YACzBra,KAAKme,oBAAsB,I,EAG7BlD,EAAA5Z,UAAAid,aAAA,SAAapW,GACXlI,KAAKue,eAAiB,IAAI7H,EAA0B1W,MACpDA,KAAKue,eAAe1H,UAAU3O,E,EAGhC+S,EAAA5Z,UAAAmd,aAAA,WACE,OAAAC,oCAAA,CACErG,QAAS,QACNpY,KAAK0e,0BACL1e,KAAK2e,4BACL3e,KAAK4e,0BACL5e,KAAK6e,kB,EAIZ5D,EAAA5Z,UAAAiQ,aAAA,SAAa5Q,GACXV,KAAKkb,WAAW4D,WAAW9D,EAAUK,YACrCrb,KAAKkb,WAAWE,WACd,yCAAAvX,OAAyCnD,EAAK,OAC9Csa,EAAUK,W,EAIdJ,EAAA5Z,UAAAyP,wBAAA,SAAwBhE,GACtB9M,KAAKkb,WAAW4D,WAAW9D,EAAUM,eACrCtb,KAAKkb,WAAWE,WACd,WAAAvX,OAAWiJ,EACR9C,KACC,SAACqP,EAAa0F,GACZ,kCAAAlb,OACEkb,EAAc,EAChB,WAAAlb,OAAUwV,EAAW,MAFrB,IAIH2F,KAAK,MAAK,MACbhE,EAAUM,c,EAIdL,EAAA5Z,UAAA4d,iBAAA,SAAiB/W,GACf,IAAIlB,EAAgCkB,EAAInB,cAAczB,QACpD,+CAEM,IAAAwG,EAAgB9L,KAAK6J,QAAQ6B,sBAAqBI,YAE1D,MAAO9E,EAAM,CACXA,EAAK1D,UAAY,MACjB0D,EAAOA,EAAKD,cAAczB,QACxB,8C,CAIJ,GAAI4C,EAAIkO,SAAStK,EAAYhI,eAAgB,CAC3C9D,KAAKqE,cACH6D,EAAIkO,SAAStK,EAAYhI,e,GAK/BmX,EAAA5Z,UAAA6d,kBAAA,SAAkB9a,GAChB,IAAI4C,EAAgC5C,EAAKkB,QACvC,+CAGF,OAAQlB,EAAKL,aAAeiD,EAAM,CAChCA,EAAK1D,UAAY,MACjB0D,EAAOA,EAAKD,cAAczB,QACxB,8C,CAIJ,IAAKlB,EAAKL,YAAa,CACrBK,EAAKR,OAAOiI,OAAS,K,CAGvB7L,KAAKqE,cAAcD,E,EAGb6W,EAAA5Z,UAAAgD,cAAA,SAAcD,GACpB,IAAM+a,EAAiB,CAAC,QAAS,OAAO9O,SAASjM,EAAKR,OAAOgH,QAC7D,IAAMwU,EAASpf,KAAK0Y,WACpB,IAAM2G,EAAkBrf,KAAKic,qBAC7B,IAAMqD,EAAmBtf,KAAKmc,sBAC9B,IAAMoD,EAAoBvf,KAAKuc,uBAE/B,GAAI6C,EAAOI,UAAYH,EAAkBjb,EAAK8X,UAAW,CACvDkD,EAAOK,SAAS,CACd5G,KAAMuG,EAAOI,UAAYpb,EAAK8X,UAAYmD,IAAoB,G,MAE3D,GACLD,EAAOI,UAAYJ,EAAOM,aAC1Btb,EAAK8X,UAAY9X,EAAKsb,aACtB,CACAN,EAAOK,SAAS,CACd5G,IACEzU,EAAK8X,UACL9X,EAAKsb,cACJN,EAAOI,UAAYJ,EAAOM,e,MAE1B,GACLN,EAAOO,WAAaL,EAAmBlb,EAAKwb,aAC3CT,EACD,CACAC,EAAOK,SAAS,CACdtU,MAAOiU,EAAOO,WAAavb,EAAKwb,WAAaN,IAAqB,G,MAE/D,GACLF,EAAOO,WAAaP,EAAOzG,YAAc4G,EACvCnb,EAAKwb,WAAaxb,EAAKkY,cACxB6C,EACD,CACAC,EAAOK,SAAS,CACdtU,KACE/G,EAAKwb,WACLxb,EAAKkY,aACJ8C,EAAOO,WAAaP,EAAOzG,YAAc4G,I,GAK1CtE,EAAA5Z,UAAAqd,uBAAA,WACN,MAAO,CACL,wBAAyB1e,KAAK6J,QAC3BwD,aACArD,KACC,SAAApG,GAAU,sCAAAC,OAAgCD,EAAOE,cAAa,SAApD,IAEXkb,KAAK,K,EAIJ/D,EAAA5Z,UAAAsd,yBAAA,W,MACA,IAAA/b,EAA8B5C,KAAK8d,kBACrC9d,KAAK8d,kBAAkBpS,sBACvB1L,KAAK6J,QAAQ6B,sBAFTI,EAAWlJ,EAAAkJ,YAAEC,EAAUnJ,EAAAmJ,WAI/B,IAAKD,IAAgBC,EAAY,CAC/B,OAAO,I,CAGT,OAAA/K,EAAA,GACEA,EAAC,4BAAA6C,OAA4BiI,EAAYhI,cAAa,kBACpD,2CACF9C,EAAC,4BAAA6C,OAA4BiI,EAAYhI,cAAa,kBACpD,2CACF9C,EAAC,4BAAA6C,OAA4BiI,EAAYhI,cAAa,mBACpD,2CACF9C,EAAC,4BAAA6C,OAA4BkI,EAAWjI,cAAa,gBACnD,2CACF9C,EAAC,4BAAA6C,OAA4BkI,EAAWjI,cAAa,gBACnD,2CACF9C,EAAC,4BAAA6C,OAA4BkI,EAAWjI,cAAa,iBACnD,2C,GAIEmX,EAAA5Z,UAAAud,uBAAA,WACN,MAAO,CACL,oCAAqC5e,KAAK8d,kBAAoB,MAAQ,K,EAIlE7C,EAAA5Z,UAAAwd,gBAAA,eAAA/e,EAAAE,KACN,OAAOA,KAAK6J,QAAQwD,aAAa+O,QAAO,SAAClW,EAAOtC,GAC9C,OAAA6a,kBAAA,GACKvY,GACApG,EAAK0L,eAAe5H,G,GAExB,G,EAGGqX,EAAA5Z,UAAAmK,eAAA,SACN5H,GAEA,OAAA6a,sDAAA,GACKze,KAAK6f,mBAAmBjc,IACxB5D,KAAK8f,oBAAoBlc,IACzB5D,KAAK+f,sBAAsBnc,IAC3B5D,KAAKggB,qBAAqBpc,IAC1B5D,KAAKigB,uBAAuBrc,IAC5B5D,KAAKkgB,qBAAqBtc,G,EAIzBqX,EAAA5Z,UAAAwe,mBAAA,SACNjc,G,MAEA,OAAA5C,EAAA,GACEA,EAAC,4BAAA6C,OAA4BD,EAAOuG,MAAK,UAAUvG,EAAOiI,OACtD,MACAjI,EAAO2K,K,GAIP0M,EAAA5Z,UAAAye,oBAAA,SACNlc,G,MAEA,OAAA5C,EAAA,GACEA,EAAC,4BAAA6C,OAA4BD,EAAOE,cAAa,cAC/CF,EAAOuG,MAAM/I,W,GAIX6Z,EAAA5Z,UAAA2e,qBAAA,SACNpc,GAEA,OAAQA,EAAOgH,QACb,IAAK,QACH,OAAO5K,KAAKmgB,0BAA0Bvc,GACxC,IAAK,MACH,OAAO5D,KAAKogB,wBAAwBxc,G,EAIlCqX,EAAA5Z,UAAA8e,0BAAA,SACNvc,G,MAEA,IAAMyc,EAAY,CAAC,OAEnB,IAAK,IAAI5R,EAAI,EAAGA,EAAI7K,EAAOuG,MAAOsE,IAAK,CACrC4R,EAAU3R,KAAK,gCAAA7K,OAAgC4K,EAAC,W,CAGlD,OAAAzN,EAAA,GACEA,EAAC,4BAAA6C,OAA4BD,EAAOE,cAAa,iBAAiB,QAAAD,OAAQwc,EAAUrB,KAClF,OACD,KACDhe,EAAC,4BAAA6C,OAA4BD,EAAOE,cAAa,oBAC/C,6C,GAIEmX,EAAA5Z,UAAA+e,wBAAA,SACNxc,G,MAEA,IAAMyc,EAAY,CAAC,OACnB,IAAK,IAAI5R,EAAIzO,KAAK6J,QAAQwD,aAAagC,OAAQZ,EAAI7K,EAAOuG,MAAOsE,IAAK,CACpE4R,EAAU3R,KAAK,gCAAA7K,OAAgC4K,EAAC,W,CAGlD,OAAAzN,EAAA,GACEA,EAAC,4BAAA6C,OAA4BD,EAAOE,cAAa,kBAAkB,QAAAD,OAAQwc,EAAUrB,KACnF,OACD,KACDhe,EAAC,4BAAA6C,OAA4BD,EAAOE,cAAa,oBAC/C,6C,GAIEmX,EAAA5Z,UAAA0e,sBAAA,SACNnc,G,MAEA,OAAOA,EAAOiI,Q,KAER7K,EAAC,4BAAA6C,OAA4BD,EAAOE,cAAa,aAAa,O,GAEhE,I,EAGEmX,EAAA5Z,UAAA4e,uBAAA,SACNrc,GAEA,OAAO5D,KAAK8d,kBACR9d,KAAK8d,kBAAkBtS,eAAe5H,GACtC,I,EAGEqX,EAAA5Z,UAAA6e,qBAAA,SACNtc,G,MAEA,OAAA5C,EAAA,GACEA,EAAC,4BAAA6C,OAA4BD,EAAOE,cAAa,aAC/CF,EAAOuG,QAAU,EAAI,KAAO,O,GAI1B8Q,EAAA5Z,UAAA0c,eAAA,WACN,OAAOnC,iBAAiB5b,KAAK2B,MAAM2e,YAAc,K,cCxkBrD,IAAMC,EAAiB,8xBACvB,IAAAC,EAAeD,E,ICsDFE,EAAaC,EAAA,6B,wdAyD6B,G,kBAUE,G,2EA+Ca,S,4BASlE,S,yBAMuD,O,wJAyBV,K,sBAQY,S,wIAzJ3DC,EAAAtf,UAAAuf,kBAAA,SACE1Y,EACAiE,GAEA,GAAIjE,EAAK,CACPA,EAAI2Y,QAAU,I,CAEhB,GAAI1U,EAAU,CACZA,EAAS0U,QAAU,K,GAMvBF,EAAAtf,UAAAyf,mBAAA,SACE1c,EACA+H,GAEA,GAAI/H,EAAM,CACRA,EAAKyc,QAAU,I,CAEjB,GAAI1U,EAAU,CACZA,EAAS0U,QAAU,K,GAMvBF,EAAAtf,UAAA0f,sBAAA,SACE7Y,EACAiE,G,QAGA,GAAIjE,EAAK,CACPA,EAAI8Y,YAAc,I,CAEpB,GAAI7U,EAAU,CACZA,EAAS6U,YAAc,K,CAIzB,GAAI9Y,EAAK,EACPlH,EAAAhB,KAAKsM,QAAQvE,WAAWgR,kBAAc,MAAA/X,SAAA,SAAAA,EAAEigB,aAAa/Y,E,KAChD,EACLtF,EAAA5C,KAAKsM,QAAQvE,WAAWgR,kBAAc,MAAAnW,SAAA,SAAAA,EAAEse,O,GAM5CP,EAAAtf,UAAA8f,kBAAA,SACEzN,EACAvH,GAEAnM,KAAKsM,QAAQmP,UAAU1F,gBAAgBrC,EAAMvH,EAAU,QACvDnM,KAAKohB,kBAAkBC,KAAKrhB,KAAKshB,sBAAsB5N,EAAMvH,G,EAK/DwU,EAAAtf,UAAAkgB,oBAAA,SACE7N,EACAvH,GAEA,GAAIA,EAAU,CACZA,EACGpB,QAAO,SAAA7C,GAAO,OAACwL,EAAKrD,SAASnI,EAAf,IACdoC,SAAQ,SAAApC,GAAG,OAAKA,EAAIzG,SAAW,KAApB,G,CAEhB,GAAIiS,EAAM,CACRA,EAAKpJ,SAAQ,SAAApC,GAAG,OAAKA,EAAIzG,SAAW,IAApB,G,CAGlBzB,KAAKsM,QAAQmP,UAAU1F,gBAAgBrC,EAAMvH,EAAU,UACvDnM,KAAKwhB,iBAAiBH,KAAKrhB,KAAKshB,sBAAsB5N,EAAMvH,G,EAK9DwU,EAAAtf,UAAAogB,oBAAA,SACErd,EACA+H,GAEA,GAAI/H,EAAM,CACRA,EAAK3C,SAAW,I,CAElB,GAAI0K,EAAU,CACZA,EAAS1K,SAAW,K,CAGtBzB,KAAK0hB,qBAAqBL,KAAK,CAC7B3Z,OAAQ1H,KAAK8R,aAAe9R,KAAK8R,aAAapK,OAAS,KACvDvG,MAAOnB,KAAK8R,aAAe9R,KAAK8R,aAAa5J,IAAI/G,MAAQ,KACzDyI,SAAU5J,KAAK8R,aAAe9R,KAAK8R,aAAalO,OAAOgG,SAAW,M,EAuGtE+W,EAAAtf,UAAAsgB,kBAAA,WACE3hB,KAAKsM,QAAU,IAAI2O,EAAmBjb,KAAK4hB,IAC3C5hB,KAAK6hB,UAAY7hB,KAAKsM,QAAQkS,c,EAGhCmC,EAAAtf,UAAAsa,iBAAA,WACE3b,KAAKsM,QAAQqP,iBAAiB3b,KAAK0b,kB,EAIrCiF,EAAAtf,UAAAygB,sBAAA,SAAsBC,EAAWhgB,EAAWD,GAC1C,GACEA,IAAS,cACTA,IAAS,kBACTA,IAAS,eACTA,IAAS,cACTA,IAAS,eACT,CACA,OAAO,K,GAKX6e,EAAAtf,UAAA2gB,aAAA,W,UACE,GAAIhiB,KAAK8S,yBAA2B,OAAQ,CAC1C9S,KAAK2R,aAAL3R,KAAK2R,YAAe3Q,EAAAhB,KAAK4R,aAAa,MAAE,MAAA5Q,SAAA,EAAAA,EAAIhB,KAAKsM,QAAQsH,eACzD5T,KAAK6R,aAAcjP,EAAA5C,KAAK2R,cAAU,MAAA/O,SAAA,SAAAA,EAAEe,UAClCtB,EAAArC,KAAK8R,gBAAY,MAAAzP,SAAA,SAAAA,EAAEuB,SAAU5D,KAAKsM,QAAQiH,kBAG5C,GAAIvT,KAAK8S,yBAA2B,SAAU,CAC5C9S,KAAKiiB,sBAAsB,MAAO,MAAO,Q,IAM/CtB,EAAAtf,UAAA6gB,YAAA,SAAYjd,GACV,IAAKA,EAAUyY,eAAerN,SAASrQ,KAAK4hB,IAAK,CAC/C5hB,KAAK2R,WAAa,KAClB3R,KAAK6R,YAAc,I,GAKvB8O,EAAAtf,UAAA8gB,wBAAA,SAAwBld,GACtB,IAAMb,EAAOa,EAAU2L,OACvB,GAAI5Q,KAAK+S,mBAAqB,SAAW3O,EAAK3C,SAAU,CACtDzB,KAAKoiB,gBAAgBhe,E,GAKzBuc,EAAAtf,UAAAghB,qBAAA,SAAqBpd,GACnB,GACEqd,IAAoB,KAAOtiB,KAAK4hB,IAChC,CACE,IACA,IACA,IACA,OACA,MACA,SACA,WACA,UACA,YACA,YACA,cACAvR,SAASpL,EAAUsd,KACrB,CACAtd,EAAU4D,gB,GAKd8X,EAAAtf,UAAAmhB,eAAA,SAAevd,GACb,GACEqd,IAAoB,KAAOtiB,KAAK4hB,IAChC5hB,KAAK8S,yBAA2B,OAChC,CACA,IAAMrK,EAAQxD,EAAUyD,SACxB,IAAMiK,EAAS8P,EAAsBxd,GAErC,OAAQA,EAAUsd,KAChB,IAAK,IACHviB,KAAK0iB,kBACHD,EAAsBxd,GACtBA,EAAUyD,UAEZ,MACF,IAAK,IACH1I,KAAK2iB,gBAAgB3iB,KAAK2R,WAAY,OACtC,MACF,IAAK,IACH3R,KAAK2iB,gBAAgB3iB,KAAK2R,WAAY,MACtC,MACF,IAAK,OACH3R,KAAK4iB,oBACH5iB,KAAKsM,QAAQmP,UAAU3H,aACvBrL,EACAkK,GAEF,MACF,IAAK,MACH3S,KAAK4iB,oBACH5iB,KAAKsM,QAAQmP,UAAUnH,YACvB7L,EACAkK,GAEF,MACF,IAAK,SACH3S,KAAK4iB,oBACH5iB,KAAKsM,QAAQmP,UAAUhH,oBACvBhM,EACAkK,GAEF,MACF,IAAK,WACH3S,KAAK4iB,oBACH5iB,KAAKsM,QAAQmP,UAAU3G,gBACvBrM,EACAkK,GAEF,MACF,IAAK,UACH3S,KAAK4iB,oBACH5iB,KAAKsM,QAAQmP,UAAUzH,gBACvBvL,EACAkK,GAEF,MACF,IAAK,YACH3S,KAAK4iB,oBACH5iB,KAAKsM,QAAQmP,UAAUtH,YACvB1L,EACAkK,GAEF,MACF,IAAK,YACH3S,KAAK4iB,oBACH5iB,KAAKsM,QAAQmP,UAAUxG,iBACvBxM,EACAkK,GAEF,MACF,IAAK,aACH3S,KAAK4iB,oBACH5iB,KAAKsM,QAAQmP,UAAUrG,aACvB3M,EACAkK,GAEF,MACF,IAAK,QACH3S,KAAK6iB,sBACL,M,GAMRlC,EAAAtf,UAAAyhB,iBAAA,SAAiB7d,GACf,GACGjF,KAAK+iB,sBAAwB,QAC5B/iB,KAAK+S,mBAAqB,QAC5B/S,KAAK+iB,sBAAwB,KAC7B,CACA/iB,KAAKgjB,eACHhjB,KAAKsM,QAAQmR,kBAAkBxY,KAC9BjF,KAAKsM,QAAQqR,wBAAwB1Y,GAClCjF,KAAKgjB,eACL,K,CAGRC,EAAgB,CACd,GAAIjjB,KAAKsM,QAAQmP,UAAUyH,UAAW,CACpC,GAAIZ,IAAoB,KAAOtiB,KAAK4hB,GAAI,CACtC5hB,KAAKmjB,gBACL,MAAMF,C,CAGR,IAAM/a,EAAMlI,KAAKsM,QAAQmR,kBAAkBxY,GAC3C,IAAMb,EAAOpE,KAAKsM,QAAQsR,mBAAmB3Y,GAE7C,GACEiD,IACClI,KAAKsM,QAAQmP,UAAU2H,eAAiBlb,GACvClI,KAAKsM,QAAQmP,UAAU4H,gBAAkBjf,GAC3C,CACA,IAAMkf,EAAuBb,EAAsBxd,GACnD,IAAMse,EAA4BC,EAChCve,EACAwe,EAAkBC,OAGpB1jB,KAAK2jB,qBACHzb,EACA9D,EACAkf,IAAyBC,GACxBA,EACDA,GAGFvjB,KAAKsM,QAAQmP,UAAU2H,aAAelb,EACtClI,KAAKsM,QAAQmP,UAAU4H,cAAgBjf,C,KAO/Cuc,EAAAtf,UAAAuiB,kBAAA,WACE5jB,KAAKgjB,iBAALhjB,KAAKgjB,eAAmB,K,EAI1BrC,EAAAtf,UAAAwiB,iBAAA,SAAiB5e,GACf,IAAMiD,EAAMlI,KAAKsM,QAAQmR,kBAAkBxY,GAC3C,IAAMb,EAAOpE,KAAKsM,QAAQsR,mBAAmB3Y,GAE7C,GAAIiD,EAAK,CACPlI,KAAKsM,QAAQmP,UAAUyH,UAAY,KACnCljB,KAAK2jB,qBACHzb,EACA9D,EACAqe,EAAsBxd,GACtBA,EAAUyD,SACVzD,EAAU6e,SAAWC,EAAiBL,M,GAM5C/C,EAAAtf,UAAA2iB,eAAA,WACE,GAAIhkB,KAAKsM,QAAQmP,UAAUyH,UAAW,CACpCljB,KAAKmjB,e,GAKTxC,EAAAtf,UAAA4iB,aAAA,SAAahf,GACX,IAAMiD,EAAMlI,KAAKsM,QAAQmR,kBAAkBxY,GAC3C,IAAMb,EAAOpE,KAAKsM,QAAQsR,mBAAmB3Y,GAE7C,GAAIiD,EAAK,CACPlI,KAAKkkB,eAAehc,EAAK9D,E,GAK7Buc,EAAAtf,UAAA8iB,gBAAA,SAAgBlf,GACd,IAAMiD,EAAMlI,KAAKsM,QAAQmR,kBAAkBxY,GAC3C,IAAMb,EAAOpE,KAAKsM,QAAQsR,mBAAmB3Y,GAE7C,GAAIiD,EAAK,CACPlI,KAAKokB,iBAAiB/C,KAAK,CACzBlgB,MAAO+G,EAAI/G,MACXuG,OAAQtD,IAAI,MAAJA,SAAI,SAAJA,EAAMsD,OACdkC,SAAUxF,IAAI,MAAJA,SAAI,SAAJA,EAAMR,OAAOgG,U,GAM7B+W,EAAAtf,UAAAgjB,kBAAA,SAAkBpf,GAChBjF,KAAKsM,QAAQmP,UAAU1J,WAAW9M,E,EAIpC0b,EAAAtf,UAAAijB,gBAAA,SAAgBrf,GACd,GAAIA,EAAUuN,WAAY,CACxBvN,EAAU4D,gB,CAGZ,GAAI7I,KAAKsM,QAAQmP,UAAUpJ,oBAAoBpN,GAAY,CACzD,IAAMgR,EAAiBjW,KAAKsM,QAAQzC,QAAQ4D,oBAC5C,IAAMvF,EAAMlI,KAAKsM,QAAQmR,kBAAkBxY,GAC3C,IAAMb,EAAOpE,KAAKsM,QAAQsR,mBAAmB3Y,GAE7C,GAAIiD,EAAK,CACPlI,KAAK2jB,qBACHzb,EACA9D,GACA6R,IAAc,MAAdA,SAAc,SAAdA,EAAgBC,uBAAwB,SACxC,MACA,OAGFlW,KAAKkkB,eAAehc,EAAK9D,E,IAM/Buc,EAAAtf,UAAAkjB,mBAAA,SAAmBtf,G,QACjB,IAAIC,EAEJ,GACED,EAAU2L,SAAW5Q,KAAK4hB,IAC1B3c,EAAU6e,SAAWC,EAAiBS,aACtC,CACAtf,EAAYlF,KAAK2R,U,KACZ,CACLzM,EAAYlF,KAAKsM,QAAQmR,kBAAkBxY,E,CAG7C,GAAIC,EAAW,CACb,IAAM2M,IACJ7Q,EAAAhB,KAAK8R,gBAAY,MAAA9Q,SAAA,SAAAA,EAAEkH,OAAQhD,EAAYlF,KAAK8R,aAAe,KAE7D,IAAM2S,EAA0BzkB,KAAK0kB,eAAerD,KAAK,CACvDlgB,MAAO+D,EAAU/D,MACjBuG,OAAQmK,IAAW,MAAXA,SAAW,SAAXA,EAAanK,OACrBkC,SAAUiI,IAAW,MAAXA,SAAW,SAAXA,EAAajO,OAAOgG,SAC9B+a,eAAgB3kB,KAAK4R,aAAa5H,KAAI,SAAA9B,GAAO,OAAAA,EAAI/G,KAAJ,IAC7C+Q,QAASjN,EAAUiN,QACnBE,QAASnN,EAAUmN,WAGrBxP,EAAA5C,KAAKsM,QAAQvE,WAAWkR,oBAAgB,MAAArW,SAAA,SAAAA,EAAEgiB,eACxC3f,EAAUiN,QACVjN,EAAUmN,SAGZ,GACEqS,EAAwBI,kBACxB7kB,KAAKsM,QAAQvE,WAAWkR,iBACxB,CACAhU,EAAU4D,gB,IAMhB8X,EAAAtf,UAAAyjB,6BAAA,SACE7f,GAEA,IAAMgR,EAAiBjW,KAAKsM,QAAQzC,QAAQ4D,oBAE5C,IAAIwI,IAAc,MAAdA,SAAc,SAAdA,EAAgBC,uBAAwB,SAAU,CACpDlW,KAAKyT,UAAUxO,EAAUvB,OAAO4E,Q,MAC3B,IAAI2N,IAAc,MAAdA,SAAc,SAAdA,EAAgBC,uBAAwB,OAAQ,CACzDlW,KAAK6V,WAAa7V,KAAKsM,QAAQmP,UAAU3F,YACvC7Q,EAAUvB,OAAO4E,Q,GAMvBqY,EAAAtf,UAAA0jB,2BAAA,SACE9f,GAEA,IAAMgR,EAAiBjW,KAAKsM,QAAQzC,QAAQ4D,oBAE5C,IAAIwI,IAAc,MAAdA,SAAc,SAAdA,EAAgBC,uBAAwB,SAAU,CACpDlW,KAAK2jB,qBACH3jB,KAAKsM,QAAQmR,kBAAkBxY,GAC/BjF,KAAKsM,QAAQsR,mBAAmB3Y,GAChC,KACAA,EAAUvB,OAAO+E,MACjB,M,MAEG,IAAIwN,IAAc,MAAdA,SAAc,SAAdA,EAAgBC,uBAAwB,OAAQ,CACzDlW,KAAK6V,WAAa7V,KAAKsM,QAAQmP,UAAUlG,QACvCvV,KAAKsM,QAAQmR,kBAAkBxY,GAC/BA,EAAUvB,OAAO4E,QACjBrD,EAAUvB,OAAO+E,MACjBzI,KAAK6V,W,GAMX8K,EAAAtf,UAAA2jB,4BAAA,SAA4B/f,G,MAC1B,IAAMb,EAAOa,EAAU2L,QACvB5P,EAAAhB,KAAKsM,QAAQvE,WAAWiR,oBAAgB,MAAAhY,SAAA,SAAAA,EAAEikB,eAAe7gB,E,EAO3Duc,EAAAtf,UAAA6jB,0BAAA,WACE,GAAIllB,KAAKsM,QAAS,CAChBtM,KAAK6hB,UAAY7hB,KAAKsM,QAAQkS,c,GAKlCmC,EAAAtf,UAAA8jB,2BAAA,WACEnlB,KAAKsM,QAAQzC,QAAQqD,mB,EAIvByT,EAAAtf,UAAA+jB,2BAAA,SACEngB,GAEAjF,KAAKsM,QAAQ4R,kBAAkBjZ,EAAUvB,OAAOkG,S,EAIlD+W,EAAAtf,UAAAgkB,sBAAA,SAAsBpgB,GACpBjF,KAAKsM,QAAQ8R,eAAenZ,EAAUvB,OAAO0V,W,EAI/CuH,EAAAtf,UAAAikB,4BAAA,WACEtlB,KAAKsM,QAAQ+R,iB,EAIfsC,EAAAtf,UAAAkkB,uBAAA,SAAuBtgB,GACrBjF,KAAKsM,QAAQuR,gBAAgB5Y,EAAUvB,OAAOkG,S,EAIhD+W,EAAAtf,UAAAmkB,sBAAA,SAAsBvgB,GACpB,GAAIjF,KAAKsM,QAAQ0R,eAAe/Y,EAAUvB,OAAO+hB,WAAY,CAC3DzlB,KAAK6hB,UAAY7hB,KAAKsM,QAAQkS,c,GAKlCmC,EAAAtf,UAAAqkB,qBAAA,WACE1lB,KAAKsM,QAAQ2R,gBACbje,KAAK6hB,UAAY7hB,KAAKsM,QAAQkS,c,EAIhCmC,EAAAtf,UAAAskB,oBAAA,SAAoB1gB,GAClBjF,KAAKsM,QAAQgS,aAAarZ,EAAUvB,OAAOwE,I,EAI7CyY,EAAAtf,UAAAukB,wBAAA,SAAwB3gB,GACtBjF,KAAKsM,QAAQ2S,iBACXha,EAAU2L,O,EAKd+P,EAAAtf,UAAAwkB,yBAAA,SAAyB5gB,GACvBjF,KAAKsM,QAAQ4S,kBACXja,EAAU2L,O,EAKd+P,EAAAtf,UAAAykB,2BAAA,WACE9lB,KAAK+lB,WAAWC,KAAO,I,EAIzBrF,EAAAtf,UAAA4kB,4BAAA,WACEjmB,KAAK+lB,WAAWC,KAAO,K,EAOnBrF,EAAAtf,UAAA6kB,cAAN,W,2FACE,UAAOllB,EAAAhB,KAAK2R,cAAU,MAAA3Q,SAAA,SAAAA,EAAEG,M,QAOpBwf,EAAAtf,UAAA8kB,cAAN,W,2FACE,UAAOnlB,EAAAhB,KAAKgjB,kBAAc,MAAAhiB,SAAA,SAAAA,EAAEG,M,QAOxBwf,EAAAtf,UAAA+kB,gBAAN,W,qFACE,SAAOpmB,KAAK4R,aAAa5H,KAAI,SAAA9B,GAAO,OAAAA,EAAI/G,KAAJ,I,QAOhCwf,EAAAtf,UAAAglB,cAAN,W,qFACE,SAAOrmB,KAAK6V,WAAW7L,KAAI,SAAA9B,GAAO,OAAAA,EAAI/G,KAAJ,I,QAO9Bwf,EAAAtf,UAAAilB,eAAN,W,qFAKE,SAAO,CACL5e,OAAQ1H,KAAK6R,YAAc7R,KAAK6R,YAAYnK,OAAS,KACrDvG,MAAOnB,KAAK6R,YAAc7R,KAAK6R,YAAY3J,IAAI/G,MAAQ,KACvDyI,SAAU5J,KAAK6R,YAAc7R,KAAK6R,YAAYjO,OAAOgG,SAAW,M,QAQ9D+W,EAAAtf,UAAAklB,gBAAN,W,qFAKE,SAAO,CACL7e,OAAQ1H,KAAK8R,aAAe9R,KAAK8R,aAAapK,OAAS,KACvDvG,MAAOnB,KAAK8R,aAAe9R,KAAK8R,aAAa5J,IAAI/G,MAAQ,KACzDyI,SAAU5J,KAAK8R,aAAe9R,KAAK8R,aAAalO,OAAOgG,SAAW,M,QAUhE+W,EAAAtf,UAAAmlB,UAAN,SAAAC,G,iDAAgBtlB,EAAeM,G,gBAAA,GAAAA,SAAA,GAAAA,EAAA,IAAe,C,qCACtCyG,EAAMlI,KAAKsM,QAAQ8Q,OAAOjc,GAEhC,GAAI+G,EAAK,CACDwe,EACJ1mB,KAAKsM,QAAQmP,UAAU5H,UACrB,CACElC,WAAY3R,KAAK2R,WACjBC,aAAc5R,KAAK4R,aACnBC,YAAa7R,KAAK6R,YAClBC,aAAc9R,KAAK8R,cAErB5J,EACA,KACAzG,GAVIkQ,EAAU+U,EAAA/U,WAAEC,EAAY8U,EAAA9U,aAAEC,EAAW6U,EAAA7U,YAAEC,EAAY4U,EAAA5U,aAa3D9R,KAAK2R,WAAaA,EAClB3R,KAAK4R,aAAeA,EACpB5R,KAAK6R,YAAcA,EACnB7R,KAAK8R,aAAeA,EAEpBH,IAAU,MAAVA,SAAU,SAAVA,EAAYtN,e,kBASVsc,EAAAtf,UAAAslB,cAAN,W,iDAAoBllB,GAAA,GAAAA,SAAA,GAAAA,EAAA,IAAe,C,qCACjCzB,KAAKyT,UAAUhS,G,iBAaXkf,EAAAtf,UAAAulB,WAAN,SAAAC,EAAAJ,EAAAK,G,iDACEpf,EACAvG,EACAyI,EACAnI,G,MAAA,GAAAA,SAAA,GAAAA,EAAA,IAAe,C,qCAET2C,EAAOpE,KAAKsM,QAAQ3I,QAAQ+D,EAAQvG,EAAOyI,GAEjD,GAAIxF,EAAM,CACRpE,KAAKoiB,gBAAgBhe,EAAM3C,E,kBAUzBkf,EAAAtf,UAAAkU,QAAN,SAAAkR,G,iDAActlB,EAAeO,G,QAAA,GAAAA,SAAA,GAAAA,EAAA,IAAa,C,qCAClCuU,EAAiBjW,KAAKsM,QAAQzC,QAAQ4D,oBACtCvF,EAAMlI,KAAKsM,QAAQ8Q,OAAOjc,GAEhC,GAAI+G,IAAO+N,IAAc,MAAdA,SAAc,SAAdA,EAAgBC,uBAAwB,OAAQ,CACzDlW,KAAK6V,WAAa7V,KAAKsM,QAAQmP,UAAUlG,QACvCrN,EACAxG,EACA,MACA1B,KAAK6V,W,kBAUL8K,EAAAtf,UAAAyU,YAAN,W,iDAAkBpU,G,MAAA,GAAAA,SAAA,GAAAA,EAAA,IAAa,C,qCACvBuU,EAAiBjW,KAAKsM,QAAQzC,QAAQ4D,oBAE5C,IAAIwI,IAAc,MAAdA,SAAc,SAAdA,EAAgBC,uBAAwB,OAAQ,CAClDlW,KAAK6V,WAAa7V,KAAKsM,QAAQmP,UAAU3F,YAAYpU,E,kBASnDif,EAAAtf,UAAA0lB,UAAN,SAAgB5lB,G,qFACdnB,KAAK2iB,gBAAgB3iB,KAAKsM,QAAQ8Q,OAAOjc,GAAQ,O,iBAQ7Cwf,EAAAtf,UAAA2lB,YAAN,SAAkB7lB,G,qFAChBnB,KAAK2iB,gBAAgB3iB,KAAKsM,QAAQ8Q,OAAOjc,GAAQ,M,iBAQ7Cwf,EAAAtf,UAAA4lB,iBAAN,SAAuB9lB,G,2FACf+G,EAAMlI,KAAKsM,QAAQ8Q,OAAOjc,GAEhC,GAAI+G,EAAK,CACPlI,KAAKsM,QAAQ2S,iBAAiB/W,E,kBAS5ByY,EAAAtf,UAAA6lB,kBAAN,SAAwBxf,G,2FAChBtD,EAAOpE,KAAKsM,QAAQ3I,QAAQ+D,GAElC,GAAItD,EAAM,CACRpE,KAAKsM,QAAQ4S,kBAAkB9a,E,kBAQ7Buc,EAAAtf,UAAA6S,eAAN,W,mGACQiT,GAAanmB,EAAAhB,KAAK8R,gBAAY,MAAA9Q,SAAA,SAAAA,EAAEkH,IAEtC,GAAIif,EAAY,CACd,WAAOvkB,EAAA5C,KAAKsM,QAAQ4H,eAAeiT,MAAW,MAAAvkB,SAAA,SAAAA,EAAEzB,QAAS,K,kBAQvDwf,EAAAtf,UAAAgT,WAAN,W,mGACQ8S,GAAanmB,EAAAhB,KAAK8R,gBAAY,MAAA9Q,SAAA,SAAAA,EAAEkH,IAEtC,GAAIif,EAAY,CACd,WAAOvkB,EAAA5C,KAAKsM,QAAQ+H,WAAW8S,MAAW,MAAAvkB,SAAA,SAAAA,EAAEzB,QAAS,K,kBAQnDwf,EAAAtf,UAAA8T,gBAAN,W,2FAKQD,EAAelV,KAAKsM,QAAQ6I,gBAAgBnV,KAAK8R,cAEvD,SAAO,CACLpK,OAAQwN,EAAeA,EAAaxN,OAAS,KAC7CvG,MAAO+T,EAAeA,EAAahN,IAAI/G,MAAQ,KAC/CyI,SAAUsL,EAAeA,EAAatR,OAAOgG,SAAW,M,QAQtD+W,EAAAtf,UAAAiU,YAAN,W,2FAKQD,EAAWrV,KAAKsM,QAAQgJ,YAAYtV,KAAK8R,cAE/C,SAAO,CACLpK,OAAQ2N,EAAWA,EAAS3N,OAAS,KACrCvG,MAAOkU,EAAWA,EAASnN,IAAI/G,MAAQ,KACvCyI,SAAUyL,EAAWA,EAASzR,OAAOgG,SAAW,M,QAQ9C+W,EAAAtf,UAAAO,aAAN,SAAmBggB,G,6FACX1Z,EAAM0Z,EACN3L,EAAiBjW,KAAKsM,QAAQzC,QAAQ4D,oBAE5C,GAAIzN,KAAK+S,mBAAqB,OAAQ,CACpC/S,KAAKonB,qBAAqBlf,E,CAE5B,IAAI+N,IAAc,MAAdA,SAAc,SAAdA,EAAgBC,uBAAwB,OAAQ,CAClDlW,KAAKqnB,mBAAmBnf,E,CAG1B,GAAI+N,EAAgB,CAClBjW,KAAKsnB,qBAAqBpf,EAAK+N,GAE/B,GAAIA,EAAeC,sBAAwB,SAAU,CACnDlW,KAAKsM,QAAQmP,UAAUpF,mBACrBrW,KAAK4R,aAAavC,OAClB4G,E,MAEG,GAAIA,EAAeC,sBAAwB,OAAQ,CACxDlW,KAAKsM,QAAQmP,UAAUpF,mBACrBrW,KAAK6V,WAAWxG,OAChB4G,E,mBAMA0K,EAAAtf,UAAA+lB,qBAAA,SAAqBlf,GAC3B,GAAIA,EAAIzG,UAAYzB,KAAK+S,mBAAqB,SAAU,CACtD/S,KAAK4R,aAAa,GAAK1J,C,CAEzB,GACEA,EAAIzG,UACJzB,KAAK+S,mBAAqB,aACzB/S,KAAK4R,aAAavB,SAASnI,GAC5B,CACAlI,KAAK4R,aAAalD,KAAKxG,E,CAGzB,IAAKA,EAAIzG,SAAU,CACjB,IAAM8lB,EAAQvnB,KAAK4R,aAAa3J,QAAQC,GAExC,GAAIqf,KAAW,EAAG,CAChBvnB,KAAK4R,aAAa4V,OAAOD,EAAO,E,IAK9B5G,EAAAtf,UAAAgmB,mBAAA,SAAmBnf,GACzB,GAAIA,EAAIxG,SAAW1B,KAAK6V,WAAWxF,SAASnI,GAAM,CAChDlI,KAAK6V,WAAWnH,KAAKxG,E,CAGvB,IAAKA,EAAIxG,OAAQ,CACf,IAAM6lB,EAAQvnB,KAAK6V,WAAW5N,QAAQC,GAEtC,GAAIqf,KAAW,EAAG,CAChBvnB,KAAK6V,WAAW2R,OAAOD,EAAO,E,IAK5B5G,EAAAtf,UAAAimB,qBAAA,SACNpf,EACA+N,GAEA,IAAM7R,EAAO8D,EAAIvE,QAAQsS,GACzB,IAAMvV,EACHuV,EAAeC,sBAAwB,UAAYhO,EAAIzG,UACvDwU,EAAeC,sBAAwB,QAAUhO,EAAIxG,OAExD0C,EAAKgE,mBAAmB1H,E,EAGlBigB,EAAAtf,UAAAigB,sBAAA,SACN5N,EACAvH,GAEA,MAAO,CACLsb,OAAQ/T,EAAK1J,KAAI,SAAA9B,GAAO,OAAAA,EAAI/G,KAAJ,IACxBumB,YAAahU,EACV3I,QAAO,SAAA7C,GAAO,OAACiE,EAASkE,SAASnI,EAAnB,IACd8B,KAAI,SAAA9B,GAAO,OAAAA,EAAI/G,KAAJ,IACdwmB,cAAexb,EACZpB,QAAO,SAAA7C,GAAO,OAACwL,EAAKrD,SAASnI,EAAf,IACd8B,KAAI,SAAA9B,GAAO,OAAAA,EAAI/G,KAAJ,IACdymB,gBAAiBlU,EACd3I,QAAO,SAAA7C,GAAO,OAAAiE,EAASkE,SAASnI,EAAlB,IACd8B,KAAI,SAAA9B,GAAO,OAAAA,EAAI/G,KAAJ,I,EAIVwf,EAAAtf,UAAAwhB,oBAAA,WACN,GAAI7iB,KAAK2R,WAAY,CACnB3R,KAAK6nB,gBAAgBxG,KAAK,CACxBlgB,MAAOnB,KAAK2R,WAAWxQ,MACvBuG,OAAQ1H,KAAK6R,YAAc7R,KAAK6R,YAAYnK,OAAS,KACrDkC,SAAU5J,KAAK6R,YAAc7R,KAAK6R,YAAYjO,OAAOgG,SAAW,M,GAK9D+W,EAAAtf,UAAAqhB,kBAAA,SAAkBoF,EAAeC,GACvC,GAAI/nB,KAAK8S,yBAA2B,QAAS,CAC3C9S,KAAKiiB,sBAAsB6F,EAAMC,EAAO,gB,MACnC,GAAI/nB,KAAK8S,yBAA2B,SAAU,CACnD9S,KAAKgoB,qB,CAGPhoB,KAAKkkB,eAAelkB,KAAK2R,WAAY3R,KAAK6R,Y,EAGpC8O,EAAAtf,UAAA2mB,oBAAA,WACN,IAAM/R,EAAiBjW,KAAKsM,QAAQzC,QAAQ4D,oBAE5C,IAAIwI,IAAc,MAAdA,SAAc,SAAdA,EAAgBC,uBAAwB,OAAQ,CAClDlW,KAAK6V,WAAa7V,KAAKsM,QAAQmP,UAAU7F,SACvC5V,KAAK2R,WACL3R,KAAK6V,WACL7V,KAAK4R,a,GAKH+O,EAAAtf,UAAA4gB,sBAAA,SACNtP,EACAlK,EACAmK,G,MAEM,IAAAhQ,EACJ5C,KAAKsM,QAAQmP,UAAUhJ,OACrB,CACEd,WAAY3R,KAAK2R,WACjBC,aAAc5R,KAAK4R,aACnBC,YAAa7R,KAAK6R,YAClBC,aAAc9R,KAAK8R,cAErB9R,KAAK2R,WACL3R,KAAK6R,YACL,KACAc,EACAlK,EACAmK,EACA,OAdIjB,EAAU/O,EAAA+O,WAAEC,EAAYhP,EAAAgP,aAAEC,EAAWjP,EAAAiP,YAAEC,EAAYlP,EAAAkP,aAiB3D9R,KAAK2R,WAAaA,EAClB3R,KAAK4R,aAAeA,EACpB5R,KAAK6R,YAAcA,EACnB7R,KAAK8R,aAAeA,GAEpB9Q,EAAC6Q,GAAeF,KAAU,MAAA3Q,SAAA,SAAAA,EAAGqD,e,EAGvBsc,EAAAtf,UAAAsiB,qBAAA,SACNzb,EACA9D,EACAuO,EACAlK,EACAoK,G,MAEM,IAAAjQ,EACJ5C,KAAKsM,QAAQmP,UAAUhJ,OACrB,CACEd,WAAY3R,KAAK2R,WACjBC,aAAc5R,KAAK4R,aACnBC,YAAa7R,KAAK6R,YAClBC,aAAc9R,KAAK8R,cAErB5J,EACA9D,EACA,KACAuO,EACAlK,EACA,gBACAoK,GAdIlB,EAAU/O,EAAA+O,WAAEC,EAAYhP,EAAAgP,aAAEC,EAAWjP,EAAAiP,YAAEC,EAAYlP,EAAAkP,aAiB3D9R,KAAK2R,WAAaA,EAClB3R,KAAK4R,aAAeA,EACpB5R,KAAK6R,YAAcA,EACnB7R,KAAK8R,aAAeA,GAEpB9Q,EAAC6Q,GAAeF,KAAU,MAAA3Q,SAAA,SAAAA,EAAGqD,e,EAGvBsc,EAAAtf,UAAAuhB,oBAAA,SACNqF,EAMAxf,EACAkK,G,MAEM,IAAA/P,EAA0DqlB,EAAGloB,KACjEC,KAAKsM,QAAQmP,UACb,CACE9J,WAAY3R,KAAK2R,WACjBC,aAAc5R,KAAK4R,aACnBC,YAAa7R,KAAK6R,YAClBC,aAAc9R,KAAK8R,cAErB9R,KAAK+S,mBAAqB,QACxB/S,KAAK8S,yBAA2B,SAClC9S,KAAK+S,mBAAqB,WAAatK,EAAQ,MAC/CzI,KAAK+S,mBAAqB,WAAatK,GAASkK,EAAS,OAXnDhB,EAAU/O,EAAA+O,WAAEC,EAAYhP,EAAAgP,aAAEC,EAAWjP,EAAAiP,YAAEC,EAAYlP,EAAAkP,aAc3D9R,KAAK2R,WAAaA,EAClB3R,KAAK4R,aAAeA,EACpB5R,KAAK6R,YAAcA,EACnB7R,KAAK8R,aAAeA,GAEpB9Q,EAAC6Q,GAAeF,KAAU,MAAA3Q,SAAA,SAAAA,EAAGqD,e,EAGvBsc,EAAAtf,UAAAoS,UAAA,SAAU/S,G,MAAA,GAAAA,SAAA,GAAAA,EAAA,IAAY,CACtB,IAAAkC,EACJ5C,KAAKsM,QAAQmP,UAAUhI,UACrB,CACE9B,WAAY3R,KAAK2R,WACjBC,aAAc5R,KAAK4R,aACnBC,YAAa7R,KAAK6R,YAClBC,aAAc9R,KAAK8R,cAErBpR,GARIiR,EAAU/O,EAAA+O,WAAEC,EAAYhP,EAAAgP,aAAEC,EAAWjP,EAAAiP,YAAEC,EAAYlP,EAAAkP,aAW3D9R,KAAK2R,WAAaA,EAClB3R,KAAK4R,aAAeA,EACpB5R,KAAK6R,YAAcA,EACnB7R,KAAK8R,aAAeA,GAEpB9Q,EAAC6Q,GAAeF,KAAU,MAAA3Q,SAAA,SAAAA,EAAGqD,e,EAGvBsc,EAAAtf,UAAAshB,gBAAA,SACNza,EACA5E,GAEA,GAAI4E,GAAO5E,EAAW,CACpB,GAAI4E,GAAOA,EAAI9C,aAAc,CAC3B8C,EAAI5E,UAAY,I,OAEb,GAAI4E,IAAQ5E,EAAW,CAC5B4E,EAAI5E,UAAY,K,GAIZqd,EAAAtf,UAAA+gB,gBAAA,SAAgBhe,EAAoC3C,G,MAAA,GAAAA,SAAA,GAAAA,EAAA,IAAe,CACnE,IAAAmB,EACJ5C,KAAKsM,QAAQmP,UAAU5H,UACrB,CACElC,WAAY3R,KAAK2R,WACjBC,aAAc5R,KAAK4R,aACnBC,YAAa7R,KAAK6R,YAClBC,aAAc9R,KAAK8R,cAErB1N,EAAK8D,IACL9D,EACA3C,GAVIkQ,EAAU/O,EAAA+O,WAAEC,EAAYhP,EAAAgP,aAAEC,EAAWjP,EAAAiP,YAAEC,EAAYlP,EAAAkP,aAa3D9R,KAAK2R,WAAaA,EAClB3R,KAAK4R,aAAeA,EACpB5R,KAAK6R,YAAcA,EACnB7R,KAAK8R,aAAeA,GAEpB9Q,EAAC6Q,GAAeF,KAAU,MAAA3Q,SAAA,SAAAA,EAAGqD,e,EAGvBsc,EAAAtf,UAAA6iB,eAAA,SACNhc,EACA9D,GAEApE,KAAKkoB,WAAW7G,KAAK,CACnBlgB,MAAO+G,EAAI/G,MACXuG,OAAQtD,IAAI,MAAJA,SAAI,SAAJA,EAAMsD,OACdkC,SAAUxF,IAAI,MAAJA,SAAI,SAAJA,EAAMR,OAAOgG,U,EAInB+W,EAAAtf,UAAA8hB,cAAA,WACNnjB,KAAKsM,QAAQmP,UAAUyH,UAAY,MACnCljB,KAAKsM,QAAQmP,UAAU2H,aAAe,KACtCpjB,KAAKsM,QAAQmP,UAAU4H,cAAgB,I,EAGjC1C,EAAAtf,UAAA8mB,eAAA,eAAAroB,EAAAE,KACN,OACEooB,EAAA,4BACEzmB,KAAM3B,KAAK4hB,GACXyG,IAAK,SAAAzG,GAAE,OAAK9hB,EAAKimB,WAAanE,CAAvB,EACP0G,YAAY,0QAUZF,EAAA,QAAMtmB,KAAK,YACTsmB,EAAA,oCACEG,KAAK,mBACL1e,QAAOwH,cAAA,GAAMrR,KAAKsM,QAAQe,aAAY,MACtCib,YAAY,8P,EAYtB3H,EAAAtf,UAAAmnB,OAAA,eAAA1oB,EAAAE,KACE,OACEooB,EAACK,EAAI,CAAAlG,IAAA,2CAACmG,SAAU1oB,KAAK8S,yBAA2B,OAAS,IAAM,OAC7DsV,EAAA,UAAA7F,IAAA,2CAAQgG,KAAK,UACXH,EAAA,QAAA7F,IAAA,2CAAMzgB,KAAK,YAEbsmB,EAAA,WAAA7F,IAAA,2CACEoG,MAAM,qBACNziB,MAAOlG,KAAK6hB,UACZ0G,KAAK,OACLF,IAAK,SAAAzG,GAAE,OAAK9hB,EAAK4b,kBAAoBkG,CAA9B,GAEPwG,EAAA,QAAA7F,IAAA,8CAEF6F,EAAA,SAAA7F,IAAA,4CACGviB,KAAKmoB,iBACNC,EAAA,QAAA7F,IAAA,2CAAMzgB,KAAK,mBACXsmB,EAAA,QAAA7F,IAAA,2CAAMzgB,KAAK,iBAEbsmB,EAAA,UAAA7F,IAAA,2CAAQgG,KAAK,UACXH,EAAA,QAAA7F,IAAA,2CAAMzgB,KAAK,Y,oUAxvCK,I,UCvD1B,IAAM8mB,EAAuB,4wEAC7B,IAAAC,EAAeD,E,ICgCFE,EAAmBpI,EAAA,oC,yBACtB1gB,KAAAwK,SAAW,MACXxK,KAAA2W,gBAAkB3W,KAAK4W,qBAAqBrN,KAAKvJ,MA8UjDA,KAAA+oB,qBAAuB,SAAC9jB,GAC9BA,EAAUI,kBACVvF,EAAKkpB,aAAe,I,EAGdhpB,KAAAwI,qBAAuB,SAACvD,GAC9B,IAAM2L,EAAS3L,EAAU2L,OAEzB9Q,EAAKwW,qBAAuB1F,EAAOtI,QAAU,UAAY,GACzDxI,EAAKmpB,sBAAsB5H,KAAK,CAC9B/Y,QAASsI,EAAOtI,UAGlBrD,EAAUI,iB,EAGJrF,KAAAkpB,wBAA0B,SAACjkB,GACjCA,EAAUI,iB,glBAlV6C,Q,qMAqCD,O,mFAiBE,S,0BAWpC,G,oGA6B8B,M,cAaf,K,0GA4CC,K,sCAUD,K,iBAKG,K,+CAqBe,K,6GAxGvD8jB,EAAA9nB,UAAA+nB,cAAA,WACEppB,KAAKqpB,oBAAoBhI,KAAK,CAC5BzX,SAAU5J,KAAK4J,SACfgB,OAAQ5K,KAAK4K,Q,EAWjBue,EAAA9nB,UAAAioB,cAAA,WACEtpB,KAAKupB,oBAAoBlI,KAAK,CAC5BzX,SAAU5J,KAAK4J,SACfiC,OAAQ7L,KAAK6L,Q,EAejBsd,EAAA9nB,UAAAmoB,aAAA,WACExpB,KAAKypB,mBAAmBpI,KAAK,CAC3BzX,SAAU5J,KAAK4J,SACfO,MAAOnK,KAAKmK,O,EAuBhBgf,EAAA9nB,UAAAqoB,YAAA,WACE1pB,KAAK2pB,mBAAmBtI,KAAK,CAC3BzX,SAAU5J,KAAK4J,SACf2E,KAAMvO,KAAKuO,M,EA+Bf4a,EAAA9nB,UAAAuoB,qBAAA,WACE,GAAI5pB,KAAK6pB,cAAe,CACtB7pB,KAAK8pB,kBAAkBzI,KAAK,CAC1BzX,SAAU5J,KAAK4J,SACfigB,cAAe7pB,KAAK6pB,e,GA+D1BV,EAAA9nB,UAAAsa,iBAAA,WACE3b,KAAK4hB,GAAGrgB,iBAAiB,YAAavB,KAAK+pB,iBAAiBxgB,KAAKvJ,M,EAInEmpB,EAAA9nB,UAAA4iB,aAAA,WACE,IAAKjkB,KAAKwK,SAAU,CAClB,GAAIxK,KAAKgqB,SAAU,CACjBhqB,KAAK6pB,cAAgB7pB,KAAK6pB,gBAAkB,MAAQ,OAAS,K,MAE1D,CACL7pB,KAAKwK,SAAW,K,GAKpB2e,EAAA9nB,UAAA+jB,2BAAA,WACEplB,KAAKoa,SAAW,I,EAIlB+O,EAAA9nB,UAAAikB,4BAAA,WACEtlB,KAAKoa,SAAW,MAEhBpa,KAAKiqB,kBAAkB5I,KAAK,CAC1BzX,SAAU5J,KAAK4J,SACf2E,KAAMvO,KAAKuO,M,EAIP4a,EAAA9nB,UAAA6oB,mBAAA,WACN,OAAOlqB,KAAK4hB,GAAGtc,QAAQ,mBAAmB4kB,kB,EAGpCf,EAAA9nB,UAAA0oB,iBAAA,SAAiB9kB,GACvBA,EAAU4D,iBACV5D,EAAUI,kBAEV,GAAIrF,KAAKkqB,qBAAsB,CAC7BlqB,KAAK4I,qBAAqB3D,GAE1B0J,SAASpN,iBAAiB,YAAavB,KAAK2W,gBAAiB,CAC3DqB,QAAS,OAEXrJ,SAASpN,iBAAiB,UAAWvB,KAAKyX,mBAAmBlO,KAAKvJ,MAAO,CACvEiY,KAAM,M,GAKJkR,EAAA9nB,UAAAuH,qBAAA,SAAqB3D,GAC3BjF,KAAKmqB,4BAA8BllB,EAAUmlB,MAC7CpqB,KAAKqqB,kBAAkBhJ,KAAK,CAAEzX,SAAU5J,KAAK4J,U,EAGvCuf,EAAA9nB,UAAAuV,qBAAA,SAAqB3R,GAC3B,GACEjF,KAAKwK,UACL0G,KAAKoB,IAAItS,KAAKmqB,4BAA8BllB,EAAUmlB,OAAS,EAC/D,CACApqB,KAAKwK,SAAW,KAEhBxK,KAAKge,eAAeqD,KAAK,CACvBzX,SAAU5J,KAAK4J,SACf6b,UAAWxgB,EAAUmlB,MACrB9J,UAAWrb,EAAUqlB,UAAY,EAAI,QAAU,Q,GAK7CnB,EAAA9nB,UAAAoW,mBAAA,WACN9I,SAAS+I,oBAAoB,YAAa1X,KAAK2W,iBAC/C3W,KAAKuqB,gBAAgBlJ,KAAK,CAAEzX,SAAU5J,KAAK4J,U,EAGrCuf,EAAA9nB,UAAAmpB,yBAAA,SAAyBvlB,GAC/BA,EAAUI,iB,EAuBZ8jB,EAAA9nB,UAAAmnB,OAAA,W,MACE,OACEJ,EAACK,EAAI,CAAAlG,IAAA,2CACHgG,KACEvoB,KAAKK,MACDU,GAAQC,EAAA,GACNA,EAACC,EAA8BwpB,QAAS,KACxCzpB,EAAChB,KAAK4J,UAAW,KACjB5I,EAAChB,KAAKK,MAAMe,mBAAoBpB,KAAKK,QAAU,S,IAEjD,MAGN+nB,EAAA,MAAA7F,IAAA,2CAAIoG,MAAM,MAAMJ,KAAK,OAClBvoB,KAAK0qB,iBACL1qB,KAAK2qB,aACL3qB,KAAK4qB,aACL5qB,KAAKmoB,iBACLnoB,KAAK6qB,gBAERzC,EAAA,mCAAA7F,IAAA,2CACE3e,OAAQ5D,KAAK4hB,GACbkJ,YAAa9qB,KAAKwqB,yBAClBxE,KAAMhmB,KAAKgpB,aACXV,YAAY,0RAUZF,EAAA,QAAA7F,IAAA,2CAAMzgB,KAAK,c,EAMXqnB,EAAA9nB,UAAAqpB,eAAA,WACN,OACEtC,EAAA,MACEO,MAAM,WACNJ,KAAK,eACL1c,SAAU7L,KAAK0N,aAAe,QAAU1N,KAAK2N,kBAE7Cya,EAAA,SAAOG,KAAK,kBACVH,EAAA,SACEpZ,KAAK,WACLuZ,KAAM,CAAC,WAAYvoB,KAAKsW,sBACrBvL,QAAO,SAAAwd,GAAQ,OAAAA,IAAS,EAAT,IACfvJ,KAAK,KACR+L,QAAS/qB,KAAKwI,qBACdwiB,WAAYhrB,KAAKkpB,wBACjB5gB,QAAStI,KAAKsW,uBAAyB,UACvC2U,cAAejrB,KAAKsW,uBAAyB,mB,EAO/C6S,EAAA9nB,UAAAspB,WAAA,WACN,OACEvC,EAAA,MACEO,MAAM,OACNJ,KAAK,WACL2C,MACElrB,KAAKmrB,gBACJnrB,KAAKorB,qBAAuB,QAAUprB,KAAKqrB,WAAa,OAG1DrrB,KAAKsrB,eAAiBtrB,KAAKurB,aAAevrB,KAAKwrB,eAC9CpD,EAAA,OACEO,MAAM,YACNJ,KAAK,gBACLkD,IAAKzrB,KAAKurB,aAAevrB,KAAKsrB,cAC9BI,OAAQ1rB,KAAKwrB,iBAGfpD,EAAA,OAAKO,MAAM,YAAYJ,KAAK,kBAE9BH,EAAA,QACEO,MAAM,YACNJ,KAAK,gBACL1c,OAAQ7L,KAAK2rB,kBAAoB3rB,KAAKorB,qBAAuB,QAE5DprB,KAAKqrB,Y,EAMNlC,EAAA9nB,UAAAupB,WAAA,WACN,OACExC,EAAA,MAAIO,MAAM,OAAOJ,KAAK,WAAW1c,QAAS7L,KAAKgqB,UAC7C5B,EAAA,OAAKO,MAAM,WAAWJ,KAAK,uBAC3BH,EAAA,OAAKO,MAAM,YAAYJ,KAAK,wB,EAK1BY,EAAA9nB,UAAA8mB,eAAA,WACN,OACEC,EAAA,MAAIO,MAAM,WAAWJ,KAAK,eAAe1c,QAAS7L,KAAK4rB,aACrDxD,EAAA,UACEO,MAAM,SACNJ,KAAK,sBACLwC,QAAS/qB,KAAK+oB,uB,EAMdI,EAAA9nB,UAAAwpB,aAAA,WACN,OACEzC,EAAA,MAAIO,MAAM,SAASJ,KAAK,aAAa1c,QAAS7L,KAAK6rB,WACjDzD,EAAA,iCACExkB,OAAQ5D,KAAK4hB,GACb+G,MAAM,eACNJ,KAAK,qB,iPA7diB,I,UCjChC,IAAMuD,EAA0B,2hFAChC,IAAAC,EAAeD,E,ICYFE,EAAsBtL,EAAA,uC,yJAWjCuL,EAAA5qB,UAAA6qB,yBAAA,SACEjnB,GAEA,IAAM4E,EAA4C7F,MAAMC,KACtDjE,KAAK4hB,GAAG1d,iBAAiB,2BAG3B2F,EAAQS,SAAQ,SAAA1G,GACd,GAAIA,EAAOgG,WAAa3E,EAAUvB,OAAOkG,SAAU,CACjDhG,EAAOimB,cAAgB,I,MAK7BoC,EAAA5qB,UAAAmnB,OAAA,W,MACE,OACEJ,EAACK,EAAI,CAAAlG,IAAA,2CACHgG,KACEvoB,KAAKK,MACDU,GAAQC,EAAA,GACNA,EAACC,EAA8BkrB,WAAY,KAC3CnrB,EAAChB,KAAKK,MAAMe,mBAAoBpB,KAAKK,QAAU,S,IAEjD,M,WAlCqB,I,UCbnC,IAAM+rB,EAA6B,qPACnC,IAAAC,EAAeD,E,ICqBFE,EAAyB5L,EAAA,iCAAAgG,EAAA,W,yBAoBpC6F,EAAArsB,IAAAF,MAAe,WACb,IAAMwsB,EAAS1sB,EAAK8hB,GAAG7a,cACvB,OAAOylB,IAAM,MAANA,SAAM,SAANA,EAAQ1mB,Q,wMANjB2mB,EAAAprB,UAAA4iB,aAAA,WACEjkB,KAAK0sB,oBAAoBrL,M,EAQ3BoL,EAAAprB,UAAAmnB,OAAA,W,MACE,OACEJ,EAACK,EAAI,CAAAlG,IAAA,2CACHgG,KACEvoB,KAAKK,MACDU,GAAQC,EAAA,GACNA,EAACC,EAA8B0rB,eAAgB,KAC/C3rB,EAACP,uBAAAT,KAAIusB,EAAA,KAAaxsB,KAAjBC,SAAwBS,uBAAAT,KAAIusB,EAAA,KAAaxsB,KAAjBC,MACzBgB,EAAChB,KAAKK,MAAMe,mBAAoBpB,KAAKK,QAAU,S,IAEjD,MAGN+nB,EAAA,OAAA7F,IAAA,2CAAKgG,KAAK,UACVH,EAAA,SAAA7F,IAAA,2CAAOgG,KAAK,kBACVH,EAAA,SAAA7F,IAAA,2CAAOvT,KAAK,WAAWuZ,KAAK,cAE9BH,EAAA,OAAA7F,IAAA,2CAAKgG,KAAK,SACVH,EAAA,QAAA7F,IAAA,6C,WA3C8B,G"}