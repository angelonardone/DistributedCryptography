{"version":3,"names":["checkboxCss","ChCheckboxStyle0","PARTS","checked","indeterminate","disabled","concat","CHECKBOX_PARTS_DICTIONARY","DISABLED","INDETERMINATE","checkedValue","CHECKED","UNCHECKED","ChCheckBox","exports","_a","_accessibleNameFromExternalLabel","set","this","_startImage","_inputRef","_computeImage","_this","startImgSrc","getImagePathCallback","_c","_b","getControlRegisterProperty","DEFAULT_GET_IMAGE_PATH_CALLBACK","img","updateDirectionInImageCustomVar","_handleChange","event","stopPropagation","__classPrivateFieldGet","_updateCheckedValueAndEmitEvent","call","_getInputRef","highlightable","click","emit","_handleHostClick","clickWasPerformedInAExternalLabel","detail","composedPath","value","unCheckedValue","input","el","shadowRoot","querySelector","_renderOption","canAddListeners","additionalParts","h","class","part","CONTAINER","accessibleName","INPUT","type","readonly","onInput","ref","__classPrivateFieldSet","option","OPTION","class_1","prototype","getImagePathCallbackChanged","startImgSrcChanged","valueChanged","newValue","internals","setFormValue","toString","connectedCallback","labels","getElementInternalsLabel","render","startImageClasses","_d","classes","hasStartImageStyles","_e","styles","Host","key","DISABLED_CLASS","onClickCapture","caption","label","startImgType","LABEL","style","undefined"],"sources":["src/components/checkbox/checkbox.scss?tag=ch-checkbox&encapsulation=shadow","src/components/checkbox/checkbox.tsx"],"sourcesContent":["@import \"../../common/_base\";\r\n\r\n$option-checked-border-color: currentColor;\r\n$option-checked-color: currentColor;\r\n\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-checkbox__container-size:\r\n   * Specifies the size for the container of the `input` and `option` elements.\r\n   * @default min(1em, 20px)\r\n   */\r\n  --ch-checkbox__container-size: min(1em, 20px);\r\n\r\n  /**\r\n   * @prop --ch-checkbox__checked-image:\r\n   * Specifies the image of the checkbox when is checked.\r\n   * @default url(\"data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path fill='currentColor' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26l2.974 2.99L8 2.193z'/></svg>\")\r\n   */\r\n  --ch-checkbox__option-checked-image: url(\"data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path fill='currentColor' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26l2.974 2.99L8 2.193z'/></svg>\");\r\n\r\n  /**\r\n   * @prop --ch-checkbox__option-indeterminate-image:\r\n   * Specifies the image of the checkbox when is indeterminate.\r\n   * @default url(\"data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path fill='currentColor' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26l2.974 2.99L8 2.193z'/></svg>\")\r\n   */\r\n  --ch-checkbox__option-indeterminate-image: url(\"data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><rect width='8' height='8'/></svg>\");\r\n\r\n  /**\r\n   * @prop --ch-checkbox__option-size:\r\n   * Specifies the size for the `option` element.\r\n   * @default 50%\r\n   */\r\n  --ch-checkbox__option-size: 50%;\r\n\r\n  /**\r\n   * @prop --ch-checkbox__option-image-size:\r\n   * Specifies the image size of the `option` element.\r\n   * @default 100%\r\n   */\r\n  --ch-checkbox__option-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-checkbox__image-size:\r\n   * Specifies the box size that contains the start image of the control.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-checkbox__image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-checkbox__background-image-size:\r\n   * Specifies the size of the start image of the control.\r\n   * @default 100%\r\n   */\r\n  --ch-checkbox__background-image-size: 100%;\r\n\r\n  // Avoid zooming on double tap\r\n  touch-action: manipulation;\r\n\r\n  // Remove text selection on double click\r\n  user-select: none;\r\n\r\n  // Necessary to implement to focus delegation to the input when clicking on\r\n  // external labels\r\n  pointer-events: none;\r\n}\r\n\r\n:host,\r\n.label {\r\n  display: inline-grid;\r\n  grid-auto-columns: max-content;\r\n  grid-auto-flow: column;\r\n  align-items: center;\r\n}\r\n\r\n:host(.ch-checkbox--actionable) :is(.input, .label) {\r\n  cursor: pointer;\r\n\r\n  // Necessary to implement to focus delegation to the input when clicking on\r\n  // external labels\r\n  pointer-events: all;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  inline-size: var(--ch-checkbox__container-size);\r\n  block-size: var(--ch-checkbox__container-size);\r\n\r\n  // TODO: Add a unit test for this\r\n  // Place the option before the icon\r\n  order: -1;\r\n}\r\n\r\n.input {\r\n  display: flex;\r\n  inline-size: 100%;\r\n  block-size: 100%;\r\n\r\n  // Reset browser defaults\r\n  appearance: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: unset;\r\n\r\n  border: 1px solid $option-checked-border-color;\r\n}\r\n\r\n.option {\r\n  position: absolute;\r\n  inline-size: var(--ch-checkbox__option-size);\r\n  block-size: var(--ch-checkbox__option-size);\r\n  background-color: $option-checked-color;\r\n  pointer-events: none;\r\n\r\n  &--checked {\r\n    -webkit-mask: no-repeat center / var(--ch-checkbox__option-image-size)\r\n      var(--ch-checkbox__option-checked-image);\r\n  }\r\n\r\n  &--indeterminate {\r\n    -webkit-mask: no-repeat center / var(--ch-checkbox__option-image-size)\r\n      var(--ch-checkbox__option-indeterminate-image);\r\n  }\r\n\r\n  &--not-displayed {\r\n    opacity: 0;\r\n    visibility: hidden;\r\n  }\r\n}\r\n\r\n.label {\r\n  // Base image\r\n  --ch-start-img: var(--ch-start-img--base);\r\n\r\n  display: inline-grid;\r\n  max-inline-size: max-content;\r\n  gap: inherit;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//                 Images\r\n// - - - - - - - - - - - - - - - - - - - -\r\n.start-img--hover:hover {\r\n  --ch-start-img: var(--ch-start-img--hover);\r\n}\r\n\r\n// TODO: Add unit test for checking the hover state when disabled=true and the\r\n// mouse is over an external label\r\n.start-img--active:active {\r\n  --ch-start-img: var(--ch-start-img--active);\r\n}\r\n\r\n.start-img--focus:focus {\r\n  --ch-start-img: var(--ch-start-img--focus);\r\n}\r\n\r\n:host(.ch-disabled) > .start-img--disabled {\r\n  --ch-start-img: var(--ch-start-img--disabled);\r\n}\r\n\r\n.pseudo-img--start::before {\r\n  content: \"\";\r\n  display: block;\r\n  inline-size: var(--ch-checkbox__image-size);\r\n  // Necessary to properly size the image, due to the Host has display: flex\r\n  min-inline-size: var(--ch-checkbox__image-size);\r\n  block-size: var(--ch-checkbox__image-size);\r\n}\r\n\r\n// Background\r\n.start-img-type--background::before {\r\n  background: no-repeat center / var(--ch-checkbox__background-image-size)\r\n    var(--ch-start-img);\r\n}\r\n\r\n// Mask\r\n.start-img-type--mask::before {\r\n  -webkit-mask: no-repeat center / var(--ch-checkbox__background-image-size)\r\n    var(--ch-start-img);\r\n  background-color: currentColor;\r\n}\r\n","import {\r\n  AttachInternals,\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  CHECKBOX_PARTS_DICTIONARY,\r\n  DISABLED_CLASS\r\n} from \"../../common/reserved-names\";\r\n\r\nimport {\r\n  AccessibleNameComponent,\r\n  DisableableComponent,\r\n  FormComponent\r\n} from \"../../common/interfaces\";\r\nimport {\r\n  GxImageMultiState,\r\n  GxImageMultiStateStart,\r\n  ImageRender\r\n} from \"../../common/types\";\r\nimport { updateDirectionInImageCustomVar } from \"../../common/utils\";\r\nimport {\r\n  DEFAULT_GET_IMAGE_PATH_CALLBACK,\r\n  getControlRegisterProperty\r\n} from \"../../common/registry-properties\";\r\nimport { getElementInternalsLabel } from \"../../common/analysis/accessibility\";\r\n\r\nconst PARTS = (checked: boolean, indeterminate: boolean, disabled: boolean) => {\r\n  if (indeterminate) {\r\n    return disabled\r\n      ? `${CHECKBOX_PARTS_DICTIONARY.DISABLED} ${CHECKBOX_PARTS_DICTIONARY.INDETERMINATE}`\r\n      : CHECKBOX_PARTS_DICTIONARY.INDETERMINATE;\r\n  }\r\n\r\n  const checkedValue = checked\r\n    ? CHECKBOX_PARTS_DICTIONARY.CHECKED\r\n    : CHECKBOX_PARTS_DICTIONARY.UNCHECKED;\r\n\r\n  return disabled\r\n    ? `${CHECKBOX_PARTS_DICTIONARY.DISABLED} ${checkedValue}`\r\n    : checkedValue;\r\n};\r\n\r\n/**\r\n * @status developer-preview\r\n *\r\n * @part container - The container that serves as a wrapper for the `input` and the `option` parts.\r\n * @part input - The input element that implements the interactions for the component.\r\n * @part option - The actual \"input\" that is rendered above the `input` part. This part has `position: absolute` and `pointer-events: none`.\r\n * @part label - The label that is rendered when the `caption` property is not empty.\r\n *\r\n * @part checked - Present in the `input`, `option`, `label` and `container` parts when the control is checked and not indeterminate (`value` === `checkedValue` and `indeterminate !== true`).\r\n * @part disabled - Present in the `input`, `option`, `label` and `container` parts when the control is disabled (`disabled` === `true`).\r\n * @part indeterminate - Present in the `input`, `option`, `label` and `container` parts when the control is indeterminate (`indeterminate` === `true`).\r\n * @part unchecked - Present in the `input`, `option`, `label` and `container` parts when the control is unchecked and not indeterminate (`value` === `unCheckedValue` and `indeterminate !== true`).\r\n */\r\n@Component({\r\n  formAssociated: true,\r\n  shadow: { delegatesFocus: true },\r\n  styleUrl: \"checkbox.scss\",\r\n  tag: \"ch-checkbox\"\r\n})\r\nexport class ChCheckBox\r\n  implements AccessibleNameComponent, DisableableComponent, FormComponent\r\n{\r\n  #accessibleNameFromExternalLabel: string | undefined;\r\n  #startImage: GxImageMultiStateStart | undefined;\r\n\r\n  // Refs\r\n  #inputRef: HTMLInputElement;\r\n\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  @Element() el!: HTMLChCheckboxElement;\r\n\r\n  /**\r\n   * Specifies a short string, typically 1 to 3 words, that authors associate\r\n   * with an element to provide users of assistive technologies with a label\r\n   * for the element.\r\n   */\r\n  @Prop() readonly accessibleName?: string;\r\n\r\n  /**\r\n   * Specifies the label of the checkbox.\r\n   */\r\n  @Prop() readonly caption?: string;\r\n\r\n  /**\r\n   * The value when the checkbox is 'on'\r\n   */\r\n  @Prop() readonly checkedValue!: string;\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * startImgSrc needs to be resolved.\r\n   */\r\n  @Prop() readonly getImagePathCallback?: (\r\n    imageSrc: string\r\n  ) => GxImageMultiState | undefined;\r\n  @Watch(\"getImagePathCallback\")\r\n  getImagePathCallbackChanged() {\r\n    this.#startImage = this.#computeImage();\r\n  }\r\n\r\n  /**\r\n   * True to highlight control when an action is fired.\r\n   */\r\n  @Prop() readonly highlightable: boolean = false;\r\n\r\n  /**\r\n   * `true` if the control's value is indeterminate.\r\n   */\r\n  @Prop({ mutable: true }) indeterminate: boolean = false;\r\n\r\n  /**\r\n   * This property specifies the `name` of the control when used in a form.\r\n   */\r\n  @Prop({ reflect: true }) readonly name?: string;\r\n\r\n  /**\r\n   * This attribute indicates that the user cannot modify the value of the control.\r\n   * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly readonly: boolean = false;\r\n\r\n  /**\r\n   * Specifies the source of the start image.\r\n   */\r\n  @Prop() readonly startImgSrc: string;\r\n  @Watch(\"startImgSrc\")\r\n  startImgSrcChanged() {\r\n    this.#startImage = this.#computeImage();\r\n  }\r\n\r\n  /**\r\n   * Specifies the source of the start image.\r\n   */\r\n  @Prop() readonly startImgType: Exclude<ImageRender, \"img\"> = \"background\";\r\n\r\n  /**\r\n   * The value when the switch is 'off'. If you want to not add the value when\r\n   * the control is used in a form and it's unchecked, just let this property\r\n   * with the default `undefined` value.\r\n   */\r\n  @Prop() readonly unCheckedValue?: string | undefined;\r\n\r\n  /**\r\n   * The value of the control.\r\n   */\r\n  @Prop({ mutable: true }) value?: string;\r\n  @Watch(\"value\")\r\n  valueChanged(newValue: string) {\r\n    // Update form value\r\n    this.internals.setFormValue(newValue?.toString());\r\n  }\r\n\r\n  /**\r\n   * Emitted when the element is clicked or the space key is pressed and\r\n   * released.\r\n   */\r\n  @Event() click: EventEmitter;\r\n\r\n  /**\r\n   * The `input` event is emitted when a change to the element's value is\r\n   * committed by the user.\r\n   *\r\n   * It contains the new value of the control.\r\n   */\r\n  @Event() input: EventEmitter<string>;\r\n\r\n  #computeImage = (): GxImageMultiStateStart | null => {\r\n    if (!this.startImgSrc) {\r\n      return null;\r\n    }\r\n    const getImagePathCallback =\r\n      this.getImagePathCallback ??\r\n      getControlRegisterProperty(\"getImagePathCallback\", \"ch-checkbox\") ??\r\n      DEFAULT_GET_IMAGE_PATH_CALLBACK;\r\n\r\n    if (!getImagePathCallback) {\r\n      return null;\r\n    }\r\n    const img = getImagePathCallback(this.startImgSrc);\r\n\r\n    return img\r\n      ? (updateDirectionInImageCustomVar(\r\n          img,\r\n          \"start\"\r\n        ) as GxImageMultiStateStart)\r\n      : null;\r\n  };\r\n\r\n  #handleChange = (event: UIEvent) => {\r\n    event.stopPropagation();\r\n    this.#updateCheckedValueAndEmitEvent(this.#getInputRef().checked);\r\n\r\n    // TODO: What's the need for this implementation in GeneXus\r\n    if (this.highlightable) {\r\n      this.click.emit();\r\n    }\r\n  };\r\n\r\n  #handleHostClick = (event: MouseEvent) => {\r\n    const clickWasPerformedInAExternalLabel = event.detail === 0;\r\n\r\n    if (!clickWasPerformedInAExternalLabel) {\r\n      event.stopPropagation();\r\n      return;\r\n    }\r\n\r\n    // When the internal label is clicked it provokes a click in the input with\r\n    // event.detail === 0\r\n    if (event.composedPath()[0] !== this.#getInputRef()) {\r\n      this.#updateCheckedValueAndEmitEvent(!this.#getInputRef().checked);\r\n    }\r\n  };\r\n\r\n  #updateCheckedValueAndEmitEvent = (checked: boolean) => {\r\n    const value = checked ? this.checkedValue : this.unCheckedValue;\r\n\r\n    this.value = value;\r\n    this.#getInputRef().value = value; // Update input's value before emitting the event\r\n\r\n    // When the checked value is updated by the user, the control must no\r\n    // longer be indeterminate\r\n    this.indeterminate = false;\r\n\r\n    this.input.emit(value);\r\n  };\r\n\r\n  // TODO: There is a bug in StencilJS where we can't use the same variable for\r\n  // conditional rendered refs\r\n  #getInputRef = () =>\r\n    this.#inputRef ?? this.el.shadowRoot.querySelector(\"input\")!;\r\n\r\n  #renderOption = (\r\n    canAddListeners: boolean,\r\n    checked: boolean,\r\n    additionalParts: string\r\n  ) => {\r\n    return (\r\n      <div\r\n        class=\"container\"\r\n        part={`${CHECKBOX_PARTS_DICTIONARY.CONTAINER} ${additionalParts}`}\r\n      >\r\n        <input\r\n          // TODO: Should we avoid setting the aria-label if the caption has the same value??\r\n          aria-label={\r\n            this.#accessibleNameFromExternalLabel ?? this.accessibleName\r\n          }\r\n          class=\"input\"\r\n          part={`${CHECKBOX_PARTS_DICTIONARY.INPUT} ${additionalParts}`}\r\n          type=\"checkbox\"\r\n          checked={checked}\r\n          disabled={this.disabled || this.readonly}\r\n          indeterminate={this.indeterminate}\r\n          value={this.value}\r\n          onInput={canAddListeners && this.#handleChange}\r\n          ref={el => (this.#inputRef = el)}\r\n        />\r\n        <div\r\n          class={{\r\n            option: true,\r\n            \"option--not-displayed\": !checked && !this.indeterminate,\r\n            \"option--checked\": checked && !this.indeterminate,\r\n            \"option--indeterminate\": this.indeterminate\r\n          }}\r\n          part={`${CHECKBOX_PARTS_DICTIONARY.OPTION} ${additionalParts}`}\r\n          aria-hidden=\"true\"\r\n        ></div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  connectedCallback() {\r\n    this.#startImage = this.#computeImage();\r\n\r\n    // Set initial value to unchecked if empty\r\n    this.value ||= this.unCheckedValue;\r\n\r\n    // Accessibility\r\n    this.internals.setFormValue(this.value?.toString());\r\n    const labels = this.internals.labels;\r\n    this.#accessibleNameFromExternalLabel = getElementInternalsLabel(labels);\r\n\r\n    // Report any accessibility issue. TODO: It should take into account the caption property\r\n    // analyzeLabelExistence(\r\n    //   this.el,\r\n    //   \"ch-checkbox\",\r\n    //   labels,\r\n    //   this.#accessibleNameFromExternalLabel,\r\n    //   this.accessibleName\r\n    // );\r\n  }\r\n\r\n  render() {\r\n    const checked = this.value === this.checkedValue;\r\n\r\n    const additionalParts = PARTS(checked, this.indeterminate, this.disabled);\r\n    const startImageClasses = this.#startImage?.classes;\r\n\r\n    const canAddListeners = !this.disabled && !this.readonly;\r\n    const hasStartImageStyles = !!this.#startImage?.styles;\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          [DISABLED_CLASS]: this.disabled,\r\n          \"ch-checkbox--actionable\":\r\n            (!this.readonly && !this.disabled) ||\r\n            (this.readonly && this.highlightable)\r\n        }}\r\n        onClickCapture={canAddListeners && this.#handleHostClick}\r\n      >\r\n        {this.caption || hasStartImageStyles ? (\r\n          <label\r\n            class={{\r\n              label: true,\r\n\r\n              [startImageClasses]: !!startImageClasses,\r\n              [`start-img-type--${this.startImgType} pseudo-img--start`]:\r\n                hasStartImageStyles\r\n            }}\r\n            part={`${CHECKBOX_PARTS_DICTIONARY.LABEL} ${additionalParts}`}\r\n            style={hasStartImageStyles ? this.#startImage!.styles : undefined}\r\n          >\r\n            {this.#renderOption(canAddListeners, checked, additionalParts)}\r\n\r\n            {this.caption}\r\n          </label>\r\n        ) : (\r\n          this.#renderOption(canAddListeners, checked, additionalParts)\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}