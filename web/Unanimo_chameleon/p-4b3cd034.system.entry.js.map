{"version":3,"names":["addMetadataInActionMenuItem","itemUIModel","parentItem","MODEL_METADATA","getActionMenuItemMetadata","parseSubModel","parentModel","index","length","actionMenuItemIsActionable","actionMenuItemActionableIsExpandable","items","actionMenuCss","ChActionMenuStyle0","SEPARATE_BY_SPACE_REGEX","DEFAULT_GET_IMAGE_PATH_CALLBACK","item","iconDirection","base","startImgSrc","endImgSrc","ACTION_LINK","concat","ACTION_MENU_ITEM_PARTS_DICTIONARY","ACTION","LINK","ACTION_LINK_EXPANDABLE","EXPANDABLE","ACTION_BUTTON","BUTTON","ACTION_BUTTON_EXPANDABLE","WINDOW_ID","GET_IMAGE_PATH_CALLBACK_REGISTRY","ChActionMenu","exports","_b","_startImage","set","this","_endImage","_mainAction","_computeImage","_this","undefined","getImagePathCallback","_a","img","model","updateDirectionInImageCustomVar","_itemContent","h","class","part","CONTENT","caption","shortcut","SHORTCUT","_actionRender","startImageClasses","_f","__classPrivateFieldGet","classes","endImageClasses","_g","action","DISABLED_CLASS","disabled","_h","startImgType","_j","endImgType","expandable","href","role","expanded","toString","style","_l","_k","styles","tokenMap","_d","DISABLED","EXPANDED","COLLAPSED","ref","el","__classPrivateFieldSet","call","popoverTarget","_e","_o","_m","type","_popoverRender","id","WINDOW","actionById","actionElement","blockAlign","firstLayer","actionGroupParent","inlineAlign","popover","show","_setExportparts","parts","customParts","ACTION_MENU_ITEM_EXPORT_PARTS","split","join","setAttribute","class_1","prototype","endImgSrcChanged","getImagePathCallbackChanged","partsChanged","newParts","startImgSrcChanged","connectedCallback","getControlRegisterProperty","componentDidRender","metadata","focusFirstItemAfterExpand","requestAnimationFrame","focusFirstActionMenuItem","focusAfterCollapse","focus","render","Host","key","actionMenuKeyEventsDictionary","KEY_CODES","ARROW_UP","event","popoverRef","actionMenuInfo","getActionMenuInfoInEvent","preventDefault","ACTION_MENU_RENDER_TAG_NAME","focusActionMenuLastItem","focusNextElement","ARROW_DOWN","ARROW_RIGHT","newExpanded","ARROW_LEFT","itemMetadata","HOME","actionMenuElementIsFocused","parentElement","END","collapseAllItems","collapseSubTree","expandFromRootToNode","itemUIModelExtended","parentUIModelExtended","actionMenuRenderCss","ChActionMenuRenderStyle0","ChActionMenuRender","_c","_actionRef","_popoverRef","_renderActionItem","itemsBlockAlign","useGxRender","fromGxImageToURL","gxSettings","gxImageConstructor","link","url","_renderItems","_renderDictionary","separator","SEPARATOR","slot","name","map","_processEvent","_closeActionMenu","_openActionMenu","actionMenuItemIsHyperlink","eventInfo","hyperlinkClick","emit","defaultPrevented","buttonClick","isExpanded","expandedItemChange","forceUpdate","_handleActionMenuItemClick","_handleActionMenuItemMouseOver","_handleActionMenuItemMouseOut","_handleActionMenuKeyDown","code","expandedChange","keyboardEvent","result","_closeOnClickOutside","composedPath","includes","_closeOnClickOutsideKeyboard","ESCAPE","_addCloseOnClickOutside","document","addEventListener","capture","passive","_removeCloseOnClickOutside","removeEventListener","_addMetadataToItems","class_2","expandedChanged","modelChanged","disconnectedCallback","canAddEventListeners","onClick","onKeyDown","buttonAccessibleName","ACTION_MENU_PARTS_DICTIONARY","EXPANDABLE_BUTTON","onMouseOver","onMouseOut"],"sources":["src/components/action-menu/internal/parse-model.ts","src/components/action-menu/internal/action-menu/action-menu.scss?tag=ch-action-menu&encapsulation=shadow","src/components/action-menu/internal/action-menu/action-menu.tsx","src/components/action-menu/internal/keyboard-actions.ts","src/components/action-menu/internal/update-expanded.ts","src/components/action-menu/action-menu-render.scss?tag=ch-action-menu-render&encapsulation=shadow","src/components/action-menu/action-menu-render.tsx"],"sourcesContent":["import { MODEL_METADATA } from \"../../../common/reserved-names\";\r\nimport {\r\n  ActionMenuItemActionableModel,\r\n  ActionMenuItemModel,\r\n  ActionMenuItemModelMetadata,\r\n  ActionMenuModel\r\n} from \"../types\";\r\nimport {\r\n  actionMenuItemActionableIsExpandable,\r\n  actionMenuItemIsActionable\r\n} from \"./utils\";\r\n\r\nexport const addMetadataInActionMenuItem = (\r\n  itemUIModel: ActionMenuItemModel,\r\n  parentItem: ActionMenuItemActionableModel | undefined\r\n) => {\r\n  itemUIModel[MODEL_METADATA] = {\r\n    parentItem\r\n  } satisfies ActionMenuItemModelMetadata;\r\n};\r\n\r\nexport const getActionMenuItemMetadata = (\r\n  itemUIModel: ActionMenuItemModel\r\n): ActionMenuItemModelMetadata => itemUIModel[MODEL_METADATA];\r\n\r\nexport const parseSubModel = (\r\n  parentModel: ActionMenuModel,\r\n  parentItem: ActionMenuItemActionableModel | undefined\r\n) => {\r\n  // For loop is the fastest iterator\r\n  for (let index = 0; index < parentModel.length; index++) {\r\n    const itemUIModel = parentModel[index];\r\n\r\n    addMetadataInActionMenuItem(itemUIModel, parentItem);\r\n\r\n    if (\r\n      actionMenuItemIsActionable(itemUIModel) &&\r\n      actionMenuItemActionableIsExpandable(itemUIModel)\r\n    ) {\r\n      parseSubModel(itemUIModel.items, itemUIModel);\r\n    }\r\n  }\r\n};\r\n","@import \"../../../../common/_base\";\r\n\r\n// Must be placed after the \":where(a, button)\"\r\n@include button-reset();\r\n@include box-sizing();\r\n\r\n:host {\r\n  display: grid;\r\n}\r\n\r\n.expandable-button {\r\n  justify-content: center;\r\n  align-self: center;\r\n}\r\n\r\n// TODO: Add a unit test for this\r\n.ch-disabled {\r\n  pointer-events: none;\r\n}\r\n\r\n// Remove focus of the button content\r\n// TODO: Is this necessary?\r\n::slotted([slot=\"action\"]) {\r\n  pointer-events: none;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//           Separation\r\n// - - - - - - - - - - - - - - - -\r\nch-popover {\r\n  --ch-popover-separation-x: var(--ch-action-menu-separation-x);\r\n  --ch-popover-separation-y: var(--ch-action-menu-separation-y);\r\n\r\n  &:not(.hydrated) {\r\n    display: none;\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n// Dummy separation to keep opened the popup when expand-behavior === \"ClickOrHover\"\r\n// ch-window[y-align=\"outside-start\"] {\r\n//   --ch-window-separation: var(--separation-y);\r\n//   --ch-window-separation-y: calc(var(--separation-y) * -1);\r\n// }\r\n\r\n// ch-window[y-align=\"outside-end\"] {\r\n//   --ch-window-separation: var(--separation-y);\r\n//   --ch-window-separation-y: var(--separation-y);\r\n// }\r\n\r\n// ch-window[x-align=\"outside-start\"] {\r\n//   --ch-window-separation: var(--separation-x);\r\n//   --ch-window-separation-x: calc(var(--separation-x) * -1);\r\n// }\r\n\r\n// ch-window[x-align=\"outside-end\"] {\r\n//   --ch-window-separation: var(--separation-x);\r\n//   --ch-window-separation-x: var(--separation-x);\r\n// }\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//             Images\r\n// - - - - - - - - - - - - - - - -\r\n.action {\r\n  text-align: start;\r\n\r\n  --ch-action-menu-item-start-img: var(--ch-start-img--base);\r\n  --ch-action-menu-item-end-img: var(--ch-end-img--base);\r\n\r\n  &.start-img--hover:hover {\r\n    --ch-action-menu-item-start-img: var(--ch-start-img--hover);\r\n  }\r\n  &.end-img--hover:hover {\r\n    --ch-action-menu-item-end-img: var(--ch-start-end--hover);\r\n  }\r\n\r\n  &.start-img--active:active {\r\n    --ch-action-menu-item-start-img: var(--ch-start-img--active);\r\n  }\r\n  &.end-img--active:active {\r\n    --ch-action-menu-item-end-img: var(--ch-start-end--active);\r\n  }\r\n\r\n  &.start-img--focus:focus {\r\n    --ch-action-menu-item-start-img: var(--ch-start-img--focus);\r\n  }\r\n  &.end-img--focus:focus {\r\n    --ch-action-menu-item-end-img: var(--ch-end-img--focus);\r\n  }\r\n\r\n  &.start-img--disabled.ch-disabled {\r\n    --ch-action-menu-item-start-img: var(--ch-start-img--disabled);\r\n  }\r\n  &.end-img--disabled.ch-disabled {\r\n    --ch-action-menu-item-end-img: var(--ch-end-img--disabled);\r\n  }\r\n}\r\n\r\n.pseudo-img--start::before,\r\n.pseudo-img--end::before {\r\n  content: \"\";\r\n  display: block;\r\n  inline-size: var(--ch-action-menu-item__image-size);\r\n  block-size: var(--ch-action-menu-item__image-size);\r\n  min-inline-size: var(--ch-action-menu-item__image-size);\r\n}\r\n\r\n// Background\r\n.start-img-type--background::before {\r\n  background: no-repeat center /\r\n    var(--ch-action-menu-item__background-image-size)\r\n    var(--ch-action-menu-item-start-img);\r\n}\r\n.end-img-type--background::after {\r\n  background: no-repeat center /\r\n    var(--ch-action-menu-item__background-image-size)\r\n    var(--ch-action-menu-item-end-img);\r\n}\r\n\r\n// Mask\r\n.start-img-type--mask::before {\r\n  -webkit-mask: no-repeat center /\r\n    var(--ch-action-menu-item__background-image-size)\r\n    var(--ch-action-menu-item-start-img);\r\n  background-color: currentColor;\r\n}\r\n.end-img-type--mask::after {\r\n  -webkit-mask: no-repeat center /\r\n    var(--ch-action-menu-item__background-image-size)\r\n    var(--ch-action-menu-item-end-img);\r\n  background-color: currentColor;\r\n}\r\n\r\n.content {\r\n  inline-size: 100%;\r\n}\r\n","import {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\n\r\nimport { ChPopoverAlign } from \"../../../popover/types\";\r\nimport {\r\n  tokenMap,\r\n  updateDirectionInImageCustomVar\r\n} from \"../../../../common/utils\";\r\nimport type {\r\n  GxImageMultiStateByDirection,\r\n  GxImageMultiStateEnd,\r\n  GxImageMultiStateStart,\r\n  ImageRender\r\n} from \"../../../../common/types\";\r\nimport {\r\n  DISABLED_CLASS,\r\n  ACTION_MENU_ITEM_EXPORT_PARTS,\r\n  ACTION_MENU_ITEM_PARTS_DICTIONARY\r\n} from \"../../../../common/reserved-names\";\r\nimport type {\r\n  ActionMenuImagePathCallback,\r\n  ActionMenuItemActionableModel\r\n} from \"../../types\";\r\nimport { focusFirstActionMenuItem } from \"../utils\";\r\nimport { getActionMenuItemMetadata } from \"../parse-model\";\r\nimport { getControlRegisterProperty } from \"../../../../common/registry-properties\";\r\n\r\nconst SEPARATE_BY_SPACE_REGEX = /\\s+/;\r\n\r\nconst DEFAULT_GET_IMAGE_PATH_CALLBACK: ActionMenuImagePathCallback = (\r\n  item,\r\n  iconDirection\r\n) => ({ base: iconDirection === \"start\" ? item.startImgSrc : item.endImgSrc });\r\n\r\n// Parts\r\nconst ACTION_LINK =\r\n  `${ACTION_MENU_ITEM_PARTS_DICTIONARY.ACTION} ${ACTION_MENU_ITEM_PARTS_DICTIONARY.LINK}` as const;\r\n\r\nconst ACTION_LINK_EXPANDABLE =\r\n  `${ACTION_LINK} ${ACTION_MENU_ITEM_PARTS_DICTIONARY.EXPANDABLE}` as const;\r\n\r\nconst ACTION_BUTTON =\r\n  `${ACTION_MENU_ITEM_PARTS_DICTIONARY.ACTION} ${ACTION_MENU_ITEM_PARTS_DICTIONARY.BUTTON}` as const;\r\n\r\nconst ACTION_BUTTON_EXPANDABLE =\r\n  `${ACTION_BUTTON} ${ACTION_MENU_ITEM_PARTS_DICTIONARY.EXPANDABLE}` as const;\r\n\r\nconst WINDOW_ID = \"window\";\r\n\r\nlet GET_IMAGE_PATH_CALLBACK_REGISTRY: ActionMenuImagePathCallback;\r\n\r\n@Component({\r\n  shadow: { delegatesFocus: true },\r\n  styleUrl: \"action-menu.scss\",\r\n  tag: \"ch-action-menu\"\r\n})\r\nexport class ChActionMenu implements ComponentInterface {\r\n  #startImage: GxImageMultiStateStart | undefined;\r\n  #endImage: GxImageMultiStateEnd | undefined;\r\n\r\n  // Refs\r\n  #mainAction: HTMLButtonElement | HTMLAnchorElement;\r\n\r\n  @Element() el: HTMLChActionMenuElement;\r\n\r\n  /**\r\n   * Specifies if the current parent of the item is the action-group control.\r\n   */\r\n  @Prop() readonly actionGroupParent: boolean = false;\r\n\r\n  /**\r\n   * Specifies the block alignment of the dropdown menu that is placed\r\n   * relative to the expandable button.\r\n   */\r\n  @Prop() readonly blockAlign: ChPopoverAlign = \"center\";\r\n\r\n  /**\r\n   * Specifies the caption that the control will display.\r\n   */\r\n  @Prop() readonly caption: string;\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * Specifies the src of the end image.\r\n   */\r\n  @Prop() readonly endImgSrc?: string | undefined;\r\n  @Watch(\"endImgSrc\")\r\n  endImgSrcChanged() {\r\n    this.#endImage = this.#computeImage(\"end\");\r\n  }\r\n\r\n  /**\r\n   * Specifies how the end image will be rendered.\r\n   */\r\n  @Prop() readonly endImgType: ImageRender = \"background\";\r\n\r\n  /**\r\n   * Specifies whether the item contains a subtree. `true` if the item has a\r\n   * subtree.\r\n   */\r\n  @Prop() readonly expandable: boolean = false;\r\n\r\n  /**\r\n   * `true` to display the dropdown menu.\r\n   */\r\n  @Prop() readonly expanded: boolean | undefined = false;\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * startImgSrc or endImgSrc needs to be resolved.\r\n   */\r\n  @Prop() readonly getImagePathCallback?: ActionMenuImagePathCallback;\r\n  @Watch(\"getImagePathCallback\")\r\n  getImagePathCallbackChanged() {\r\n    this.#startImage = this.#computeImage(\"start\");\r\n    this.#endImage = this.#computeImage(\"end\");\r\n  }\r\n\r\n  /**\r\n   * Specifies the hyperlink of the item. If this property is defined, the\r\n   * control will render an anchor tag with this `href`. Otherwise, it will\r\n   * render a button tag.\r\n   */\r\n  @Prop() readonly href: string | undefined;\r\n\r\n  /**\r\n   * Specifies the inline alignment of the dropdown menu that is placed\r\n   * relative to the expandable button.\r\n   */\r\n  @Prop() readonly inlineAlign: ChPopoverAlign = \"center\";\r\n\r\n  /**\r\n   * Specifies the extended model of the control. This property is only needed\r\n   * to know the UI Model on each event\r\n   */\r\n  @Prop() readonly model!: ActionMenuItemActionableModel;\r\n\r\n  /**\r\n   * Determine if the dropdown menu should be opened when the expandable\r\n   * button of the control is focused.\r\n   * TODO: Add implementation\r\n   */\r\n  @Prop() readonly openOnFocus: boolean = false;\r\n\r\n  /**\r\n   * Specifies a set of parts to use in every DOM element of the control.\r\n   */\r\n  @Prop() readonly parts?: string;\r\n  @Watch(\"parts\")\r\n  partsChanged(newParts: string) {\r\n    this.#setExportparts(newParts);\r\n  }\r\n\r\n  /**\r\n   * Specifies the shortcut caption that the control will display.\r\n   */\r\n  @Prop() readonly shortcut: string | undefined;\r\n\r\n  /**\r\n   * Specifies the src for the left img.\r\n   */\r\n  @Prop() readonly startImgSrc?: string | undefined;\r\n  @Watch(\"startImgSrc\")\r\n  startImgSrcChanged() {\r\n    this.#startImage = this.#computeImage(\"start\");\r\n  }\r\n\r\n  /**\r\n   * Specifies how the start image will be rendered.\r\n   */\r\n  @Prop() readonly startImgType: ImageRender = \"background\";\r\n\r\n  #computeImage = <T extends \"start\" | \"end\">(\r\n    iconDirection: T\r\n  ): GxImageMultiStateByDirection<T> | undefined => {\r\n    if (\r\n      (iconDirection === \"start\" && !this.startImgSrc) ||\r\n      (iconDirection === \"end\" && !this.endImgSrc)\r\n    ) {\r\n      return undefined;\r\n    }\r\n\r\n    const getImagePathCallback =\r\n      this.getImagePathCallback ?? GET_IMAGE_PATH_CALLBACK_REGISTRY;\r\n\r\n    if (!getImagePathCallback) {\r\n      return undefined;\r\n    }\r\n\r\n    const img = getImagePathCallback(this.model, iconDirection);\r\n\r\n    return img\r\n      ? (updateDirectionInImageCustomVar(\r\n          img,\r\n          iconDirection\r\n        ) as GxImageMultiStateByDirection<T>)\r\n      : undefined;\r\n  };\r\n\r\n  #itemContent = () => [\r\n    <span class=\"content\" part={ACTION_MENU_ITEM_PARTS_DICTIONARY.CONTENT}>\r\n      {this.caption}\r\n    </span>,\r\n\r\n    !!this.shortcut && (\r\n      <span\r\n        aria-hidden=\"true\"\r\n        part={ACTION_MENU_ITEM_PARTS_DICTIONARY.SHORTCUT}\r\n      >\r\n        {this.shortcut}\r\n      </span>\r\n    )\r\n  ];\r\n\r\n  #actionRender = () => {\r\n    // Classes\r\n    const startImageClasses = this.#startImage?.classes;\r\n    const endImageClasses = this.#endImage?.classes;\r\n\r\n    const classes = {\r\n      action: true,\r\n      [DISABLED_CLASS]: this.disabled,\r\n\r\n      [`start-img-type--${\r\n        this.startImgType ?? \"background\"\r\n      } pseudo-img--start`]: !!this.#startImage,\r\n      [startImageClasses]: !!startImageClasses,\r\n\r\n      [`end-img-type--${this.endImgType ?? \"background\"} pseudo-img--end`]:\r\n        !!this.#endImage,\r\n      [endImageClasses]: !!endImageClasses\r\n    };\r\n\r\n    const expandable = this.expandable;\r\n\r\n    return this.href ? (\r\n      <a\r\n        role={this.disabled ? \"link\" : undefined}\r\n        aria-controls={expandable ? WINDOW_ID : null}\r\n        aria-disabled={this.disabled ? \"true\" : undefined}\r\n        aria-expanded={expandable ? (!!this.expanded).toString() : null}\r\n        aria-haspopup={expandable ? \"true\" : null}\r\n        class={classes}\r\n        style={this.#endImage?.styles ?? undefined}\r\n        part={tokenMap({\r\n          [ACTION_LINK_EXPANDABLE]: expandable,\r\n          [ACTION_LINK]: !expandable,\r\n          [ACTION_MENU_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n          [ACTION_MENU_ITEM_PARTS_DICTIONARY.EXPANDED]:\r\n            expandable && this.expanded,\r\n          [ACTION_MENU_ITEM_PARTS_DICTIONARY.COLLAPSED]:\r\n            expandable && !this.expanded\r\n        })}\r\n        href={!this.disabled ? this.href : undefined}\r\n        // TODO: Use a different ref due to a StencilJS bug when reassigning\r\n        // the same variable with a different element's ref in runtime\r\n        ref={el => (this.#mainAction = el)}\r\n      >\r\n        {this.#itemContent()}\r\n      </a>\r\n    ) : (\r\n      <button\r\n        popoverTarget={WINDOW_ID}\r\n        aria-controls={expandable ? WINDOW_ID : null}\r\n        aria-expanded={expandable ? (!!this.expanded).toString() : null}\r\n        aria-haspopup={expandable ? \"true\" : null}\r\n        class={classes}\r\n        part={tokenMap({\r\n          [ACTION_BUTTON_EXPANDABLE]: expandable,\r\n          [ACTION_BUTTON]: !expandable,\r\n          [ACTION_MENU_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n          [ACTION_MENU_ITEM_PARTS_DICTIONARY.EXPANDED]:\r\n            expandable && this.expanded,\r\n          [ACTION_MENU_ITEM_PARTS_DICTIONARY.COLLAPSED]:\r\n            expandable && !this.expanded\r\n        })}\r\n        style={this.#endImage?.styles ?? undefined}\r\n        disabled={this.disabled}\r\n        type=\"button\"\r\n        ref={el => (this.#mainAction = el)}\r\n      >\r\n        {this.#itemContent()}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  #popoverRender = () => (\r\n    <ch-popover\r\n      role=\"list\"\r\n      id={WINDOW_ID}\r\n      part={ACTION_MENU_ITEM_PARTS_DICTIONARY.WINDOW}\r\n      actionById\r\n      actionElement={this.#mainAction as HTMLButtonElement}\r\n      blockAlign={this.blockAlign}\r\n      firstLayer={this.actionGroupParent}\r\n      inlineAlign={this.inlineAlign}\r\n      popover=\"manual\"\r\n      show\r\n    >\r\n      <slot />\r\n    </ch-popover>\r\n  );\r\n\r\n  #setExportparts = (parts?: string) => {\r\n    // TODO: Add tests for this.\r\n    // TODO: Should be global the Regex?\r\n    // TODO: Test this with multiple parts\r\n\r\n    const customParts = parts\r\n      ? `${ACTION_MENU_ITEM_EXPORT_PARTS},${parts\r\n          .split(SEPARATE_BY_SPACE_REGEX)\r\n          .join(\",\")}`\r\n      : ACTION_MENU_ITEM_EXPORT_PARTS;\r\n\r\n    this.el.setAttribute(\"exportparts\", customParts);\r\n  };\r\n\r\n  connectedCallback() {\r\n    this.el.setAttribute(\"role\", \"listitem\");\r\n    this.#setExportparts(this.parts);\r\n\r\n    // Initialize default getImagePathCallback\r\n    GET_IMAGE_PATH_CALLBACK_REGISTRY ??=\r\n      getControlRegisterProperty(\r\n        \"getImagePathCallback\",\r\n        \"ch-action-menu-render\"\r\n      ) ?? DEFAULT_GET_IMAGE_PATH_CALLBACK;\r\n\r\n    this.#startImage = this.#computeImage(\"start\");\r\n    this.#endImage = this.#computeImage(\"end\");\r\n  }\r\n\r\n  componentDidRender() {\r\n    const metadata = getActionMenuItemMetadata(this.model);\r\n\r\n    if (this.expanded && metadata.focusFirstItemAfterExpand) {\r\n      metadata.focusFirstItemAfterExpand = false;\r\n\r\n      // Wait until the first item is rendered\r\n      requestAnimationFrame(() => focusFirstActionMenuItem(this.el));\r\n    }\r\n\r\n    if (!this.expanded && metadata.focusAfterCollapse) {\r\n      metadata.focusAfterCollapse = false;\r\n      this.el.focus();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host style={this.#startImage?.styles ?? undefined}>\r\n        {this.#actionRender()}\r\n\r\n        {this.expandable && this.expanded && this.#popoverRender()}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","import { KEY_CODES } from \"../../../common/reserved-names\";\r\nimport {\r\n  ActionMenuItemActionableModel,\r\n  ActionMenuKeyboardActionResult\r\n} from \"../types\";\r\nimport { getActionMenuItemMetadata } from \"./parse-model\";\r\nimport {\r\n  ACTION_MENU_RENDER_TAG_NAME,\r\n  actionMenuElementIsFocused,\r\n  actionMenuItemActionableIsExpandable,\r\n  focusActionMenuLastItem,\r\n  focusFirstActionMenuItem,\r\n  focusNextElement,\r\n  getActionMenuInfoInEvent\r\n} from \"./utils\";\r\n\r\ntype ActionMenuKeyDownEvents =\r\n  | typeof KEY_CODES.ARROW_UP\r\n  | typeof KEY_CODES.ARROW_RIGHT\r\n  | typeof KEY_CODES.ARROW_DOWN\r\n  | typeof KEY_CODES.ARROW_LEFT\r\n  | typeof KEY_CODES.HOME\r\n  | typeof KEY_CODES.END;\r\n\r\nexport const actionMenuKeyEventsDictionary: Record<\r\n  ActionMenuKeyDownEvents,\r\n  (\r\n    event: KeyboardEvent,\r\n    popoverRef: HTMLChPopoverElement\r\n  ) => void | ActionMenuKeyboardActionResult\r\n> = {\r\n  [KEY_CODES.ARROW_UP]: (event, popoverRef) => {\r\n    const actionMenuInfo = getActionMenuInfoInEvent(event);\r\n\r\n    if (actionMenuInfo === undefined) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n\r\n    return actionMenuInfo === ACTION_MENU_RENDER_TAG_NAME\r\n      ? focusActionMenuLastItem(popoverRef)\r\n      : focusNextElement(actionMenuInfo, \"previous\");\r\n  },\r\n\r\n  [KEY_CODES.ARROW_DOWN]: (event, popoverRef) => {\r\n    const actionMenuInfo = getActionMenuInfoInEvent(event);\r\n\r\n    if (actionMenuInfo === undefined) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n\r\n    return actionMenuInfo === ACTION_MENU_RENDER_TAG_NAME\r\n      ? focusFirstActionMenuItem(popoverRef)\r\n      : focusNextElement(actionMenuInfo, \"next\");\r\n  },\r\n\r\n  [KEY_CODES.ARROW_RIGHT]: event => {\r\n    const actionMenuInfo = getActionMenuInfoInEvent(event);\r\n\r\n    if (\r\n      actionMenuInfo === undefined ||\r\n      actionMenuInfo === ACTION_MENU_RENDER_TAG_NAME ||\r\n      !actionMenuItemActionableIsExpandable(\r\n        actionMenuInfo.model as ActionMenuItemActionableModel\r\n      )\r\n    ) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n\r\n    if (actionMenuInfo.model.expanded) {\r\n      return focusFirstActionMenuItem(actionMenuInfo.ref);\r\n    }\r\n\r\n    getActionMenuItemMetadata(actionMenuInfo.model).focusFirstItemAfterExpand =\r\n      true;\r\n\r\n    return {\r\n      newExpanded: true,\r\n      model: actionMenuInfo.model\r\n    };\r\n  },\r\n\r\n  [KEY_CODES.ARROW_LEFT]: event => {\r\n    const actionMenuInfo = getActionMenuInfoInEvent(event);\r\n\r\n    if (\r\n      actionMenuInfo === undefined ||\r\n      actionMenuInfo === ACTION_MENU_RENDER_TAG_NAME\r\n    ) {\r\n      return undefined;\r\n    }\r\n    const itemMetadata = getActionMenuItemMetadata(actionMenuInfo.model);\r\n\r\n    if (!itemMetadata.parentItem) {\r\n      return undefined;\r\n    }\r\n    event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n\r\n    // Focus the parent after collapse\r\n    getActionMenuItemMetadata(itemMetadata.parentItem).focusAfterCollapse =\r\n      true;\r\n\r\n    return {\r\n      newExpanded: false,\r\n      model: itemMetadata.parentItem\r\n    };\r\n  },\r\n\r\n  [KEY_CODES.HOME]: (event, popoverRef) => {\r\n    const actionMenuInfo = getActionMenuInfoInEvent(event);\r\n\r\n    if (actionMenuInfo === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (actionMenuInfo === ACTION_MENU_RENDER_TAG_NAME) {\r\n      event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n      return focusFirstActionMenuItem(popoverRef);\r\n    }\r\n\r\n    // TODO: Is this function necessary?\r\n    if (actionMenuElementIsFocused(actionMenuInfo.ref)) {\r\n      event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n      return focusFirstActionMenuItem(\r\n        actionMenuInfo.ref.parentElement as HTMLChActionMenuElement\r\n      );\r\n    }\r\n  },\r\n\r\n  [KEY_CODES.END]: (event, popoverRef) => {\r\n    const actionMenuInfo = getActionMenuInfoInEvent(event);\r\n\r\n    if (actionMenuInfo === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (actionMenuInfo === ACTION_MENU_RENDER_TAG_NAME) {\r\n      event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n      return focusActionMenuLastItem(popoverRef);\r\n    }\r\n\r\n    // TODO: Is this function necessary?\r\n    if (actionMenuElementIsFocused(actionMenuInfo.ref)) {\r\n      event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n      return focusActionMenuLastItem(\r\n        actionMenuInfo.ref.parentElement as HTMLChActionMenuElement\r\n      );\r\n    }\r\n  }\r\n};\r\n","import { ActionMenuItemActionableModel, ActionMenuModel } from \"../types\";\r\nimport { getActionMenuItemMetadata } from \"./parse-model\";\r\nimport { actionMenuItemIsActionable } from \"./utils\";\r\n\r\nexport const collapseAllItems = (model: ActionMenuModel) => {\r\n  // For loop is the fastest iterator\r\n  for (let index = 0; index < model.length; index++) {\r\n    const itemUIModel = model[index];\r\n\r\n    if (actionMenuItemIsActionable(itemUIModel) && itemUIModel.expanded) {\r\n      itemUIModel.expanded = false;\r\n\r\n      if (itemUIModel.items?.length > 0) {\r\n        collapseAllItems(itemUIModel.items);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const collapseSubTree = (item: ActionMenuItemActionableModel) => {\r\n  item.expanded = false;\r\n\r\n  if (item.items?.length > 0) {\r\n    collapseAllItems(item.items);\r\n  }\r\n};\r\n\r\nexport const expandFromRootToNode = (\r\n  itemUIModelExtended: ActionMenuItemActionableModel\r\n) => {\r\n  let parentUIModelExtended = itemUIModelExtended;\r\n\r\n  while (parentUIModelExtended !== undefined) {\r\n    parentUIModelExtended.expanded = true;\r\n\r\n    parentUIModelExtended = getActionMenuItemMetadata(\r\n      parentUIModelExtended\r\n    ).parentItem;\r\n  }\r\n};\r\n","@import \"../../common/base\";\r\n\r\n@include button-reset();\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-action-menu-item__image-size:\r\n   * Specifies the box size that contains the start or end images of the items.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-action-menu-item__image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-action-menu-item__background-image-size:\r\n   * Specifies the size of the start and end images of the items.\r\n   * @default 100%\r\n   */\r\n  --ch-action-menu-item__background-image-size: 100%;\r\n\r\n  --ch-action-menu-separation: 0px;\r\n  --ch-action-menu-separation-x: var(--ch-action-menu-separation);\r\n  --ch-action-menu-separation-y: var(--ch-action-menu-separation);\r\n\r\n  display: contents;\r\n}\r\n\r\n::slotted(action) {\r\n  pointer-events: none;\r\n}\r\n\r\nhr {\r\n  display: grid;\r\n  block-size: 1px;\r\n  margin: 0;\r\n  background-color: color-mix(in srgb, currentColor 25%, transparent);\r\n  border: unset;\r\n  pointer-events: none;\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  forceUpdate,\r\n  h,\r\n  Host,\r\n  Prop,\r\n  Watch\r\n} from \"@stencil/core\";\r\n\r\nimport type {\r\n  ActionMenuExpandedChangeEvent,\r\n  ActionMenuHyperlinkClickEvent,\r\n  ActionMenuImagePathCallback,\r\n  ActionMenuItemActionableModel,\r\n  ActionMenuItemTypeMapping,\r\n  ActionMenuItemTypeSeparator,\r\n  ActionMenuItemTypeSlot,\r\n  ActionMenuKeyboardActionResult,\r\n  ActionMenuModel\r\n} from \"./types\";\r\nimport type { ChPopoverAlign } from \"../popover/types\";\r\n\r\nimport { fromGxImageToURL } from \"../tree-view/genexus-implementation\";\r\nimport {\r\n  ACTION_MENU_ITEM_PARTS_DICTIONARY,\r\n  ACTION_MENU_PARTS_DICTIONARY,\r\n  KEY_CODES\r\n} from \"../../common/reserved-names\";\r\n\r\nimport { tokenMap } from \"../../common/utils\";\r\nimport { actionMenuKeyEventsDictionary } from \"./internal/keyboard-actions\";\r\nimport { parseSubModel } from \"./internal/parse-model\";\r\nimport {\r\n  collapseAllItems,\r\n  collapseSubTree,\r\n  expandFromRootToNode\r\n} from \"./internal/update-expanded\";\r\nimport {\r\n  ACTION_MENU_RENDER_TAG_NAME,\r\n  actionMenuItemActionableIsExpandable,\r\n  actionMenuItemIsActionable,\r\n  actionMenuItemIsHyperlink,\r\n  getActionMenuInfoInEvent,\r\n  WINDOW_ID\r\n} from \"./internal/utils\";\r\n\r\n@Component({\r\n  tag: \"ch-action-menu-render\",\r\n  styleUrl: \"action-menu-render.scss\",\r\n  shadow: true // Necessary to avoid focus capture\r\n})\r\nexport class ChActionMenuRender {\r\n  // Refs\r\n  #actionRef!: HTMLButtonElement;\r\n  #popoverRef: HTMLChPopoverElement | undefined;\r\n\r\n  @Element() el: HTMLChActionMenuRenderElement;\r\n\r\n  /**\r\n   * This attribute lets you specify the label for the first expandable button.\r\n   * Important for accessibility.\r\n   */\r\n  @Prop() readonly buttonAccessibleName: string;\r\n\r\n  /**\r\n   * Specifies the block alignment of the dropdown menu that is placed\r\n   * relative to the expandable button.\r\n   */\r\n  @Prop() readonly blockAlign: ChPopoverAlign = \"outside-end\";\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * startImgSrc or endImgSrc (of an item) needs to be resolved.\r\n   */\r\n  @Prop() readonly getImagePathCallback?: ActionMenuImagePathCallback;\r\n\r\n  /**\r\n   * `true` to expand the dropdown window.\r\n   */\r\n  @Prop({ mutable: true }) expanded: boolean = false;\r\n  @Watch(\"expanded\")\r\n  expandedChanged() {\r\n    if (this.expanded) {\r\n      this.#addCloseOnClickOutside();\r\n    } else {\r\n      this.#removeCloseOnClickOutside();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly gxImageConstructor?: (name: string) => any;\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly gxSettings?: any;\r\n\r\n  /**\r\n   * Specifies the inline alignment of the dropdown section that is placed\r\n   * relative to the expandable button.\r\n   */\r\n  @Prop() readonly inlineAlign: ChPopoverAlign = \"center\";\r\n\r\n  /**\r\n   * This property lets you define the model of the control.\r\n   */\r\n  @Prop() readonly model: ActionMenuModel | undefined;\r\n  @Watch(\"model\")\r\n  modelChanged() {\r\n    this.#addMetadataToItems();\r\n  }\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly useGxRender?: boolean = false;\r\n\r\n  /**\r\n   * Fired when a button is clicked.\r\n   * This event can be prevented.\r\n   */\r\n  @Event() buttonClick: EventEmitter<ActionMenuItemActionableModel>;\r\n\r\n  /**\r\n   * Fired when the visibility of the main dropdown is changed.\r\n   */\r\n  @Event() expandedChange: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Fired when the visibility of a dropdown item is changed.\r\n   */\r\n  @Event() expandedItemChange: EventEmitter<ActionMenuExpandedChangeEvent>;\r\n\r\n  /**\r\n   * Fired when an hyperlink is clicked.\r\n   * This event can be prevented, but the dropdown will be closed in any case\r\n   * (prevented or not).\r\n   */\r\n  @Event() hyperlinkClick: EventEmitter<ActionMenuHyperlinkClickEvent>;\r\n\r\n  #renderActionItem = (itemUIModel: ActionMenuItemActionableModel) => {\r\n    const expandable = actionMenuItemActionableIsExpandable(itemUIModel);\r\n\r\n    return (\r\n      <ch-action-menu\r\n        blockAlign={itemUIModel.itemsBlockAlign ?? \"inside-start\"}\r\n        caption={itemUIModel.caption}\r\n        disabled={itemUIModel.disabled ?? this.disabled}\r\n        endImgSrc={\r\n          this.useGxRender\r\n            ? fromGxImageToURL(\r\n                itemUIModel.endImgSrc,\r\n                this.gxSettings,\r\n                this.gxImageConstructor\r\n              )\r\n            : itemUIModel.endImgSrc\r\n        }\r\n        endImgType={itemUIModel.endImgType}\r\n        expandable={expandable}\r\n        expanded={itemUIModel.expanded}\r\n        getImagePathCallback={this.getImagePathCallback}\r\n        href={itemUIModel.link?.url}\r\n        inlineAlign={itemUIModel.itemsBlockAlign ?? \"outside-end\"}\r\n        model={itemUIModel}\r\n        parts={itemUIModel.parts}\r\n        shortcut={itemUIModel.shortcut}\r\n        startImgSrc={\r\n          this.useGxRender\r\n            ? fromGxImageToURL(\r\n                itemUIModel.startImgSrc,\r\n                this.gxSettings,\r\n                this.gxImageConstructor\r\n              )\r\n            : itemUIModel.startImgSrc\r\n        }\r\n        startImgType={itemUIModel.startImgType}\r\n      >\r\n        {expandable &&\r\n          itemUIModel.expanded &&\r\n          this.#renderItems(itemUIModel.items)}\r\n      </ch-action-menu>\r\n    );\r\n  };\r\n\r\n  #renderDictionary: {\r\n    [key in ActionMenuItemTypeSeparator | ActionMenuItemTypeSlot]: (\r\n      model: ActionMenuItemTypeMapping[key]\r\n    ) => any;\r\n  } = {\r\n    separator: item => (\r\n      <hr\r\n        key={item.id}\r\n        part={tokenMap({\r\n          [item.id]: !!item.id,\r\n          [ACTION_MENU_ITEM_PARTS_DICTIONARY.SEPARATOR]: true,\r\n          [item.parts]: !!item.parts\r\n        })}\r\n      />\r\n    ),\r\n    slot: item => <slot name={item.id} />\r\n  };\r\n\r\n  #renderItems = (model: ActionMenuModel) =>\r\n    model.map(itemUIModel =>\r\n      actionMenuItemIsActionable(itemUIModel)\r\n        ? this.#renderActionItem(itemUIModel)\r\n        : this.#renderDictionary[itemUIModel.type](\r\n            // TODO: Improve type inference\r\n            itemUIModel as any\r\n          )\r\n    );\r\n\r\n  #processEvent = (\r\n    event: MouseEvent | PointerEvent,\r\n    type: \"click\" | \"mouseover\" | \"mouseout\"\r\n  ) => {\r\n    const actionMenuInfo = getActionMenuInfoInEvent(event);\r\n\r\n    if (actionMenuInfo === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (actionMenuInfo === ACTION_MENU_RENDER_TAG_NAME) {\r\n      if (type === \"click\") {\r\n        return this.expanded ? this.#closeActionMenu() : this.#openActionMenu();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const itemUIModel = actionMenuInfo.model;\r\n\r\n    // If \"click\" the event is a PointerEvent\r\n    if (type === \"click\") {\r\n      // Clicked a hyperlink element\r\n      if (actionMenuItemIsHyperlink(itemUIModel)) {\r\n        const eventInfo = this.hyperlinkClick.emit({\r\n          item: itemUIModel,\r\n          event: event as PointerEvent\r\n        });\r\n\r\n        // Prevent a tag navigation, but don't return so we can close the dropdown\r\n        if (eventInfo.defaultPrevented) {\r\n          event.preventDefault();\r\n        }\r\n\r\n        // TODO: Emit expandedChange event for all element?\r\n        this.#closeActionMenu();\r\n\r\n        return;\r\n      }\r\n\r\n      // Clicked a button element that is a leaf\r\n      if (!actionMenuItemActionableIsExpandable(itemUIModel)) {\r\n        const eventInfo = this.buttonClick.emit(itemUIModel);\r\n\r\n        // Prevent button click and avoid closing the dropdown\r\n        if (eventInfo.defaultPrevented) {\r\n          event.preventDefault();\r\n          return;\r\n        }\r\n\r\n        // TODO: Emit expandedChange event for all element?\r\n        this.#closeActionMenu();\r\n\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (type === \"mouseout\") {\r\n      collapseSubTree(itemUIModel);\r\n\r\n      // TODO: Emit expandedChange event\r\n    } else {\r\n      collapseAllItems(this.model);\r\n      expandFromRootToNode(itemUIModel);\r\n\r\n      const isExpanded = type === \"mouseover\" || itemUIModel.expanded;\r\n\r\n      if (itemUIModel.expanded !== isExpanded) {\r\n        itemUIModel.expanded = isExpanded;\r\n\r\n        // Only emit the event if the expanded value was changed\r\n        this.expandedItemChange.emit({\r\n          item: itemUIModel,\r\n          expanded: isExpanded\r\n        });\r\n      }\r\n    }\r\n\r\n    forceUpdate(this);\r\n  };\r\n\r\n  #handleActionMenuItemClick = (event: PointerEvent) =>\r\n    this.#processEvent(event, \"click\");\r\n\r\n  #handleActionMenuItemMouseOver = (event: MouseEvent) =>\r\n    this.#processEvent(event, \"mouseover\");\r\n\r\n  #handleActionMenuItemMouseOut = (event: MouseEvent) =>\r\n    this.#processEvent(event, \"mouseout\");\r\n\r\n  #handleActionMenuKeyDown = (event: KeyboardEvent) => {\r\n    if (\r\n      !this.expanded &&\r\n      (event.code === KEY_CODES.ARROW_UP || event.code === KEY_CODES.ARROW_DOWN)\r\n    ) {\r\n      this.expanded = true;\r\n      this.expandedChange.emit(true);\r\n      return;\r\n    }\r\n\r\n    const keyboardEvent = actionMenuKeyEventsDictionary[event.code];\r\n\r\n    if (keyboardEvent) {\r\n      const result: void | ActionMenuKeyboardActionResult = keyboardEvent(\r\n        event,\r\n        this.#popoverRef\r\n      );\r\n\r\n      if (!result) {\r\n        return;\r\n      }\r\n\r\n      if (result.newExpanded) {\r\n        // TODO: Emit expandedChange event for the collapsed dropdown items\r\n\r\n        collapseAllItems(this.model);\r\n        expandFromRootToNode(result.model);\r\n      } else {\r\n        collapseSubTree(result.model);\r\n      }\r\n\r\n      this.expandedItemChange.emit({\r\n        item: result.model,\r\n        expanded: result.newExpanded\r\n      });\r\n\r\n      forceUpdate(this);\r\n    }\r\n  };\r\n\r\n  #closeOnClickOutside = (event: MouseEvent) => {\r\n    const composedPath = event.composedPath();\r\n\r\n    if (!composedPath.includes(this.el)) {\r\n      this.#closeActionMenu();\r\n    }\r\n  };\r\n\r\n  #closeOnClickOutsideKeyboard = (event: KeyboardEvent) => {\r\n    if (event.code === KEY_CODES.ESCAPE) {\r\n      this.#actionRef.focus();\r\n      this.#closeActionMenu();\r\n    }\r\n  };\r\n\r\n  #openActionMenu = () => {\r\n    this.expanded = true;\r\n    this.expandedChange.emit(true);\r\n  };\r\n\r\n  #closeActionMenu = () => {\r\n    collapseAllItems(this.model);\r\n\r\n    this.expanded = false;\r\n    this.expandedChange.emit(false);\r\n  };\r\n\r\n  #addCloseOnClickOutside = () => {\r\n    document.addEventListener(\"click\", this.#closeOnClickOutside, {\r\n      capture: true,\r\n      passive: true\r\n    });\r\n    document.addEventListener(\"keydown\", this.#closeOnClickOutsideKeyboard, {\r\n      capture: true,\r\n      passive: true\r\n    });\r\n  };\r\n\r\n  #removeCloseOnClickOutside = () => {\r\n    document.removeEventListener(\"click\", this.#closeOnClickOutside, true);\r\n    document.removeEventListener(\r\n      \"keydown\",\r\n      this.#closeOnClickOutsideKeyboard,\r\n      true\r\n    );\r\n  };\r\n\r\n  #addMetadataToItems = () => {\r\n    if (this.model) {\r\n      parseSubModel(this.model, undefined);\r\n    }\r\n  };\r\n\r\n  connectedCallback() {\r\n    // TODO: Check if this code should be in the constructor\r\n    this.#addMetadataToItems();\r\n\r\n    if (this.expanded) {\r\n      this.#addCloseOnClickOutside();\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.#removeCloseOnClickOutside();\r\n  }\r\n\r\n  render() {\r\n    const canAddEventListeners = !(this.disabled && !this.expanded);\r\n\r\n    return (\r\n      // TODO: Should we let expand the control if it is disabled? If so, we\r\n      // can't disable the click interaction...\r\n      <Host\r\n        onClick={canAddEventListeners && this.#handleActionMenuItemClick}\r\n        onKeyDown={canAddEventListeners && this.#handleActionMenuKeyDown}\r\n      >\r\n        <button\r\n          aria-controls={WINDOW_ID}\r\n          aria-expanded={this.expanded.toString()}\r\n          aria-haspopup=\"true\"\r\n          aria-label={this.buttonAccessibleName}\r\n          part={tokenMap({\r\n            [ACTION_MENU_PARTS_DICTIONARY.EXPANDABLE_BUTTON]: true,\r\n            [ACTION_MENU_ITEM_PARTS_DICTIONARY.EXPANDED]: this.expanded,\r\n            [ACTION_MENU_ITEM_PARTS_DICTIONARY.COLLAPSED]: !this.expanded,\r\n            [ACTION_MENU_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled\r\n          })}\r\n          disabled={this.disabled}\r\n          popoverTarget={WINDOW_ID}\r\n          type=\"button\"\r\n          ref={el => (this.#actionRef = el)}\r\n        >\r\n          <slot />\r\n        </button>\r\n\r\n        {this.expanded && this.model && (\r\n          <ch-popover\r\n            role=\"list\"\r\n            id={WINDOW_ID}\r\n            part={ACTION_MENU_ITEM_PARTS_DICTIONARY.WINDOW}\r\n            actionById\r\n            // TODO: We must be careful with this property because the control\r\n            // can be expanded on the initial load an the ref will not be\r\n            // correctly computed\r\n            actionElement={this.#actionRef as HTMLButtonElement}\r\n            blockAlign={this.blockAlign}\r\n            firstLayer\r\n            inlineAlign={this.inlineAlign}\r\n            popover=\"manual\"\r\n            show\r\n            onMouseOver={this.#handleActionMenuItemMouseOver}\r\n            onMouseOut={this.#handleActionMenuItemMouseOut}\r\n            ref={el => (this.#popoverRef = el)}\r\n          >\r\n            {this.model !== undefined && this.#renderItems(this.model)}\r\n          </ch-popover>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}