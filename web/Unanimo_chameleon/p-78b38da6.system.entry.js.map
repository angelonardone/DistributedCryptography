{"version":3,"names":["POPOVER_SEPARATION_X","POPOVER_SEPARATION_Y","positionTryFlipMap","getOverflowingSize","actionStartPosition","documentSize","popoverSize","popoverRelativePosition","start","end","contentOverflowsWindow","overflowingSize","alignToImplementationMap","_","separation","__","center","actionSize","fromPxToNumber","pxValue","Number","replace","trim","getAlignmentValue","align","flipSupport","alignmentOverflowingSize","alignmentWorstOverflowingSize","Math","min","alignmentPosition","alignmentOverflow","oppositeAlign","oppositePopoverRelativePosition","oppositeAlignmentOverflowingSize","oppositeAlignmentWorstOverflowingSize","setResponsiveAlignment","documentRect","actionRect","actionInlineStart","popoverWidth","popoverHeight","computedStyle","inlineAlign","blockAlign","positionTry","separationX","getPropertyValue","separationY","inlineAlignmentValue","width","blockAlignmentValue","top","height","popoverCss","ChPopoverStyle0","DRAGGING_CLASS","POPOVER_PREVENT_FLICKERING_CLASS","RESIZING_CLASS","POPOVER_ALIGN_BLOCK","POPOVER_ALIGN_INLINE","POPOVER_ACTION_WIDTH","POPOVER_ACTION_HEIGHT","POPOVER_ACTION_LEFT","POPOVER_ACTION_TOP","POPOVER_DRAGGED_X","POPOVER_DRAGGED_Y","POPOVER_BLOCK_SIZE","POPOVER_INLINE_SIZE","POPOVER_MIN_BLOCK_SIZE","POPOVER_MIN_INLINE_SIZE","POPOVER_FORCED_MAX_BLOCK_SIZE","POPOVER_FORCED_MAX_INLINE_SIZE","POPOVER_BORDER_BLOCK_START_SIZE","POPOVER_BORDER_BLOCK_END_SIZE","POPOVER_BORDER_INLINE_START_SIZE","POPOVER_BORDER_INLINE_END_SIZE","POPOVER_RTL_CLASS","POPOVER_RTL","POPOVER_RTL_VALUE","PRECISION_TO_AVOID_FLOATING_POINT_ERRORS","addCursorInDocument","cursor","document","body","style","resizingCursorDictionary","rtl","setProperty","element","property","value","concat","getProperty","addPopoverTargetElement","actionElement","popoverElement","addAction","popoverTargetElement","removePopoverTargetElement","undefined","ChPopover","exports","_a","_borderSizeRAF","set","this","_dragRAF","_positionAdjustRAF","_resizeRAF","_adjustAlignment","_checkPositionWatcher","_checkBorderSizeWatcher","_borderSizeObserver","_resizeObserver","_rtlWatcher","_draggedDistanceX","_draggedDistanceY","_dragging","_initialDragEvent","_lastDragEvent","_isRTLDirection","_currentEdge","_draggedDistanceXForResize","_draggedDistanceYForResize","_maxBlockSize","_maxInlineSize","_minBlockSize","_minInlineSize","_resizeWasMade","_resizeByDirectionDictionary","block","popoverRect","direction","currentDraggedDistanceY","__classPrivateFieldGet","_this","clientY","newBlockSize","newRestrictedBlockSize","forceCSSMinMax","__classPrivateFieldSet","el","inline","currentDraggedDistanceX","clientX","newInlineSize","newRestrictedInlineSize","_resizeEdgesAndCornersDictionary","_resizeLayer","_showPopover","showPopover","_addClickOutsideWatcherIfNecessary","call","_handlePopoverCloseOnClickOutside","event","composedPath","includes","_removeClickOutsideWatcher","show","popoverClosed","emit","_handlePopoverCloseOnEscapeKey","code","KEY_CODES","ESCAPE","mode","closeOnClickOutside","addEventListener","capture","passive","removeEventListener","_addDraggingClass","classList","add","_removeDraggingClass","remove","_avoidFlickeringInTheNextRender","addClass","_setPositionWatcher","_removePositionWatcher","disconnect","_b","SyncWithRAF","_c","ResizeObserver","entries","popoverWasResized","find","entry","target","_updatePosition","_updatePositionRAF","observe","firstLayer","requestAnimationFrame","perform","documentElement","getBoundingClientRect","popoverScrollSizes","scrollWidth","scrollHeight","getComputedStyle","_getActionInlineStartPosition","_setResponsiveAlignment","left","_getPopoverInlineSizeAndFixItIfNecessary","_getPopoverBlockSizeAndFixItIfNecessary","alignment","inlineOverflow","blockOverflow","_setOverflowBehavior","overflowBehavior","currentMaxInlineSize","currentMaxBlockSize","newMaxInlineSize","removeProperty","newMaxBlockSize","inlineSizeMatch","blockSizeMatch","_handlePopoverToggle","willBeOpen","newState","popoverOpened","_handleMouseDown","_trackElementDragRAF","_handleDragEnd","_trackElementDrag","preventDefault","cancel","_handleEdgeResize","edge","resizing","maxBlockSize","maxInlineSize","minBlockSize","minInlineSize","_removeBorderSizeWatcher","_trackElementResizeRAF","_handleResizeEnd","_trackElementResize","_setBorderSizeWatcher","resizable","_updateBorderSizeRAF","box","_updateBorderSize","borderBlockStartWidth","borderBlockEndWidth","borderInlineStartWidth","borderInlineEndWidth","class_1","prototype","handleActionChange","newActionElement","oldActionElement","actionById","handleBlockChange","blockSizeWatchChange","newValue","handleInlineChange","inlineSizeWatchChange","resizableChanged","showChanged","newShowValue","hidePopover","connectedCallback","adoptCommonThemes","shadowRoot","adoptedStyleSheets","MutationObserver","isRTL","attributeFilter","componentWillRender","componentDidLoad","disconnectedCallback","render","canAddListeners","h","Host","key","class","allowDrag","SCROLLABLE_CLASS","popover","onMouseDown","onToggle","part","name","ref"],"sources":["src/components/popover/utils.ts","src/components/popover/popover.scss?tag=ch-popover&encapsulation=shadow","src/components/popover/popover.tsx"],"sourcesContent":["import { ChPopoverAlign, ChPopoverPositionTry } from \"./types\";\r\n\r\nconst POPOVER_SEPARATION_X = \"--ch-popover-separation-x\";\r\nconst POPOVER_SEPARATION_Y = \"--ch-popover-separation-y\";\r\n\r\n// Position try\r\nconst positionTryFlipMap = {\r\n  \"outside-start\": \"outside-end\",\r\n  \"outside-end\": \"outside-start\",\r\n  \"inside-start\": \"inside-end\",\r\n  \"inside-end\": \"inside-start\"\r\n} as const satisfies {\r\n  [key in Exclude<ChPopoverAlign, \"center\">]: string;\r\n};\r\n\r\n/**\r\n * Returns how much (in negative value) the content overflows the window size\r\n * in the \"start\" and \"end\" directions.\r\n */\r\nconst getOverflowingSize = (\r\n  actionStartPosition: number,\r\n  documentSize: number,\r\n  popoverSize: number,\r\n  popoverRelativePosition: number\r\n) => ({\r\n  start:\r\n    documentSize -\r\n    (popoverSize + actionStartPosition + popoverRelativePosition),\r\n  end: actionStartPosition + popoverRelativePosition\r\n});\r\n\r\nconst contentOverflowsWindow = (overflowingSize: {\r\n  start: number;\r\n  end: number;\r\n}) => overflowingSize.start < 0 || overflowingSize.end < 0;\r\n\r\nconst alignToImplementationMap: {\r\n  [key in ChPopoverAlign]: (\r\n    actionSize: number,\r\n    popoverSize: number,\r\n    separation: number\r\n  ) => number;\r\n} = {\r\n  \"outside-start\": (_, popoverSize, separation) => -popoverSize - separation,\r\n\r\n  \"inside-start\": (_, __, separation) => separation,\r\n\r\n  center: (actionSize, popoverSize, separation) =>\r\n    actionSize * 0.5 + separation - popoverSize * 0.5,\r\n\r\n  \"inside-end\": (actionSize, popoverSize, separation) =>\r\n    actionSize - (separation + popoverSize),\r\n\r\n  \"outside-end\": (actionSize, _, separation) => actionSize + separation\r\n};\r\n\r\nexport const fromPxToNumber = (pxValue: string) =>\r\n  Number(pxValue.replace(\"px\", \"\").trim());\r\n\r\nconst getAlignmentValue = (\r\n  align: ChPopoverAlign,\r\n  actionStartPosition: number,\r\n  actionSize: number,\r\n  popoverSize: number,\r\n  documentSize: number,\r\n  separation: number,\r\n  flipSupport: boolean\r\n): { alignmentPosition: number; alignmentOverflow: number } => {\r\n  const popoverRelativePosition = alignToImplementationMap[align](\r\n    actionSize,\r\n    popoverSize,\r\n    separation\r\n  );\r\n\r\n  // Check if the current alignment overflows the document window\r\n  const alignmentOverflowingSize = getOverflowingSize(\r\n    actionStartPosition,\r\n    documentSize,\r\n    popoverSize,\r\n    popoverRelativePosition\r\n  );\r\n\r\n  // Find which alignment is the best fit, even if both alignments overflow the\r\n  // window\r\n  const alignmentWorstOverflowingSize = Math.min(\r\n    alignmentOverflowingSize.start,\r\n    alignmentOverflowingSize.end\r\n  );\r\n\r\n  // The configuration does not support flip or the alignment does not overflow\r\n  if (!flipSupport || !contentOverflowsWindow(alignmentOverflowingSize)) {\r\n    return {\r\n      alignmentPosition: popoverRelativePosition,\r\n      alignmentOverflow: alignmentWorstOverflowingSize\r\n    };\r\n  }\r\n\r\n  // Check the alignment with the opposite alignment\r\n  const oppositeAlign = positionTryFlipMap[align];\r\n  const oppositePopoverRelativePosition: number = alignToImplementationMap[\r\n    oppositeAlign\r\n  ](actionSize, popoverSize, separation);\r\n\r\n  const oppositeAlignmentOverflowingSize = getOverflowingSize(\r\n    actionStartPosition,\r\n    documentSize,\r\n    popoverSize,\r\n    oppositePopoverRelativePosition\r\n  );\r\n\r\n  // Find which alignment is the best fit, even if both alignments overflow the\r\n  // window\r\n  const oppositeAlignmentWorstOverflowingSize = Math.min(\r\n    oppositeAlignmentOverflowingSize.start,\r\n    oppositeAlignmentOverflowingSize.end\r\n  );\r\n\r\n  // The opposite alignment is the best fit\r\n  if (!contentOverflowsWindow(oppositeAlignmentOverflowingSize)) {\r\n    return {\r\n      alignmentPosition: oppositePopoverRelativePosition,\r\n      alignmentOverflow: oppositeAlignmentWorstOverflowingSize\r\n    };\r\n  }\r\n\r\n  return alignmentWorstOverflowingSize < oppositeAlignmentWorstOverflowingSize\r\n    ? {\r\n        alignmentPosition: oppositePopoverRelativePosition,\r\n        alignmentOverflow: oppositeAlignmentWorstOverflowingSize\r\n      }\r\n    : {\r\n        alignmentPosition: popoverRelativePosition,\r\n        alignmentOverflow: alignmentWorstOverflowingSize\r\n      };\r\n};\r\n\r\nexport const setResponsiveAlignment = (\r\n  documentRect: DOMRect,\r\n  actionRect: DOMRect,\r\n  actionInlineStart: number,\r\n  popoverWidth: number,\r\n  popoverHeight: number,\r\n  computedStyle: CSSStyleDeclaration,\r\n  inlineAlign: ChPopoverAlign,\r\n  blockAlign: ChPopoverAlign,\r\n  positionTry: ChPopoverPositionTry\r\n): [\r\n  { alignmentPosition: number; alignmentOverflow: number },\r\n  { alignmentPosition: number; alignmentOverflow: number }\r\n] => {\r\n  const separationX = computedStyle.getPropertyValue(POPOVER_SEPARATION_X);\r\n  const separationY = computedStyle.getPropertyValue(POPOVER_SEPARATION_Y);\r\n\r\n  // Alignment\r\n  const inlineAlignmentValue = getAlignmentValue(\r\n    inlineAlign,\r\n    actionInlineStart,\r\n    actionRect.width,\r\n    popoverWidth,\r\n    documentRect.width,\r\n    fromPxToNumber(separationX),\r\n    inlineAlign !== \"center\" && positionTry === \"flip-inline\"\r\n  );\r\n\r\n  const blockAlignmentValue = getAlignmentValue(\r\n    blockAlign,\r\n    actionRect.top,\r\n    actionRect.height,\r\n    popoverHeight,\r\n    documentRect.height,\r\n    fromPxToNumber(separationY),\r\n    blockAlign !== \"center\" && positionTry === \"flip-block\"\r\n  );\r\n\r\n  return [inlineAlignmentValue, blockAlignmentValue];\r\n};\r\n","@import \"../../common/base\";\r\n\r\n@include box-sizing();\r\n\r\n$ch-popover-x--same-layer: calc(\r\n  (var(--ch-popover-inline) + var(--ch-popover-dragged-x)) *\r\n    var(--ch-popover-rtl)\r\n);\r\n\r\n$ch-popover-y--same-layer: calc(\r\n  var(--ch-popover-block) + var(--ch-popover-dragged-y)\r\n);\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-popover-block-size:\r\n   * Specifies the block size of the popover. Useful for scenarios where the\r\n   * popover is resizable.\r\n   * @default max-content\r\n   */\r\n  --ch-popover-block-size: max-content;\r\n\r\n  /**\r\n   * @prop --ch-popover-inline-size:\r\n   * Specifies the inline size of the popover. Useful for scenarios where the\r\n   * popover is resizable.\r\n   * @default max-content\r\n   */\r\n  --ch-popover-inline-size: max-content;\r\n\r\n  /**\r\n   * @prop --ch-popover-max-block-size:\r\n   * Specifies the maximum block size of the popover. Useful for scenarios where the\r\n   * popover is resizable.\r\n   * @default auto\r\n   */\r\n  --ch-popover-max-block-size: auto;\r\n\r\n  /**\r\n     * @prop --ch-popover-max-inline-size:\r\n     * Specifies the maximum inline size of the popover. Useful for scenarios\r\n     * where the popover is resizable.\r\n     * @default auto\r\n     */\r\n  --ch-popover-max-inline-size: auto;\r\n\r\n  /**\r\n   * @prop --ch-popover-min-block-size:\r\n   * Specifies the minimum block size of the popover. Useful for scenarios where the\r\n   * popover is resizable.\r\n   * @default auto\r\n   */\r\n  --ch-popover-min-block-size: auto;\r\n\r\n  /**\r\n    * @prop --ch-popover-min-inline-size:\r\n    * Specifies the minimum inline size of the popover. Useful for scenarios\r\n    * where the popover is resizable.\r\n    * @default auto\r\n    */\r\n  --ch-popover-min-inline-size: auto;\r\n\r\n  /**\r\n   * @prop --ch-popover-resize-threshold:\r\n   * Specifies the size of the threshold to resize the popover.\r\n   * @default 4px\r\n   */\r\n  --ch-popover-resize-threshold: 8px;\r\n\r\n  /**\r\n   * @prop --ch-popover-separation-x:\r\n   * Specifies the separation between the action and popover in the x axis.\r\n   * @default 0px\r\n   */\r\n  --ch-popover-separation-x: 0px;\r\n\r\n  /**\r\n   * @prop --ch-popover-separation-y:\r\n   * Specifies the separation between the action and popover in the y axis.\r\n   * @default 0px\r\n   */\r\n  --ch-popover-separation-y: 0px;\r\n\r\n  --ch-popover-resize-threshold--half-negative: calc(\r\n    var(--ch-popover-resize-threshold) * -0.5\r\n  );\r\n\r\n  --ch-popover-border-inline-start-width: 0px;\r\n  --ch-popover-border-inline-end-width: 0px;\r\n  --ch-popover-border-block-start-width: 0px;\r\n  --ch-popover-border-block-end-width: 0px;\r\n\r\n  --ch-popover-resize__inline-start: calc(\r\n    var(--ch-popover-resize-threshold--half-negative) -\r\n      var(--ch-popover-border-inline-start-width) * 0.5\r\n  );\r\n\r\n  --ch-popover-resize__inline-end: calc(\r\n    var(--ch-popover-resize-threshold--half-negative) -\r\n      var(--ch-popover-border-inline-end-width) * 0.5\r\n  );\r\n\r\n  --ch-popover-resize__block-start: calc(\r\n    var(--ch-popover-resize-threshold--half-negative) -\r\n      var(--ch-popover-border-block-start-width) * 0.5\r\n  );\r\n\r\n  --ch-popover-resize__block-end: calc(\r\n    var(--ch-popover-resize-threshold--half-negative) -\r\n      var(--ch-popover-border-block-end-width) * 0.5\r\n  );\r\n\r\n  --ch-popover-x: calc(\r\n    (\r\n        var(--ch-popover-action-left) + var(--ch-popover-inline) +\r\n          var(--ch-popover-dragged-x)\r\n      ) * var(--ch-popover-rtl)\r\n  );\r\n\r\n  --ch-popover-y: calc(\r\n    var(--ch-popover-action-top) + var(--ch-popover-block) +\r\n      var(--ch-popover-dragged-y)\r\n  );\r\n\r\n  --ch-popover-dragged-x: 0px;\r\n  --ch-popover-dragged-y: 0px;\r\n  --ch-popover-rtl: 1;\r\n\r\n  display: none;\r\n\r\n  // Necessary when the popover is not placed in a new top layer. For example,\r\n  // when nesting dropdowns\r\n  position: fixed;\r\n\r\n  inline-size: var(--ch-popover-inline-size);\r\n  block-size: var(--ch-popover-block-size);\r\n  min-inline-size: var(--ch-popover-min-inline-size);\r\n  min-block-size: var(--ch-popover-min-block-size);\r\n  max-inline-size: var(\r\n    --ch-popover-forced-max-inline-size,\r\n    var(--ch-popover-max-inline-size)\r\n  );\r\n  max-block-size: var(\r\n    --ch-popover-forced-max-block-size,\r\n    var(--ch-popover-max-block-size)\r\n  );\r\n\r\n  // Reset browser defaults\r\n  margin: 0;\r\n  padding: 0;\r\n  background-color: unset;\r\n  border: unset;\r\n  color: unset;\r\n  overflow: visible;\r\n\r\n  top: 0;\r\n  inset-inline-start: 0;\r\n\r\n  // Alignment and Drag\r\n  translate: var(--ch-popover-x) var(--ch-popover-y);\r\n}\r\n\r\n:host([overflow-behavior=\"add-scroll\"]) {\r\n  overflow: auto;\r\n\r\n  // Alignment and Drag\r\n  translate: max(0px, var(--ch-popover-x)) max(0px, var(--ch-popover-y));\r\n}\r\n\r\n:host([show]) {\r\n  display: grid; // Necessary to support gap property\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//             Hidden\r\n// - - - - - - - - - - - - - - - -\r\n\r\n// // content-visibility: hidden is faster for rendering the content back, as\r\n// // it preserves the rendering state of the content (display: none does not)\r\n// @supports (content-visibility: hidden) {\r\n//   :host([hidden]) {\r\n//     content-visibility: hidden;\r\n//   }\r\n// }\r\n\r\n// @supports not (content-visibility: hidden) {\r\n//   :host([hidden]) {\r\n//     visibility: hidden;\r\n//   }\r\n// }\r\n\r\n// Prevents initial flickering\r\n:host(.gx-popover-prevent-flickering) {\r\n  // Necessary to override visibility: inherit from Stencil's hydration\r\n  visibility: hidden !important;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//              Drag\r\n// - - - - - - - - - - - - - - - -\r\n:host(.gx-popover-header-drag) {\r\n  display: grid;\r\n  grid-template-rows: max-content 1fr;\r\n}\r\n\r\n:host(.gx-popover-dragging) {\r\n  cursor: move;\r\n\r\n  // Remove any type of pointer when dragging, to make \"cursor: move\" effective\r\n  ::slotted(*) {\r\n    pointer-events: none;\r\n    user-select: none;\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//            Resizable\r\n// - - - - - - - - - - - - - - - -\r\n:host(.ch-popover-resizing) {\r\n  pointer-events: none;\r\n  user-select: none;\r\n}\r\n\r\n.edge {\r\n  &__block-start,\r\n  &__block-end {\r\n    position: fixed;\r\n    // This calc improves edge positioning when the border-width is much larger\r\n    // than the threshold\r\n    inset-inline: min(\r\n        0px,\r\n        calc(\r\n          (\r\n              var(--ch-popover-resize-threshold) -\r\n                var(--ch-popover-border-inline-start-width)\r\n            ) / 2\r\n        )\r\n      )\r\n      min(\r\n        0px,\r\n        calc(\r\n          (\r\n              var(--ch-popover-resize-threshold) -\r\n                var(--ch-popover-border-inline-end-width)\r\n            ) / 2\r\n        )\r\n      );\r\n    block-size: var(--ch-popover-resize-threshold);\r\n    cursor: ns-resize;\r\n  }\r\n\r\n  &__inline-start,\r\n  &__inline-end {\r\n    position: fixed;\r\n    // This calc improves edge positioning when the border-width is much larger\r\n    // than the threshold\r\n    inset-block: min(\r\n        0px,\r\n        calc(\r\n          (\r\n              var(--ch-popover-resize-threshold) -\r\n                var(--ch-popover-border-block-start-width)\r\n            ) / 2\r\n        )\r\n      )\r\n      min(\r\n        0px,\r\n        calc(\r\n          (\r\n              var(--ch-popover-resize-threshold) -\r\n                var(--ch-popover-border-block-end-width)\r\n            ) / 2\r\n        )\r\n      );\r\n    inline-size: var(--ch-popover-resize-threshold);\r\n    cursor: ew-resize;\r\n  }\r\n\r\n  &__block-start {\r\n    inset-block-start: var(--ch-popover-resize__block-start);\r\n  }\r\n\r\n  &__block-end {\r\n    inset-block-end: var(--ch-popover-resize__block-end);\r\n  }\r\n\r\n  &__inline-start {\r\n    inset-inline-start: var(--ch-popover-resize__inline-start);\r\n  }\r\n\r\n  &__inline-end {\r\n    inset-inline-end: var(--ch-popover-resize__inline-end);\r\n  }\r\n}\r\n\r\n.corner {\r\n  &__block-start-inline-start,\r\n  &__block-end-inline-end {\r\n    position: fixed;\r\n    block-size: var(--ch-popover-resize-threshold);\r\n    inline-size: var(--ch-popover-resize-threshold);\r\n    cursor: nwse-resize;\r\n  }\r\n\r\n  &__block-start-inline-end,\r\n  &__block-end-inline-start {\r\n    position: fixed;\r\n    block-size: var(--ch-popover-resize-threshold);\r\n    inline-size: var(--ch-popover-resize-threshold);\r\n    cursor: nesw-resize;\r\n  }\r\n\r\n  &__block-start-inline-start {\r\n    inset-block-start: var(--ch-popover-resize__block-start);\r\n    inset-inline-start: var(--ch-popover-resize__inline-start);\r\n  }\r\n\r\n  &__block-end-inline-end {\r\n    inset-block-end: var(--ch-popover-resize__block-end);\r\n    inset-inline-end: var(--ch-popover-resize__inline-end);\r\n  }\r\n\r\n  &__block-start-inline-end {\r\n    inset-block-start: var(--ch-popover-resize__block-start);\r\n    inset-inline-end: var(--ch-popover-resize__inline-end);\r\n  }\r\n\r\n  &__block-end-inline-start {\r\n    inset-block-end: var(--ch-popover-resize__block-end);\r\n    inset-inline-start: var(--ch-popover-resize__inline-start);\r\n  }\r\n}\r\n\r\n// \"Rotate\" resize cursors for the corners\r\n:host(.ch-popover-rtl) {\r\n  .corner__block-start-inline-start,\r\n  .corner__block-end-inline-end {\r\n    cursor: nesw-resize;\r\n  }\r\n}\r\n\r\n:host(.ch-popover-rtl) {\r\n  .corner__block-start-inline-end,\r\n  .corner__block-end-inline-start {\r\n    cursor: nwse-resize;\r\n  }\r\n}\r\n\r\n// Useful for observing changes in border size\r\n.resize-layer {\r\n  position: fixed;\r\n  inset: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//         Block alignment\r\n// - - - - - - - - - - - - - - - -\r\n// :host([block-align=\"outside-start\"]) {\r\n//   --ch-popover-block: calc(-100% + var(--ch-popover-separation-y) * -1);\r\n// }\r\n\r\n// :host([block-align=\"inside-start\"]) {\r\n//   --ch-popover-block: var(--ch-popover-separation-y);\r\n// }\r\n\r\n// :host([block-align=\"center\"]) {\r\n//   --ch-popover-block: calc(\r\n//     var(--ch-popover-action-height) / 2 - 50% + var(--ch-popover-separation-y)\r\n//   );\r\n// }\r\n\r\n// :host([block-align=\"inside-end\"]) {\r\n//   --ch-popover-block: calc(\r\n//     var(--ch-popover-action-height) - (100% + var(--ch-popover-separation-y))\r\n//   );\r\n// }\r\n\r\n// :host([block-align=\"outside-end\"]) {\r\n//   --ch-popover-block: calc(\r\n//     var(--ch-popover-action-height) + var(--ch-popover-separation-y)\r\n//   );\r\n// }\r\n\r\n// // - - - - - - - - - - - - - - - -\r\n// //        Inline alignment\r\n// // - - - - - - - - - - - - - - - -\r\n// :host([inline-align=\"outside-start\"]) {\r\n//   --ch-popover-inline: calc(-100% + var(--ch-popover-separation-x) * -1);\r\n// }\r\n\r\n// :host([inline-align=\"inside-start\"]) {\r\n//   --ch-popover-inline: var(--ch-popover-separation-x);\r\n// }\r\n\r\n// :host([inline-align=\"center\"]) {\r\n//   --ch-popover-inline: calc(\r\n//     var(--ch-popover-action-width) / 2 - 50% + var(--ch-popover-separation-x)\r\n//   );\r\n// }\r\n\r\n// :host([inline-align=\"inside-end\"]) {\r\n//   --ch-popover-inline: calc(\r\n//     var(--ch-popover-action-width) - (100% + var(--ch-popover-separation-x))\r\n//   );\r\n// }\r\n\r\n// :host([inline-align=\"outside-end\"]) {\r\n//   --ch-popover-inline: calc(\r\n//     var(--ch-popover-action-width) + var(--ch-popover-separation-x)\r\n//   );\r\n// }\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Watch,\r\n  Prop,\r\n  State,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  ChPopoverAlign,\r\n  ChPopoverResizeElement,\r\n  ChPopoverSizeMatch,\r\n  PopoverActionElement\r\n} from \"./types\";\r\nimport { adoptCommonThemes } from \"../../common/theme\";\r\nimport { forceCSSMinMax, isRTL } from \"../../common/utils\";\r\nimport { SyncWithRAF } from \"../../common/sync-with-frames\";\r\nimport { fromPxToNumber, setResponsiveAlignment } from \"./utils\";\r\nimport { KEY_CODES, SCROLLABLE_CLASS } from \"../../common/reserved-names\";\r\n\r\nconst DRAGGING_CLASS = \"gx-popover-dragging\";\r\nconst POPOVER_PREVENT_FLICKERING_CLASS = \"gx-popover-prevent-flickering\";\r\nconst RESIZING_CLASS = \"ch-popover-resizing\";\r\n\r\n// Custom vars\r\nconst POPOVER_ALIGN_BLOCK = \"--ch-popover-block\";\r\nconst POPOVER_ALIGN_INLINE = \"--ch-popover-inline\";\r\n\r\nconst POPOVER_ACTION_WIDTH = \"--ch-popover-action-width\";\r\nconst POPOVER_ACTION_HEIGHT = \"--ch-popover-action-height\";\r\nconst POPOVER_ACTION_LEFT = \"--ch-popover-action-left\";\r\nconst POPOVER_ACTION_TOP = \"--ch-popover-action-top\";\r\n\r\nconst POPOVER_DRAGGED_X = \"--ch-popover-dragged-x\";\r\nconst POPOVER_DRAGGED_Y = \"--ch-popover-dragged-y\";\r\n\r\nconst POPOVER_BLOCK_SIZE = \"--ch-popover-block-size\";\r\nconst POPOVER_INLINE_SIZE = \"--ch-popover-inline-size\";\r\n\r\nconst POPOVER_MIN_BLOCK_SIZE = \"--ch-popover-min-block-size\";\r\nconst POPOVER_MIN_INLINE_SIZE = \"--ch-popover-min-inline-size\";\r\n\r\nconst POPOVER_FORCED_MAX_BLOCK_SIZE = \"--ch-popover-forced-max-block-size\";\r\nconst POPOVER_FORCED_MAX_INLINE_SIZE = \"--ch-popover-forced-max-inline-size\";\r\n\r\nconst POPOVER_BORDER_BLOCK_START_SIZE = \"--ch-popover-border-block-start-width\";\r\nconst POPOVER_BORDER_BLOCK_END_SIZE = \"--ch-popover-border-block-end-width\";\r\nconst POPOVER_BORDER_INLINE_START_SIZE =\r\n  \"--ch-popover-border-inline-start-width\";\r\nconst POPOVER_BORDER_INLINE_END_SIZE = \"--ch-popover-border-inline-end-width\";\r\n\r\nconst POPOVER_RTL_CLASS = \"ch-popover-rtl\";\r\nconst POPOVER_RTL = \"--ch-popover-rtl\";\r\nconst POPOVER_RTL_VALUE = \"-1\";\r\n\r\nconst PRECISION_TO_AVOID_FLOATING_POINT_ERRORS = 1.5;\r\n\r\nconst addCursorInDocument = (cursor: string) =>\r\n  (document.body.style.cursor = cursor);\r\n\r\nconst resizingCursorDictionary: {\r\n  [key in ChPopoverResizeElement]: (rtl: boolean) => void;\r\n} = {\r\n  \"block-start\": () => addCursorInDocument(\"ns-resize\"),\r\n\r\n  \"block-end\": () => addCursorInDocument(\"ns-resize\"),\r\n\r\n  \"inline-start\": () => addCursorInDocument(\"ew-resize\"),\r\n\r\n  \"inline-end\": () => addCursorInDocument(\"ew-resize\"),\r\n\r\n  \"block-start-inline-start\": rtl =>\r\n    addCursorInDocument(rtl ? \"nesw-resize\" : \"nwse-resize\"),\r\n\r\n  \"block-start-inline-end\": rtl =>\r\n    addCursorInDocument(rtl ? \"nwse-resize\" : \"nesw-resize\"),\r\n\r\n  \"block-end-inline-start\": rtl =>\r\n    addCursorInDocument(rtl ? \"nwse-resize\" : \"nesw-resize\"),\r\n\r\n  \"block-end-inline-end\": rtl =>\r\n    addCursorInDocument(rtl ? \"nesw-resize\" : \"nwse-resize\")\r\n};\r\n\r\n// Utils\r\nconst setProperty = (element: HTMLElement, property: string, value: number) =>\r\n  element.style.setProperty(property, `${value}px`);\r\n\r\nconst getProperty = (element: HTMLElement, property: string): number =>\r\n  Number((element.style.getPropertyValue(property) || \"0px\").replace(\"px\", \"\"));\r\n\r\nconst addPopoverTargetElement = (\r\n  actionElement: PopoverActionElement,\r\n  popoverElement: HTMLElement,\r\n  addAction: boolean\r\n) => {\r\n  if (actionElement && addAction) {\r\n    actionElement.popoverTargetElement = popoverElement;\r\n  }\r\n};\r\n\r\nconst removePopoverTargetElement = (actionElement: PopoverActionElement) => {\r\n  if (actionElement) {\r\n    actionElement.popoverTargetElement = undefined;\r\n  }\r\n};\r\n\r\n/**\r\n * The `ch-popover` component represents a popover container that is positioned\r\n * relative to an element, but placed on the top layer using `position: fixed`.\r\n */\r\n@Component({\r\n  tag: \"ch-popover\",\r\n  styleUrl: \"popover.scss\",\r\n  shadow: true\r\n})\r\nexport class ChPopover {\r\n  // Sync computations with frames\r\n  #borderSizeRAF: SyncWithRAF; // Don't allocate memory until needed when dragging\r\n  #dragRAF: SyncWithRAF; // Don't allocate memory until needed when dragging\r\n  #positionAdjustRAF: SyncWithRAF; // Don't allocate memory until needed\r\n  #resizeRAF: SyncWithRAF; // Don't allocate memory until needed when dragging\r\n\r\n  #adjustAlignment = false;\r\n\r\n  // Watchers\r\n  #checkPositionWatcher = false;\r\n  #checkBorderSizeWatcher = false;\r\n  #borderSizeObserver: ResizeObserver;\r\n  #resizeObserver: ResizeObserver;\r\n  #rtlWatcher: MutationObserver;\r\n\r\n  // Drag\r\n  #draggedDistanceX: number = 0;\r\n  #draggedDistanceY: number = 0;\r\n  #dragging = false;\r\n  #initialDragEvent: MouseEvent;\r\n  #lastDragEvent: MouseEvent;\r\n  #isRTLDirection: boolean;\r\n\r\n  // Resize\r\n  #currentEdge: ChPopoverResizeElement;\r\n  #draggedDistanceXForResize: number = 0;\r\n  #draggedDistanceYForResize: number = 0;\r\n  #maxBlockSize: number = 0;\r\n  #maxInlineSize: number = 0;\r\n  #minBlockSize: number = 0;\r\n  #minInlineSize: number = 0;\r\n  #resizeWasMade = false;\r\n\r\n  #resizeByDirectionDictionary = {\r\n    block: (popoverRect: DOMRect, direction: \"start\" | \"end\") => {\r\n      let currentDraggedDistanceY =\r\n        this.#lastDragEvent.clientY - this.#initialDragEvent.clientY;\r\n\r\n      // Start direction inverts the increment\r\n      if (direction === \"start\") {\r\n        currentDraggedDistanceY = -currentDraggedDistanceY;\r\n      }\r\n\r\n      const newBlockSize = popoverRect.height + currentDraggedDistanceY;\r\n      const newRestrictedBlockSize = forceCSSMinMax(\r\n        newBlockSize,\r\n        this.#minBlockSize,\r\n        this.#maxBlockSize\r\n      );\r\n\r\n      // Do not apply resizes or translations if the control is at the minimum\r\n      // or maximum size\r\n      if (newRestrictedBlockSize === popoverRect.height) {\r\n        return;\r\n      }\r\n\r\n      // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n      // By resizing the start edge the control is translated to improve the UX\r\n      if (direction === \"start\") {\r\n        this.#draggedDistanceYForResize -= currentDraggedDistanceY;\r\n\r\n        setProperty(\r\n          this.el,\r\n          POPOVER_DRAGGED_Y,\r\n          this.#draggedDistanceYForResize\r\n        );\r\n      }\r\n\r\n      setProperty(this.el, POPOVER_BLOCK_SIZE, newRestrictedBlockSize);\r\n    },\r\n\r\n    inline: (popoverRect: DOMRect, direction: \"start\" | \"end\") => {\r\n      let currentDraggedDistanceX =\r\n        this.#lastDragEvent.clientX - this.#initialDragEvent.clientX;\r\n\r\n      if (this.#isRTLDirection) {\r\n        currentDraggedDistanceX = -currentDraggedDistanceX;\r\n      }\r\n\r\n      // Start direction inverts the increment\r\n      if (direction === \"start\") {\r\n        currentDraggedDistanceX = -currentDraggedDistanceX;\r\n      }\r\n\r\n      const newInlineSize = popoverRect.width + currentDraggedDistanceX;\r\n      const newRestrictedInlineSize = forceCSSMinMax(\r\n        newInlineSize,\r\n        this.#minInlineSize,\r\n        this.#maxInlineSize\r\n      );\r\n\r\n      // Do not apply resizes or translations if the control is at the minimum\r\n      // or maximum size\r\n      if (newRestrictedInlineSize === popoverRect.width) {\r\n        return;\r\n      }\r\n\r\n      // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n      // By resizing the start edge the control is translated to improve the UX\r\n      if (direction === \"start\") {\r\n        this.#draggedDistanceXForResize -= currentDraggedDistanceX;\r\n\r\n        setProperty(\r\n          this.el,\r\n          POPOVER_DRAGGED_X,\r\n          this.#draggedDistanceXForResize\r\n        );\r\n      }\r\n\r\n      setProperty(this.el, POPOVER_INLINE_SIZE, newRestrictedInlineSize);\r\n    }\r\n  } as const;\r\n\r\n  #resizeEdgesAndCornersDictionary: {\r\n    [key in ChPopoverResizeElement]: (popoverRect: DOMRect) => void;\r\n  } = {\r\n    \"block-start\": popoverRect =>\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"start\"),\r\n\r\n    \"block-end\": popoverRect =>\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"end\"),\r\n\r\n    \"inline-start\": popoverRect =>\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"start\"),\r\n\r\n    \"inline-end\": popoverRect =>\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"end\"),\r\n\r\n    \"block-start-inline-start\": popoverRect => {\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"start\");\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"start\");\r\n    },\r\n\r\n    \"block-start-inline-end\": popoverRect => {\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"start\");\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"end\");\r\n    },\r\n\r\n    \"block-end-inline-start\": popoverRect => {\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"end\");\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"start\");\r\n    },\r\n\r\n    \"block-end-inline-end\": popoverRect => {\r\n      this.#resizeByDirectionDictionary.block(popoverRect, \"end\");\r\n      this.#resizeByDirectionDictionary.inline(popoverRect, \"end\");\r\n    }\r\n  };\r\n\r\n  // Refs\r\n  #resizeLayer: HTMLDivElement;\r\n\r\n  @Element() el: HTMLChPopoverElement;\r\n\r\n  @State() resizing = false;\r\n\r\n  /**\r\n   * `true` if the `actionElement` binds the ch-popover using an external ID.\r\n   * If so, the `popoverTargetElement` property won't be configured in the\r\n   * action element.\r\n   */\r\n  @Prop() readonly actionById: boolean = false;\r\n\r\n  /**\r\n   * Specifies a reference of the action that controls the popover control.\r\n   */\r\n  @Prop() readonly actionElement?: PopoverActionElement;\r\n  @Watch(\"actionElement\")\r\n  handleActionChange(\r\n    newActionElement: PopoverActionElement,\r\n    oldActionElement: PopoverActionElement\r\n  ) {\r\n    // Reset dragged distance\r\n    this.#draggedDistanceX = 0;\r\n    this.#draggedDistanceY = 0;\r\n\r\n    // Remove previous action element\r\n    removePopoverTargetElement(oldActionElement);\r\n    addPopoverTargetElement(newActionElement, this.el, !this.actionById);\r\n\r\n    // Schedule update for watchers\r\n    this.#checkPositionWatcher = true;\r\n  }\r\n\r\n  /**\r\n   * Specifies the drag behavior of the popover.\r\n   * If `allowDrag === \"header\"`, a slot with the `\"header\"` name will be\r\n   * available to place the header content.\r\n   */\r\n  @Prop() readonly allowDrag: \"box\" | \"header\" | \"no\" = \"no\";\r\n\r\n  /**\r\n   * Specifies the block alignment of the window.\r\n   */\r\n  @Prop() readonly blockAlign: ChPopoverAlign = \"center\";\r\n  @Watch(\"blockAlign\")\r\n  handleBlockChange() {\r\n    this.#adjustAlignment = true;\r\n  }\r\n\r\n  /**\r\n   * Specifies how the popover adapts its block size.\r\n   *  - \"content\": The block size of the control will be determined by its\r\n   *    content block size.\r\n   *  - \"action-element\": The block size of the control will match the block\r\n   *    size of the `actionElement`.\r\n   *  - \"action-element-as-minimum\": The minimum block size of the control\r\n   *    will match the block size of the `actionElement`.\r\n   *\r\n   * If the control is resized at runtime, only the \"action-element-as-minimum\"\r\n   * value will still work.\r\n   */\r\n  @Prop() readonly blockSizeMatch: ChPopoverSizeMatch = \"content\";\r\n  @Watch(\"blockSizeMatch\")\r\n  blockSizeWatchChange(newValue: ChPopoverSizeMatch) {\r\n    if (this.#resizeWasMade) {\r\n      return;\r\n    }\r\n\r\n    // Remove the size constrains\r\n    if (newValue === \"content\") {\r\n      this.el.style.removeProperty(POPOVER_BLOCK_SIZE);\r\n      this.el.style.removeProperty(POPOVER_MIN_BLOCK_SIZE);\r\n    } else if (newValue === \"action-element\") {\r\n      this.el.style.removeProperty(POPOVER_MIN_BLOCK_SIZE);\r\n    } else {\r\n      this.el.style.removeProperty(POPOVER_BLOCK_SIZE);\r\n    }\r\n\r\n    // Queue a position adjustment\r\n    this.#adjustAlignment = true;\r\n  }\r\n\r\n  /**\r\n   * This property only applies for `\"manual\"` mode. In native popovers, when\r\n   * using `\"manual\"` mode the popover doesn't close when clicking outside the\r\n   * control. This property allows to close the popover when clicking outside\r\n   * in `\"manual\"` mode.\r\n   * With this, the popover will close if the click is triggered on any other\r\n   * element than the popover and the `actionElement`. It will also close if\r\n   * the \"Escape\" key is pressed.\r\n   */\r\n  @Prop() readonly closeOnClickOutside: boolean = false;\r\n\r\n  /**\r\n   * `true` if the control is not stacked with another top layer.\r\n   */\r\n  @Prop() readonly firstLayer: boolean = true;\r\n\r\n  /**\r\n   * Specifies the inline alignment of the window.\r\n   */\r\n  @Prop() readonly inlineAlign: ChPopoverAlign = \"center\";\r\n  @Watch(\"inlineAlign\")\r\n  handleInlineChange() {\r\n    this.#adjustAlignment = true;\r\n  }\r\n\r\n  /**\r\n   * Specifies how the popover adapts its inline size.\r\n   *  - \"content\": The inline size of the control will be determined by its\r\n   *    content inline size.\r\n   *  - \"action-element\": The inline size of the control will match the inline\r\n   *    size of the `actionElement`.\r\n   *  - \"action-element-as-minimum\": The minimum inline size of the control\r\n   *    will match the inline size of the `actionElement`.\r\n   *\r\n   * If the control is resized at runtime, only the \"action-element-as-minimum\"\r\n   * value will still work.\r\n   */\r\n  @Prop() readonly inlineSizeMatch: ChPopoverSizeMatch = \"content\";\r\n  @Watch(\"inlineSizeMatch\")\r\n  inlineSizeWatchChange(newValue: ChPopoverSizeMatch) {\r\n    if (this.#resizeWasMade) {\r\n      return;\r\n    }\r\n\r\n    // Remove the size constrains\r\n    if (newValue === \"content\") {\r\n      this.el.style.removeProperty(POPOVER_INLINE_SIZE);\r\n      this.el.style.removeProperty(POPOVER_MIN_INLINE_SIZE);\r\n    } else if (newValue === \"action-element\") {\r\n      this.el.style.removeProperty(POPOVER_MIN_INLINE_SIZE);\r\n    } else {\r\n      this.el.style.removeProperty(POPOVER_INLINE_SIZE);\r\n    }\r\n\r\n    // Queue a position adjustment\r\n    this.#adjustAlignment = true;\r\n  }\r\n\r\n  /**\r\n   * Popovers that have the `\"auto\"` state can be \"light dismissed\" by\r\n   * selecting outside the popover area, and generally only allow one popover\r\n   * to be displayed on-screen at a time. By contrast, `\"manual\"` popovers must\r\n   * always be explicitly hidden, but allow for use cases such as nested\r\n   * popovers in menus.\r\n   */\r\n  @Prop({ attribute: \"popover\" }) readonly mode: \"auto\" | \"manual\" = \"auto\";\r\n\r\n  /**\r\n   * Specifies how the popover behaves when the content overflows the window\r\n   * size.\r\n   *   - \"overflow\": The control won't implement any behavior if the content overflows.\r\n   *   - \"add-scroll\": The control will place a scroll if the content overflows.\r\n   */\r\n  @Prop({ reflect: true }) readonly overflowBehavior:\r\n    | \"overflow\"\r\n    | \"add-scroll\" = \"overflow\";\r\n\r\n  /**\r\n   * Specifies an alternate position to try when the control overflows the\r\n   * window.\r\n   */\r\n  @Prop() readonly positionTry: \"flip-block\" | \"flip-inline\" | \"none\" = \"none\";\r\n\r\n  /**\r\n   * Specifies whether the control can be resized. If `true` the control can be\r\n   * resized at runtime by dragging the edges or corners.\r\n   */\r\n  @Prop() readonly resizable: boolean = false;\r\n  @Watch(\"resizable\")\r\n  resizableChanged() {\r\n    // Schedule update for border size watcher\r\n    this.#checkBorderSizeWatcher = true;\r\n  }\r\n\r\n  /**\r\n   * Specifies whether the popover is hidden or visible.\r\n   */\r\n  // TODO: Remove reflect in a future PR (also add a unit test to verify that the\r\n  // property is not reflected and be careful with the selector `:host([show]) {...}` ).\r\n  @Prop({ mutable: true, reflect: true }) show: boolean = false;\r\n  @Watch(\"show\")\r\n  showChanged(newShowValue: boolean) {\r\n    // Schedule update for watchers\r\n    this.#checkBorderSizeWatcher = true;\r\n    this.#checkPositionWatcher = true;\r\n\r\n    // Update the popover visualization\r\n    if (newShowValue) {\r\n      this.#showPopover();\r\n    } else {\r\n      if (this.firstLayer) {\r\n        this.#avoidFlickeringInTheNextRender(true);\r\n      }\r\n      this.el.hidePopover();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emitted when the popover is opened.\r\n   */\r\n  @Event() popoverOpened: EventEmitter;\r\n\r\n  /**\r\n   * Emitted when the popover is closed.\r\n   */\r\n  @Event() popoverClosed: EventEmitter;\r\n\r\n  #showPopover = () => {\r\n    this.el.showPopover();\r\n    this.#addClickOutsideWatcherIfNecessary();\r\n  };\r\n\r\n  #handlePopoverCloseOnClickOutside = (event: MouseEvent) => {\r\n    const composedPath = event.composedPath();\r\n\r\n    if (\r\n      !composedPath.includes(this.el) &&\r\n      // If the click is triggered on the actionElement, the actionElement must\r\n      // determine if the popover should be closed\r\n      !composedPath.includes(this.actionElement)\r\n    ) {\r\n      this.#removeClickOutsideWatcher();\r\n\r\n      this.show = false;\r\n      this.popoverClosed.emit();\r\n    }\r\n  };\r\n\r\n  #handlePopoverCloseOnEscapeKey = (event: KeyboardEvent) => {\r\n    if (event.code === KEY_CODES.ESCAPE) {\r\n      this.#removeClickOutsideWatcher();\r\n\r\n      this.show = false;\r\n      this.popoverClosed.emit();\r\n    }\r\n  };\r\n\r\n  #addClickOutsideWatcherIfNecessary = () => {\r\n    if (this.mode === \"manual\" && this.closeOnClickOutside) {\r\n      document.addEventListener(\r\n        \"click\",\r\n        this.#handlePopoverCloseOnClickOutside,\r\n        // \"capture: true\" must be added for the ch-combo-box use case. When\r\n        // the click is triggered on the combo-box, the control prevents the\r\n        // propagation of the event click\r\n        { capture: true, passive: true }\r\n      );\r\n\r\n      document.addEventListener(\r\n        \"keydown\",\r\n        this.#handlePopoverCloseOnEscapeKey,\r\n        { capture: true, passive: true }\r\n      );\r\n    }\r\n  };\r\n\r\n  #removeClickOutsideWatcher = () => {\r\n    document.removeEventListener(\r\n      \"click\",\r\n      this.#handlePopoverCloseOnClickOutside,\r\n      { capture: true }\r\n    );\r\n\r\n    document.removeEventListener(\r\n      \"keydown\",\r\n      this.#handlePopoverCloseOnEscapeKey,\r\n      { capture: true }\r\n    );\r\n  };\r\n\r\n  #addDraggingClass = () => {\r\n    if (!this.#dragging) {\r\n      this.el.classList.add(DRAGGING_CLASS);\r\n      this.#dragging = true;\r\n    }\r\n  };\r\n\r\n  #removeDraggingClass = () => {\r\n    this.el.classList.remove(DRAGGING_CLASS);\r\n    this.#dragging = false;\r\n  };\r\n\r\n  #avoidFlickeringInTheNextRender = (addClass: boolean) => {\r\n    if (addClass) {\r\n      // Class to prevent flickering in the first position adjustment\r\n      this.el.classList.add(POPOVER_PREVENT_FLICKERING_CLASS);\r\n    } else {\r\n      this.el.classList.remove(POPOVER_PREVENT_FLICKERING_CLASS);\r\n    }\r\n  };\r\n\r\n  #setPositionWatcher = () => {\r\n    if (!this.actionElement || !this.show) {\r\n      this.#removePositionWatcher();\r\n      return;\r\n    }\r\n\r\n    // If it was observing the previous container, disconnect the observer\r\n    if (this.#resizeObserver) {\r\n      this.#resizeObserver.disconnect();\r\n    }\r\n\r\n    this.#positionAdjustRAF ??= new SyncWithRAF();\r\n    this.#resizeObserver ??= new ResizeObserver(\r\n      (entries: ResizeObserverEntry[]) => {\r\n        const popoverWasResized = entries.find(\r\n          entry => entry.target === this.el\r\n        );\r\n\r\n        // If the popover size is changed, update the alignment in the same\r\n        // frame to avoid any flickering. This optimization avoids an extra\r\n        // setResponsiveAlignment fire and improve the UX when using the\r\n        // combo-box and expanding/collapsing the groups\r\n        if (popoverWasResized) {\r\n          this.#updatePosition();\r\n        } else {\r\n          this.#updatePositionRAF();\r\n        }\r\n      }\r\n    );\r\n\r\n    this.#resizeObserver.observe(this.actionElement);\r\n    this.#resizeObserver.observe(document.body);\r\n    this.#resizeObserver.observe(this.el);\r\n\r\n    // Faster first render. Don't wait until the next animation frame\r\n    this.#updatePosition();\r\n\r\n    // The popover's position is now set, so we no longer have to hide it\r\n    if (this.firstLayer) {\r\n      requestAnimationFrame(() => {\r\n        this.#avoidFlickeringInTheNextRender(false);\r\n      });\r\n    }\r\n\r\n    // Listeners\r\n    document.addEventListener(\"scroll\", this.#updatePositionRAF, {\r\n      capture: true,\r\n      passive: true\r\n    });\r\n  };\r\n\r\n  #updatePositionRAF = () => {\r\n    this.#positionAdjustRAF.perform(this.#updatePosition);\r\n  };\r\n\r\n  #updatePosition = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const documentRect = document.documentElement.getBoundingClientRect();\r\n    const actionRect = this.actionElement.getBoundingClientRect();\r\n    const popoverScrollSizes = {\r\n      width: this.el.scrollWidth,\r\n      height: this.el.scrollHeight\r\n    };\r\n    const computedStyle = getComputedStyle(this.el);\r\n\r\n    const actionInlineStart = this.#getActionInlineStartPosition(\r\n      documentRect,\r\n      actionRect\r\n    );\r\n\r\n    this.#setResponsiveAlignment(\r\n      documentRect,\r\n      actionRect,\r\n      actionInlineStart,\r\n      popoverScrollSizes,\r\n      computedStyle\r\n    );\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    setProperty(this.el, POPOVER_ACTION_WIDTH, actionRect.width);\r\n    setProperty(this.el, POPOVER_ACTION_HEIGHT, actionRect.height);\r\n    setProperty(this.el, POPOVER_ACTION_LEFT, actionInlineStart);\r\n    setProperty(this.el, POPOVER_ACTION_TOP, actionRect.top);\r\n  };\r\n\r\n  #getActionInlineStartPosition = (\r\n    documentRect: DOMRect,\r\n    actionRect: DOMRect\r\n  ) =>\r\n    this.#isRTLDirection\r\n      ? documentRect.width - (actionRect.left + actionRect.width)\r\n      : actionRect.left;\r\n\r\n  #setResponsiveAlignment = (\r\n    documentRect: DOMRect,\r\n    actionRect: DOMRect,\r\n    actionInlineStart: number,\r\n    popoverScrollSizes: { width: number; height: number },\r\n    computedStyle: CSSStyleDeclaration\r\n  ) => {\r\n    const popoverWidth = this.#getPopoverInlineSizeAndFixItIfNecessary(\r\n      actionRect,\r\n      popoverScrollSizes\r\n    );\r\n    const popoverHeight = this.#getPopoverBlockSizeAndFixItIfNecessary(\r\n      actionRect,\r\n      popoverScrollSizes\r\n    );\r\n\r\n    const alignment = setResponsiveAlignment(\r\n      documentRect,\r\n      actionRect,\r\n      actionInlineStart,\r\n      popoverWidth,\r\n      popoverHeight,\r\n      computedStyle,\r\n      this.inlineAlign,\r\n      this.blockAlign,\r\n      this.positionTry\r\n    );\r\n\r\n    const inlineOverflow = alignment[0].alignmentOverflow;\r\n    const blockOverflow = alignment[1].alignmentOverflow;\r\n\r\n    this.#setOverflowBehavior(\r\n      popoverWidth,\r\n      popoverHeight,\r\n      inlineOverflow,\r\n      blockOverflow\r\n    );\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    setProperty(this.el, POPOVER_ALIGN_INLINE, alignment[0].alignmentPosition);\r\n    setProperty(this.el, POPOVER_ALIGN_BLOCK, alignment[1].alignmentPosition);\r\n  };\r\n\r\n  #setOverflowBehavior = (\r\n    popoverWidth: number,\r\n    popoverHeight: number,\r\n    inlineOverflow: number,\r\n    blockOverflow: number\r\n  ) => {\r\n    if (this.overflowBehavior !== \"add-scroll\") {\r\n      return;\r\n    }\r\n\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const currentMaxInlineSize = getProperty(\r\n      this.el,\r\n      POPOVER_FORCED_MAX_INLINE_SIZE\r\n    );\r\n\r\n    const currentMaxBlockSize = getProperty(\r\n      this.el,\r\n      POPOVER_FORCED_MAX_BLOCK_SIZE\r\n    );\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n\r\n    // Inline size\r\n    if (inlineOverflow < 0) {\r\n      const newMaxInlineSize = popoverWidth + inlineOverflow;\r\n      setProperty(this.el, POPOVER_FORCED_MAX_INLINE_SIZE, newMaxInlineSize);\r\n    }\r\n    // Check if the forced inline size is no longer needed\r\n    else if (\r\n      currentMaxInlineSize &&\r\n      popoverWidth + PRECISION_TO_AVOID_FLOATING_POINT_ERRORS <\r\n        currentMaxInlineSize + inlineOverflow\r\n    ) {\r\n      this.el.style.removeProperty(POPOVER_FORCED_MAX_INLINE_SIZE);\r\n    }\r\n\r\n    // Block size\r\n    if (blockOverflow < 0) {\r\n      const newMaxBlockSize = popoverHeight + blockOverflow;\r\n      setProperty(this.el, POPOVER_FORCED_MAX_BLOCK_SIZE, newMaxBlockSize);\r\n    }\r\n    // Check if the forced block size is no longer needed\r\n    else if (\r\n      currentMaxBlockSize &&\r\n      popoverHeight + PRECISION_TO_AVOID_FLOATING_POINT_ERRORS <\r\n        currentMaxBlockSize + blockOverflow\r\n    ) {\r\n      this.el.style.removeProperty(POPOVER_FORCED_MAX_BLOCK_SIZE);\r\n    }\r\n  };\r\n\r\n  #getPopoverInlineSizeAndFixItIfNecessary = (\r\n    actionRect: DOMRect,\r\n    popoverRect: { width: number; height: number }\r\n  ) => {\r\n    if (this.inlineSizeMatch === \"action-element-as-minimum\") {\r\n      setProperty(this.el, POPOVER_MIN_INLINE_SIZE, actionRect.width);\r\n      return actionRect.width;\r\n    }\r\n\r\n    // Size is determined by the content\r\n    if (this.#resizeWasMade || this.inlineSizeMatch === \"content\") {\r\n      return popoverRect.width;\r\n    }\r\n\r\n    // Size is the same as the `actionElement`\r\n    setProperty(this.el, POPOVER_INLINE_SIZE, actionRect.width);\r\n    return actionRect.width;\r\n  };\r\n\r\n  #getPopoverBlockSizeAndFixItIfNecessary = (\r\n    actionRect: DOMRect,\r\n    popoverRect: { width: number; height: number }\r\n  ) => {\r\n    if (this.blockSizeMatch === \"action-element-as-minimum\") {\r\n      setProperty(this.el, POPOVER_MIN_BLOCK_SIZE, actionRect.height);\r\n      return actionRect.height;\r\n    }\r\n\r\n    // Size is determined by the content\r\n    if (this.#resizeWasMade || this.blockSizeMatch === \"content\") {\r\n      return popoverRect.height;\r\n    }\r\n\r\n    // Size is the same as the `actionElement`\r\n    setProperty(this.el, POPOVER_BLOCK_SIZE, actionRect.height);\r\n    return actionRect.height;\r\n  };\r\n\r\n  #removePositionWatcher = () => {\r\n    if (this.#resizeObserver) {\r\n      this.#resizeObserver.disconnect();\r\n      this.#resizeObserver = null; // Free the memory\r\n    }\r\n\r\n    // Remove listeners\r\n    document.removeEventListener(\"scroll\", this.#updatePositionRAF, {\r\n      capture: true\r\n    });\r\n  };\r\n\r\n  #handlePopoverToggle = (event: ToggleEvent) => {\r\n    const willBeOpen = event.newState === \"open\";\r\n    this.show = willBeOpen;\r\n\r\n    // Emit events only when the action is committed by the user\r\n    if (willBeOpen) {\r\n      this.popoverOpened.emit();\r\n    } else {\r\n      this.popoverClosed.emit();\r\n    }\r\n  };\r\n\r\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n  //                           Drag implementation\r\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n  #handleMouseDown = (event: MouseEvent) => {\r\n    // We should not add preventDefault in this instance, because we would\r\n    // prevent some normal actions like clicking a button or focusing an input\r\n\r\n    this.#dragRAF ||= new SyncWithRAF();\r\n    this.#initialDragEvent = event;\r\n\r\n    // Add listeners\r\n    document.addEventListener(\"mousemove\", this.#trackElementDragRAF, {\r\n      capture: true\r\n    });\r\n\r\n    document.addEventListener(\"mouseup\", this.#handleDragEnd, {\r\n      capture: true,\r\n      passive: true\r\n    });\r\n  };\r\n\r\n  #trackElementDragRAF = (event: MouseEvent) => {\r\n    this.#dragRAF.perform(this.#trackElementDrag, () => {\r\n      // Improve drag UX by not selecting any button or clicking interactive\r\n      // elements\r\n      event.preventDefault();\r\n\r\n      // We remove the pointer-events and user-select properties after the first\r\n      // \"mousemove\", otherwise double clicking to select text would not work\r\n      this.#addDraggingClass();\r\n\r\n      this.#lastDragEvent = event;\r\n    });\r\n  };\r\n\r\n  #trackElementDrag = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const currentDraggedDistanceX =\r\n      this.#lastDragEvent.clientX - this.#initialDragEvent.clientX;\r\n    const currentDraggedDistanceY =\r\n      this.#lastDragEvent.clientY - this.#initialDragEvent.clientY;\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    // Update total dragged distance in X\r\n    if (currentDraggedDistanceX !== 0) {\r\n      this.#draggedDistanceX += this.#isRTLDirection // Set dragged distance depending on RTL value\r\n        ? -currentDraggedDistanceX\r\n        : currentDraggedDistanceX;\r\n      setProperty(this.el, POPOVER_DRAGGED_X, this.#draggedDistanceX);\r\n    }\r\n\r\n    // Update total dragged distance in Y\r\n    if (currentDraggedDistanceY !== 0) {\r\n      this.#draggedDistanceY += currentDraggedDistanceY;\r\n      setProperty(this.el, POPOVER_DRAGGED_Y, this.#draggedDistanceY);\r\n    }\r\n\r\n    // Update last point\r\n    this.#initialDragEvent = this.#lastDragEvent;\r\n  };\r\n\r\n  #handleDragEnd = () => {\r\n    // Cancel RAF to prevent access to undefined references\r\n    if (this.#dragRAF) {\r\n      this.#dragRAF.cancel();\r\n    }\r\n\r\n    // Remove listeners\r\n    document.removeEventListener(\"mousemove\", this.#trackElementDragRAF, {\r\n      capture: true\r\n    });\r\n\r\n    document.removeEventListener(\"mouseup\", this.#handleDragEnd, {\r\n      capture: true\r\n    });\r\n\r\n    this.#removeDraggingClass();\r\n\r\n    // Free the memory\r\n    this.#dragRAF = null;\r\n    this.#initialDragEvent = null;\r\n    this.#lastDragEvent = null;\r\n  };\r\n\r\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n  //                          Resize implementation\r\n  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n  #handleEdgeResize = (edge: ChPopoverResizeElement) => (event: MouseEvent) => {\r\n    this.resizing = true;\r\n    this.#resizeRAF ||= new SyncWithRAF();\r\n    this.#currentEdge = edge;\r\n    this.#initialDragEvent = event;\r\n\r\n    // Specify the cursor for the resize operation. Useful to avoid showing\r\n    // incorrect cursors during resizing\r\n    resizingCursorDictionary[this.#currentEdge](this.#isRTLDirection);\r\n\r\n    // Initialize drag variables to improve block-start and inline-start\r\n    // resizing. Otherwise, the popover will always remain in the same X and Y\r\n    // position, even when the block-start or inline-start edges are resized\r\n    this.#draggedDistanceXForResize = this.#draggedDistanceX;\r\n    this.#draggedDistanceYForResize = this.#draggedDistanceY;\r\n\r\n    // Get minimum and maximum sizes on first resize operation\r\n    const computedStyle = getComputedStyle(this.el);\r\n    this.#maxBlockSize = fromPxToNumber(computedStyle.maxBlockSize);\r\n    this.#maxInlineSize = fromPxToNumber(computedStyle.maxInlineSize);\r\n    this.#minBlockSize = fromPxToNumber(computedStyle.minBlockSize);\r\n    this.#minInlineSize = fromPxToNumber(computedStyle.minInlineSize);\r\n\r\n    // Avoid repositioning the popover\r\n    this.#removePositionWatcher();\r\n\r\n    // Avoid watching border changes during the resize\r\n    this.#removeBorderSizeWatcher();\r\n\r\n    // Avoid closing the popover during the resize\r\n    this.#removeClickOutsideWatcher();\r\n\r\n    // Add listeners\r\n    document.addEventListener(\"mousemove\", this.#trackElementResizeRAF, {\r\n      capture: true\r\n    });\r\n\r\n    document.addEventListener(\"mouseup\", this.#handleResizeEnd, {\r\n      capture: true,\r\n      passive: true\r\n    });\r\n  };\r\n\r\n  #trackElementResizeRAF = (event: MouseEvent) => {\r\n    this.#resizeRAF.perform(this.#trackElementResize, () => {\r\n      // Improve drag UX by not selecting any button or clicking interactive\r\n      // elements\r\n      event.preventDefault();\r\n\r\n      // We remove the pointer-events and user-select properties after the first\r\n      // \"mousemove\", otherwise double clicking to select text would not work\r\n      this.#addDraggingClass();\r\n\r\n      this.#lastDragEvent = event;\r\n    });\r\n  };\r\n\r\n  #trackElementResize = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const popoverRect = this.el.getBoundingClientRect();\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    this.#resizeEdgesAndCornersDictionary[this.#currentEdge](popoverRect);\r\n    this.#resizeWasMade = true;\r\n\r\n    // Update last point\r\n    this.#initialDragEvent = this.#lastDragEvent;\r\n  };\r\n\r\n  #handleResizeEnd = () => {\r\n    this.resizing = false;\r\n\r\n    // Cancel RAF to prevent access to undefined references\r\n    if (this.#resizeRAF) {\r\n      this.#resizeRAF.cancel();\r\n    }\r\n\r\n    // Reset document cursor back to normal\r\n    document.body.style.cursor = null;\r\n\r\n    // Reset dragged distance to its original value\r\n    setProperty(this.el, POPOVER_DRAGGED_X, this.#draggedDistanceX);\r\n    setProperty(this.el, POPOVER_DRAGGED_Y, this.#draggedDistanceY);\r\n\r\n    // Update the position of the popover when the resize ends\r\n    this.#setPositionWatcher();\r\n\r\n    // Start again watching border size changes\r\n    this.#setBorderSizeWatcher();\r\n\r\n    // Add again the click outside watcher if necessary. RAF is needed to\r\n    // prevent the popover from closing, since the document click event will be\r\n    // dispatched after the execution of this function (mouseup handler)\r\n    requestAnimationFrame(this.#addClickOutsideWatcherIfNecessary);\r\n\r\n    // Remove listeners\r\n    document.removeEventListener(\"mousemove\", this.#trackElementResizeRAF, {\r\n      capture: true\r\n    });\r\n\r\n    document.removeEventListener(\"mouseup\", this.#handleResizeEnd, {\r\n      capture: true\r\n    });\r\n\r\n    this.#removeDraggingClass();\r\n\r\n    // Free the memory\r\n    this.#resizeRAF = null;\r\n    this.#initialDragEvent = null;\r\n    this.#lastDragEvent = null;\r\n  };\r\n\r\n  /**\r\n   * This observer watches the size of each border in the control to adjust the\r\n   * position of the invisible resize elements (edges and corners).\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #setBorderSizeWatcher = () => {\r\n    if (!this.resizable || !this.show) {\r\n      this.#removeBorderSizeWatcher();\r\n      return;\r\n    }\r\n\r\n    this.#borderSizeRAF ??= new SyncWithRAF();\r\n    this.#borderSizeObserver = new ResizeObserver(this.#updateBorderSizeRAF);\r\n\r\n    // Observe the size of the edges to know if the border\r\n    this.#borderSizeObserver.observe(this.el, { box: \"border-box\" });\r\n    this.#borderSizeObserver.observe(this.#resizeLayer);\r\n  };\r\n\r\n  #updateBorderSizeRAF = () => {\r\n    this.#borderSizeRAF.perform(this.#updateBorderSize);\r\n  };\r\n\r\n  #updateBorderSize = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    const computedStyle = getComputedStyle(this.el);\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    this.el.style.setProperty(\r\n      POPOVER_BORDER_BLOCK_START_SIZE,\r\n      computedStyle.borderBlockStartWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      POPOVER_BORDER_BLOCK_END_SIZE,\r\n      computedStyle.borderBlockEndWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      POPOVER_BORDER_INLINE_START_SIZE,\r\n      computedStyle.borderInlineStartWidth\r\n    );\r\n\r\n    this.el.style.setProperty(\r\n      POPOVER_BORDER_INLINE_END_SIZE,\r\n      computedStyle.borderInlineEndWidth\r\n    );\r\n  };\r\n\r\n  #removeBorderSizeWatcher = () => {\r\n    if (this.#borderSizeObserver) {\r\n      this.#borderSizeObserver.disconnect();\r\n      this.#borderSizeObserver = null; // Free the memory\r\n    }\r\n\r\n    this.#borderSizeRAF = null; // Free the memory\r\n  };\r\n\r\n  connectedCallback() {\r\n    adoptCommonThemes(this.el.shadowRoot.adoptedStyleSheets);\r\n\r\n    // Set RTL watcher\r\n    this.#rtlWatcher = new MutationObserver(() => {\r\n      this.#isRTLDirection = isRTL();\r\n\r\n      if (this.#isRTLDirection) {\r\n        this.el.style.setProperty(POPOVER_RTL, POPOVER_RTL_VALUE);\r\n        this.el.classList.add(POPOVER_RTL_CLASS);\r\n      } else {\r\n        this.el.style.removeProperty(POPOVER_RTL);\r\n        this.el.classList.remove(POPOVER_RTL_CLASS);\r\n      }\r\n    });\r\n\r\n    if (this.firstLayer) {\r\n      this.#avoidFlickeringInTheNextRender(true);\r\n    }\r\n\r\n    // Observe the dir attribute in the document\r\n    this.#rtlWatcher.observe(document.documentElement, {\r\n      attributeFilter: [\"dir\"]\r\n    });\r\n  }\r\n\r\n  componentWillRender() {\r\n    if (this.#checkPositionWatcher) {\r\n      this.#checkPositionWatcher = false;\r\n\r\n      // Update watchers\r\n      this.#setPositionWatcher();\r\n    }\r\n\r\n    if (this.#checkBorderSizeWatcher) {\r\n      this.#checkBorderSizeWatcher = false;\r\n\r\n      // Wait until the resize edges have been rendered\r\n      requestAnimationFrame(() => {\r\n        this.#setBorderSizeWatcher();\r\n      });\r\n    }\r\n\r\n    if (this.#adjustAlignment) {\r\n      const documentRect = document.documentElement.getBoundingClientRect();\r\n      const actionRect = this.actionElement.getBoundingClientRect();\r\n      const popoverScrollSizes = {\r\n        width: this.el.scrollWidth,\r\n        height: this.el.scrollHeight\r\n      };\r\n      const computedStyle = getComputedStyle(this.el);\r\n\r\n      const actionInlineStart = this.#getActionInlineStartPosition(\r\n        documentRect,\r\n        actionRect\r\n      );\r\n\r\n      this.#setResponsiveAlignment(\r\n        documentRect,\r\n        actionRect,\r\n        actionInlineStart,\r\n        popoverScrollSizes,\r\n        computedStyle\r\n      );\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    // Initialize popoverTargetElement\r\n    addPopoverTargetElement(this.actionElement, this.el, !this.actionById);\r\n\r\n    // Initialize watchers\r\n    this.#setPositionWatcher();\r\n    this.#setBorderSizeWatcher();\r\n\r\n    if (this.show) {\r\n      this.#showPopover();\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.#removePositionWatcher();\r\n    this.#removeBorderSizeWatcher();\r\n\r\n    // If the action element still exists, remove the reference\r\n    removePopoverTargetElement(this.actionElement);\r\n\r\n    // Defensive programming. Make sure the document does not have any unwanted handler\r\n    this.#handleDragEnd();\r\n\r\n    // Avoid leaving handlers in the document\r\n    this.#removeClickOutsideWatcher();\r\n\r\n    // Disconnect RTL watcher\r\n    if (this.#rtlWatcher) {\r\n      this.#rtlWatcher.disconnect();\r\n      this.#rtlWatcher = null; // Free the memory\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const canAddListeners = this.show;\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          \"gx-popover-header-drag\":\r\n            canAddListeners && this.allowDrag === \"header\",\r\n          [RESIZING_CLASS]: this.resizing,\r\n          [SCROLLABLE_CLASS]: this.overflowBehavior === \"add-scroll\"\r\n        }}\r\n        popover={this.mode}\r\n        onMouseDown={\r\n          canAddListeners && this.allowDrag === \"box\"\r\n            ? this.#handleMouseDown\r\n            : null\r\n        }\r\n        // TODO: Should we add this event with popover=\"manual\"???\r\n        // TODO: Check if the actionElement is an instance of Button to add this handler\r\n        onToggle={this.#handlePopoverToggle}\r\n      >\r\n        {this.allowDrag === \"header\" && (\r\n          <div\r\n            class=\"header\"\r\n            part=\"header\"\r\n            onMouseDown={canAddListeners ? this.#handleMouseDown : null}\r\n          >\r\n            <slot name=\"header\" />\r\n          </div>\r\n        )}\r\n\r\n        <slot />\r\n\r\n        {this.resizable &&\r\n          this.show && [\r\n            <div\r\n              class=\"edge__block-start\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-start\")}\r\n            ></div>, // Top\r\n            <div\r\n              class=\"edge__inline-end\"\r\n              onMouseDown={this.#handleEdgeResize(\"inline-end\")}\r\n            ></div>, // Right\r\n            <div\r\n              class=\"edge__block-end\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-end\")}\r\n            ></div>, // Bottom\r\n            <div\r\n              class=\"edge__inline-start\"\r\n              onMouseDown={this.#handleEdgeResize(\"inline-start\")}\r\n            ></div>, // Left\r\n\r\n            <div\r\n              class=\"corner__block-start-inline-start\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-start-inline-start\")}\r\n            ></div>, // Top Left\r\n            <div\r\n              class=\"corner__block-start-inline-end\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-start-inline-end\")}\r\n            ></div>, // Top Right\r\n            <div\r\n              class=\"corner__block-end-inline-start\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-end-inline-start\")}\r\n            ></div>, // Bottom Left\r\n            <div\r\n              class=\"corner__block-end-inline-end\"\r\n              onMouseDown={this.#handleEdgeResize(\"block-end-inline-end\")}\r\n            ></div>, // Bottom Right\r\n\r\n            <div\r\n              class=\"resize-layer\"\r\n              ref={el => (this.#resizeLayer = el)}\r\n            ></div>\r\n          ]}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}