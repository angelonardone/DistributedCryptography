{"version":3,"names":["HTMLChGridRowElement","HTMLElement","parentGrid","observedAttributes","constructor","super","connectedCallback","this","addEventListener","cellCaretClickedHandler","selected","marked","grid","syncRowState","attributeChangedCallback","name","_oldValue","value","loadParentGrid","rowId","getAttribute","highlighted","hasAttribute","highlightedClasses","rowHighlightedClass","split","setAttribute","classList","add","removeAttribute","remove","selectedClasses","rowSelectedClass","markedClasses","rowMarkedClass","focused","focusedClasses","rowFocusedClass","hasChildRows","querySelector","collapsed","dispatchEvent","CustomEvent","bubbles","composed","detail","leaf","getCell","column","physicalOrder","isVisible","Array","from","querySelectorAll","some","cell","ensureVisible","getBoundingClientRect","rect","firstElementChild","DOMRect","lastElementChild","firstCellRect","lastCellRect","x","y","width","height","eventInfo","targetRow","currentTarget","stopPropagation","closest","customElements","get","define","HTMLChGridRowsetElement","computedLevel","rowsetLegendClickedHandler","defineLevel","level","computeLevel","paddingTop","parseInt","style","getPropertyValue","paddingbottom","mainRect","shadowRoot","firstRowRect","lastRowRect","setProperty","toString","getParentRowset","hasLegend","isNestedRow","tagName","parentElement","node","undefined","ChGridCellType","HTMLChGridCellElement","cellType","Plain","caret","drag","action","selector","selectorLabel","rowDrag","rowSelector","rowActions","defineFocusHandler","Rich","type","cellIndex","prototype","indexOf","call","row","cellId","offsetParent","setSelectorChecked","checked","caretMouseDownHandler","selectorClickHandler","range","shiftKey","selectorLabelClickHandler","dragMouseDownHandler","preventDefault","actionClickHandler","defineRich","TreeNode","defineTreeNode","html","innerHTML","attachShadow","mode","bind","ChGridManagerColumnDrag","columns","isRTL","lastTargetOrder","columnId","map","element","translateX","order","find","item","forEach","setColumnHiddenRect","dragging","position","sourceOrder","sourceFreeze","freeze","targetOrder","targetOrderChanged","filter","columnOrder","dragDirection","shiftDirection","left","right","swapColumnPosition","resetColumnPosition","dragEnd","getColumnStyle","columnItem","getColumnsFirstLast","itemFirst","itemLast","hidden","columnFirst","columnLast","columnSibling","getPreviousSiblingVisible","getNextSiblingVisible","previous","next","ChGridManagerColumns","manager","columnsetObserver","MutationObserver","reloadColumns","columnResizeObserver","ResizeObserver","resizeColumnHandler","columnsDisplay","columnsWidth","observeColumnset","defineColumns","defineColumnsVariables","adjustFreezeOrder","adjustBaseLayer","getColumn","getColumns","sorted","sort","fnSortByOrder","getColumnSelector","columnType","richRowSelector","freezeStart","noFreeze","freezeEnd","defineColumnId","defineColumnIndex","defineColumnOrder","defineColumnSize","defineColumnDisplayObserver","defineColumnResizeObserver","defineColumnType","getColumnUniqueId","size","displayObserverClass","i","push","document","createElement","appendChild","observe","box","richRowDrag","richRowActions","root","getRootNode","length","selectors","styleInnerHTML","Document","head","insertAdjacentHTML","ShadowRoot","s","id","dataset","innerText","undefineColumns","unobserve","columnDisplay","childList","columnsAdded","includes","columnsRemoved","adjustOrders","entries","entry","target","contentRect","setColumnWidthVariables","uniqueId","Date","now","Math","random","substring","setBaseLayer","columnA","columnB","ChGridManagerSelection","rangeStart","rangeValue","lastSelected","lastRowMarked","selectionStateNone","rowFocused","rowsSelected","cellFocused","cellSelected","touch","selecting","selectingRow","selectingCell","touchStart","touchEvent","clientX","touches","clientY","isTouchEndSelection","abs","changedTouches","cancelable","select","state","append","rangeStartOn","context","keyboardNavigationMode","rowSelectionMode","rangeRows","getRowsRange","Set","concat","preserveInstanceIfSame","getFirstColumn","rowSelected","selectAll","rows","getRows","getFirstRow","selectSet","moveFirstRow","firstRow","movePreviousRow","previousRow","getPreviousRow","moveNextRow","nextRow","getNextRow","moveLastRow","lastRow","getLastRow","movePreviousPageRow","rowsPerPage","getRowsPerPage","previousPageRow","max","moveNextPageRow","nextPageRow","min","movePreviousCell","previousCell","getPreviousCell","moveNextCell","nextCell","getNextCell","markRow","currentRowsMarked","r","markRows","rowsMarked","markAllRows","syncRowSelector","selectorMode","columnSelector","richRowSelectorMode","indexColumnSelector","children","syncColumnSelector","richRowSelectorState","newSelection","oldSelection","every","ChGridManagerRowDrag","rowIndex","rowShadow","dragMouseMoveFn","dragMouseMoveHandler","dragStart","getGridRowIndex","defineListeners","createRowShadow","floatRow","updateRowPosition","rowHover","rowHoverIndex","rowHoverGridPosition","offsetPosition","dragMouseUpHandler","removeEventListener","dropPosition","rowDrop","before","after","unfloatRow","passive","once","rowHeight","getRowHeight","display","getColumnsWidth","opacity","minWidth","gridRowStart","rowWidth","gridLayout","clientWidth","columnPosition","top","ChGridManagerRowActions","showOnRowHover","showOnRowActions","showOnRowContext","ChGridManagerColumnResize","columnWidthStart","columnSizeStart","columnAfter","columnAfterWidthStart","columnAfterSizeStart","resizingFn","resizeEndFn","columnResizeMode","resizingSplitter","resizeEndSplitter","resizingSingle","parseCSSValue","getNextColumn","resizing","deltaWidth","resizeEnd","columnWidth","convertUnit","columnAfterWidth","columnWidthEnd","columnAfterWidthEnd","cssValue","match","number","parseFloat","unit","startSize","startWidth","newWidth","StyleRule","ChGridManager","styleSheet","CSSStyleSheet","gridLayoutElement","columnDragManager","columnResizeManager","rowDragManager","selection","insertRule","BASE_LAYER","COLUMNS_WIDTH","adoptedStyleSheets","adoptGlobalStyleSheet","componentDidLoad","getComputedStyle","gridTemplateColumns","getColumnsetHeight","gridColumnsHeight","gridTemplateRows","getScrollOffsetTop","offsetTop","getScrollOffsetLeft","reduce","offsetRight","offsetWidth","getScrollOffsetRight","current","slice","reverse","getPreviousColumn","previousColumn","nextColumn","getRowsetRowIndex","gridRowsHeight","gridHeight","clientHeight","columnsHeight","floor","getRow","start","end","indexStart","indexEnd","getRowEventTarget","composedPath","isRowActionsEventTarget","getCellEventTarget","columnDragStart","isRTLDirection","columnDragging","columnDragEnd","columnResizeStart","columnResizing","columnResizeEnd","rowDragStart","getGridStyle","getGridTemplateColumns","getRowBoxSimulationStyle","getDragTransitionStyle","getColumnsStyle","deleteRule","columnIndex","join","ensureRowVisible","ensureCellVisible","isColumnFreeze","scroll","scrollOffsetTop","scrollOffsetLeft","scrollOffsetRight","scrollTop","scrollBy","offsetHeight","scrollLeft","offsetLeft","getColumnSizeStyle","getColumnOrderStyle","getColumnDisplayStyle","getColumnFreezeStyle","getColumnDraggingStyle","getColumnIndentStyle","getColumnFreezeStartStyle","getColumnFreezeEndStyle","calcItems","direction","chGridCss","ChGridStyle0","ChGrid","settingsUI","rowFocusedHandler","cellFocusedHandler","rowHighlightedHandler","openRowHover","close","rowsMarkedHandler","rowMarkingChanged","emit","getChangedEventDetail","rowsSelectedHandler","selectionChanged","cellSelectedHandler","cellSelectionChanged","rowClicked","rowDoubleClicked","rowEnterPressed","rowContextMenu","componentWillLoad","el","gridStyle","componentShouldUpdate","_newValue","focusHandler","selectByKeyboardEvent","blurHandler","cellFocusedEventHandler","setCellSelected","windowKeyDownHandler","focusComposedPath","key","keyDownHandler","mouseEventModifierKey","spacePressedEvent","setRowCollapsed","moveByKeyboardEvent","enterPressedHandler","mouseMoveHandler","rowHighlightEnabled","rowHighlighted","selectingBlock","stopSelecting","isKeyModifierPressed","isMouseButtonRightPressed","mouseEventHasButtonPressed","MouseEventButtons","RIGHT","selectByPointerEvent","mouseLeaveHandler","mouseDownHandler","button","MouseEventButton","mouseUpHandler","clickHandler","emitRowClicked","dblclickHandler","touchstartHandler","touchendHandler","contextmenuHandler","KEY_SHORTCUT","rowContextMenuEventInfo","selectedRowsId","openRowContext","defaultPrevented","columnSelectorClickedHandler","cellSelectorClickedHandler","cellRowActionClickedHandler","openRowActions","columnStyleChangedHandler","columnFreezeChangedHandler","columnResizeStartedHandler","columnResizingHandler","columnResizeFinishedHandler","columnDragStartHandler","columnDraggingHandler","positionX","columnDragEndHandler","rowDragStartHandler","rowEnsureVisibleHandler","cellEnsureVisibleHandler","settingsShowClickedHandler","show","settingsCloseClickedHandler","getFocusedRow","getHoveredRow","getSelectedRows","getMarkedRows","getFocusedCell","getSelectedCell","selectRow","selectAllRows","selectCell","expandRow","collapseRow","rowEnsureVisible","cellEnsureVisible","currentRow","syncRowStateSelected","syncRowStateMarked","syncRowStateSelector","index","splice","rowsId","addedRowsId","removedRowsId","unalteredRowsId","ctrl","shift","markByKeyboardEvent","fn","renderSettings","h","ref","exportparts","part","render","Host","tabindex","class","chGridActionRefreshCss","ChGridActionRefreshStyle0","ChGridActionRefresh","refreshClicked","pressedHandler","role","disabled","chGridActionSettingsCss","ChGridActionSettingsStyle0","ChGridActionSettings","settingsShowClicked","chGridActionbarCss","ChGridActionbarStyle0","ChGridActionbar","chGridColumnCss","ChGridColumnStyle0","ChGridColumn","dragMouseMoveStartPositionX","freezeHandler","columnFreezeChanged","hiddenHandler","columnHiddenChanged","orderHandler","columnOrderChanged","sizeHandler","columnSizeChanging","sortDirectionHandler","sortDirection","columnSortChanged","columnSizeChanged","columnDragStarted","columnDragEnded","columnSelectorClicked","mousedownHandler","sortable","allowColumnReorder","pageX","movementX","settingsMouseDownHandler","settingsClickHandler","showSettings","selectorTouchEndHandler","renderSelector","renderName","renderSort","renderResize","onMouseDown","onClick","onTouchEnd","indeterminate","title","columnTooltip","columnNamePosition","columnName","columnIconUrl","columnImage","columnImageSet","src","srcSet","columnNameHidden","settingable","resizable","chGridColumnsetCss","ChGridColumnsetStyle0","ChGridColumnset","columnSortChangedHandler","chPaginatorCss","ChPaginatorStyle0","ChPaginator","elPages","elFirst","elPrevious","elNext","elLast","activePageHandler","activePageChanged","activePage","pageNavigationRequested","loadElements","navigateClickedHandler","navigate","pageChangedHandler","page","emitPageNavigationRequested","first","focus","last","goto","totalPages","hasNextPage","chPaginatorNavigateCss","ChPaginatorNavigateStyle0","ChPaginatorNavigate","navigateClicked","chPaginatorPagesCss","ChPaginatorPagesStyle0","ChPaginatorPages","buttonActive","pageHandler","pageChanged","maxSizeHandler","validateMaxSize","renderFirstLastPagesHandler","componentDidUpdate","activeElement","getItems","padLeft","ceil","maxSize","padRight","fillLeft","fillStart","fillRight","fillEnd","items","getRangeItems","activeIndex","renderFirstLastPages","textDots","_","GxControlType","GxControlDataType","gxGridChameleonColumnFilterCss","GxGridChameleonColumnFilterStyle0","GridChameleonColumnFilter","filterEnum","inputEqual","inputLess","inputGreater","columnSettingsChanged","isArray","FilterEnum","applyClickHandler","equal","getControlValue","less","greater","resetClickHandler","input","dataType","gxControl","DATETIME","FilterDateTimeAsDate","DATE","gx","date","ctod","ctot","toControlValue","convertGxDateToISO","gxdate","isDateTime","pad","n","padStart","Value","isNullDate","getFullYear","getMonth","getDate","getHours","getMinutes","getFilterInputType","BOOLEAN","CHAR","VARCHAR","LONGVARCHAR","NUMBER","renderColumnFilterControl","possibleValues","label","replace","toLowerCase","COMBO","Description","EDIT","CHECK","optionValue","optionDescription","FilterCaption","FilterMode","FilterLabelEqual","FilterLabelGreater","FilterLabelLess","buttonResetText","buttonApplyText"],"sources":["src/deprecated-components/grid/grid-row/ch-grid-row.ts","src/deprecated-components/grid/grid-rowset/ch-grid-rowset.tsx","src/deprecated-components/grid/grid-cell/ch-grid-cell.ts","src/deprecated-components/grid/ch-grid-manager-column-drag.ts","src/deprecated-components/grid/ch-grid-manager-columns.ts","src/deprecated-components/grid/ch-grid-manager-selection.ts","src/deprecated-components/grid/ch-grid-manager-row-drag.ts","src/deprecated-components/grid/ch-grid-manager-row-actions.ts","src/deprecated-components/grid/ch-grid-manager-column-resize.ts","src/deprecated-components/grid/ch-grid-manager.ts","src/deprecated-components/grid/ch-grid.scss?tag=ch-grid&encapsulation=shadow","src/deprecated-components/grid/ch-grid.tsx","src/deprecated-components/grid/grid-actionbar/grid-action-refresh/ch-grid-action-refresh.scss?tag=ch-grid-action-refresh","src/deprecated-components/grid/grid-actionbar/grid-action-refresh/ch-grid-action-refresh.tsx","src/deprecated-components/grid/grid-actionbar/grid-action-settings/ch-grid-action-settings.scss?tag=ch-grid-action-settings","src/deprecated-components/grid/grid-actionbar/grid-action-settings/ch-grid-action-settings.tsx","src/deprecated-components/grid/grid-actionbar/ch-grid-actionbar.scss?tag=ch-grid-actionbar","src/deprecated-components/grid/grid-actionbar/ch-grid-actionbar.tsx","src/deprecated-components/grid/grid-column/ch-grid-column.scss?tag=ch-grid-column&encapsulation=shadow","src/deprecated-components/grid/grid-column/ch-grid-column.tsx","src/deprecated-components/grid/grid-columnset/ch-grid-columnset.scss?tag=ch-grid-columnset","src/deprecated-components/grid/grid-columnset/ch-grid-columnset.tsx","src/components/paginator/ch-paginator.scss?tag=ch-paginator","src/components/paginator/ch-paginator.tsx","src/components/paginator/paginator-navigate/ch-paginator-navigate.scss?tag=ch-paginator-navigate","src/components/paginator/paginator-navigate/ch-paginator-navigate.tsx","src/components/paginator/paginator-pages/ch-paginator-pages.scss?tag=ch-paginator-pages&encapsulation=shadow","src/components/paginator/paginator-pages/ch-paginator-pages.tsx","src/components/gx-grid/genexus.ts","src/components/gx-grid/gx-grid-column-filter/gx-grid-chameleon-column-filter.scss?tag=gx-grid-chameleon-column-filter&encapsulation=shadow","src/components/gx-grid/gx-grid-column-filter/gx-grid-chameleon-column-filter.tsx"],"sourcesContent":["import { IChGridCollapsible } from \"../ch-grid-types\";\r\nimport HTMLChGridCellElement from \"../grid-cell/ch-grid-cell\";\r\n\r\n/**\r\n * The `ch-grid-row` component represents a grid row.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-row` instead.\r\n */\r\nexport default class HTMLChGridRowElement\r\n  extends HTMLElement\r\n  implements IChGridCollapsible\r\n{\r\n  private parentGrid: HTMLChGridElement;\r\n\r\n  static get observedAttributes() {\r\n    return [\"selected\", \"marked\"];\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.addEventListener(\"cellCaretClicked\", this.cellCaretClickedHandler);\r\n\r\n    if (this.selected || this.marked) {\r\n      this.grid.syncRowState(this);\r\n    }\r\n  }\r\n\r\n  attributeChangedCallback(name: string, _oldValue: string, value: string) {\r\n    if (name === \"selected\") {\r\n      this.selected = value !== null ? value !== \"false\" : false;\r\n    }\r\n    if (name === \"marked\") {\r\n      this.marked = value !== null ? value !== \"false\" : false;\r\n    }\r\n\r\n    this.grid?.syncRowState(this);\r\n  }\r\n\r\n  /**\r\n   * Returns the parent ch-grid element of the grid row.\r\n   */\r\n  get grid(): HTMLChGridElement {\r\n    return this.parentGrid ?? this.loadParentGrid();\r\n  }\r\n\r\n  /**\r\n   * A unique identifier for the row.\r\n   */\r\n  get rowId(): string {\r\n    return this.getAttribute(\"rowid\") ?? \"\";\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is highlighted.\r\n   */\r\n  get highlighted(): boolean {\r\n    return this.hasAttribute(\"highlighted\");\r\n  }\r\n\r\n  set highlighted(value: boolean) {\r\n    const highlightedClasses = this.grid.rowHighlightedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      this.setAttribute(\"highlighted\", \"\");\r\n      if (this.grid.rowHighlightedClass) {\r\n        this.classList.add(...highlightedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"highlighted\");\r\n      if (this.grid.rowHighlightedClass) {\r\n        this.classList.remove(...highlightedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is selected.\r\n   */\r\n  get selected(): boolean {\r\n    return this.hasAttribute(\"selected\");\r\n  }\r\n\r\n  set selected(value: boolean) {\r\n    const selectedClasses = this.grid.rowSelectedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      if (!this.hasAttribute(\"selected\")) {\r\n        this.setAttribute(\"selected\", \"\");\r\n      }\r\n      if (this.grid.rowSelectedClass) {\r\n        this.classList.add(...selectedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"selected\");\r\n      if (this.grid.rowSelectedClass) {\r\n        this.classList.remove(...selectedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is marked.\r\n   */\r\n  get marked(): boolean {\r\n    return this.hasAttribute(\"marked\");\r\n  }\r\n\r\n  set marked(value: boolean) {\r\n    const markedClasses = this.grid.rowMarkedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      if (!this.hasAttribute(\"marked\")) {\r\n        this.setAttribute(\"marked\", \"\");\r\n      }\r\n      if (this.grid.rowMarkedClass) {\r\n        this.classList.add(...markedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"marked\");\r\n      if (this.grid.rowMarkedClass) {\r\n        this.classList.remove(...markedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is focused.\r\n   */\r\n  get focused(): boolean {\r\n    return this.hasAttribute(\"focused\");\r\n  }\r\n\r\n  set focused(value: boolean) {\r\n    const focusedClasses = this.grid.rowFocusedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      this.setAttribute(\"focused\", \"\");\r\n      if (this.grid.rowFocusedClass) {\r\n        this.classList.add(...focusedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"focused\");\r\n      if (this.grid.rowFocusedClass) {\r\n        this.classList.remove(...focusedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the grid row has child rows.\r\n   */\r\n  get hasChildRows(): boolean {\r\n    return !!this.querySelector(\"ch-grid-rowset\");\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid row is collapsed.\r\n   */\r\n  get collapsed(): boolean {\r\n    return this.hasAttribute(\"collapsed\");\r\n  }\r\n\r\n  set collapsed(value: boolean) {\r\n    const dispatchEvent = this.collapsed !== value;\r\n\r\n    if (value) {\r\n      this.setAttribute(\"collapsed\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"collapsed\");\r\n    }\r\n\r\n    if (dispatchEvent) {\r\n      this.dispatchEvent(\r\n        new CustomEvent(\"rowCollapsedChanged\", {\r\n          bubbles: true,\r\n          composed: true,\r\n          detail: { rowId: this.rowId, collapsed: value }\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid row is a leaf node.\r\n   */\r\n  get leaf(): boolean {\r\n    return this.hasAttribute(\"leaf\");\r\n  }\r\n\r\n  set leaf(value: boolean) {\r\n    if (value === true) {\r\n      this.setAttribute(\"leaf\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"leaf\");\r\n    }\r\n  }\r\n\r\n  public getCell(column: HTMLChGridColumnElement): HTMLChGridCellElement {\r\n    return this.querySelector(\r\n      `:scope > ch-grid-cell:nth-of-type(${column.physicalOrder})`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid row is visible.\r\n   */\r\n  public isVisible(): boolean {\r\n    return Array.from(this.querySelectorAll(\":scope > ch-grid-cell\")).some(\r\n      (cell: HTMLChGridCellElement) => cell.isVisible()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Ensures that the row is visible within the control, scrolling the contents of the control if necessary.\r\n   */\r\n  public ensureVisible() {\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"rowEnsureVisible\", { bubbles: true, composed: true })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * returns a `DOMRect` object representing the size of the grid row element.\r\n   */\r\n  public getBoundingClientRect(): DOMRect {\r\n    let rect: DOMRect;\r\n\r\n    if (!this.firstElementChild) {\r\n      rect = new DOMRect();\r\n    } else if (this.firstElementChild === this.lastElementChild) {\r\n      rect = this.firstElementChild.getBoundingClientRect();\r\n    } else {\r\n      const firstCellRect = this.firstElementChild.getBoundingClientRect();\r\n      const lastCellRect = this.lastElementChild.getBoundingClientRect();\r\n\r\n      rect = new DOMRect(\r\n        firstCellRect.x,\r\n        firstCellRect.y,\r\n        lastCellRect.x - firstCellRect.x + lastCellRect.width,\r\n        lastCellRect.y - firstCellRect.y + lastCellRect.height\r\n      );\r\n    }\r\n\r\n    return rect;\r\n  }\r\n\r\n  private cellCaretClickedHandler(eventInfo: PointerEvent) {\r\n    const targetRow = eventInfo.currentTarget as HTMLChGridRowElement;\r\n\r\n    if (targetRow.hasChildRows) {\r\n      this.collapsed = !this.collapsed;\r\n    }\r\n    eventInfo.stopPropagation();\r\n  }\r\n\r\n  private loadParentGrid(): HTMLChGridElement {\r\n    this.parentGrid = this.closest(\"ch-grid\");\r\n    return this.parentGrid;\r\n  }\r\n}\r\n\r\nif (!customElements.get(\"ch-grid-row\")) {\r\n  customElements.define(\"ch-grid-row\", HTMLChGridRowElement);\r\n}\r\n","import { IChGridCollapsible } from \"../ch-grid-types\";\r\n\r\n/**\r\n * The `ch-grid-rowset` component represents a group of rows.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-rowset` instead.\r\n */\r\nexport default class HTMLChGridRowsetElement\r\n  extends HTMLElement\r\n  implements IChGridCollapsible\r\n{\r\n  private computedLevel = 0;\r\n  private grid: HTMLChGridElement;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.addEventListener(\r\n      \"rowsetLegendClicked\",\r\n      this.rowsetLegendClickedHandler\r\n    );\r\n    this.defineLevel();\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid rowset is collapsed.\r\n   */\r\n  get collapsed(): boolean {\r\n    return this.hasAttribute(\"collapsed\");\r\n  }\r\n\r\n  set collapsed(value: boolean) {\r\n    if (value) {\r\n      this.setAttribute(\"collapsed\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"collapsed\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the zero-based depth of the rowset in the tree.\r\n   */\r\n  get level(): number {\r\n    if (!this.computedLevel) {\r\n      this.computeLevel();\r\n    }\r\n\r\n    return this.computedLevel;\r\n  }\r\n\r\n  /**\r\n   * returns a `DOMRect` object representing the size of the grid rowset element.\r\n   */\r\n  public getBoundingClientRect(): DOMRect {\r\n    let rect: DOMRect;\r\n\r\n    const paddingTop = parseInt(this.style.getPropertyValue(\"padding-top\"));\r\n    const paddingbottom = parseInt(\r\n      this.style.getPropertyValue(\"padding-bottom\")\r\n    );\r\n\r\n    if (!this.firstElementChild) {\r\n      const mainRect = this.grid.shadowRoot\r\n        .querySelector(\".main\")\r\n        .getBoundingClientRect();\r\n      rect = new DOMRect(mainRect.x, mainRect.y, mainRect.width, 0);\r\n    } else if (this.firstElementChild === this.lastElementChild) {\r\n      const firstRowRect = this.firstElementChild.getBoundingClientRect();\r\n\r\n      rect = new DOMRect(\r\n        firstRowRect.x,\r\n        firstRowRect.y - paddingTop,\r\n        firstRowRect.x + firstRowRect.width,\r\n        firstRowRect.y + firstRowRect.height + paddingTop + paddingbottom\r\n      );\r\n    } else {\r\n      const firstRowRect = this.firstElementChild.getBoundingClientRect();\r\n      const lastRowRect = this.lastElementChild.getBoundingClientRect();\r\n\r\n      rect = new DOMRect(\r\n        firstRowRect.x,\r\n        firstRowRect.y - paddingTop,\r\n        lastRowRect.x - firstRowRect.x + lastRowRect.width,\r\n        lastRowRect.y -\r\n          firstRowRect.y +\r\n          lastRowRect.height +\r\n          paddingTop +\r\n          paddingbottom\r\n      );\r\n    }\r\n\r\n    return rect;\r\n  }\r\n\r\n  private rowsetLegendClickedHandler(eventInfo: CustomEvent) {\r\n    eventInfo.stopPropagation();\r\n\r\n    this.collapsed = !this.collapsed;\r\n  }\r\n\r\n  private defineLevel() {\r\n    this.style.setProperty(\"--level\", this.level.toString());\r\n  }\r\n\r\n  private computeLevel() {\r\n    this.computedLevel = this.getParentRowset()?.level ?? 0;\r\n\r\n    if (this.hasLegend() || this.isNestedRow()) {\r\n      this.computedLevel++;\r\n    }\r\n  }\r\n\r\n  private hasLegend(): boolean {\r\n    return this.firstElementChild?.tagName === \"CH-GRID-ROWSET-LEGEND\";\r\n  }\r\n\r\n  private isNestedRow(): boolean {\r\n    return this.parentElement.tagName === \"CH-GRID-ROW\";\r\n  }\r\n\r\n  private getParentRowset(): HTMLChGridRowsetElement | undefined {\r\n    const node = this.parentElement.closest(\"ch-grid-rowset, ch-grid\");\r\n\r\n    if (node.tagName === \"CH-GRID-ROWSET\") {\r\n      return node as HTMLChGridRowsetElement;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n}\r\n\r\nif (!customElements.get(\"ch-grid-rowset\")) {\r\n  customElements.define(\"ch-grid-rowset\", HTMLChGridRowsetElement);\r\n}\r\n","import HTMLChGridRowElement from \"../grid-row/ch-grid-row\";\r\n\r\n/**\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `TabularGridCellType` instead.\r\n *\r\n * ChGridCellType indicates the type of cell.\r\n * \"Plain\" is a simple cell that shows the contents of it.\r\n * \"Rich\" is a rich cell that, in addition to displaying its content, enables\r\n * the user to execute different actions on the row.\r\n * The actions are:\r\n * - allow dragging the row to reorder it.\r\n * - allow to select the row by means of a checkbox.\r\n * - allow displaying actions to be executed in the row.\r\n * \"TreeNode\" is a cell that represents a node of the Tree.\r\n */\r\nexport enum ChGridCellType {\r\n  Plain = \"plain\",\r\n  Rich = \"rich\",\r\n  TreeNode = \"node\"\r\n}\r\n\r\n/**\r\n * The `ch-grid-cell` component represents a grid cell.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-cell` instead.\r\n */\r\nexport default class HTMLChGridCellElement extends HTMLElement {\r\n  private cellType = ChGridCellType.Plain;\r\n  private caret: HTMLDivElement;\r\n  private drag: HTMLDivElement;\r\n  private action: HTMLButtonElement;\r\n  private selector: HTMLInputElement;\r\n  private selectorLabel: HTMLLabelElement;\r\n\r\n  public rowDrag: boolean;\r\n  public rowSelector: boolean;\r\n  public rowActions: boolean;\r\n\r\n  static get observedAttributes() {\r\n    return [\"cell-type\", \"row-drag\", \"row-selector\", \"row-actions\"];\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.defineFocusHandler();\r\n  }\r\n\r\n  connectedCallback() {\r\n    if (this.cellType !== ChGridCellType.Plain) {\r\n      this.define();\r\n    }\r\n  }\r\n\r\n  attributeChangedCallback(name: string, _oldValue: string, value: string) {\r\n    if (name === \"cell-type\") {\r\n      this.cellType = value as ChGridCellType;\r\n    }\r\n    if (name === \"row-drag\") {\r\n      this.cellType = ChGridCellType.Rich;\r\n      this.rowDrag = value !== null ? value !== \"false\" : false;\r\n    }\r\n    if (name === \"row-selector\") {\r\n      this.cellType = ChGridCellType.Rich;\r\n      this.rowSelector = value !== null ? value !== \"false\" : false;\r\n    }\r\n    if (name === \"row-actions\") {\r\n      this.cellType = ChGridCellType.Rich;\r\n      this.rowActions = value !== null ? value !== \"false\" : false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * One of \"plain\", \"rich\", or \"node\", indicating the type of cell.\r\n   */\r\n  get type(): ChGridCellType {\r\n    return this.cellType;\r\n  }\r\n\r\n  set type(value: ChGridCellType) {\r\n    if (this.cellType !== value) {\r\n      this.cellType = value;\r\n      this.define();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the parent ch-grid element of the cell.\r\n   */\r\n  get grid(): HTMLChGridElement {\r\n    return this.closest(\"ch-grid\");\r\n  }\r\n\r\n  /**\r\n   * Returns the ch-grid-column element of the cell.\r\n   */\r\n  get column(): HTMLChGridColumnElement {\r\n    const cellIndex = Array.prototype.indexOf.call(\r\n      this.row.querySelectorAll(`:scope > ch-grid-cell`),\r\n      this\r\n    );\r\n    return this.grid.querySelector(\r\n      `ch-grid-column:nth-of-type(${cellIndex + 1})`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the parent ch-grid-row element of the cell.\r\n   */\r\n  get row(): HTMLChGridRowElement {\r\n    return this.parentElement as HTMLChGridRowElement;\r\n  }\r\n\r\n  /**\r\n   * A unique identifier for the cell.\r\n   */\r\n  get cellId(): string {\r\n    return this.getAttribute(\"cellid\") ?? \"\";\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the cell is selected.\r\n   */\r\n  get selected(): boolean {\r\n    return this.hasAttribute(\"selected\");\r\n  }\r\n\r\n  set selected(value: boolean) {\r\n    if (value === true) {\r\n      this.setAttribute(\"selected\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"selected\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the cell is focused.\r\n   */\r\n  get focused(): boolean {\r\n    return this.hasAttribute(\"focused\");\r\n  }\r\n\r\n  set focused(value: boolean) {\r\n    if (value === true) {\r\n      this.setAttribute(\"focused\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"focused\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid cell is visible.\r\n   */\r\n  public isVisible(): boolean {\r\n    return this.offsetParent !== null;\r\n  }\r\n\r\n  /**\r\n   * Ensures that the cell is visible within the control, scrolling the contents of the control if necessary.\r\n   */\r\n  public ensureVisible() {\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"cellEnsureVisible\", { bubbles: true, composed: true })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the selector of cell is checked or not.\r\n   */\r\n  public setSelectorChecked(value: boolean) {\r\n    this.selector.checked = value;\r\n\r\n    if (this.selector.checked) {\r\n      this.selector.setAttribute(\"part\", \"selector checked\");\r\n    } else {\r\n      this.selector.setAttribute(\"part\", \"selector\");\r\n    }\r\n  }\r\n\r\n  private defineFocusHandler() {\r\n    this.addEventListener(\"focusin\", () => {\r\n      if (!this.rowSelector) {\r\n        this.dispatchEvent(\r\n          new CustomEvent(\"cellFocused\", { bubbles: true, composed: true })\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  private caretMouseDownHandler(eventInfo: Event) {\r\n    eventInfo.stopPropagation();\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"cellCaretClicked\", { bubbles: true, composed: true })\r\n    );\r\n  }\r\n\r\n  private selectorClickHandler(eventInfo: MouseEvent) {\r\n    eventInfo.stopPropagation();\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent<ChGridCellSelectorClickedEvent>(\"cellSelectorClicked\", {\r\n        bubbles: true,\r\n        composed: true,\r\n        detail: {\r\n          checked: this.selector.checked,\r\n          range: eventInfo.shiftKey\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private selectorLabelClickHandler(eventInfo: MouseEvent) {\r\n    if (!eventInfo.shiftKey) {\r\n      eventInfo.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private dragMouseDownHandler(eventInfo: MouseEvent) {\r\n    eventInfo.preventDefault();\r\n    eventInfo.stopPropagation();\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent<ChGridRowDragEvent>(\"rowDragStarted\", {\r\n        bubbles: true,\r\n        composed: true,\r\n        detail: {\r\n          row: this.row\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private actionClickHandler() {\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"cellRowActionClicked\", {\r\n        bubbles: true,\r\n        composed: true\r\n      })\r\n    );\r\n  }\r\n\r\n  private define() {\r\n    switch (this.cellType) {\r\n      case ChGridCellType.Rich:\r\n        this.defineRich();\r\n        break;\r\n      case ChGridCellType.TreeNode:\r\n        this.defineTreeNode();\r\n        break;\r\n    }\r\n  }\r\n\r\n  private defineRich() {\r\n    let html = \"\";\r\n\r\n    if (!this.shadowRoot || this.shadowRoot.innerHTML === \"\") {\r\n      this.attachShadow({ mode: \"open\" });\r\n\r\n      if (this.rowDrag) {\r\n        html += `\r\n          <div part=\"drag-icon\"></div>\r\n        `;\r\n      }\r\n\r\n      if (this.rowSelector) {\r\n        html += `\r\n          <style>label {display:flex}</style>\r\n          <label part=\"selector-label\">\r\n            <input type=\"checkbox\" part=\"selector\">\r\n          </label>\r\n        `;\r\n      }\r\n\r\n      if (this.rowActions) {\r\n        html += `\r\n          <button part=\"actions-icon\"></button>\r\n        `;\r\n      }\r\n\r\n      this.shadowRoot.innerHTML = `\r\n        ${html}\r\n        <slot></slot>\r\n      `;\r\n\r\n      if (this.rowDrag) {\r\n        this.drag = this.shadowRoot.querySelector(\"[part='drag-icon']\");\r\n        this.drag.addEventListener(\r\n          \"mousedown\",\r\n          this.dragMouseDownHandler.bind(this)\r\n        );\r\n      }\r\n\r\n      if (this.rowActions) {\r\n        this.action = this.shadowRoot.querySelector(\"[part='actions-icon']\");\r\n        this.action.addEventListener(\r\n          \"click\",\r\n          this.actionClickHandler.bind(this)\r\n        );\r\n      }\r\n\r\n      if (this.rowSelector) {\r\n        this.selector = this.shadowRoot.querySelector(\"[part='selector']\");\r\n        this.selector.addEventListener(\"mousedown\", (eventInfo: MouseEvent) =>\r\n          eventInfo.stopPropagation()\r\n        );\r\n        this.selector.addEventListener(\"touchend\", (eventInfo: TouchEvent) =>\r\n          eventInfo.stopPropagation()\r\n        );\r\n        this.selector.addEventListener(\r\n          \"click\",\r\n          this.selectorClickHandler.bind(this)\r\n        );\r\n\r\n        this.selectorLabel = this.shadowRoot.querySelector(\r\n          \"[part='selector-label']\"\r\n        );\r\n        this.selectorLabel.addEventListener(\r\n          \"mousedown\",\r\n          (eventInfo: MouseEvent) => eventInfo.stopPropagation()\r\n        );\r\n        this.selectorLabel.addEventListener(\r\n          \"touchend\",\r\n          (eventInfo: MouseEvent) => eventInfo.stopPropagation()\r\n        );\r\n        this.selectorLabel.addEventListener(\r\n          \"click\",\r\n          this.selectorLabelClickHandler.bind(this)\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private defineTreeNode() {\r\n    if (!this.shadowRoot || this.shadowRoot.innerHTML === \"\") {\r\n      this.attachShadow({ mode: \"open\" });\r\n      this.shadowRoot.innerHTML = `\r\n        <style>:host::before {content: none !important}</style>\r\n        <div part=\"indent\"></div>\r\n        <div part=\"caret\"></div>\r\n        <input type=\"checkbox\" part=\"node-selector\" hidden>\r\n        <div part=\"node-icon\"></div>\r\n        <slot></slot>\r\n      `;\r\n\r\n      this.caret = this.shadowRoot.querySelector(\"[part='caret']\");\r\n      this.caret.addEventListener(\r\n        \"mousedown\",\r\n        this.caretMouseDownHandler.bind(this)\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * Use `ch-tabular-grid` component instead.\r\n * Use `ChTabularGridCellSelectorClickedEvent` instead.\r\n */\r\nexport interface ChGridCellSelectorClickedEvent {\r\n  checked: boolean;\r\n  range: boolean;\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * Use `ch-tabular-grid` component instead.\r\n * Use `ChTabularGridRowDragEvent` instead.\r\n */\r\nexport interface ChGridRowDragEvent {\r\n  row: HTMLChGridRowElement;\r\n  positionX?: number;\r\n  direction?: \"top\" | \"bottom\";\r\n}\r\n\r\nif (!customElements.get(\"ch-grid-cell\")) {\r\n  customElements.define(\"ch-grid-cell\", HTMLChGridCellElement);\r\n}\r\n","import { CSSProperties } from \"./ch-grid-types\";\r\n\r\nexport class ChGridManagerColumnDrag {\r\n  private column: ChGridManagerColumnDragItem;\r\n  private columns: ChGridManagerColumnDragItem[];\r\n  private isRTL: boolean;\r\n  private lastTargetOrder = 0;\r\n\r\n  constructor(\r\n    columnId: string,\r\n    columns: HTMLChGridColumnElement[],\r\n    isRTL: boolean\r\n  ) {\r\n    this.isRTL = isRTL;\r\n    this.columns = columns.map(column => ({\r\n      element: column,\r\n      rect: column.getBoundingClientRect(),\r\n      translateX: 0,\r\n      order: column.order\r\n    }));\r\n    this.column = this.columns.find(item => item.element.columnId === columnId);\r\n\r\n    this.columns.forEach(this.setColumnHiddenRect.bind(this));\r\n  }\r\n\r\n  dragging(position: number): boolean {\r\n    /**\r\n     * Indica el orden inicial de la columna que se está arrastrando\r\n     */\r\n    const sourceOrder = this.column.element.order;\r\n\r\n    /**\r\n     * Indica a qué grupo de fijación pertenece la columna que se está arrastrando\r\n     */\r\n    const sourceFreeze = this.column.element.freeze;\r\n\r\n    let targetOrder = 0;\r\n    let targetOrderChanged = false;\r\n\r\n    this.column.translateX = 0;\r\n    this.columns\r\n      .filter(column => column.element.freeze === sourceFreeze)\r\n      .forEach(column => {\r\n        /**\r\n         * Indica el orden de la columna actual\r\n         */\r\n        const columnOrder = column.element.order;\r\n\r\n        /**\r\n         * Indica si la columna que se está arrastrando estaba a la derecha o\r\n         * a la izquierda de la actual cuando se inició el arrastre para\r\n         * incrementar el orden según corresponda.\r\n         */\r\n        const dragDirection = sourceOrder > columnOrder ? 1 : -1;\r\n\r\n        /**\r\n         * Indica si la columna actual hay que desplazarla a la derecha o\r\n         * a la izquierda cuando se cruce con la columna arrastrada.\r\n         */\r\n        const shiftDirection =\r\n          (sourceOrder > columnOrder ? 1 : -1) * (this.isRTL ? -1 : 1);\r\n\r\n        if (\r\n          column.rect.left < position &&\r\n          position < column.rect.right &&\r\n          columnOrder !== sourceOrder\r\n        ) {\r\n          /*\r\n            La posicion actual del mouse está dentro de la columna actual y\r\n            no es la columna que se está arrastrando\r\n          */\r\n          this.swapColumnPosition(column, shiftDirection);\r\n\r\n          // actualizo el orden de la columna actual\r\n          column.order = column.element.order + dragDirection;\r\n\r\n          targetOrder = columnOrder;\r\n        } else if (\r\n          position < column.rect.left &&\r\n          (this.isRTL ? columnOrder > sourceOrder : columnOrder < sourceOrder)\r\n        ) {\r\n          /*\r\n            La posicion actual del mouse está a la izquierda de la columna actual\r\n            haciendo que la columna arrastrada cruce la actual.\r\n          */\r\n          this.swapColumnPosition(column, shiftDirection);\r\n\r\n          // actualizo el orden de la columna actual\r\n          column.order = column.element.order + dragDirection;\r\n\r\n          if (\r\n            !targetOrder ||\r\n            (this.isRTL ? columnOrder > targetOrder : columnOrder < targetOrder)\r\n          ) {\r\n            targetOrder = columnOrder;\r\n          }\r\n        } else if (\r\n          position > column.rect.right &&\r\n          (this.isRTL ? columnOrder < sourceOrder : columnOrder > sourceOrder)\r\n        ) {\r\n          /*\r\n            La posicion actual del mouse está a la derecha de la columna actual\r\n            haciendo que la columna arrastrada cruce la actual.\r\n          */\r\n          this.swapColumnPosition(column, shiftDirection);\r\n\r\n          // actualizo el orden de la columna actual\r\n          column.order = column.element.order + dragDirection;\r\n\r\n          if (\r\n            !targetOrder ||\r\n            (this.isRTL ? columnOrder < targetOrder : columnOrder > targetOrder)\r\n          ) {\r\n            targetOrder = columnOrder;\r\n          }\r\n        } else if (columnOrder !== sourceOrder) {\r\n          /*\r\n            La posicion actual del mouse NO está dentro de la columna actual ni\r\n            la cruza.\r\n          */\r\n          this.resetColumnPosition(column);\r\n        }\r\n      });\r\n\r\n    this.column.order = targetOrder ? targetOrder : this.column.element.order;\r\n\r\n    targetOrderChanged = targetOrder !== this.lastTargetOrder;\r\n    this.lastTargetOrder = targetOrder;\r\n\r\n    return targetOrderChanged;\r\n  }\r\n\r\n  dragEnd() {\r\n    this.columns.forEach(column => {\r\n      column.element.order = column.order;\r\n      column.translateX = 0;\r\n    });\r\n  }\r\n\r\n  getColumnStyle(column: HTMLChGridColumnElement): CSSProperties {\r\n    return {\r\n      [`--ch-grid-column-${column.physicalOrder}-transform`]: `translateX(${\r\n        this.columns.find(columnItem => columnItem.element === column)\r\n          .translateX\r\n      }px)`\r\n    };\r\n  }\r\n\r\n  getColumnsFirstLast(): {\r\n    columnFirst: HTMLChGridColumnElement;\r\n    columnLast: HTMLChGridColumnElement;\r\n  } {\r\n    let itemFirst: ChGridManagerColumnDragItem;\r\n    let itemLast: ChGridManagerColumnDragItem;\r\n\r\n    this.columns.forEach(item => {\r\n      if (\r\n        !item.element.hidden &&\r\n        (!itemFirst || item.order < itemFirst.order)\r\n      ) {\r\n        itemFirst = item;\r\n      }\r\n      if (!item.element.hidden && (!itemLast || item.order > itemLast.order)) {\r\n        itemLast = item;\r\n      }\r\n    });\r\n\r\n    return {\r\n      columnFirst: itemFirst.element,\r\n      columnLast: itemLast.element\r\n    };\r\n  }\r\n\r\n  private swapColumnPosition(\r\n    column: ChGridManagerColumnDragItem,\r\n    shiftDirection: number\r\n  ) {\r\n    // desplazo la columna actual para ocupar el espacio que dejó\r\n    // la columna arrastrada\r\n    column.translateX = this.column.rect.width * shiftDirection;\r\n\r\n    // desplazo la columna que se está arrastrando para que ocupe el\r\n    // espacio que dejó la columna actual\r\n    this.column.translateX += column.rect.width * (shiftDirection * -1);\r\n  }\r\n\r\n  private resetColumnPosition(column: ChGridManagerColumnDragItem) {\r\n    // no desplazo la columna actual\r\n    column.translateX = 0;\r\n\r\n    // asigno su posición original\r\n    column.order = column.element.order;\r\n  }\r\n\r\n  private setColumnHiddenRect(column: ChGridManagerColumnDragItem) {\r\n    if (column.element.hidden) {\r\n      const columnSibling =\r\n        this.getPreviousSiblingVisible(column) ||\r\n        this.getNextSiblingVisible(column);\r\n\r\n      column.rect = new DOMRect(\r\n        column.element.order < columnSibling.element.order\r\n          ? columnSibling.rect.left\r\n          : columnSibling.rect.right,\r\n        columnSibling.rect.y,\r\n        0,\r\n        columnSibling.rect.height\r\n      );\r\n    }\r\n  }\r\n\r\n  private getPreviousSiblingVisible(\r\n    hidden: ChGridManagerColumnDragItem\r\n  ): ChGridManagerColumnDragItem {\r\n    let previous: ChGridManagerColumnDragItem;\r\n\r\n    this.columns.forEach(column => {\r\n      if (\r\n        !column.element.hidden &&\r\n        column.element.order < hidden.element.order &&\r\n        (!previous || column.element.order > previous.element.order)\r\n      ) {\r\n        previous = column;\r\n      }\r\n    });\r\n\r\n    return previous;\r\n  }\r\n\r\n  private getNextSiblingVisible(\r\n    hidden: ChGridManagerColumnDragItem\r\n  ): ChGridManagerColumnDragItem {\r\n    let next: ChGridManagerColumnDragItem;\r\n\r\n    this.columns.forEach(column => {\r\n      if (\r\n        !column.element.hidden &&\r\n        column.element.order > hidden.element.order &&\r\n        (!next || column.element.order < next.element.order)\r\n      ) {\r\n        next = column;\r\n      }\r\n    });\r\n\r\n    return next;\r\n  }\r\n}\r\n\r\ninterface ChGridManagerColumnDragItem {\r\n  element: HTMLChGridColumnElement;\r\n  rect: DOMRect;\r\n  translateX: number;\r\n  order: number;\r\n}\r\n","import HTMLChGridCellElement, {\r\n  ChGridCellType\r\n} from \"./grid-cell/ch-grid-cell\";\r\nimport { ChGridManager } from \"./ch-grid-manager\";\r\n\r\nexport class ChGridManagerColumns {\r\n  private manager: ChGridManager;\r\n  private columnsetObserver = new MutationObserver(\r\n    this.reloadColumns.bind(this)\r\n  );\r\n  private columnResizeObserver = new ResizeObserver(\r\n    this.resizeColumnHandler.bind(this)\r\n  );\r\n  private columns: HTMLChGridColumnElement[];\r\n  private columnsDisplay: HTMLChGridColumnDisplayElement[] = [];\r\n  private columnsWidth: number[] = [];\r\n\r\n  constructor(manager: ChGridManager) {\r\n    this.manager = manager;\r\n    this.columns = Array.from(\r\n      this.manager.grid.querySelectorAll(\"ch-grid-column\")\r\n    );\r\n\r\n    this.observeColumnset();\r\n\r\n    this.defineColumns(this.columns);\r\n    this.defineColumnsVariables();\r\n\r\n    this.adjustFreezeOrder();\r\n    this.adjustBaseLayer();\r\n  }\r\n\r\n  public getColumn(columnId: string): HTMLChGridColumnElement {\r\n    return this.columns.find(column => column.columnId === columnId);\r\n  }\r\n\r\n  public getColumns(sorted = false): HTMLChGridColumnElement[] {\r\n    if (sorted) {\r\n      return this.columns.sort(this.fnSortByOrder);\r\n    }\r\n    return this.columns;\r\n  }\r\n\r\n  public getColumnsFirstLast(): {\r\n    columnFirst: HTMLChGridColumnElement;\r\n    columnLast: HTMLChGridColumnElement;\r\n  } {\r\n    let columnFirst: HTMLChGridColumnElement;\r\n    let columnLast: HTMLChGridColumnElement;\r\n\r\n    this.columns.forEach(column => {\r\n      if (\r\n        !column.hidden &&\r\n        (!columnFirst || column.order < columnFirst.order)\r\n      ) {\r\n        columnFirst = column;\r\n      }\r\n      if (!column.hidden && (!columnLast || column.order > columnLast.order)) {\r\n        columnLast = column;\r\n      }\r\n    });\r\n\r\n    return {\r\n      columnFirst,\r\n      columnLast\r\n    };\r\n  }\r\n\r\n  public getColumnSelector(): HTMLChGridColumnElement {\r\n    return this.columns.find(\r\n      column => column.columnType === \"rich\" && column.richRowSelector\r\n    );\r\n  }\r\n\r\n  public adjustFreezeOrder() {\r\n    const freezeStart = this.columns\r\n      .filter(column => column.freeze === \"start\")\r\n      .sort(this.fnSortByOrder);\r\n    const noFreeze = this.columns\r\n      .filter(column => column.freeze !== \"start\" && column.freeze !== \"end\")\r\n      .sort(this.fnSortByOrder);\r\n    const freezeEnd = this.columns\r\n      .filter(column => column.freeze === \"end\")\r\n      .sort(this.fnSortByOrder);\r\n    let order = 1;\r\n\r\n    freezeStart.forEach(column => (column.order = order++));\r\n    noFreeze.forEach(column => (column.order = order++));\r\n    freezeEnd.forEach(column => (column.order = order++));\r\n  }\r\n\r\n  private defineColumns(columns: HTMLChGridColumnElement[]) {\r\n    columns.forEach(column => {\r\n      this.defineColumnId(column);\r\n      this.defineColumnIndex(column);\r\n      this.defineColumnOrder(column);\r\n      this.defineColumnSize(column);\r\n      this.defineColumnDisplayObserver(column);\r\n      this.defineColumnResizeObserver(column);\r\n      this.defineColumnType(column);\r\n    });\r\n  }\r\n\r\n  private defineColumnId(column: HTMLChGridColumnElement) {\r\n    column.columnId ||= this.getColumnUniqueId();\r\n  }\r\n\r\n  private defineColumnIndex(column: HTMLChGridColumnElement) {\r\n    column.physicalOrder = this.columns.indexOf(column) + 1;\r\n  }\r\n\r\n  private defineColumnOrder(column: HTMLChGridColumnElement) {\r\n    column.order ||= column.physicalOrder;\r\n  }\r\n\r\n  private defineColumnSize(column: HTMLChGridColumnElement) {\r\n    column.size ||= \"auto\";\r\n  }\r\n\r\n  private defineColumnDisplayObserver(column: HTMLChGridColumnElement) {\r\n    if (column.displayObserverClass && !column.hidden) {\r\n      const i =\r\n        this.columnsDisplay.push(\r\n          document.createElement(\"ch-grid-column-display\")\r\n        ) - 1;\r\n\r\n      this.columnsDisplay[i].setAttribute(\"slot\", \"column-display\");\r\n      this.columnsDisplay[i].setAttribute(\"class\", column.displayObserverClass);\r\n      this.columnsDisplay[i].column = column;\r\n\r\n      this.manager.grid.appendChild(this.columnsDisplay[i]);\r\n    }\r\n  }\r\n\r\n  private defineColumnResizeObserver(column: HTMLChGridColumnElement) {\r\n    this.columnResizeObserver.observe(column, { box: \"border-box\" });\r\n  }\r\n\r\n  private defineColumnType(column: HTMLChGridColumnElement) {\r\n    switch (column.columnType) {\r\n      case \"tree\":\r\n        this.manager.grid\r\n          .querySelectorAll(`ch-grid-cell:nth-child(${column.physicalOrder})`)\r\n          .forEach((cell: HTMLChGridCellElement) => {\r\n            cell.type = ChGridCellType.TreeNode;\r\n          });\r\n        break;\r\n      case \"rich\":\r\n        this.manager.grid\r\n          .querySelectorAll(`ch-grid-cell:nth-child(${column.physicalOrder})`)\r\n          .forEach((cell: HTMLChGridCellElement) => {\r\n            cell.rowDrag = column.richRowDrag;\r\n            cell.rowSelector = column.richRowSelector;\r\n            cell.rowActions = column.richRowActions;\r\n            cell.type = ChGridCellType.Rich;\r\n          });\r\n        break;\r\n    }\r\n  }\r\n\r\n  private defineColumnsVariables() {\r\n    const root: Document | ShadowRoot = this.manager.grid.getRootNode() as\r\n      | Document\r\n      | ShadowRoot;\r\n    const style = root.querySelector(\"#ch-grid-columns-variables\");\r\n\r\n    if (\r\n      !style ||\r\n      parseInt(style.getAttribute(\"data-columns\")) < this.columns.length\r\n    ) {\r\n      let selectors = \"\";\r\n      for (let i = 1; i <= this.columns.length; i++) {\r\n        selectors += `ch-grid-column:nth-child(${i}), ch-grid-cell:nth-child(${i}) {\r\n                        display: var(--ch-grid-column-${i}-display, flex);\r\n                        grid-column: var(--ch-grid-column-${i}-position, ${i});\r\n                        margin-inline-start: var(--ch-grid-column-${i}-margin-start);\r\n                        border-inline-start: var(--ch-grid-column-${i}-border-start);\r\n                        padding-inline-start: var(--ch-grid-column-${i}-padding-start);\r\n                        margin-inline-end: var(--ch-grid-column-${i}-margin-end);\r\n                        border-inline-end: var(--ch-grid-column-${i}-border-end);\r\n                        padding-inline-end: var(--ch-grid-column-${i}-padding-end);\r\n                        left: var(--ch-grid-column-${i}-left-freeze);\r\n                        right: var(--ch-grid-column-${i}-right-freeze);\r\n                    }\r\n                    ch-grid-column:nth-child(${i}) {\r\n                      transform: var(--ch-grid-column-${i}-transform);\r\n                      z-index: calc(var(--ch-grid-column-${i}-z-index-freeze, 0) + var(--ch-grid-column-z-index-head, 0)  + var(--ch-grid-column-z-index-active, 0));\r\n                    }\r\n                    ch-grid-cell:nth-child(${i}) {\r\n                      transform: var(--ch-grid-virtual-scroller-position,) var(--ch-grid-column-${i}-transform,);\r\n                      z-index: calc(var(--ch-grid-column-${i}-z-index-freeze, 0) + var(--ch-grid-cell-z-index-active, 0));\r\n                    }\r\n                    ch-grid-cell:nth-child(${i})::before {\r\n                      content: var(--ch-grid-column-${i}-content);\r\n                    }\r\n                `;\r\n      }\r\n\r\n      const styleInnerHTML = `@layer ch-grid {\r\n        ${selectors}\r\n      }`;\r\n\r\n      if (style) {\r\n        style.setAttribute(\"data-columns\", this.columns.length.toString());\r\n        style.innerHTML = styleInnerHTML;\r\n      } else if (root instanceof Document) {\r\n        root.head.insertAdjacentHTML(\r\n          \"beforeend\",\r\n          `<style id=\"ch-grid-columns-variables\" data-columns=\"${this.columns.length}\">${styleInnerHTML}</style>`\r\n        );\r\n      } else if (root instanceof ShadowRoot) {\r\n        const s = document.createElement(\"style\");\r\n        s.id = \"ch-grid-columns-variables\";\r\n        s.dataset.columns = this.columns.length.toString();\r\n        s.innerText = styleInnerHTML;\r\n        root.appendChild(s);\r\n      }\r\n    }\r\n  }\r\n\r\n  private undefineColumns(columns: HTMLChGridColumnElement[]) {\r\n    columns.forEach(column => {\r\n      this.columnResizeObserver.unobserve(column);\r\n      this.columnsDisplay\r\n        .filter(columnDisplay => columnDisplay.column === column)\r\n        .forEach(item => {\r\n          item.remove();\r\n        });\r\n    });\r\n  }\r\n\r\n  private observeColumnset() {\r\n    this.columnsetObserver.observe(\r\n      this.manager.grid.querySelector(\"ch-grid-columnset\"),\r\n      { childList: true }\r\n    );\r\n  }\r\n\r\n  private reloadColumns() {\r\n    const columns = Array.from(\r\n      this.manager.grid.querySelectorAll(\"ch-grid-column\")\r\n    );\r\n    const columnsAdded = columns.filter(\r\n      column => !this.columns.includes(column)\r\n    );\r\n    const columnsRemoved = this.columns.filter(\r\n      column => !columns.includes(column)\r\n    );\r\n\r\n    if (columnsAdded.length || columnsRemoved.length) {\r\n      this.columns = columns;\r\n\r\n      this.undefineColumns(columnsRemoved);\r\n      this.defineColumns(columnsAdded);\r\n      this.defineColumnsVariables();\r\n\r\n      this.adjustOrders();\r\n      this.adjustBaseLayer();\r\n    }\r\n  }\r\n\r\n  private resizeColumnHandler(entries: ResizeObserverEntry[]) {\r\n    for (const entry of entries) {\r\n      const column = entry.target as HTMLChGridColumnElement;\r\n      this.columnsWidth[column.physicalOrder - 1] = entry.contentRect.width;\r\n    }\r\n\r\n    this.manager.setColumnWidthVariables(this.columnsWidth);\r\n  }\r\n\r\n  private getColumnUniqueId(): string {\r\n    const uniqueId =\r\n      Date.now().toString(36) + Math.random().toString(36).substring(2);\r\n\r\n    return `ch-grid-column-auto-${uniqueId}`;\r\n  }\r\n\r\n  private adjustOrders() {\r\n    // adjust physicalOrder\r\n    this.columns.forEach((column, i) => (column.physicalOrder = i + 1));\r\n\r\n    // adjust order, preserving physicalOrder array\r\n    [...this.columns].sort(this.fnSortByOrder).forEach((column, i) => {\r\n      column.order = i + 1;\r\n    });\r\n  }\r\n\r\n  private adjustBaseLayer() {\r\n    this.manager.setBaseLayer(this.columns.length);\r\n  }\r\n\r\n  private fnSortByOrder(\r\n    columnA: HTMLChGridColumnElement,\r\n    columnB: HTMLChGridColumnElement\r\n  ): number {\r\n    if (columnA.order < columnB.order) {\r\n      return -1;\r\n    }\r\n    if (columnA.order > columnB.order) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n}\r\n","import HTMLChGridCellElement from \"./grid-cell/ch-grid-cell\";\r\nimport HTMLChGridRowElement from \"./grid-row/ch-grid-row\";\r\nimport { ChGridManager } from \"./ch-grid-manager\";\r\n\r\nexport type ManagerSelectionState = {\r\n  rowFocused: HTMLChGridRowElement;\r\n  rowsSelected: HTMLChGridRowElement[];\r\n  cellFocused: HTMLChGridCellElement;\r\n  cellSelected: HTMLChGridCellElement;\r\n};\r\n\r\nexport class ChGridManagerSelection {\r\n  private manager: ChGridManager;\r\n  private rangeStart: HTMLChGridRowElement;\r\n  private rangeValue: boolean;\r\n  private lastSelected: HTMLChGridRowElement;\r\n  private lastRowMarked: HTMLChGridRowElement;\r\n  private selectionStateNone: ManagerSelectionState = {\r\n    rowFocused: null,\r\n    rowsSelected: [],\r\n    cellFocused: null,\r\n    cellSelected: null\r\n  };\r\n  private touch: {\r\n    clientX: number;\r\n    clientY: number;\r\n  };\r\n\r\n  selecting: boolean;\r\n  selectingRow: HTMLChGridRowElement;\r\n  selectingCell: HTMLChGridCellElement;\r\n\r\n  constructor(manager: ChGridManager) {\r\n    this.manager = manager;\r\n  }\r\n\r\n  touchStart(touchEvent: TouchEvent) {\r\n    this.touch = {\r\n      clientX: touchEvent.touches[0].clientX,\r\n      clientY: touchEvent.touches[0].clientY\r\n    };\r\n  }\r\n\r\n  isTouchEndSelection(touchEvent: TouchEvent): boolean {\r\n    return (\r\n      Math.abs(this.touch.clientX - touchEvent.changedTouches[0].clientX) <\r\n        10 &&\r\n      Math.abs(this.touch.clientY - touchEvent.changedTouches[0].clientY) <\r\n        10 &&\r\n      touchEvent.cancelable\r\n    );\r\n  }\r\n\r\n  select(\r\n    state: ManagerSelectionState,\r\n    row: HTMLChGridRowElement,\r\n    cell: HTMLChGridCellElement,\r\n    select: boolean,\r\n    append: boolean,\r\n    range: boolean,\r\n    rangeStartOn: \"focus\" | \"last-selected\",\r\n    context: boolean\r\n  ): ManagerSelectionState {\r\n    const grid = this.manager.grid;\r\n\r\n    if (\r\n      grid.keyboardNavigationMode === \"none\" &&\r\n      grid.rowSelectionMode === \"none\"\r\n    ) {\r\n      return this.selectionStateNone;\r\n    }\r\n    if (grid.rowSelectionMode === \"none\") {\r\n      select = false;\r\n    }\r\n    if (grid.rowSelectionMode !== \"multiple\") {\r\n      append = false;\r\n      range = false;\r\n    }\r\n    if (!row) {\r\n      return state;\r\n    }\r\n\r\n    let { rowFocused, rowsSelected, cellFocused, cellSelected } = state;\r\n\r\n    rowFocused = row;\r\n    cellFocused = cell;\r\n    if (range) {\r\n      if (!this.rangeStart) {\r\n        if (rangeStartOn === \"focus\") {\r\n          this.rangeStart = state.rowFocused;\r\n          this.rangeValue = append ? !state.rowFocused.selected : true;\r\n        } else if (rangeStartOn === \"last-selected\") {\r\n          this.rangeStart = this.lastSelected ?? state.rowFocused;\r\n          this.rangeValue = append ? this.lastSelected.selected : true;\r\n        }\r\n      }\r\n\r\n      const rangeRows = this.manager.getRowsRange(this.rangeStart ?? row, row);\r\n\r\n      if (this.rangeValue) {\r\n        if (append) {\r\n          rowsSelected = Array.from(new Set(rowsSelected.concat(rangeRows)));\r\n        } else {\r\n          rowsSelected = this.preserveInstanceIfSame(\r\n            rangeRows,\r\n            state.rowsSelected\r\n          );\r\n        }\r\n        cellSelected =\r\n          cell ||\r\n          row.getCell(cellSelected?.column || this.manager.getFirstColumn());\r\n      } else {\r\n        rowsSelected = rowsSelected.filter(\r\n          rowSelected => !rangeRows.includes(rowSelected)\r\n        );\r\n        cellSelected = null;\r\n      }\r\n    } else if (append) {\r\n      this.rangeStart = null;\r\n      this.lastSelected = row;\r\n\r\n      if (rowsSelected.includes(row)) {\r\n        rowsSelected = rowsSelected.filter(rowSelected => rowSelected !== row);\r\n        cellSelected = state.cellSelected?.row === row ? null : cellSelected;\r\n      } else {\r\n        rowsSelected = [...rowsSelected, row];\r\n        cellSelected =\r\n          cell ||\r\n          row.getCell(cellSelected?.column || this.manager.getFirstColumn());\r\n      }\r\n    } else if (select) {\r\n      this.rangeStart = null;\r\n      this.lastSelected = row;\r\n\r\n      if (!(context && state.rowsSelected.includes(row))) {\r\n        rowsSelected = this.preserveInstanceIfSame([row], state.rowsSelected);\r\n      }\r\n      cellSelected =\r\n        cell ||\r\n        row.getCell(cellSelected?.column || this.manager.getFirstColumn());\r\n    } else {\r\n      this.rangeStart = null;\r\n    }\r\n\r\n    return { rowFocused, rowsSelected, cellFocused, cellSelected };\r\n  }\r\n\r\n  selectAll(state: ManagerSelectionState, value = true): ManagerSelectionState {\r\n    if (this.manager.grid.rowSelectionMode === \"none\") {\r\n      return this.selectionStateNone;\r\n    }\r\n\r\n    const rows = this.manager.getRows();\r\n    let rowFocused = state.rowFocused;\r\n    let rowsSelected = state.rowsSelected;\r\n    let cellFocused = state.cellFocused;\r\n    let cellSelected = state.cellSelected;\r\n\r\n    rowFocused ??= this.manager.getFirstRow();\r\n    cellFocused ??= rowFocused?.getCell(\r\n      state.cellFocused?.column || this.manager.getFirstColumn()\r\n    );\r\n\r\n    if (value) {\r\n      rowsSelected = rows;\r\n      cellSelected = cellFocused;\r\n    } else {\r\n      rowsSelected = [];\r\n      cellSelected = null;\r\n    }\r\n\r\n    return { rowFocused, rowsSelected, cellFocused, cellSelected };\r\n  }\r\n\r\n  selectSet(\r\n    state: ManagerSelectionState,\r\n    row: HTMLChGridRowElement,\r\n    cell: HTMLChGridCellElement,\r\n    value = true\r\n  ): ManagerSelectionState {\r\n    let append = true;\r\n\r\n    if (this.manager.grid.rowSelectionMode === \"none\") {\r\n      return this.selectionStateNone;\r\n    }\r\n    if (this.manager.grid.rowSelectionMode !== \"multiple\") {\r\n      append = false;\r\n    }\r\n\r\n    let rowFocused = state.rowFocused;\r\n    let rowsSelected = state.rowsSelected;\r\n    let cellFocused = state.cellFocused;\r\n    let cellSelected = state.cellSelected;\r\n\r\n    rowFocused = row;\r\n    cellFocused = cell;\r\n    if (value) {\r\n      if (append) {\r\n        rowsSelected = rowsSelected.includes(row)\r\n          ? rowsSelected\r\n          : [...rowsSelected, row];\r\n      } else {\r\n        rowsSelected = rowsSelected.includes(row) ? rowsSelected : [row];\r\n      }\r\n      cellSelected = cell;\r\n    } else {\r\n      rowsSelected = !rowsSelected.includes(row)\r\n        ? rowsSelected\r\n        : rowsSelected.filter(rowSelected => rowSelected !== row);\r\n      cellSelected = null;\r\n    }\r\n\r\n    return { rowFocused, rowsSelected, cellFocused, cellSelected };\r\n  }\r\n\r\n  moveFirstRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const firstRow = this.manager.getFirstRow();\r\n\r\n    if (firstRow) {\r\n      return this.select(\r\n        state,\r\n        firstRow,\r\n        firstRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  movePreviousRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const previousRow = this.manager.getPreviousRow(state.rowFocused);\r\n\r\n    if (previousRow) {\r\n      return this.select(\r\n        state,\r\n        previousRow,\r\n        previousRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveNextRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const nextRow = this.manager.getNextRow(state.rowFocused);\r\n\r\n    if (nextRow) {\r\n      return this.select(\r\n        state,\r\n        nextRow,\r\n        nextRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveLastRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const lastRow = this.manager.getLastRow();\r\n\r\n    if (lastRow) {\r\n      return this.select(\r\n        state,\r\n        lastRow,\r\n        lastRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  movePreviousPageRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const rows = this.manager.getRows();\r\n    const rowsPerPage = this.manager.getRowsPerPage();\r\n    const previousPageRow =\r\n      rows[Math.max(rows.indexOf(state.rowFocused) - rowsPerPage, 0)];\r\n\r\n    if (previousPageRow) {\r\n      return this.select(\r\n        state,\r\n        previousPageRow,\r\n        previousPageRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveNextPageRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const rows = this.manager.getRows();\r\n    const rowsPerPage = this.manager.getRowsPerPage();\r\n    const nextPageRow =\r\n      rows[\r\n        Math.min(rows.indexOf(state.rowFocused) + rowsPerPage, rows.length - 1)\r\n      ];\r\n\r\n    if (nextPageRow) {\r\n      return this.select(\r\n        state,\r\n        nextPageRow,\r\n        nextPageRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  movePreviousCell(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean\r\n  ): ManagerSelectionState {\r\n    const previousCell = this.manager.getPreviousCell(state.cellFocused);\r\n\r\n    if (previousCell) {\r\n      return this.select(\r\n        state,\r\n        state.rowFocused,\r\n        previousCell,\r\n        select,\r\n        false,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveNextCell(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean\r\n  ): ManagerSelectionState {\r\n    const nextCell = this.manager.getNextCell(state.cellFocused);\r\n\r\n    if (nextCell) {\r\n      return this.select(\r\n        state,\r\n        state.rowFocused,\r\n        nextCell,\r\n        select,\r\n        false,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  markRow(\r\n    row: HTMLChGridRowElement,\r\n    checked: boolean,\r\n    range: boolean,\r\n    currentRowsMarked: HTMLChGridRowElement[]\r\n  ): HTMLChGridRowElement[] {\r\n    if (row) {\r\n      if (range) {\r\n        const value = !row.marked;\r\n        const rows = this.manager.getRowsRange(this.lastRowMarked ?? row, row);\r\n\r\n        this.lastRowMarked = row;\r\n\r\n        if (value) {\r\n          return currentRowsMarked.concat(\r\n            rows.filter(row => !currentRowsMarked.includes(row))\r\n          );\r\n        }\r\n        return currentRowsMarked.filter(row => !rows.includes(row));\r\n      }\r\n      this.lastRowMarked = row;\r\n\r\n      if (checked && !currentRowsMarked.includes(row)) {\r\n        return currentRowsMarked.concat([row]);\r\n      }\r\n      if (!checked && currentRowsMarked.includes(row)) {\r\n        return currentRowsMarked.filter(r => r !== row);\r\n      }\r\n    }\r\n\r\n    return currentRowsMarked;\r\n  }\r\n\r\n  markRows(\r\n    rowFocused: HTMLChGridRowElement,\r\n    rowsMarked: HTMLChGridRowElement[],\r\n    rowsSelected: HTMLChGridRowElement[]\r\n  ): HTMLChGridRowElement[] {\r\n    const rows = rowsSelected.includes(rowFocused)\r\n      ? rowsSelected\r\n      : [rowFocused];\r\n\r\n    if (rows.some(row => !row.marked)) {\r\n      return Array.from(new Set(rowsMarked.concat(rows)));\r\n    }\r\n    return rowsMarked.filter(row => !rows.includes(row));\r\n  }\r\n\r\n  markAllRows(value = true): HTMLChGridRowElement[] {\r\n    if (value) {\r\n      return this.manager.getRows();\r\n    }\r\n    return [];\r\n  }\r\n\r\n  syncRowSelector(\r\n    rows: HTMLChGridRowElement[],\r\n    previous: HTMLChGridRowElement[] = [],\r\n    selectorMode: \"select\" | \"mark\"\r\n  ) {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === selectorMode) {\r\n      const indexColumnSelector = columnSelector.physicalOrder - 1;\r\n\r\n      previous\r\n        ?.filter(x => !rows.includes(x))\r\n        .forEach(row => {\r\n          row.marked = false;\r\n          const cell = row.children[\r\n            indexColumnSelector\r\n          ] as HTMLChGridCellElement;\r\n          cell.setSelectorChecked(false);\r\n        });\r\n\r\n      rows?.forEach(row => {\r\n        row.marked = columnSelector.richRowSelectorMode === \"mark\";\r\n        const cell = row.children[indexColumnSelector] as HTMLChGridCellElement;\r\n        cell.setSelectorChecked(true);\r\n      });\r\n\r\n      this.syncColumnSelector(rows.length, columnSelector);\r\n    }\r\n  }\r\n\r\n  syncColumnSelector(length: number, columnSelector?: HTMLChGridColumnElement) {\r\n    columnSelector ??= this.manager.columns.getColumnSelector();\r\n\r\n    if (length === 0) {\r\n      columnSelector.richRowSelectorState = \"\";\r\n    } else if (length === this.manager.getRows().length) {\r\n      columnSelector.richRowSelectorState = \"checked\";\r\n    } else {\r\n      columnSelector.richRowSelectorState = \"indeterminate\";\r\n    }\r\n  }\r\n\r\n  private preserveInstanceIfSame(\r\n    newSelection: HTMLChGridRowElement[],\r\n    oldSelection: HTMLChGridRowElement[]\r\n  ): HTMLChGridRowElement[] {\r\n    return newSelection.length === oldSelection.length &&\r\n      newSelection.every(item => oldSelection.includes(item))\r\n      ? oldSelection\r\n      : newSelection;\r\n  }\r\n}\r\n","import HTMLChGridRowElement from \"./grid-row/ch-grid-row\";\r\nimport HTMLChGridCellElement from \"./grid-cell/ch-grid-cell\";\r\nimport { ChGridManager } from \"./ch-grid-manager\";\r\n\r\nexport class ChGridManagerRowDrag {\r\n  private readonly manager: ChGridManager;\r\n  private row: HTMLChGridRowElement;\r\n  private rowIndex: number;\r\n  private rowShadow: HTMLDivElement;\r\n  private dragMouseMoveFn = this.dragMouseMoveHandler.bind(this);\r\n\r\n  constructor(manager: ChGridManager) {\r\n    this.manager = manager;\r\n  }\r\n\r\n  public dragStart(row: HTMLChGridRowElement) {\r\n    this.row = row;\r\n    this.rowIndex = this.manager.getGridRowIndex(row);\r\n\r\n    this.defineListeners();\r\n    this.createRowShadow();\r\n    this.floatRow();\r\n    this.updateRowPosition();\r\n  }\r\n\r\n  private dragMouseMoveHandler(eventInfo: MouseEvent) {\r\n    const target = eventInfo.target as HTMLElement;\r\n    const rowHover = target.closest(\"ch-grid-row\") as HTMLChGridRowElement;\r\n\r\n    if (\r\n      rowHover &&\r\n      rowHover.parentElement === this.row.parentElement &&\r\n      rowHover.grid === this.manager.grid\r\n    ) {\r\n      const rowHoverIndex = this.manager.getGridRowIndex(rowHover);\r\n      const rowHoverGridPosition = rowHoverIndex + 2; // +1 RowHeaderColumn, +1 array start at 1\r\n      const offsetPosition = this.rowIndex < rowHoverIndex ? -1 : 1;\r\n\r\n      if (\r\n        this.rowShadow.style.getPropertyValue(\"--row-shadow-row-start\") !==\r\n        `${rowHoverGridPosition}`\r\n      ) {\r\n        this.rowShadow.style.setProperty(\r\n          \"--row-shadow-row-start\",\r\n          `${rowHoverGridPosition}`\r\n        );\r\n      } else {\r\n        this.rowShadow.style.setProperty(\r\n          \"--row-shadow-row-start\",\r\n          `${rowHoverGridPosition + offsetPosition}`\r\n        );\r\n      }\r\n\r\n      this.updateRowPosition();\r\n    }\r\n  }\r\n\r\n  private dragMouseUpHandler() {\r\n    document.removeEventListener(\"mousemove\", this.dragMouseMoveFn);\r\n\r\n    const dropPosition = parseInt(\r\n      this.rowShadow.style.getPropertyValue(\"--row-shadow-row-start\")\r\n    );\r\n    const rowDrop = this.manager.grid\r\n      .querySelectorAll(\"ch-grid-row\")\r\n      .item(dropPosition - 2);\r\n\r\n    if (dropPosition < this.rowIndex + 2) {\r\n      rowDrop.before(this.row);\r\n    }\r\n    if (dropPosition > this.rowIndex + 2) {\r\n      rowDrop.after(this.row);\r\n    }\r\n\r\n    this.unfloatRow();\r\n    this.rowShadow.remove();\r\n\r\n    this.row = null;\r\n    this.rowShadow = null;\r\n  }\r\n\r\n  private defineListeners() {\r\n    document.addEventListener(\"mousemove\", this.dragMouseMoveFn, {\r\n      passive: true\r\n    });\r\n    document.addEventListener(\"mouseup\", this.dragMouseUpHandler.bind(this), {\r\n      once: true\r\n    });\r\n  }\r\n\r\n  private createRowShadow() {\r\n    const rowHeight = this.manager.getRowHeight(this.row);\r\n\r\n    this.rowShadow = document.createElement(\"div\");\r\n    this.rowShadow.style.display = \"contents\";\r\n\r\n    this.manager.getColumnsWidth().forEach(width => {\r\n      const column = document.createElement(\"div\");\r\n\r\n      column.style.opacity = \"0\";\r\n      column.style.minWidth = width;\r\n      column.style.height = `${rowHeight}px`;\r\n      column.style.gridRowStart = \"var(--row-shadow-row-start)\";\r\n\r\n      this.rowShadow.append(column);\r\n    });\r\n  }\r\n\r\n  private floatRow() {\r\n    const columnsWidth = this.manager.getColumnsWidth();\r\n    const rowWidth = this.manager.gridLayout.clientWidth;\r\n\r\n    this.row.before(this.rowShadow);\r\n    this.row.setAttribute(\"dragging\", \"\");\r\n    this.row.style.width = `${rowWidth}px`;\r\n\r\n    this.row\r\n      .querySelectorAll(\":scope > ch-grid-cell\")\r\n      .forEach((cell: HTMLChGridCellElement, i) => {\r\n        const columnPosition = parseInt(\r\n          this.manager.gridLayout.style.getPropertyValue(\r\n            `--ch-grid-column-${i + 1}-position`\r\n          )\r\n        );\r\n\r\n        if (!cell.hidden) {\r\n          cell.style.width = columnsWidth[columnPosition - 1];\r\n          cell.style.order = `${columnPosition}`;\r\n        }\r\n      });\r\n  }\r\n\r\n  private unfloatRow() {\r\n    this.row.removeAttribute(\"dragging\");\r\n    this.row.style.width = \"\";\r\n\r\n    this.row\r\n      .querySelectorAll(\":scope > ch-grid-cell\")\r\n      .forEach((cell: HTMLChGridCellElement) => {\r\n        cell.style.width = \"\";\r\n        cell.style.order = \"\";\r\n      });\r\n  }\r\n\r\n  private updateRowPosition() {\r\n    const rect = this.rowShadow.children[0].getBoundingClientRect();\r\n\r\n    this.row.style.top = `${rect.top}px`;\r\n    this.row.style.left = `${rect.left}px`;\r\n  }\r\n}\r\n","import { ChGridManager } from \"./ch-grid-manager\";\r\n\r\nexport class ChGridManagerRowActions {\r\n  private readonly manager: ChGridManager;\r\n\r\n  showOnRowHover: HTMLChGridRowActionsElement;\r\n  showOnRowActions: HTMLChGridRowActionsElement;\r\n  showOnRowContext: HTMLChGridRowActionsElement;\r\n\r\n  constructor(manager: ChGridManager) {\r\n    this.manager = manager;\r\n    this.manager.grid\r\n      .querySelectorAll(\"ch-grid-row-actions\")\r\n      ?.forEach(rowActions => {\r\n        if (rowActions.showOnRowHover) {\r\n          this.showOnRowHover = rowActions;\r\n        }\r\n        if (rowActions.showOnRowActions) {\r\n          this.showOnRowActions = rowActions;\r\n        }\r\n        if (rowActions.showOnRowContext) {\r\n          this.showOnRowContext = rowActions;\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { ChGridManager } from \"./ch-grid-manager\";\r\n\r\nexport class ChGridManagerColumnResize {\r\n  private manager: ChGridManager;\r\n  private column: HTMLChGridColumnElement;\r\n  private columnWidthStart: number;\r\n  private columnSizeStart: CssValue;\r\n  private columnAfter: HTMLChGridColumnElement;\r\n  private columnAfterWidthStart: number;\r\n  private columnAfterSizeStart: CssValue;\r\n  private dragDirection: number;\r\n  private resizingFn: (deltaWidth: number) => void;\r\n  private resizeEndFn: () => void;\r\n\r\n  constructor(manager: ChGridManager, columnId: string, isRTL: boolean) {\r\n    this.manager = manager;\r\n    this.dragDirection = isRTL ? -1 : 1;\r\n\r\n    if (this.manager.grid.columnResizeMode === \"splitter\") {\r\n      this.resizingFn = this.resizingSplitter;\r\n      this.resizeEndFn = this.resizeEndSplitter;\r\n    } else {\r\n      this.resizingFn = this.resizingSingle;\r\n      this.resizeEndFn = null;\r\n    }\r\n\r\n    this.column = this.manager.columns.getColumn(columnId);\r\n    this.columnWidthStart = this.column.getBoundingClientRect().width;\r\n    this.columnSizeStart = this.parseCSSValue(this.column.size);\r\n\r\n    this.columnAfter = this.manager.getNextColumn(this.column);\r\n    this.columnAfterWidthStart =\r\n      this.columnAfter?.getBoundingClientRect().width;\r\n    this.columnAfterSizeStart = this.parseCSSValue(this.columnAfter.size);\r\n  }\r\n\r\n  resizing(deltaWidth: number) {\r\n    this.resizingFn(deltaWidth);\r\n  }\r\n\r\n  resizeEnd() {\r\n    if (this.resizeEndFn) {\r\n      this.resizeEndFn();\r\n    }\r\n  }\r\n\r\n  private resizingSingle = (deltaWidth: number) => {\r\n    const columnWidth = this.columnWidthStart - deltaWidth * this.dragDirection;\r\n    if (columnWidth >= 0) {\r\n      this.column.size = `minmax(min-content, ${columnWidth}px)`;\r\n    }\r\n  };\r\n\r\n  private resizingSplitter = (deltaWidth: number) => {\r\n    const columnWidth = this.columnWidthStart - deltaWidth * this.dragDirection;\r\n    if (columnWidth >= 0) {\r\n      if (this.columnSizeStart) {\r\n        this.column.size = this.convertUnit(\r\n          this.columnSizeStart,\r\n          this.columnWidthStart,\r\n          columnWidth\r\n        );\r\n      } else {\r\n        this.column.size = `minmax(min-content, ${columnWidth}px)`;\r\n      }\r\n    }\r\n\r\n    if (this.columnAfter) {\r\n      const columnAfterWidth =\r\n        this.columnAfterWidthStart + deltaWidth * this.dragDirection;\r\n      if (columnAfterWidth >= 0) {\r\n        if (this.columnAfterSizeStart) {\r\n          this.columnAfter.size = this.convertUnit(\r\n            this.columnAfterSizeStart,\r\n            this.columnAfterWidthStart,\r\n            columnAfterWidth\r\n          );\r\n        } else {\r\n          this.columnAfter.size = `minmax(min-content, ${columnAfterWidth}px)`;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private resizeEndSplitter() {\r\n    const columnWidthEnd = this.column.getBoundingClientRect().width;\r\n    this.column.size = this.convertUnit(\r\n      this.columnSizeStart,\r\n      this.columnWidthStart,\r\n      columnWidthEnd\r\n    );\r\n\r\n    if (this.columnAfter) {\r\n      const columnAfterWidthEnd =\r\n        this.columnAfterWidthStart - (columnWidthEnd - this.columnWidthStart);\r\n      this.columnAfter.size = this.convertUnit(\r\n        this.columnSizeStart,\r\n        this.columnWidthStart,\r\n        columnAfterWidthEnd\r\n      );\r\n    }\r\n  }\r\n\r\n  private parseCSSValue(cssValue: string): CssValue {\r\n    const match = cssValue.match(/([+-]?[\\d.]+)([\\w%]+)/);\r\n    if (match) {\r\n      const number = parseFloat(match[1]);\r\n      const unit = match[2];\r\n      return { number, unit };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private convertUnit(\r\n    startSize: CssValue,\r\n    startWidth: number,\r\n    newWidth: number\r\n  ): string {\r\n    return `${(newWidth * startSize.number) / startWidth}${startSize.unit}`;\r\n  }\r\n}\r\n\r\ntype CssValue = {\r\n  number: number;\r\n  unit: string;\r\n};\r\n","import { IChGridCollapsible, CSSProperties } from \"./ch-grid-types\";\r\nimport { ChGridManagerColumnDrag } from \"./ch-grid-manager-column-drag\";\r\n\r\nimport HTMLChGridRowElement from \"./grid-row/ch-grid-row\";\r\nimport { ChGridManagerColumns } from \"./ch-grid-manager-columns\";\r\nimport HTMLChGridCellElement from \"./grid-cell/ch-grid-cell\";\r\nimport { ChGridManagerSelection } from \"./ch-grid-manager-selection\";\r\nimport { ChGridManagerRowDrag } from \"./ch-grid-manager-row-drag\";\r\nimport { ChGridManagerRowActions } from \"./ch-grid-manager-row-actions\";\r\nimport { adoptGlobalStyleSheet } from \"../../deprecated-components/style/ch-global-stylesheet\";\r\nimport { ChGridManagerColumnResize } from \"./ch-grid-manager-column-resize\";\r\n\r\nenum StyleRule {\r\n  BASE_LAYER,\r\n  COLUMNS_WIDTH\r\n}\r\n\r\nexport class ChGridManager {\r\n  private styleSheet = new CSSStyleSheet();\r\n  private gridLayoutElement: HTMLElement;\r\n  private columnDragManager: ChGridManagerColumnDrag;\r\n  private columnResizeManager: ChGridManagerColumnResize;\r\n  private rowDragManager: ChGridManagerRowDrag;\r\n\r\n  readonly grid: HTMLChGridElement;\r\n  readonly selection: ChGridManagerSelection;\r\n  readonly columns: ChGridManagerColumns;\r\n  readonly rowActions: ChGridManagerRowActions;\r\n\r\n  constructor(grid: HTMLChGridElement) {\r\n    this.grid = grid;\r\n\r\n    this.styleSheet.insertRule(`:host {}`, StyleRule.BASE_LAYER);\r\n    this.styleSheet.insertRule(\".main {}\", StyleRule.COLUMNS_WIDTH);\r\n    this.grid.shadowRoot.adoptedStyleSheets.push(this.styleSheet);\r\n    adoptGlobalStyleSheet(this.grid.shadowRoot.adoptedStyleSheets);\r\n\r\n    this.columns = new ChGridManagerColumns(this);\r\n    this.selection = new ChGridManagerSelection(this);\r\n    this.rowActions = new ChGridManagerRowActions(this);\r\n  }\r\n\r\n  get gridLayout(): HTMLElement {\r\n    return this.gridLayoutElement;\r\n  }\r\n\r\n  componentDidLoad(gridLayout: HTMLElement) {\r\n    this.gridLayoutElement = gridLayout;\r\n  }\r\n\r\n  getColumns() {\r\n    return this.columns.getColumns();\r\n  }\r\n\r\n  getColumnsWidth(): string[] {\r\n    return getComputedStyle(this.gridLayout).gridTemplateColumns.split(\" \");\r\n  }\r\n\r\n  getColumnsetHeight(): number {\r\n    const gridColumnsHeight = getComputedStyle(\r\n      this.gridLayout\r\n    ).gridTemplateRows.split(\" \");\r\n\r\n    return parseInt(gridColumnsHeight[0]) || 0;\r\n  }\r\n\r\n  getFirstColumn(): HTMLChGridColumnElement {\r\n    return this.columns.getColumnsFirstLast().columnFirst;\r\n  }\r\n\r\n  getFirstRow(): HTMLChGridRowElement {\r\n    return this.grid.querySelector(\"ch-grid-row\");\r\n  }\r\n\r\n  getScrollOffsetTop(): number {\r\n    return this.gridLayout.offsetTop + this.getColumnsetHeight();\r\n  }\r\n\r\n  getScrollOffsetLeft(): number {\r\n    return this.columns.getColumns(true).reduce((offsetRight, column) => {\r\n      return column.freeze === \"start\" && !column.hidden\r\n        ? offsetRight + column.offsetWidth\r\n        : offsetRight;\r\n    }, 0);\r\n  }\r\n\r\n  getScrollOffsetRight(): number {\r\n    return this.columns.getColumns(true).reduce((offsetRight, column) => {\r\n      return column.freeze === \"end\" && !column.hidden\r\n        ? offsetRight + column.offsetWidth\r\n        : offsetRight;\r\n    }, 0);\r\n  }\r\n\r\n  getPreviousRow(current: HTMLChGridRowElement): HTMLChGridRowElement {\r\n    const rows = this.getRows();\r\n    const i = rows.indexOf(current);\r\n\r\n    return rows\r\n      .slice(0, i)\r\n      .reverse()\r\n      .find(row => row.isVisible());\r\n  }\r\n\r\n  getNextRow(current: HTMLChGridRowElement): HTMLChGridRowElement {\r\n    const rows = this.getRows();\r\n    const i = rows.indexOf(current);\r\n\r\n    return rows.slice(i + 1).find(row => row.isVisible());\r\n  }\r\n\r\n  getLastRow(): HTMLChGridRowElement {\r\n    const rows = this.getRows();\r\n\r\n    return rows.reverse().find(row => row.isVisible());\r\n  }\r\n\r\n  getPreviousColumn(column: HTMLChGridColumnElement): HTMLChGridColumnElement {\r\n    return this.columns.getColumns().reduce((previous, current) => {\r\n      return current.order < column.order &&\r\n        !current.hidden &&\r\n        (!previous || current.order > previous.order)\r\n        ? current\r\n        : previous;\r\n    }, null);\r\n  }\r\n\r\n  getNextColumn(column: HTMLChGridColumnElement): HTMLChGridColumnElement {\r\n    return this.columns.getColumns().reduce((previous, current) => {\r\n      return current.order > column.order &&\r\n        !current.hidden &&\r\n        (!previous || current.order < previous.order)\r\n        ? current\r\n        : previous;\r\n    }, null);\r\n  }\r\n\r\n  getPreviousCell(\r\n    current: HTMLChGridCellElement\r\n  ): HTMLChGridCellElement | void {\r\n    const previousColumn = this.getPreviousColumn(current.column);\r\n\r\n    if (previousColumn) {\r\n      return current.row.querySelector(\r\n        `:scope > ch-grid-cell:nth-of-type(${previousColumn.physicalOrder})`\r\n      ) as HTMLChGridCellElement;\r\n    }\r\n  }\r\n\r\n  getNextCell(current: HTMLChGridCellElement): HTMLChGridCellElement | void {\r\n    const nextColumn = this.getNextColumn(current.column);\r\n\r\n    if (nextColumn) {\r\n      return current.row.querySelector(\r\n        `:scope > ch-grid-cell:nth-of-type(${nextColumn.physicalOrder})`\r\n      ) as HTMLChGridCellElement;\r\n    }\r\n  }\r\n\r\n  getGridRowIndex(row: HTMLChGridRowElement): number {\r\n    return Array.prototype.indexOf.call(\r\n      this.grid.querySelectorAll(\"ch-grid-row, ch-grid-rowset-legend\"),\r\n      row\r\n    );\r\n  }\r\n\r\n  getRowsetRowIndex(row: HTMLChGridRowElement): number {\r\n    return Array.prototype.indexOf.call(row.parentElement.children, row);\r\n  }\r\n\r\n  getRowHeight(row: HTMLChGridRowElement): number {\r\n    const gridRowsHeight = getComputedStyle(\r\n      this.gridLayout\r\n    ).gridTemplateRows.split(\" \");\r\n    const rowIndex = this.getGridRowIndex(row) + 1;\r\n\r\n    return parseInt(gridRowsHeight[rowIndex]) || 0;\r\n  }\r\n\r\n  getRowsPerPage(): number {\r\n    const gridHeight = this.gridLayout.clientHeight;\r\n    const columnsHeight = this.getColumnsetHeight();\r\n    const rowHeight = this.getRowHeight(this.getFirstRow());\r\n\r\n    return Math.floor((gridHeight - columnsHeight) / rowHeight);\r\n  }\r\n\r\n  getRow(rowId: string): HTMLChGridRowElement {\r\n    return this.grid.querySelector(`ch-grid-row[rowid=\"${rowId}\"]`);\r\n  }\r\n\r\n  getRows(state: \"all\" | \"visible\" = \"all\"): HTMLChGridRowElement[] {\r\n    const rows = Array.from(\r\n      this.grid.querySelectorAll(`ch-grid-row`)\r\n    ) as HTMLChGridRowElement[];\r\n\r\n    if (state === \"visible\") {\r\n      return rows.filter(row => row.isVisible());\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  getRowsRange(\r\n    start: HTMLChGridRowElement,\r\n    end: HTMLChGridRowElement\r\n  ): HTMLChGridRowElement[] {\r\n    const rows = this.getRows();\r\n    const indexStart = rows.indexOf(start);\r\n    const indexEnd = rows.indexOf(end);\r\n\r\n    return rows\r\n      .slice(Math.min(indexStart, indexEnd), Math.max(indexStart, indexEnd) + 1)\r\n      .filter(row => row.isVisible());\r\n  }\r\n\r\n  getRowEventTarget(eventInfo: Event): HTMLChGridRowElement {\r\n    return eventInfo\r\n      .composedPath()\r\n      .find(\r\n        (target: HTMLElement) => target.tagName === \"CH-GRID-ROW\"\r\n      ) as HTMLChGridRowElement;\r\n  }\r\n\r\n  isRowActionsEventTarget(eventInfo: Event): boolean {\r\n    return (\r\n      eventInfo\r\n        .composedPath()\r\n        .find(\r\n          (target: HTMLElement) => target.tagName === \"CH-GRID-ROW-ACTIONS\"\r\n        ) != null\r\n    );\r\n  }\r\n\r\n  getCell(\r\n    cellId?: string,\r\n    rowId?: string,\r\n    columnId?: string\r\n  ): HTMLChGridCellElement | void {\r\n    if (cellId) {\r\n      return this.grid.querySelector(\r\n        `ch-grid-cell[cellid=\"${cellId}\"]`\r\n      ) as HTMLChGridCellElement;\r\n    }\r\n    if (rowId && columnId) {\r\n      const row = this.getRow(rowId);\r\n      const column = this.columns.getColumn(columnId);\r\n\r\n      if (row && column) {\r\n        return row.getCell(column);\r\n      }\r\n    }\r\n  }\r\n\r\n  getCellEventTarget(eventInfo: Event): HTMLChGridCellElement {\r\n    return eventInfo\r\n      .composedPath()\r\n      .find(\r\n        (target: HTMLElement) => target.tagName === \"CH-GRID-CELL\"\r\n      ) as HTMLChGridCellElement;\r\n  }\r\n\r\n  columnDragStart(columnId: string) {\r\n    this.columnDragManager = new ChGridManagerColumnDrag(\r\n      columnId,\r\n      this.columns.getColumns(),\r\n      this.isRTLDirection()\r\n    );\r\n  }\r\n\r\n  columnDragging(position: number): boolean {\r\n    return this.columnDragManager.dragging(position);\r\n  }\r\n\r\n  columnDragEnd() {\r\n    this.columnDragManager.dragEnd();\r\n    this.columnDragManager = null;\r\n  }\r\n\r\n  columnResizeStart(columnId: string) {\r\n    this.columnResizeManager = new ChGridManagerColumnResize(\r\n      this,\r\n      columnId,\r\n      this.isRTLDirection()\r\n    );\r\n  }\r\n\r\n  columnResizing(deltaWidth: number) {\r\n    this.columnResizeManager.resizing(deltaWidth);\r\n  }\r\n\r\n  columnResizeEnd() {\r\n    this.columnResizeManager.resizeEnd();\r\n    this.columnResizeManager = null;\r\n  }\r\n\r\n  rowDragStart(row: HTMLChGridRowElement) {\r\n    this.rowDragManager = new ChGridManagerRowDrag(this);\r\n    this.rowDragManager.dragStart(row);\r\n  }\r\n\r\n  getGridStyle(): CSSProperties {\r\n    return {\r\n      display: \"grid\",\r\n      ...this.getGridTemplateColumns(),\r\n      ...this.getRowBoxSimulationStyle(),\r\n      ...this.getDragTransitionStyle(),\r\n      ...this.getColumnsStyle()\r\n    };\r\n  }\r\n\r\n  setBaseLayer(value: number) {\r\n    this.styleSheet.deleteRule(StyleRule.BASE_LAYER);\r\n    this.styleSheet.insertRule(\r\n      `:host { --ch-grid-base-layer: ${value}; }`,\r\n      StyleRule.BASE_LAYER\r\n    );\r\n  }\r\n\r\n  setColumnWidthVariables(columnsWidth: number[]) {\r\n    this.styleSheet.deleteRule(StyleRule.COLUMNS_WIDTH);\r\n    this.styleSheet.insertRule(\r\n      `.main { ${columnsWidth\r\n        .map(\r\n          (columnWidth, columnIndex) =>\r\n            `--ch-grid-column-${columnIndex + 1}-width:${columnWidth}px;`\r\n        )\r\n        .join(\"\\n\")} }`,\r\n      StyleRule.COLUMNS_WIDTH\r\n    );\r\n  }\r\n\r\n  ensureRowVisible(row: HTMLChGridRowElement) {\r\n    let node: IChGridCollapsible = row.parentElement.closest(\r\n      \"ch-grid-row, ch-grid-rowset\"\r\n    );\r\n    const { columnFirst } = this.columns.getColumnsFirstLast();\r\n\r\n    while (node) {\r\n      node.collapsed = false;\r\n      node = node.parentElement.closest(\"ch-grid-row, ch-grid-rowset\");\r\n    }\r\n\r\n    if (row.children[columnFirst.physicalOrder]) {\r\n      this.ensureVisible(\r\n        row.children[columnFirst.physicalOrder] as HTMLChGridCellElement\r\n      );\r\n    }\r\n  }\r\n\r\n  ensureCellVisible(cell: HTMLChGridCellElement) {\r\n    let node: IChGridCollapsible = cell.closest(\"ch-grid-row, ch-grid-rowset\");\r\n\r\n    while (!cell.isVisible() && node) {\r\n      node.collapsed = false;\r\n      node = node.parentElement.closest(\"ch-grid-row, ch-grid-rowset\");\r\n    }\r\n\r\n    if (!cell.isVisible()) {\r\n      cell.column.hidden = false;\r\n    }\r\n\r\n    this.ensureVisible(cell);\r\n  }\r\n\r\n  private ensureVisible(cell: HTMLChGridCellElement) {\r\n    const isColumnFreeze = [\"start\", \"end\"].includes(cell.column.freeze);\r\n    const scroll = this.gridLayout;\r\n    const scrollOffsetTop = this.getScrollOffsetTop();\r\n    const scrollOffsetLeft = this.getScrollOffsetLeft();\r\n    const scrollOffsetRight = this.getScrollOffsetRight();\r\n\r\n    if (scroll.scrollTop + scrollOffsetTop > cell.offsetTop) {\r\n      scroll.scrollBy({\r\n        top: (scroll.scrollTop - cell.offsetTop + scrollOffsetTop) * -1\r\n      });\r\n    } else if (\r\n      scroll.scrollTop + scroll.offsetHeight <\r\n      cell.offsetTop + cell.offsetHeight\r\n    ) {\r\n      scroll.scrollBy({\r\n        top:\r\n          cell.offsetTop +\r\n          cell.offsetHeight -\r\n          (scroll.scrollTop + scroll.offsetHeight)\r\n      });\r\n    } else if (\r\n      scroll.scrollLeft + scrollOffsetLeft > cell.offsetLeft &&\r\n      !isColumnFreeze\r\n    ) {\r\n      scroll.scrollBy({\r\n        left: (scroll.scrollLeft - cell.offsetLeft + scrollOffsetLeft) * -1\r\n      });\r\n    } else if (\r\n      scroll.scrollLeft + scroll.clientWidth - scrollOffsetRight <\r\n        cell.offsetLeft + cell.offsetWidth &&\r\n      !isColumnFreeze\r\n    ) {\r\n      scroll.scrollBy({\r\n        left:\r\n          cell.offsetLeft +\r\n          cell.offsetWidth -\r\n          (scroll.scrollLeft + scroll.clientWidth - scrollOffsetRight)\r\n      });\r\n    }\r\n  }\r\n\r\n  private getGridTemplateColumns(): CSSProperties {\r\n    return {\r\n      \"grid-template-columns\": this.columns\r\n        .getColumns()\r\n        .map(column => `var(--ch-grid-column-${column.physicalOrder}-size)`)\r\n        .join(\" \")\r\n    };\r\n  }\r\n\r\n  private getRowBoxSimulationStyle(): CSSProperties {\r\n    const { columnFirst, columnLast } = this.columnDragManager\r\n      ? this.columnDragManager.getColumnsFirstLast()\r\n      : this.columns.getColumnsFirstLast();\r\n\r\n    if (!columnFirst || !columnLast) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      [`--ch-grid-column-${columnFirst.physicalOrder}-margin-start`]:\r\n        \"var(--ch-grid-fallback, inherit)\",\r\n      [`--ch-grid-column-${columnFirst.physicalOrder}-border-start`]:\r\n        \"var(--ch-grid-fallback, inherit)\",\r\n      [`--ch-grid-column-${columnFirst.physicalOrder}-padding-start`]:\r\n        \"var(--ch-grid-fallback, inherit)\",\r\n      [`--ch-grid-column-${columnLast.physicalOrder}-margin-end`]:\r\n        \"var(--ch-grid-fallback, inherit)\",\r\n      [`--ch-grid-column-${columnLast.physicalOrder}-border-end`]:\r\n        \"var(--ch-grid-fallback, inherit)\",\r\n      [`--ch-grid-column-${columnLast.physicalOrder}-padding-end`]:\r\n        \"var(--ch-grid-fallback, inherit)\"\r\n    };\r\n  }\r\n\r\n  private getDragTransitionStyle(): CSSProperties {\r\n    return {\r\n      \"--column-drag-transition-duration\": this.columnDragManager ? \".2s\" : \"0s\"\r\n    };\r\n  }\r\n\r\n  private getColumnsStyle(): CSSProperties {\r\n    return this.columns.getColumns().reduce((style, column) => {\r\n      return {\r\n        ...style,\r\n        ...this.getColumnStyle(column)\r\n      };\r\n    }, {} as CSSProperties);\r\n  }\r\n\r\n  private getColumnStyle(column: HTMLChGridColumnElement): CSSProperties {\r\n    return {\r\n      ...this.getColumnSizeStyle(column),\r\n      ...this.getColumnOrderStyle(column),\r\n      ...this.getColumnDisplayStyle(column),\r\n      ...this.getColumnFreezeStyle(column),\r\n      ...this.getColumnDraggingStyle(column),\r\n      ...this.getColumnIndentStyle(column)\r\n    };\r\n  }\r\n\r\n  private getColumnSizeStyle(column: HTMLChGridColumnElement): CSSProperties {\r\n    return {\r\n      [`--ch-grid-column-${column.order}-size`]: column.hidden\r\n        ? \"0px\"\r\n        : column.size\r\n    };\r\n  }\r\n\r\n  private getColumnOrderStyle(column: HTMLChGridColumnElement): CSSProperties {\r\n    return {\r\n      [`--ch-grid-column-${column.physicalOrder}-position`]:\r\n        column.order.toString()\r\n    };\r\n  }\r\n\r\n  private getColumnFreezeStyle(column: HTMLChGridColumnElement): CSSProperties {\r\n    switch (column.freeze) {\r\n      case \"start\":\r\n        return this.getColumnFreezeStartStyle(column);\r\n      case \"end\":\r\n        return this.getColumnFreezeEndStyle(column);\r\n    }\r\n  }\r\n\r\n  private getColumnFreezeStartStyle(\r\n    column: HTMLChGridColumnElement\r\n  ): CSSProperties {\r\n    const calcItems = [\"0px\"];\r\n\r\n    for (let i = 1; i < column.order; i++) {\r\n      calcItems.push(`var(--ch-grid-column-${i}-width)`);\r\n    }\r\n\r\n    return {\r\n      [`--ch-grid-column-${column.physicalOrder}-left-freeze`]: `calc(${calcItems.join(\r\n        \" + \"\r\n      )})`,\r\n      [`--ch-grid-column-${column.physicalOrder}-z-index-freeze`]:\r\n        \"var(--ch-grid-column-freeze-layer)\"\r\n    };\r\n  }\r\n\r\n  private getColumnFreezeEndStyle(\r\n    column: HTMLChGridColumnElement\r\n  ): CSSProperties {\r\n    const calcItems = [\"0px\"];\r\n    for (let i = this.columns.getColumns().length; i > column.order; i--) {\r\n      calcItems.push(`var(--ch-grid-column-${i}-width)`);\r\n    }\r\n\r\n    return {\r\n      [`--ch-grid-column-${column.physicalOrder}-right-freeze`]: `calc(${calcItems.join(\r\n        \" + \"\r\n      )})`,\r\n      [`--ch-grid-column-${column.physicalOrder}-z-index-freeze`]:\r\n        \"var(--ch-grid-column-freeze-layer)\"\r\n    };\r\n  }\r\n\r\n  private getColumnDisplayStyle(\r\n    column: HTMLChGridColumnElement\r\n  ): CSSProperties {\r\n    return column.hidden\r\n      ? {\r\n          [`--ch-grid-column-${column.physicalOrder}-display`]: \"none\"\r\n        }\r\n      : null;\r\n  }\r\n\r\n  private getColumnDraggingStyle(\r\n    column: HTMLChGridColumnElement\r\n  ): CSSProperties {\r\n    return this.columnDragManager\r\n      ? this.columnDragManager.getColumnStyle(column)\r\n      : null;\r\n  }\r\n\r\n  private getColumnIndentStyle(column: HTMLChGridColumnElement): CSSProperties {\r\n    return {\r\n      [`--ch-grid-column-${column.physicalOrder}-content`]:\r\n        column.order === 1 ? \"''\" : \"none\"\r\n    };\r\n  }\r\n\r\n  private isRTLDirection(): boolean {\r\n    return getComputedStyle(this.grid).direction === \"rtl\";\r\n  }\r\n}\r\n",":host {\r\n  display: flex;\r\n  position: relative;\r\n  flex-direction: column;\r\n  inline-size: 100%;\r\n\r\n  --ch-grid-cell-active-layer: calc(var(--ch-grid-base-layer) * 1);\r\n  --ch-grid-column-header-layer: calc(var(--ch-grid-base-layer) * 2);\r\n  --ch-grid-column-freeze-layer: calc(var(--ch-grid-base-layer) * 4);\r\n  --ch-grid-column-active-layer: calc(var(--ch-grid-base-layer) * 8);\r\n  --ch-grid-settings-layer: calc(var(--ch-grid-base-layer) * 16);\r\n}\r\n.main {\r\n  display: none;\r\n  grid-auto-flow: dense; /* necesario para poder reordenar las columnas */\r\n  grid-auto-rows: max-content;\r\n  overflow-x: auto;\r\n  user-select: none;\r\n  block-size: 100%;\r\n}\r\n","import \"./grid-row/ch-grid-row\";\r\nimport \"./grid-rowset/ch-grid-rowset\";\r\nimport \"./grid-cell/ch-grid-cell\";\r\n\r\nimport {\r\n  CSSProperties,\r\n  ChGridSelectionChangedEvent,\r\n  ChGridRowClickedEvent,\r\n  ChGridMarkingChangedEvent,\r\n  ChGridCellSelectionChangedEvent,\r\n  ChGridRowPressedEvent,\r\n  ChGridRowContextMenuEvent\r\n} from \"./ch-grid-types\";\r\nimport {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Listen,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n  h,\r\n  Method\r\n} from \"@stencil/core\";\r\n\r\nimport { ChGridManager } from \"./ch-grid-manager\";\r\nimport HTMLChGridCellElement, {\r\n  ChGridCellSelectorClickedEvent,\r\n  ChGridRowDragEvent\r\n} from \"./grid-cell/ch-grid-cell\";\r\nimport HTMLChGridRowElement from \"./grid-row/ch-grid-row\";\r\nimport {\r\n  ChGridColumnDragEvent,\r\n  ChGridColumnResizeEvent,\r\n  ChGridColumnSelectorClickedEvent\r\n} from \"./grid-column/ch-grid-column-types\";\r\nimport { ManagerSelectionState } from \"./ch-grid-manager-selection\";\r\nimport {\r\n  MouseEventButton,\r\n  MouseEventButtons,\r\n  focusComposedPath,\r\n  mouseEventHasButtonPressed,\r\n  mouseEventModifierKey\r\n} from \"../../components/common/helpers\";\r\n\r\n/**\r\n * The `ch-grid` component represents a Grid/TreeGrid of data, with rows and cells.\r\n * @deprecated Use `ch-tabular-grid` component instead.\r\n */\r\n@Component({\r\n  tag: \"ch-grid\",\r\n  styleUrl: \"ch-grid.scss\",\r\n  shadow: true\r\n})\r\nexport class ChGrid {\r\n  private manager: ChGridManager;\r\n  private gridLayoutElement: HTMLElement;\r\n  private settingsUI: HTMLChGridSettingsElement;\r\n\r\n  @Element() el: HTMLChGridElement;\r\n\r\n  @State() rowFocused: HTMLChGridRowElement;\r\n  @Watch(\"rowFocused\")\r\n  rowFocusedHandler(row: HTMLChGridRowElement, previous: HTMLChGridRowElement) {\r\n    if (row) {\r\n      row.focused = true;\r\n    }\r\n    if (previous) {\r\n      previous.focused = false;\r\n    }\r\n  }\r\n\r\n  @State() cellFocused: HTMLChGridCellElement;\r\n  @Watch(\"cellFocused\")\r\n  cellFocusedHandler(\r\n    cell: HTMLChGridCellElement,\r\n    previous: HTMLChGridCellElement\r\n  ) {\r\n    if (cell) {\r\n      cell.focused = true;\r\n    }\r\n    if (previous) {\r\n      previous.focused = false;\r\n    }\r\n  }\r\n\r\n  @State() rowHighlighted: HTMLChGridRowElement;\r\n  @Watch(\"rowHighlighted\")\r\n  rowHighlightedHandler(\r\n    row: HTMLChGridRowElement,\r\n    previous: HTMLChGridRowElement\r\n  ) {\r\n    // highlight\r\n    if (row) {\r\n      row.highlighted = true;\r\n    }\r\n    if (previous) {\r\n      previous.highlighted = false;\r\n    }\r\n\r\n    // actions\r\n    if (row) {\r\n      this.manager.rowActions.showOnRowHover?.openRowHover(row);\r\n    } else {\r\n      this.manager.rowActions.showOnRowHover?.close();\r\n    }\r\n  }\r\n\r\n  @State() rowsMarked: HTMLChGridRowElement[] = [];\r\n  @Watch(\"rowsMarked\")\r\n  rowsMarkedHandler(\r\n    rows: HTMLChGridRowElement[],\r\n    previous: HTMLChGridRowElement[]\r\n  ) {\r\n    this.manager.selection.syncRowSelector(rows, previous, \"mark\");\r\n    this.rowMarkingChanged.emit(this.getChangedEventDetail(rows, previous));\r\n  }\r\n\r\n  @State() rowsSelected: HTMLChGridRowElement[] = [];\r\n  @Watch(\"rowsSelected\")\r\n  rowsSelectedHandler(\r\n    rows: HTMLChGridRowElement[],\r\n    previous: HTMLChGridRowElement[]\r\n  ) {\r\n    if (previous) {\r\n      previous\r\n        .filter(row => !rows.includes(row))\r\n        .forEach(row => (row.selected = false));\r\n    }\r\n    if (rows) {\r\n      rows.forEach(row => (row.selected = true));\r\n    }\r\n\r\n    this.manager.selection.syncRowSelector(rows, previous, \"select\");\r\n    this.selectionChanged.emit(this.getChangedEventDetail(rows, previous));\r\n  }\r\n\r\n  @State() cellSelected: HTMLChGridCellElement;\r\n  @Watch(\"cellSelected\")\r\n  cellSelectedHandler(\r\n    cell: HTMLChGridCellElement,\r\n    previous: HTMLChGridCellElement\r\n  ) {\r\n    if (cell) {\r\n      cell.selected = true;\r\n    }\r\n    if (previous) {\r\n      previous.selected = false;\r\n    }\r\n\r\n    this.cellSelectionChanged.emit({\r\n      cellId: this.cellSelected ? this.cellSelected.cellId : null,\r\n      rowId: this.cellSelected ? this.cellSelected.row.rowId : null,\r\n      columnId: this.cellSelected ? this.cellSelected.column.columnId : null\r\n    });\r\n  }\r\n\r\n  @State() gridStyle: CSSProperties;\r\n\r\n  /**\r\n   * One of \"none\", \"single\" or \"multiple\", indicating how rows can be selected.\r\n   * It can be set to \"none\" if no rows should be selectable,\r\n   * \"single\" if only one row can be selected at a time, or\r\n   * \"multiple\" if multiple rows can be selected at once.\r\n   */\r\n  @Prop() readonly rowSelectionMode: \"none\" | \"single\" | \"multiple\" = \"single\";\r\n\r\n  /**\r\n   * Specifies the keyboard navigation mode for the component.\r\n   * - \"none\": Disables keyboard navigation for the grid rows.\r\n   * - \"select\": Allows keyboard navigation by changing the selection of grid rows.\r\n   * - \"focus\": Allows keyboard navigation by focusing on grid rows, but does not change the selection.\r\n   */\r\n  @Prop() readonly keyboardNavigationMode: \"none\" | \"select\" | \"focus\" =\r\n    \"select\";\r\n\r\n  /**\r\n   * One of \"false\", \"true\" or \"auto\", indicating whether or not rows can be highlighted.\r\n   * \"auto\", row highlighting will be enabled if the row selection mode is set to \"single\" or \"multiple\".\r\n   */\r\n  @Prop() readonly rowHighlightEnabled: boolean | \"auto\" = \"auto\";\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is selected.\r\n   */\r\n  @Prop() readonly rowSelectedClass: string;\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is hovered.\r\n   */\r\n  @Prop() readonly rowHighlightedClass: string;\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is focused.\r\n   */\r\n  @Prop() readonly rowFocusedClass: string;\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is marked.\r\n   */\r\n  @Prop() readonly rowMarkedClass: string;\r\n\r\n  /**\r\n   * A boolean indicating whether the user can drag column headers to reorder columns.\r\n   */\r\n  @Prop() readonly allowColumnReorder: boolean = true;\r\n\r\n  /**\r\n   * One of \"single\" or \"splitter\", indicating the behavior of column resizing.\r\n   * \"single\", resize a single column at a time.\r\n   * \"splitter\", when adjusts the width of one column, the neighboring columns\r\n   *    are also resized proportionally, maintaining the overall width.\r\n   */\r\n  @Prop() readonly columnResizeMode: \"single\" | \"splitter\" = \"single\";\r\n\r\n  /**\r\n   * An object that contains localized strings for the grid.\r\n   */\r\n  @Prop() readonly localization: GridLocalization;\r\n\r\n  /**\r\n   * Event emitted when the row selection is changed.\r\n   */\r\n  @Event() selectionChanged: EventEmitter<ChGridSelectionChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the row marking is changed.\r\n   */\r\n  @Event() rowMarkingChanged: EventEmitter<ChGridMarkingChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the cell selection is changed.\r\n   */\r\n  @Event() cellSelectionChanged: EventEmitter<ChGridCellSelectionChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when a row is clicked.\r\n   */\r\n  @Event() rowClicked: EventEmitter<ChGridRowClickedEvent>;\r\n\r\n  /**\r\n   * Event emitted when a row is double clicked.\r\n   */\r\n  @Event() rowDoubleClicked: EventEmitter<ChGridRowClickedEvent>;\r\n\r\n  /**\r\n   * Event emitted when Enter is pressed on a row.\r\n   */\r\n  @Event() rowEnterPressed: EventEmitter<ChGridRowPressedEvent>;\r\n\r\n  /**\r\n   * Event emitted when attempts to open a context menu on a row.\r\n   */\r\n  @Event() rowContextMenu: EventEmitter<ChGridRowContextMenuEvent>;\r\n\r\n  componentWillLoad() {\r\n    this.manager = new ChGridManager(this.el);\r\n    this.gridStyle = this.manager.getGridStyle();\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.manager.componentDidLoad(this.gridLayoutElement);\r\n  }\r\n\r\n  // @ts-expect-error: TODO: Fix this error\r\n  componentShouldUpdate(_newValue, _oldValue, name: string) {\r\n    if (\r\n      name === \"rowFocused\" ||\r\n      name === \"rowHighlighted\" ||\r\n      name === \"rowSelected\" ||\r\n      name === \"rowsMarked\" ||\r\n      name === \"cellSelected\"\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  @Listen(\"focus\", { passive: true })\r\n  focusHandler() {\r\n    if (this.keyboardNavigationMode !== \"none\") {\r\n      this.rowFocused ||= this.rowsSelected[0] ?? this.manager.getFirstRow();\r\n      this.cellFocused = this.rowFocused?.getCell(\r\n        this.cellSelected?.column || this.manager.getFirstColumn()\r\n      );\r\n\r\n      if (this.keyboardNavigationMode === \"select\") {\r\n        this.selectByKeyboardEvent(false, false, \"focus\");\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"blur\", { passive: true })\r\n  blurHandler(eventInfo: Event) {\r\n    if (!eventInfo.composedPath().includes(this.el)) {\r\n      this.rowFocused = null;\r\n      this.cellFocused = null;\r\n    }\r\n  }\r\n\r\n  @Listen(\"cellFocused\", { passive: true })\r\n  cellFocusedEventHandler(eventInfo: CustomEvent) {\r\n    const cell = eventInfo.target as HTMLChGridCellElement;\r\n    if (this.rowSelectionMode !== \"none\" && !cell.selected) {\r\n      this.setCellSelected(cell);\r\n    }\r\n  }\r\n\r\n  @Listen(\"keydown\", { target: \"window\" })\r\n  windowKeyDownHandler(eventInfo: KeyboardEvent) {\r\n    if (\r\n      focusComposedPath()[0] === this.el &&\r\n      [\r\n        \" \",\r\n        \"+\",\r\n        \"-\",\r\n        \"Home\",\r\n        \"End\",\r\n        \"PageUp\",\r\n        \"PageDown\",\r\n        \"ArrowUp\",\r\n        \"ArrowDown\",\r\n        \"ArrowLeft\",\r\n        \"ArrowRight\"\r\n      ].includes(eventInfo.key)\r\n    ) {\r\n      eventInfo.preventDefault();\r\n    }\r\n  }\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  keyDownHandler(eventInfo: KeyboardEvent) {\r\n    if (\r\n      focusComposedPath()[0] === this.el &&\r\n      this.keyboardNavigationMode !== \"none\"\r\n    ) {\r\n      const range = eventInfo.shiftKey;\r\n      const append = mouseEventModifierKey(eventInfo);\r\n\r\n      switch (eventInfo.key) {\r\n        case \" \":\r\n          this.spacePressedEvent(\r\n            mouseEventModifierKey(eventInfo),\r\n            eventInfo.shiftKey\r\n          );\r\n          break;\r\n        case \"+\":\r\n          this.setRowCollapsed(this.rowFocused, false);\r\n          break;\r\n        case \"-\":\r\n          this.setRowCollapsed(this.rowFocused, true);\r\n          break;\r\n        case \"Home\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveFirstRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"End\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveLastRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"PageUp\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.movePreviousPageRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"PageDown\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveNextPageRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowUp\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.movePreviousRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowDown\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveNextRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowLeft\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.movePreviousCell,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowRight\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveNextCell,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"Enter\":\r\n          this.enterPressedHandler();\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"mousemove\", { passive: true })\r\n  mouseMoveHandler(eventInfo: MouseEvent) {\r\n    if (\r\n      (this.rowHighlightEnabled === \"auto\" &&\r\n        this.rowSelectionMode !== \"none\") ||\r\n      this.rowHighlightEnabled === true\r\n    ) {\r\n      this.rowHighlighted =\r\n        this.manager.getRowEventTarget(eventInfo) ||\r\n        (this.manager.isRowActionsEventTarget(eventInfo)\r\n          ? this.rowHighlighted\r\n          : null);\r\n    }\r\n\r\n    selectingBlock: {\r\n      if (this.manager.selection.selecting) {\r\n        if (focusComposedPath()[0] !== this.el) {\r\n          this.stopSelecting();\r\n          break selectingBlock;\r\n        }\r\n\r\n        const row = this.manager.getRowEventTarget(eventInfo);\r\n        const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n        if (\r\n          row &&\r\n          (this.manager.selection.selectingRow !== row ||\r\n            this.manager.selection.selectingCell !== cell)\r\n        ) {\r\n          const isKeyModifierPressed = mouseEventModifierKey(eventInfo);\r\n          const isMouseButtonRightPressed = mouseEventHasButtonPressed(\r\n            eventInfo,\r\n            MouseEventButtons.RIGHT\r\n          );\r\n\r\n          this.selectByPointerEvent(\r\n            row,\r\n            cell,\r\n            isKeyModifierPressed && !isMouseButtonRightPressed,\r\n            !isMouseButtonRightPressed,\r\n            isMouseButtonRightPressed\r\n          );\r\n\r\n          this.manager.selection.selectingRow = row;\r\n          this.manager.selection.selectingCell = cell;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"mouseleave\", { passive: true })\r\n  mouseLeaveHandler() {\r\n    this.rowHighlighted &&= null;\r\n  }\r\n\r\n  @Listen(\"mousedown\", { passive: true })\r\n  mouseDownHandler(eventInfo: MouseEvent) {\r\n    const row = this.manager.getRowEventTarget(eventInfo);\r\n    const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n    if (row) {\r\n      this.manager.selection.selecting = true;\r\n      this.selectByPointerEvent(\r\n        row,\r\n        cell,\r\n        mouseEventModifierKey(eventInfo),\r\n        eventInfo.shiftKey,\r\n        eventInfo.button === MouseEventButton.RIGHT\r\n      );\r\n    }\r\n  }\r\n\r\n  @Listen(\"mouseup\", { passive: true })\r\n  mouseUpHandler() {\r\n    if (this.manager.selection.selecting) {\r\n      this.stopSelecting();\r\n    }\r\n  }\r\n\r\n  @Listen(\"click\", { passive: true })\r\n  clickHandler(eventInfo: MouseEvent) {\r\n    const row = this.manager.getRowEventTarget(eventInfo);\r\n    const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n    if (row) {\r\n      this.emitRowClicked(row, cell);\r\n    }\r\n  }\r\n\r\n  @Listen(\"dblclick\", { passive: true })\r\n  dblclickHandler(eventInfo: MouseEvent) {\r\n    const row = this.manager.getRowEventTarget(eventInfo);\r\n    const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n    if (row) {\r\n      this.rowDoubleClicked.emit({\r\n        rowId: row.rowId,\r\n        cellId: cell?.cellId,\r\n        columnId: cell?.column.columnId\r\n      });\r\n    }\r\n  }\r\n\r\n  @Listen(\"touchstart\", { passive: true })\r\n  touchstartHandler(eventInfo: TouchEvent) {\r\n    this.manager.selection.touchStart(eventInfo);\r\n  }\r\n\r\n  @Listen(\"touchend\", { passive: false })\r\n  touchendHandler(eventInfo: TouchEvent) {\r\n    if (eventInfo.cancelable) {\r\n      eventInfo.preventDefault();\r\n    }\r\n\r\n    if (this.manager.selection.isTouchEndSelection(eventInfo)) {\r\n      const columnSelector = this.manager.columns.getColumnSelector();\r\n      const row = this.manager.getRowEventTarget(eventInfo);\r\n      const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n      if (row) {\r\n        this.selectByPointerEvent(\r\n          row,\r\n          cell,\r\n          columnSelector?.richRowSelectorMode !== \"select\",\r\n          false,\r\n          false\r\n        );\r\n\r\n        this.emitRowClicked(row, cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"contextmenu\")\r\n  contextmenuHandler(eventInfo: MouseEvent) {\r\n    let targetRow: HTMLChGridRowElement;\r\n\r\n    if (\r\n      eventInfo.target === this.el &&\r\n      eventInfo.button === MouseEventButton.KEY_SHORTCUT\r\n    ) {\r\n      targetRow = this.rowFocused;\r\n    } else {\r\n      targetRow = this.manager.getRowEventTarget(eventInfo);\r\n    }\r\n\r\n    if (targetRow) {\r\n      const cellFocused =\r\n        this.cellSelected?.row === targetRow ? this.cellSelected : null;\r\n\r\n      const rowContextMenuEventInfo = this.rowContextMenu.emit({\r\n        rowId: targetRow.rowId,\r\n        cellId: cellFocused?.cellId,\r\n        columnId: cellFocused?.column.columnId,\r\n        selectedRowsId: this.rowsSelected.map(row => row.rowId),\r\n        clientX: eventInfo.clientX,\r\n        clientY: eventInfo.clientY\r\n      });\r\n\r\n      this.manager.rowActions.showOnRowContext?.openRowContext(\r\n        eventInfo.clientX,\r\n        eventInfo.clientY\r\n      );\r\n\r\n      if (\r\n        rowContextMenuEventInfo.defaultPrevented ||\r\n        this.manager.rowActions.showOnRowContext\r\n      ) {\r\n        eventInfo.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnSelectorClicked\", { passive: true })\r\n  columnSelectorClickedHandler(\r\n    eventInfo: CustomEvent<ChGridColumnSelectorClickedEvent>\r\n  ) {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"select\") {\r\n      this.selectAll(eventInfo.detail.checked);\r\n    } else if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markAllRows(\r\n        eventInfo.detail.checked\r\n      );\r\n    }\r\n  }\r\n\r\n  @Listen(\"cellSelectorClicked\", { passive: true })\r\n  cellSelectorClickedHandler(\r\n    eventInfo: CustomEvent<ChGridCellSelectorClickedEvent>\r\n  ) {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"select\") {\r\n      this.selectByPointerEvent(\r\n        this.manager.getRowEventTarget(eventInfo),\r\n        this.manager.getCellEventTarget(eventInfo),\r\n        true,\r\n        eventInfo.detail.range,\r\n        false\r\n      );\r\n    } else if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markRow(\r\n        this.manager.getRowEventTarget(eventInfo),\r\n        eventInfo.detail.checked,\r\n        eventInfo.detail.range,\r\n        this.rowsMarked\r\n      );\r\n    }\r\n  }\r\n\r\n  @Listen(\"cellRowActionClicked\", { passive: true })\r\n  cellRowActionClickedHandler(eventInfo: CustomEvent) {\r\n    const cell = eventInfo.target as HTMLChGridCellElement;\r\n    this.manager.rowActions.showOnRowActions?.openRowActions(cell);\r\n  }\r\n\r\n  @Listen(\"columnHiddenChanged\")\r\n  @Listen(\"columnOrderChanged\")\r\n  @Listen(\"columnFreezeChanged\")\r\n  @Listen(\"columnSizeChanging\")\r\n  columnStyleChangedHandler() {\r\n    if (this.manager) {\r\n      this.gridStyle = this.manager.getGridStyle();\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnFreezeChanged\")\r\n  columnFreezeChangedHandler() {\r\n    this.manager.columns.adjustFreezeOrder();\r\n  }\r\n\r\n  @Listen(\"columnResizeStarted\")\r\n  columnResizeStartedHandler(eventInfo: CustomEvent<ChGridColumnResizeEvent>) {\r\n    this.manager.columnResizeStart(eventInfo.detail.columnId);\r\n  }\r\n\r\n  @Listen(\"columnResizing\")\r\n  columnResizingHandler(eventInfo: CustomEvent<ChGridColumnResizeEvent>) {\r\n    this.manager.columnResizing(eventInfo.detail.deltaWidth);\r\n  }\r\n\r\n  @Listen(\"columnResizeFinished\")\r\n  columnResizeFinishedHandler() {\r\n    this.manager.columnResizeEnd();\r\n  }\r\n\r\n  @Listen(\"columnDragStarted\")\r\n  columnDragStartHandler(eventInfo: CustomEvent<ChGridColumnDragEvent>) {\r\n    this.manager.columnDragStart(eventInfo.detail.columnId);\r\n  }\r\n\r\n  @Listen(\"columnDragging\")\r\n  columnDraggingHandler(eventInfo: CustomEvent<ChGridColumnDragEvent>) {\r\n    if (this.manager.columnDragging(eventInfo.detail.positionX)) {\r\n      this.gridStyle = this.manager.getGridStyle();\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnDragEnded\")\r\n  columnDragEndHandler() {\r\n    this.manager.columnDragEnd();\r\n    this.gridStyle = this.manager.getGridStyle();\r\n  }\r\n\r\n  @Listen(\"rowDragStarted\")\r\n  rowDragStartHandler(eventInfo: CustomEvent<ChGridRowDragEvent>) {\r\n    this.manager.rowDragStart(eventInfo.detail.row);\r\n  }\r\n\r\n  @Listen(\"rowEnsureVisible\")\r\n  rowEnsureVisibleHandler(eventInfo: CustomEvent) {\r\n    this.manager.ensureRowVisible(eventInfo.target as HTMLChGridRowElement);\r\n  }\r\n\r\n  @Listen(\"cellEnsureVisible\")\r\n  cellEnsureVisibleHandler(eventInfo: CustomEvent) {\r\n    this.manager.ensureCellVisible(eventInfo.target as HTMLChGridCellElement);\r\n  }\r\n\r\n  @Listen(\"settingsShowClicked\")\r\n  settingsShowClickedHandler() {\r\n    this.settingsUI.show = true;\r\n  }\r\n\r\n  @Listen(\"settingsCloseClicked\")\r\n  settingsCloseClickedHandler() {\r\n    this.settingsUI.show = false;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the currently focused row.\r\n   */\r\n  @Method()\r\n  async getFocusedRow(): Promise<string> {\r\n    return this.rowFocused?.rowId;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the currently hovered row.\r\n   */\r\n  @Method()\r\n  async getHoveredRow(): Promise<string> {\r\n    return this.rowHighlighted?.rowId;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the list of rowId of the selected rows.\r\n   */\r\n  @Method()\r\n  async getSelectedRows(): Promise<string[]> {\r\n    return this.rowsSelected.map(row => row.rowId);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the list of rowId of the marked rows.\r\n   */\r\n  @Method()\r\n  async getMarkedRows(): Promise<string[]> {\r\n    return this.rowsMarked.map(row => row.rowId);\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the currently focused cell.\r\n   */\r\n  @Method()\r\n  async getFocusedCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    return {\r\n      cellId: this.cellFocused ? this.cellFocused.cellId : null,\r\n      rowId: this.cellFocused ? this.cellFocused.row.rowId : null,\r\n      columnId: this.cellFocused ? this.cellFocused.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getSelectedCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    return {\r\n      cellId: this.cellSelected ? this.cellSelected.cellId : null,\r\n      rowId: this.cellSelected ? this.cellSelected.row.rowId : null,\r\n      columnId: this.cellSelected ? this.cellSelected.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Selects or deselects a row.\r\n   * @param rowId - The rowId of the row to select or deselect.\r\n   * @param selected - A boolean indicating whether to select or deselect the row.\r\n   */\r\n  @Method()\r\n  async selectRow(rowId: string, selected = true): Promise<void> {\r\n    const row = this.manager.getRow(rowId);\r\n\r\n    if (row) {\r\n      const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n        this.manager.selection.selectSet(\r\n          {\r\n            rowFocused: this.rowFocused,\r\n            rowsSelected: this.rowsSelected,\r\n            cellFocused: this.cellFocused,\r\n            cellSelected: this.cellSelected\r\n          },\r\n          row,\r\n          null,\r\n          selected\r\n        );\r\n\r\n      this.rowFocused = rowFocused;\r\n      this.rowsSelected = rowsSelected;\r\n      this.cellFocused = cellFocused;\r\n      this.cellSelected = cellSelected;\r\n\r\n      rowFocused?.ensureVisible();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects or deselects all rows.\r\n   * @param selected - A boolean indicating whether to select or deselect all rows.\r\n   */\r\n  @Method()\r\n  async selectAllRows(selected = true): Promise<void> {\r\n    this.selectAll(selected);\r\n  }\r\n\r\n  /**\r\n   * Select or deselect a cell.\r\n   * The cell can be identified by the cellId parameter or\r\n   * by using the rowId and columnId pair.\r\n   * @param cellId - The cellId of the cell to select or deselect.\r\n   * @param rowId - The rowId of the row containing the cell.\r\n   * @param columnId - The columnId of the column containing the cell.\r\n   * @param selected - A boolean indicating whether to select or deselect the cell.\r\n   */\r\n  @Method()\r\n  async selectCell(\r\n    cellId?: string,\r\n    rowId?: string,\r\n    columnId?: string,\r\n    selected = true\r\n  ): Promise<void> {\r\n    const cell = this.manager.getCell(cellId, rowId, columnId);\r\n\r\n    if (cell) {\r\n      this.setCellSelected(cell, selected);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark or unmark a row.\r\n   * @param rowId - The rowId of the row to select or deselect.\r\n   * @param marked - A boolean indicating whether to mark or unmark the row.\r\n   */\r\n  @Method()\r\n  async markRow(rowId: string, marked = true): Promise<void> {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n    const row = this.manager.getRow(rowId);\r\n\r\n    if (row && columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markRow(\r\n        row,\r\n        marked,\r\n        false,\r\n        this.rowsMarked\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark or unmark all rows.\r\n   * @param marked - A boolean indicating whether to mark or unmark all rows.\r\n   */\r\n  @Method()\r\n  async markAllRows(marked = true): Promise<void> {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markAllRows(marked);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Expands a row, showing its children.\r\n   * @param rowId - The rowId of the row to expand.\r\n   */\r\n  @Method()\r\n  async expandRow(rowId: string): Promise<void> {\r\n    this.setRowCollapsed(this.manager.getRow(rowId), false);\r\n  }\r\n\r\n  /**\r\n   * Collapses a row, hiding its children.\r\n   * @param rowId - The rowId of the row to collapse.\r\n   */\r\n  @Method()\r\n  async collapseRow(rowId: string): Promise<void> {\r\n    this.setRowCollapsed(this.manager.getRow(rowId), true);\r\n  }\r\n\r\n  /**\r\n   * Ensures that the row is visible within the control, scrolling the contents of the control if necessary.\r\n   * @param rowId - The rowId of the row to ensure visibility.\r\n   */\r\n  @Method()\r\n  async rowEnsureVisible(rowId: string): Promise<void> {\r\n    const row = this.manager.getRow(rowId);\r\n\r\n    if (row) {\r\n      this.manager.ensureRowVisible(row);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensures that the cell is visible within the control, scrolling the contents of the control if necessary.\r\n   * @param cellId - The cellId of the cell to ensure visibility.\r\n   */\r\n  @Method()\r\n  async cellEnsureVisible(cellId: string): Promise<void> {\r\n    const cell = this.manager.getCell(cellId);\r\n\r\n    if (cell) {\r\n      this.manager.ensureCellVisible(cell);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the previous row relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getPreviousRow(): Promise<string | void> {\r\n    const currentRow = this.cellSelected?.row;\r\n\r\n    if (currentRow) {\r\n      return this.manager.getPreviousRow(currentRow)?.rowId || null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the next row relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getNextRow(): Promise<string | void> {\r\n    const currentRow = this.cellSelected?.row;\r\n\r\n    if (currentRow) {\r\n      return this.manager.getNextRow(currentRow)?.rowId || null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the previous cell relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getPreviousCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    const previousCell = this.manager.getPreviousCell(this.cellSelected);\r\n\r\n    return {\r\n      cellId: previousCell ? previousCell.cellId : null,\r\n      rowId: previousCell ? previousCell.row.rowId : null,\r\n      columnId: previousCell ? previousCell.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the next cell relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getNextCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    const nextCell = this.manager.getNextCell(this.cellSelected);\r\n\r\n    return {\r\n      cellId: nextCell ? nextCell.cellId : null,\r\n      rowId: nextCell ? nextCell.row.rowId : null,\r\n      columnId: nextCell ? nextCell.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Synchronizes the state of a row in the grid.\r\n   */\r\n  @Method()\r\n  async syncRowState(el: HTMLElement) {\r\n    const row = el as HTMLChGridRowElement;\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (this.rowSelectionMode !== \"none\") {\r\n      this.syncRowStateSelected(row);\r\n    }\r\n    if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.syncRowStateMarked(row);\r\n    }\r\n\r\n    if (columnSelector) {\r\n      this.syncRowStateSelector(row, columnSelector);\r\n\r\n      if (columnSelector.richRowSelectorMode === \"select\") {\r\n        this.manager.selection.syncColumnSelector(\r\n          this.rowsSelected.length,\r\n          columnSelector\r\n        );\r\n      } else if (columnSelector.richRowSelectorMode === \"mark\") {\r\n        this.manager.selection.syncColumnSelector(\r\n          this.rowsMarked.length,\r\n          columnSelector\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private syncRowStateSelected(row: HTMLChGridRowElement) {\r\n    if (row.selected && this.rowSelectionMode === \"single\") {\r\n      this.rowsSelected[0] = row;\r\n    }\r\n    if (\r\n      row.selected &&\r\n      this.rowSelectionMode === \"multiple\" &&\r\n      !this.rowsSelected.includes(row)\r\n    ) {\r\n      this.rowsSelected.push(row);\r\n    }\r\n\r\n    if (!row.selected) {\r\n      const index = this.rowsSelected.indexOf(row);\r\n\r\n      if (index !== -1) {\r\n        this.rowsSelected.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  private syncRowStateMarked(row: HTMLChGridRowElement) {\r\n    if (row.marked && !this.rowsMarked.includes(row)) {\r\n      this.rowsMarked.push(row);\r\n    }\r\n\r\n    if (!row.marked) {\r\n      const index = this.rowsMarked.indexOf(row);\r\n\r\n      if (index !== -1) {\r\n        this.rowsMarked.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  private syncRowStateSelector(\r\n    row: HTMLChGridRowElement,\r\n    columnSelector: HTMLChGridColumnElement\r\n  ) {\r\n    const cell = row.getCell(columnSelector);\r\n    const value =\r\n      (columnSelector.richRowSelectorMode === \"select\" && row.selected) ||\r\n      (columnSelector.richRowSelectorMode === \"mark\" && row.marked);\r\n\r\n    cell.setSelectorChecked(value);\r\n  }\r\n\r\n  private getChangedEventDetail(\r\n    rows: HTMLChGridRowElement[],\r\n    previous: HTMLChGridRowElement[]\r\n  ): ChGridSelectionChangedEvent | ChGridMarkingChangedEvent {\r\n    return {\r\n      rowsId: rows.map(row => row.rowId),\r\n      addedRowsId: rows\r\n        .filter(row => !previous.includes(row))\r\n        .map(row => row.rowId),\r\n      removedRowsId: previous\r\n        .filter(row => !rows.includes(row))\r\n        .map(row => row.rowId),\r\n      unalteredRowsId: rows\r\n        .filter(row => previous.includes(row))\r\n        .map(row => row.rowId)\r\n    };\r\n  }\r\n\r\n  private enterPressedHandler() {\r\n    if (this.rowFocused) {\r\n      this.rowEnterPressed.emit({\r\n        rowId: this.rowFocused.rowId,\r\n        cellId: this.cellFocused ? this.cellFocused.cellId : null,\r\n        columnId: this.cellFocused ? this.cellFocused.column.columnId : null\r\n      });\r\n    }\r\n  }\r\n\r\n  private spacePressedEvent(ctrl: boolean, shift: boolean) {\r\n    if (this.keyboardNavigationMode === \"focus\") {\r\n      this.selectByKeyboardEvent(ctrl, shift, \"last-selected\");\r\n    } else if (this.keyboardNavigationMode === \"select\") {\r\n      this.markByKeyboardEvent();\r\n    }\r\n\r\n    this.emitRowClicked(this.rowFocused, this.cellFocused);\r\n  }\r\n\r\n  private markByKeyboardEvent() {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markRows(\r\n        this.rowFocused,\r\n        this.rowsMarked,\r\n        this.rowsSelected\r\n      );\r\n    }\r\n  }\r\n\r\n  private selectByKeyboardEvent(\r\n    append: boolean,\r\n    range: boolean,\r\n    rangeStartOn: \"focus\" | \"last-selected\"\r\n  ) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.select(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        this.rowFocused,\r\n        this.cellFocused,\r\n        true,\r\n        append,\r\n        range,\r\n        rangeStartOn,\r\n        false\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private selectByPointerEvent(\r\n    row: HTMLChGridRowElement,\r\n    cell: HTMLChGridCellElement,\r\n    append: boolean,\r\n    range: boolean,\r\n    context: boolean\r\n  ) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.select(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        row,\r\n        cell,\r\n        true,\r\n        append,\r\n        range,\r\n        \"last-selected\",\r\n        context\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private moveByKeyboardEvent(\r\n    fn: (\r\n      state: ManagerSelectionState,\r\n      select: boolean,\r\n      range: boolean,\r\n      append: boolean\r\n    ) => ManagerSelectionState,\r\n    range: boolean,\r\n    append: boolean\r\n  ) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } = fn.call(\r\n      this.manager.selection,\r\n      {\r\n        rowFocused: this.rowFocused,\r\n        rowsSelected: this.rowsSelected,\r\n        cellFocused: this.cellFocused,\r\n        cellSelected: this.cellSelected\r\n      },\r\n      this.rowSelectionMode !== \"none\" &&\r\n        this.keyboardNavigationMode === \"select\",\r\n      this.rowSelectionMode === \"multiple\" ? range : false,\r\n      this.rowSelectionMode === \"multiple\" ? range && append : false\r\n    );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private selectAll(value = true) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.selectAll(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        value\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private setRowCollapsed(row: HTMLChGridRowElement, collapsed: boolean) {\r\n    if (row && collapsed) {\r\n      if (row && row.hasChildRows) {\r\n        row.collapsed = true;\r\n      }\r\n    } else if (row && !collapsed) {\r\n      row.collapsed = false;\r\n    }\r\n  }\r\n\r\n  private setCellSelected(cell: HTMLChGridCellElement, selected = true) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.selectSet(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        cell.row,\r\n        cell,\r\n        selected\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private emitRowClicked(\r\n    row: HTMLChGridRowElement,\r\n    cell: HTMLChGridCellElement\r\n  ) {\r\n    this.rowClicked.emit({\r\n      rowId: row.rowId,\r\n      cellId: cell?.cellId,\r\n      columnId: cell?.column.columnId\r\n    });\r\n  }\r\n\r\n  private stopSelecting() {\r\n    this.manager.selection.selecting = false;\r\n    this.manager.selection.selectingRow = null;\r\n    this.manager.selection.selectingCell = null;\r\n  }\r\n\r\n  private renderSettings() {\r\n    return (\r\n      <ch-grid-settings\r\n        grid={this.el}\r\n        ref={el => (this.settingsUI = el)}\r\n        exportparts=\"\r\n          mask:settings-mask,\r\n          window:settings-window,\r\n          header:settings-header,\r\n          caption:settings-caption,\r\n          close:settings-close,\r\n          main:settings-main,\r\n          footer:settings-footer\r\n        \"\r\n      >\r\n        <slot name=\"settings\">\r\n          <ch-grid-settings-columns\r\n            part=\"settings-columns\"\r\n            columns={[...this.manager.getColumns()]}\r\n            exportparts=\"\r\n              column:settings-columns-item,\r\n              column-label:settings-columns-label,\r\n              column-visible:settings-columns-visible,\r\n              column-visible-checked:settings-columns-visible-checked\r\n            \"\r\n          ></ch-grid-settings-columns>\r\n        </slot>\r\n      </ch-grid-settings>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host tabindex={this.keyboardNavigationMode !== \"none\" ? \"0\" : false}>\r\n        <header part=\"header\">\r\n          <slot name=\"header\"></slot>\r\n        </header>\r\n        <section\r\n          class=\"main\"\r\n          style={this.gridStyle}\r\n          part=\"main\"\r\n          ref={el => (this.gridLayoutElement = el)}\r\n        >\r\n          <slot></slot>\r\n        </section>\r\n        <aside>\r\n          {this.renderSettings()}\r\n          <slot name=\"column-display\"></slot>\r\n          <slot name=\"row-actions\"></slot>\r\n        </aside>\r\n        <footer part=\"footer\">\r\n          <slot name=\"footer\"></slot>\r\n        </footer>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nexport interface GridLocalization {\r\n  settingsCaption: string;\r\n  settingsCloseText: string;\r\n  settingsCloseTooltip: string;\r\n}\r\n","@layer ch-grid {\r\n    ch-grid-action-refresh[disabled] {\r\n        pointer-events: none;\r\n    }\r\n}","import {\r\n  Component,\r\n  Prop,\r\n  Event,\r\n  h,\r\n  Host,\r\n  EventEmitter,\r\n  Listen\r\n} from \"@stencil/core\";\r\n\r\n/**\r\n * The `ch-grid-action-refresh` component represents a refresh button for a grid action bar.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-action-refresh` instead.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-action-refresh\",\r\n  styleUrl: \"ch-grid-action-refresh.scss\",\r\n  shadow: false\r\n})\r\nexport class ChGridActionRefresh {\r\n  /**\r\n   * Indicates whether the refresh button is disabled or not.\r\n   */\r\n  @Prop() readonly disabled: boolean;\r\n\r\n  /**\r\n   * Event emitted when the refresh button is clicked.\r\n   */\r\n  @Event() refreshClicked: EventEmitter;\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  @Listen(\"click\", { passive: true })\r\n  pressedHandler(eventInfo: any) {\r\n    if (!eventInfo.key || eventInfo.key === \"Enter\" || eventInfo.key === \" \") {\r\n      this.refreshClicked.emit();\r\n      eventInfo.stopPropagation();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Host role=\"button\" tabindex=\"0\" disabled={this.disabled}></Host>;\r\n  }\r\n}\r\n","@layer ch-grid {\r\n    ch-grid-action-settings[disabled] {\r\n        pointer-events: none;\r\n    }\r\n}","import {\r\n  Component,\r\n  Prop,\r\n  h,\r\n  Host,\r\n  Event,\r\n  EventEmitter,\r\n  Listen\r\n} from \"@stencil/core\";\r\n\r\n/**\r\n * The `ch-grid-action-settings` component represents a settings button for a grid action bar.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-action-settings` instead.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-action-settings\",\r\n  styleUrl: \"ch-grid-action-settings.scss\",\r\n  shadow: false\r\n})\r\nexport class ChGridActionSettings {\r\n  /**\r\n   * Indicates whether the settings button is disabled or not.\r\n   */\r\n  @Prop() readonly disabled: boolean;\r\n\r\n  /**\r\n   * Event emitted when the settings button is clicked.\r\n   */\r\n  @Event() settingsShowClicked: EventEmitter;\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  @Listen(\"click\", { passive: true })\r\n  pressedHandler(eventInfo: any) {\r\n    if (!eventInfo.key || eventInfo.key === \"Enter\" || eventInfo.key === \" \") {\r\n      this.settingsShowClicked.emit();\r\n      eventInfo.stopPropagation();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Host role=\"button\" tabindex=\"0\" disabled={this.disabled}></Host>;\r\n  }\r\n}\r\n","@layer ch-grid {}","import { Component, Element } from \"@stencil/core\";\r\n\r\n/**\r\n * The `ch-grid-actionbar` component represents a container for a grid actions.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-actionbar` instead.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-actionbar\",\r\n  styleUrl: \"ch-grid-actionbar.scss\",\r\n  shadow: false\r\n})\r\nexport class ChGridActionbar {\r\n  @Element() el: HTMLChGridActionbarElement;\r\n}\r\n","@import \"../../../components/common/reset.scss\";\r\n@import \"../helpers/styles.scss\";\r\n\r\n:host {\r\n  display: flex;\r\n  position: sticky;\r\n  top: 0;\r\n  grid-row: 1;\r\n}\r\n\r\n// column-set box simulation\r\n:host {\r\n  @include box-simulation;\r\n  @include column-drag-transition;\r\n}\r\n\r\n// z-index levels\r\n:host {\r\n  --ch-grid-column-z-index-head: var(--ch-grid-column-header-layer);\r\n}\r\n:host([show-settings]),\r\n:host([resizing]) {\r\n  --ch-grid-column-z-index-active: var(--ch-grid-column-active-layer);\r\n}\r\n\r\n:host([sort-direction=\"asc\"]) .bar .sort .sort-asc {\r\n  visibility: visible;\r\n}\r\n:host([sort-direction=\"desc\"]) .bar .sort .sort-desc {\r\n  visibility: visible;\r\n}\r\n\r\n.bar {\r\n  @include reset-list;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  & .selector {\r\n    overflow: hidden;\r\n    order: 0;\r\n    &:not([hidden]) {\r\n      display: flex;\r\n    }\r\n  }\r\n\r\n  & .name {\r\n    display: flex;\r\n    overflow: hidden;\r\n    order: 1;\r\n\r\n    & .name-text {\r\n      white-space: nowrap;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n    }\r\n  }\r\n\r\n  & .sort {\r\n    position: relative;\r\n    align-items: center;\r\n    order: 2;\r\n    &:not([hidden]) {\r\n      display: flex;\r\n    }\r\n\r\n    & .sort-asc {\r\n      visibility: hidden;\r\n      animation-fill-mode: forwards;\r\n    }\r\n    & .sort-desc {\r\n      position: absolute;\r\n      visibility: hidden;\r\n      animation-fill-mode: forwards;\r\n    }\r\n  }\r\n  & .settings {\r\n    order: 3;\r\n  }\r\n  & .resize {\r\n    align-self: stretch;\r\n    margin-inline-start: auto;\r\n    order: 4;\r\n  }\r\n}\r\n\r\n@keyframes column-sort {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  10% {\r\n    opacity: 1;\r\n  }\r\n  90% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h,\r\n  Listen\r\n} from \"@stencil/core\";\r\nimport {\r\n  ChGridColumnDragEvent,\r\n  ChGridColumnFreezeChangedEvent,\r\n  ChGridColumnHiddenChangedEvent,\r\n  ChGridColumnOrderChangedEvent,\r\n  ChGridColumnSelectorClickedEvent,\r\n  ChGridColumnSizeChangedEvent,\r\n  ChGridColumnSortChangedEvent,\r\n  ChGridColumnFreeze,\r\n  ChGridColumnSortDirection\r\n} from \"./ch-grid-column-types\";\r\n\r\n/**\r\n * The `ch-grid-column` component represents a grid column.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-column` instead.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-column\",\r\n  styleUrl: \"ch-grid-column.scss\",\r\n  shadow: true\r\n})\r\nexport class ChGridColumn {\r\n  private dragging = false;\r\n  private dragMouseMoveFn = this.dragMouseMoveHandler.bind(this);\r\n  private dragMouseMoveStartPositionX: number;\r\n\r\n  @Element() el: HTMLChGridColumnElement;\r\n\r\n  /**\r\n   * A unique identifier for the column.\r\n   */\r\n  @Prop() readonly columnId: string;\r\n\r\n  /**\r\n   * One of \"plain\", \"rich\", or \"tree\", indicating the type of cell displayed in the column.\r\n   */\r\n  @Prop() readonly columnType: \"plain\" | \"rich\" | \"tree\" = \"plain\";\r\n\r\n  /**\r\n   * @deprecated Use \"columnImage\" or \"columnImageSet\" instead.\r\n   * A URL to an icon to display in the column header.\r\n   */\r\n  @Prop() readonly columnIconUrl: string;\r\n\r\n  /**\r\n   * A URL to an icon to display in the column header.\r\n   */\r\n  @Prop() readonly columnImage: string;\r\n\r\n  /**\r\n   * A URL to an icon to display in the column header.\r\n   */\r\n  @Prop() readonly columnImageSet: string;\r\n\r\n  /**\r\n   * The text to display in the column header and settings.\r\n   */\r\n  @Prop() readonly columnName: string;\r\n\r\n  /**\r\n   * Indicates whether the text in the column header is visible or not\r\n   */\r\n  @Prop() readonly columnNameHidden: boolean;\r\n\r\n  /**\r\n   * The text to display when the cursor is placed over the column header.\r\n   */\r\n  @Prop() readonly columnTooltip: string;\r\n\r\n  /**\r\n   * @deprecated Use \"columnTooltip\" and \"columnNameHidden\" instead.\r\n   * One of \"text\" or \"title\", indicating whether the `columnName` should be displayed as the column text or as tooltip of the column image.\r\n   */\r\n  @Prop() readonly columnNamePosition: \"text\" | \"title\" = \"text\";\r\n\r\n  /**\r\n   * A boolean value indicating whether the column cells are draggable to reorder the grid rows (only applicable for columnType=\"rich\").\r\n   */\r\n  @Prop() readonly richRowDrag: boolean;\r\n\r\n  /**\r\n   * A boolean indicating whether the column cells in the grid should have a checkbox selector (only applicable for columnType=\"rich\").\r\n   */\r\n  @Prop() readonly richRowSelector: boolean;\r\n\r\n  /**\r\n   * One of \"select\" or \"mark\", indicating the mode of rich row selector.\r\n   * \"select\" indicates that the row selector is bound to the row selection.\r\n   * \"mark\" allows to mark a row independently of the selection.\r\n   */\r\n  @Prop() readonly richRowSelectorMode: \"select\" | \"mark\" = \"select\";\r\n\r\n  /**\r\n   * Indicate the state of the rich row selector.\r\n   * \"\" indicates that all rows are unchecked.\r\n   * \"checked\" indicates that all rows are checked.\r\n   * \"indeterminate\" indicates that some rows are marked.\r\n   */\r\n  @Prop({ mutable: true }) richRowSelectorState:\r\n    | \"\"\r\n    | \"checked\"\r\n    | \"indeterminate\" = \"\";\r\n\r\n  /**\r\n   * A boolean indicating whether the column cells in the grid should have a set of action buttons (only applicable for columnType=\"rich\").\r\n   */\r\n  @Prop() readonly richRowActions: boolean;\r\n\r\n  /**\r\n   * A CSS class name to apply to the display observer element used to detect changes in the column visibility.\r\n   */\r\n  @Prop() readonly displayObserverClass: string;\r\n\r\n  /**\r\n   * One of \"left\" or \"right\", indicating whether the column should be \"frozen\" (i.e. remain visible when the user scrolls horizontally).\r\n   */\r\n  @Prop() readonly freeze?: ChGridColumnFreeze;\r\n\r\n  @Watch(\"freeze\")\r\n  freezeHandler() {\r\n    this.columnFreezeChanged.emit({\r\n      columnId: this.columnId,\r\n      freeze: this.freeze\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be hidden.\r\n   * The user can display it from the grid settings.\r\n   */\r\n  @Prop({ reflect: true }) readonly hidden: boolean = false;\r\n\r\n  @Watch(\"hidden\")\r\n  hiddenHandler() {\r\n    this.columnHiddenChanged.emit({\r\n      columnId: this.columnId,\r\n      hidden: this.hidden\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be hideable (i.e. whether the user should be able to show/hide the column).\r\n   */\r\n  @Prop() readonly hideable: boolean = true;\r\n\r\n  /**\r\n   * A number indicating the order in which the column should appear.\r\n   */\r\n  @Prop({ reflect: true }) readonly order: number;\r\n\r\n  @Watch(\"order\")\r\n  orderHandler() {\r\n    this.columnOrderChanged.emit({\r\n      columnId: this.columnId,\r\n      order: this.order\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A number indicating the physical order of the column (i.e. its position in the DOM).\r\n   */\r\n  @Prop() readonly physicalOrder: number;\r\n\r\n  /**\r\n   * A string indicating the width of the column.\r\n   * Any value supported by the \"grid-template-columns\" CSS property is valid.\r\n   */\r\n  @Prop({ reflect: true }) readonly size: string;\r\n\r\n  @Watch(\"size\")\r\n  sizeHandler() {\r\n    this.columnSizeChanging.emit({\r\n      columnId: this.columnId,\r\n      size: this.size\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be resizable (i.e. whether the user should be able to drag its width).\r\n   */\r\n  @Prop() readonly resizable: boolean = true;\r\n\r\n  /**\r\n   * A boolean indicating whether the column is currently being resized.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) resizing: boolean;\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be sortable (i.e. whether the user should be able to click the column header to sort the data).\r\n   */\r\n  @Prop() readonly sortable: boolean = true;\r\n\r\n  /**\r\n   * A boolean indicating whether the user should be able to open a settings panel for the column.\r\n   */\r\n  @Prop() readonly settingable: boolean = true;\r\n\r\n  /**\r\n   * One of \"asc\" or \"desc\", indicating the current sort direction.\r\n   */\r\n  @Prop({ mutable: true, reflect: true })\r\n  sortDirection?: ChGridColumnSortDirection;\r\n\r\n  @Watch(\"sortDirection\")\r\n  sortDirectionHandler() {\r\n    if (this.sortDirection) {\r\n      this.columnSortChanged.emit({\r\n        columnId: this.columnId,\r\n        sortDirection: this.sortDirection\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the settings panel for the column should be visible.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) showSettings = false;\r\n\r\n  /**\r\n   * Event emitted when the `hidden` property is changed.\r\n   */\r\n  @Event() columnHiddenChanged: EventEmitter<ChGridColumnHiddenChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `size` property is currently being changed (i.e. when the user is dragging to resize the column).\r\n   */\r\n  @Event() columnSizeChanging: EventEmitter<ChGridColumnSizeChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `size` property has been changed (i.e. when the user finishes dragging to resize the column).\r\n   */\r\n  @Event() columnSizeChanged: EventEmitter<ChGridColumnSizeChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `order` property is changed.\r\n   */\r\n  @Event() columnOrderChanged: EventEmitter<ChGridColumnOrderChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `sortDirection` property is changed.\r\n   */\r\n  @Event() columnSortChanged: EventEmitter<ChGridColumnSortChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `freeze` property is changed.\r\n   */\r\n  @Event() columnFreezeChanged: EventEmitter<ChGridColumnFreezeChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user is dragging the column header to move it.\r\n   */\r\n  @Event() columnDragStarted: EventEmitter<ChGridColumnDragEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user is dragging the column header to move it.\r\n   */\r\n  @Event() columnDragging: EventEmitter<ChGridColumnDragEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user stops dragging the column header to move it.\r\n   */\r\n  @Event() columnDragEnded: EventEmitter<ChGridColumnDragEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user clicks the row selector checkbox (only applicable for `richRowSelector=\"true\"`.\r\n   */\r\n  @Event()\r\n  columnSelectorClicked: EventEmitter<ChGridColumnSelectorClickedEvent>;\r\n\r\n  componentDidLoad() {\r\n    this.el.addEventListener(\"mousedown\", this.mousedownHandler.bind(this));\r\n  }\r\n\r\n  @Listen(\"click\", { passive: true })\r\n  clickHandler() {\r\n    if (!this.dragging) {\r\n      if (this.sortable) {\r\n        this.sortDirection = this.sortDirection === \"asc\" ? \"desc\" : \"asc\";\r\n      }\r\n    } else {\r\n      this.dragging = false;\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnResizeStarted\")\r\n  columnResizeStartedHandler() {\r\n    this.resizing = true;\r\n  }\r\n\r\n  @Listen(\"columnResizeFinished\")\r\n  columnResizeFinishedHandler() {\r\n    this.resizing = false;\r\n\r\n    this.columnSizeChanged.emit({\r\n      columnId: this.columnId,\r\n      size: this.size\r\n    });\r\n  }\r\n\r\n  private allowColumnReorder(): boolean {\r\n    return this.el.closest(\"ch-grid\").allowColumnReorder;\r\n  }\r\n\r\n  private mousedownHandler(eventInfo: MouseEvent) {\r\n    eventInfo.preventDefault();\r\n    eventInfo.stopPropagation();\r\n\r\n    if (this.allowColumnReorder()) {\r\n      this.dragMouseDownHandler(eventInfo);\r\n\r\n      document.addEventListener(\"mousemove\", this.dragMouseMoveFn, {\r\n        passive: true\r\n      });\r\n      document.addEventListener(\"mouseup\", this.dragMouseUpHandler.bind(this), {\r\n        once: true\r\n      });\r\n    }\r\n  }\r\n\r\n  private dragMouseDownHandler(eventInfo: MouseEvent) {\r\n    this.dragMouseMoveStartPositionX = eventInfo.pageX;\r\n    this.columnDragStarted.emit({ columnId: this.columnId });\r\n  }\r\n\r\n  private dragMouseMoveHandler(eventInfo: MouseEvent) {\r\n    if (\r\n      this.dragging ||\r\n      Math.abs(this.dragMouseMoveStartPositionX - eventInfo.pageX) > 5\r\n    ) {\r\n      this.dragging = true;\r\n\r\n      this.columnDragging.emit({\r\n        columnId: this.columnId,\r\n        positionX: eventInfo.pageX,\r\n        direction: eventInfo.movementX > 0 ? \"right\" : \"left\"\r\n      });\r\n    }\r\n  }\r\n\r\n  private dragMouseUpHandler() {\r\n    document.removeEventListener(\"mousemove\", this.dragMouseMoveFn);\r\n    this.columnDragEnded.emit({ columnId: this.columnId });\r\n  }\r\n\r\n  private settingsMouseDownHandler(eventInfo: MouseEvent) {\r\n    eventInfo.stopPropagation();\r\n  }\r\n\r\n  private settingsClickHandler = (eventInfo: MouseEvent) => {\r\n    eventInfo.stopPropagation();\r\n    this.showSettings = true;\r\n  };\r\n\r\n  private selectorClickHandler = (eventInfo: MouseEvent) => {\r\n    const target = eventInfo.target as HTMLInputElement;\r\n\r\n    this.richRowSelectorState = target.checked ? \"checked\" : \"\";\r\n    this.columnSelectorClicked.emit({\r\n      checked: target.checked\r\n    });\r\n\r\n    eventInfo.stopPropagation();\r\n  };\r\n\r\n  private selectorTouchEndHandler = (eventInfo: TouchEvent) => {\r\n    eventInfo.stopPropagation();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <ul class=\"bar\" part=\"bar\">\r\n          {this.renderSelector()}\r\n          {this.renderName()}\r\n          {this.renderSort()}\r\n          {this.renderSettings()}\r\n          {this.renderResize()}\r\n        </ul>\r\n        <ch-grid-column-settings\r\n          column={this.el}\r\n          onMouseDown={this.settingsMouseDownHandler}\r\n          show={this.showSettings}\r\n          exportparts=\"\r\n            mask:settings-mask,\r\n            window:settings-window,\r\n            header:settings-header,\r\n            caption:settings-caption,\r\n            close:settings-close,\r\n            main:settings-main,\r\n            footer:settings-footer\r\n          \"\r\n        >\r\n          <slot name=\"settings\"></slot>\r\n        </ch-grid-column-settings>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  private renderSelector() {\r\n    return (\r\n      <li\r\n        class=\"selector\"\r\n        part=\"bar-selector\"\r\n        hidden={!(this.columnType === \"rich\" && this.richRowSelector)}\r\n      >\r\n        <label part=\"selector-label\">\r\n          <input\r\n            type=\"checkbox\"\r\n            part={[\"selector\", this.richRowSelectorState]\r\n              .filter(part => part !== \"\")\r\n              .join(\" \")}\r\n            onClick={this.selectorClickHandler}\r\n            onTouchEnd={this.selectorTouchEndHandler}\r\n            checked={this.richRowSelectorState === \"checked\"}\r\n            indeterminate={this.richRowSelectorState === \"indeterminate\"}\r\n          />\r\n        </label>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderName() {\r\n    return (\r\n      <li\r\n        class=\"name\"\r\n        part=\"bar-name\"\r\n        title={\r\n          this.columnTooltip ||\r\n          (this.columnNamePosition === \"title\" ? this.columnName : null)\r\n        }\r\n      >\r\n        {this.columnIconUrl || this.columnImage || this.columnImageSet ? (\r\n          <img\r\n            class=\"name-icon\"\r\n            part=\"bar-name-icon\"\r\n            src={this.columnImage || this.columnIconUrl}\r\n            srcSet={this.columnImageSet}\r\n          />\r\n        ) : (\r\n          <div class=\"name-icon\" part=\"bar-name-icon\"></div>\r\n        )}\r\n        <span\r\n          class=\"name-text\"\r\n          part=\"bar-name-text\"\r\n          hidden={this.columnNameHidden || this.columnNamePosition !== \"text\"}\r\n        >\r\n          {this.columnName}\r\n        </span>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderSort() {\r\n    return (\r\n      <li class=\"sort\" part=\"bar-sort\" hidden={!this.sortable}>\r\n        <div class=\"sort-asc\" part=\"bar-sort-ascending\"></div>\r\n        <div class=\"sort-desc\" part=\"bar-sort-descending\"></div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderSettings() {\r\n    return (\r\n      <li class=\"settings\" part=\"bar-settings\" hidden={!this.settingable}>\r\n        <button\r\n          class=\"button\"\r\n          part=\"bar-settings-button\"\r\n          onClick={this.settingsClickHandler}\r\n        ></button>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderResize() {\r\n    return (\r\n      <li class=\"resize\" part=\"bar-resize\" hidden={!this.resizable}>\r\n        <ch-grid-column-resize\r\n          column={this.el}\r\n          class=\"resize-split\"\r\n          part=\"bar-resize-split\"\r\n        ></ch-grid-column-resize>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","@layer ch-grid {\r\n  ch-grid-columnset {\r\n    display: contents;\r\n  }\r\n}\r\n\r\n@import \"../grid-row/ch-grid-row.scss\";\r\n@import \"../grid-rowset/ch-grid-rowset.scss\";\r\n@import \"../grid-cell/ch-grid-cell.scss\";\r\n","import { Component, Element, Listen } from \"@stencil/core\";\r\nimport { ChGridColumnSortChangedEvent } from \"../grid-column/ch-grid-column-types\";\r\n\r\n/**\r\n * The `ch-grid-columnset` component represents a group of columns.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-columnset` instead.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-columnset\",\r\n  styleUrl: \"ch-grid-columnset.scss\",\r\n  shadow: false\r\n})\r\nexport class ChGridColumnset {\r\n  @Element() el: HTMLChGridColumnsetElement;\r\n\r\n  @Listen(\"columnSortChanged\")\r\n  columnSortChangedHandler(\r\n    eventInfo: CustomEvent<ChGridColumnSortChangedEvent>\r\n  ) {\r\n    const columns: HTMLChGridColumnElement[] = Array.from(\r\n      this.el.querySelectorAll(\"ch-grid-column\")\r\n    );\r\n\r\n    columns.forEach(column => {\r\n      if (column.columnId !== eventInfo.detail.columnId) {\r\n        column.sortDirection = null;\r\n      }\r\n    });\r\n  }\r\n}\r\n",":host {\r\n  display: flex;\r\n}\r\n","/* eslint-disable @typescript-eslint/no-empty-function */\r\nimport {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Listen,\r\n  Prop,\r\n  Watch\r\n} from \"@stencil/core\";\r\nimport { ChPaginatorNavigateClickedEvent } from \"./paginator-navigate/ch-paginator-navigate-types\";\r\nimport { ChPaginatorPagesPageChangedEvent } from \"./paginator-pages/ch-paginator-pages\";\r\n\r\n/**\r\n * The 'ch-paginator' component represents a paginator control for navigating through pages.\r\n */\r\n@Component({\r\n  tag: \"ch-paginator\",\r\n  styleUrl: \"ch-paginator.scss\",\r\n  shadow: false\r\n})\r\nexport class ChPaginator {\r\n  private elPages: HTMLChPaginatorPagesElement;\r\n  private elFirst: HTMLChPaginatorNavigateElement;\r\n  private elPrevious: HTMLChPaginatorNavigateElement;\r\n  private elNext: HTMLChPaginatorNavigateElement;\r\n  private elLast: HTMLChPaginatorNavigateElement;\r\n\r\n  @Element() el: HTMLChPaginatorElement;\r\n\r\n  /**\r\n   * The active page number.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) activePage = 1;\r\n\r\n  @Watch(\"activePage\")\r\n  activePageHandler() {\r\n    this.activePageChanged.emit({ activePage: this.activePage });\r\n  }\r\n\r\n  /**\r\n   * The total number of pages.\r\n   * Use -1 if not known and 'hasNextPage' property to indicate\r\n   * that the end has been reached.\r\n   */\r\n  @Prop() readonly totalPages = 1;\r\n\r\n  /**\r\n   * Indicates that the end has been reached.\r\n   * Use when total pages are not known (totalPages = -1).\r\n   */\r\n  @Prop() readonly hasNextPage: boolean = false;\r\n\r\n  /**\r\n   * Event emitted when the active page changes.\r\n   */\r\n  @Event() activePageChanged: EventEmitter<ChPaginatorActivePageChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the navigation is requested.\r\n   */\r\n  @Event()\r\n  pageNavigationRequested: EventEmitter<ChPaginatorPageNavigationRequestedEvent>;\r\n\r\n  componentWillLoad() {\r\n    this.loadElements();\r\n  }\r\n\r\n  @Listen(\"navigateClicked\")\r\n  navigateClickedHandler(\r\n    eventInfo: CustomEvent<ChPaginatorNavigateClickedEvent>\r\n  ) {\r\n    eventInfo.stopPropagation();\r\n    this.navigate(eventInfo.detail.type);\r\n  }\r\n\r\n  @Listen(\"pageChanged\")\r\n  pageChangedHandler(eventInfo: CustomEvent<ChPaginatorPagesPageChangedEvent>) {\r\n    eventInfo.stopPropagation();\r\n    this.navigate(\"goto\", eventInfo.detail.page);\r\n  }\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  keyDownHandler(eventInfo: KeyboardEvent) {\r\n    switch (eventInfo.key) {\r\n      case \"Home\":\r\n        this.navigate(\"first\");\r\n        break;\r\n      case \"PageUp\":\r\n        this.navigate(\"previous\");\r\n        break;\r\n      case \"PageDown\":\r\n        this.navigate(\"next\");\r\n        break;\r\n      case \"End\":\r\n        this.navigate(\"last\");\r\n        break;\r\n    }\r\n  }\r\n\r\n  private navigate(\r\n    type: \"first\" | \"previous\" | \"next\" | \"last\" | \"goto\",\r\n    page?: number\r\n  ) {\r\n    const emitPageNavigationRequested = !page || page !== this.activePage;\r\n\r\n    switch (type) {\r\n      case \"first\":\r\n        this.first();\r\n        this.elFirst?.focus();\r\n        break;\r\n      case \"previous\":\r\n        this.previous();\r\n        this.elPrevious?.focus();\r\n        break;\r\n      case \"next\":\r\n        this.next();\r\n        this.elNext?.focus();\r\n        break;\r\n      case \"last\":\r\n        this.last();\r\n        this.elLast?.focus();\r\n        break;\r\n      case \"goto\":\r\n        this.goto(page);\r\n        break;\r\n    }\r\n\r\n    if (emitPageNavigationRequested) {\r\n      this.pageNavigationRequested.emit({ type, page });\r\n    }\r\n  }\r\n\r\n  private first() {\r\n    this.activePage = 1;\r\n  }\r\n  private previous() {\r\n    this.activePage = Math.max(this.activePage - 1, 1);\r\n  }\r\n  private next() {\r\n    this.activePage =\r\n      this.totalPages < 0\r\n        ? this.activePage + 1\r\n        : Math.min(this.activePage + 1, this.totalPages);\r\n  }\r\n  private last() {\r\n    this.activePage = this.totalPages;\r\n  }\r\n\r\n  private goto(page: number) {\r\n    this.activePage = Math.max(Math.min(page, this.totalPages), 1);\r\n  }\r\n\r\n  private loadElements() {\r\n    this.elPages = this.el.querySelector(\"ch-paginator-pages\");\r\n    this.el\r\n      .querySelectorAll(\"ch-paginator-navigate\")\r\n      .forEach((el: HTMLChPaginatorNavigateElement) => {\r\n        switch (el.type) {\r\n          case \"first\":\r\n            this.elFirst = el;\r\n            break;\r\n          case \"previous\":\r\n            this.elPrevious = el;\r\n            break;\r\n          case \"next\":\r\n            this.elNext = el;\r\n            break;\r\n          case \"last\":\r\n            this.elLast = el;\r\n            break;\r\n        }\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (this.elPages) {\r\n      this.elPages.totalPages = this.totalPages;\r\n      this.elPages.page = this.activePage;\r\n    }\r\n    if (this.elFirst) {\r\n      this.elFirst.disabled = this.activePage === 1;\r\n    }\r\n    if (this.elPrevious) {\r\n      this.elPrevious.disabled = this.activePage === 1;\r\n    }\r\n    if (this.elNext) {\r\n      this.elNext.disabled =\r\n        this.activePage === this.totalPages ||\r\n        (this.totalPages < 0 && !this.hasNextPage);\r\n    }\r\n    if (this.elLast) {\r\n      this.elLast.disabled =\r\n        this.activePage === this.totalPages ||\r\n        (this.totalPages < 0 && !this.hasNextPage);\r\n    }\r\n  }\r\n}\r\n\r\nexport interface ChPaginatorActivePageChangedEvent {\r\n  activePage: number;\r\n}\r\nexport interface ChPaginatorPageNavigationRequestedEvent {\r\n  type: \"first\" | \"previous\" | \"next\" | \"last\" | \"goto\";\r\n  page?: number;\r\n}\r\n","ch-paginator-navigate[disabled] {\r\n    pointer-events: none;\r\n}\r\n","import {\r\n  Component,\r\n  Prop,\r\n  Event,\r\n  EventEmitter,\r\n  h,\r\n  Host,\r\n  Listen\r\n} from \"@stencil/core\";\r\nimport {\r\n  ChPaginatorNavigateClickedEvent,\r\n  ChPaginatorNavigateType\r\n} from \"./ch-paginator-navigate-types\";\r\n\r\n/**\r\n * The 'ch-paginator-navigate' component represents the navigation buttons for the 'ch-paginator' component.\r\n */\r\n@Component({\r\n  tag: \"ch-paginator-navigate\",\r\n  styleUrl: \"ch-paginator-navigate.scss\",\r\n  shadow: false\r\n})\r\nexport class ChPaginatorNavigate {\r\n  /**\r\n   * The type of navigation button.\r\n   */\r\n  @Prop({ reflect: true }) readonly type: ChPaginatorNavigateType;\r\n\r\n  /**\r\n   * Flag indicating if the button is disabled.\r\n   */\r\n  @Prop() readonly disabled: boolean;\r\n\r\n  /**\r\n   * Event emitted when the navigation button is pressed.\r\n   */\r\n  @Event() navigateClicked: EventEmitter<ChPaginatorNavigateClickedEvent>; // prettier-ignore\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  @Listen(\"click\", { passive: true })\r\n  pressedHandler(eventInfo) {\r\n    if (!eventInfo.key || eventInfo.key === \"Enter\" || eventInfo.key === \" \") {\r\n      this.navigateClicked.emit({ type: this.type });\r\n      eventInfo.stopPropagation();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Host role=\"button\" tabindex=\"0\" disabled={this.disabled}></Host>;\r\n  }\r\n}\r\n","@import \"../../common/reset.scss\";\r\n\r\nbutton {\r\n  all: unset;\r\n}\r\n\r\n.pages {\r\n  display: flex;\r\n  align-items: center;\r\n  @include reset-list;\r\n}\r\n","import {\r\n  Component,\r\n  h,\r\n  Prop,\r\n  Watch,\r\n  Event,\r\n  EventEmitter,\r\n  Element,\r\n  Listen\r\n} from \"@stencil/core\";\r\n\r\n/**\r\n * The 'ch-paginator-pages' component represents the pagination pages for the 'ch-paginator' component.\r\n */\r\n@Component({\r\n  tag: \"ch-paginator-pages\",\r\n  styleUrl: \"ch-paginator-pages.scss\",\r\n  shadow: true\r\n})\r\nexport class ChPaginatorPages {\r\n  private buttonActive: HTMLButtonElement;\r\n\r\n  @Element() el: HTMLChPaginatorPagesElement;\r\n\r\n  /**\r\n   * The active page number.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) page = 1;\r\n\r\n  @Watch(\"page\")\r\n  pageHandler() {\r\n    this.pageChanged.emit({ page: this.page });\r\n  }\r\n\r\n  /**\r\n   * The total number of pages.\r\n   */\r\n  @Prop({ reflect: true }) readonly totalPages = 1;\r\n\r\n  /**\r\n   * The maximum number of items to display in the pagination.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) maxSize = 9;\r\n\r\n  @Watch(\"maxSize\")\r\n  maxSizeHandler() {\r\n    this.validateMaxSize();\r\n  }\r\n\r\n  /**\r\n   * Flag to render the first and last pages.\r\n   */\r\n  @Prop() readonly renderFirstLastPages: boolean = true;\r\n\r\n  @Watch(\"renderFirstLastPages\")\r\n  renderFirstLastPagesHandler() {\r\n    this.validateMaxSize();\r\n  }\r\n\r\n  /**\r\n   * The text to display for the dots.\r\n   */\r\n  @Prop() readonly textDots: string = \"...\";\r\n\r\n  /**\r\n   * Event emitted when the page changes.\r\n   */\r\n  @Event() pageChanged: EventEmitter<ChPaginatorPagesPageChangedEvent>;\r\n\r\n  componentDidUpdate() {\r\n    if (document.activeElement === this.el) {\r\n      this.buttonActive.focus();\r\n    }\r\n  }\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  keyDownHandler(eventInfo: KeyboardEvent) {\r\n    switch (eventInfo.key) {\r\n      case \"ArrowLeft\":\r\n        this.page = Math.max(this.page - 1, 1);\r\n        break;\r\n      case \"ArrowRight\":\r\n        this.page = Math.min(this.page + 1, this.totalPages);\r\n        break;\r\n    }\r\n  }\r\n\r\n  @Listen(\"focusin\", { passive: true })\r\n  focusHandler() {\r\n    this.buttonActive.focus();\r\n  }\r\n\r\n  private clickHandler = (eventInfo: Event) => {\r\n    const button = eventInfo.target as HTMLButtonElement;\r\n    this.page = parseInt(button.value);\r\n  };\r\n\r\n  private getItems(): { items: (number | string)[]; activeIndex: number } {\r\n    const padLeft = Math.ceil((this.maxSize - 1) / 2);\r\n    const padRight = Math.floor((this.maxSize - 1) / 2);\r\n    let fillLeft: number, fillStart: (number | string)[];\r\n    let fillRight: number, fillEnd: (number | string)[];\r\n\r\n    if (this.maxSize === 0 || this.maxSize >= this.totalPages) {\r\n      fillStart = this.fillStart(false);\r\n      fillLeft = this.page - 1;\r\n      fillRight = this.totalPages - this.page;\r\n      fillEnd = this.fillEnd(false);\r\n    } else if (this.page <= padLeft && this.page < this.totalPages - padRight) {\r\n      fillStart = this.fillStart(false);\r\n      fillLeft = this.page - 1;\r\n      fillEnd = this.fillEnd(true);\r\n      fillRight = padRight - fillEnd.length + (padLeft - fillLeft);\r\n    } else if (this.page > padLeft && this.page < this.totalPages - padRight) {\r\n      fillStart = this.fillStart(true);\r\n      fillLeft = padLeft - fillStart.length;\r\n      fillEnd = this.fillEnd(true);\r\n      fillRight = padRight - fillEnd.length;\r\n    } else if (this.page > padLeft && this.page >= this.totalPages - padRight) {\r\n      fillEnd = this.fillEnd(false);\r\n      fillRight = this.totalPages - this.page;\r\n      fillStart = this.fillStart(true);\r\n      fillLeft = padLeft - fillStart.length + padRight - fillRight;\r\n    }\r\n\r\n    const items: (number | string)[] = fillStart\r\n      .concat(this.getRangeItems(this.page - fillLeft, this.page - 1))\r\n      .concat([this.page])\r\n      .concat(this.getRangeItems(this.page + 1, this.page + fillRight))\r\n      .concat(fillEnd);\r\n\r\n    return {\r\n      items,\r\n      activeIndex: fillStart.length + fillLeft\r\n    };\r\n  }\r\n\r\n  private fillStart(render: boolean) {\r\n    if (render) {\r\n      return this.renderFirstLastPages ? [1, this.textDots] : [this.textDots];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private fillEnd(render: boolean) {\r\n    if (render) {\r\n      return this.renderFirstLastPages\r\n        ? [this.textDots, this.totalPages]\r\n        : [this.textDots];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private getRangeItems(start: number, end: number): number[] {\r\n    return Array.from({ length: end - start + 1 }, (_, i) => start + i);\r\n  }\r\n\r\n  private validateMaxSize() {\r\n    if (this.maxSize > 0) {\r\n      if (!this.renderFirstLastPages && this.maxSize < 3) {\r\n        this.maxSize = 3;\r\n      } else if (this.renderFirstLastPages && this.maxSize < 5) {\r\n        this.maxSize = 5;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { items, activeIndex } = this.getItems();\r\n\r\n    return (\r\n      <ol part=\"pages\" class=\"pages\">\r\n        {items.map((item, i) => {\r\n          if (typeof item === \"number\") {\r\n            return (\r\n              <li>\r\n                <button\r\n                  part={`page button ${i === activeIndex ? \"active\" : \"\"}`}\r\n                  value={item}\r\n                  onClick={this.clickHandler}\r\n                  ref={el =>\r\n                    (this.buttonActive =\r\n                      i === activeIndex ? el : this.buttonActive)\r\n                  }\r\n                >\r\n                  {item}\r\n                </button>\r\n              </li>\r\n            );\r\n          }\r\n          return (\r\n            <li>\r\n              <button part=\"page button dots\" disabled>\r\n                {item}\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ol>\r\n    );\r\n  }\r\n}\r\n\r\nexport interface ChPaginatorPagesPageChangedEvent {\r\n  page: number;\r\n}\r\n","import { GridChameleonColumnFilterEnum } from \"./gx-grid-column-filter/gx-grid-chameleon-column-filter\";\r\n\r\nexport interface Gx {\r\n  fx: {\r\n    obs: {\r\n      notify(eventName: string): void;\r\n    };\r\n  };\r\n  fn: {\r\n    currentGridRowImpl(gxId: number): string;\r\n    setCurrentGridRow(gxId: number, rowGxId: string): void;\r\n  };\r\n  lang: {\r\n    gxBoolean(value: undefined | boolean | number | string): boolean;\r\n  };\r\n  popup: {\r\n    ispopup(): boolean;\r\n  };\r\n  date: {\r\n    ctod(value: string, format?: \"Y4MD\"): gxdate;\r\n    ctot(value: string, format?: \"Y4MD\"): gxdate;\r\n    isNullDate(date: Date | gxdate): boolean;\r\n  };\r\n  getMessage(id: string): string;\r\n}\r\n\r\nexport interface gxdate {\r\n  toString(): string;\r\n  toISOString(): string;\r\n  Value: Date;\r\n}\r\n\r\nexport interface GxGrid {\r\n  readonly gxId: number;\r\n  readonly ControlName: string;\r\n  readonly columns: GxGridColumn[];\r\n  readonly rows: GxGridRow[];\r\n  readonly usePaging: boolean;\r\n  firstRecordOnPage: string;\r\n  eof: number;\r\n  readonly pageSize: number;\r\n  readonly properties: GxGridCellProperties[][];\r\n  readonly ParentObject: GxObject;\r\n  readonly header: string;\r\n  readonly Class: string;\r\n  readonly gxAllowSelection: boolean;\r\n  readonly gxAllowHovering: boolean;\r\n  readonly pagingBarClass: string;\r\n  readonly pagingButtonFirstClass: string;\r\n  readonly pagingButtonLastClass: string;\r\n  readonly pagingButtonNextClass: string;\r\n  readonly pagingButtonPreviousClass: string;\r\n\r\n  getRowByGxId(gxId: string): GxGridRow;\r\n  setSort(columnIndex: number, asc?: boolean): void;\r\n  selectRow(index: number): void;\r\n  execC2VFunctions(): void;\r\n  executeEvent(columnIndex: number, rowIndex: number): void;\r\n  changeGridPage(direction: string, force?: boolean): any;\r\n  isFirstPage(): boolean;\r\n  isLastPage(): boolean;\r\n  getColumnByHtmlName(htmlName: string): GxGridColumn;\r\n\r\n  // UserControl\r\n  readonly SortMode: \"client\" | \"server\";\r\n\r\n  readonly ColumnsetClass: string;\r\n  readonly ColumnClass: string;\r\n  readonly ColumnFilterClass: string;\r\n  readonly RowClass: string;\r\n  readonly RowEvenClass: string;\r\n  readonly RowOddClass: string;\r\n  readonly RowSelectedClass: string;\r\n  readonly RowHighlightedClass: string;\r\n  readonly CellClass: string;\r\n\r\n  readonly FilterButtonApplyText: string;\r\n  readonly FilterButtonResetText: string;\r\n\r\n  readonly PaginatorShow: boolean;\r\n  readonly PaginatorNavigationButtonTextPosition: \"title\" | \"text\";\r\n  readonly PaginatorPagesShow: boolean;\r\n  readonly PaginatorPagesMaxSize: number;\r\n  readonly PaginatorInfoShow: boolean;\r\n  readonly PaginatorInfoClass: string;\r\n  readonly PaginatorInfoTextMask: string;\r\n  readonly PaginatorInfoEmptyTextMask: string;\r\n\r\n  readonly ActionbarHeaderClass: string;\r\n  readonly ActionbarFooterClass: string;\r\n\r\n  readonly ActionRefreshPosition: \"none\" | \"header\" | \"footer\";\r\n  readonly ActionRefreshTextPosition: \"title\" | \"text\";\r\n  readonly ActionRefreshClass: string;\r\n\r\n  readonly ActionSettingsPosition: \"none\" | \"header\" | \"footer\";\r\n  readonly ActionSettingsTextPosition: \"title\" | \"text\";\r\n  readonly ActionSettingsClass: string;\r\n\r\n  readonly SettingsCloseTextPosition: \"title\" | \"text\";\r\n\r\n  OnPaginationFirst(): void;\r\n  OnPaginationPrevious(): void;\r\n  OnPaginationNext(): void;\r\n  OnPaginationLast(): void;\r\n}\r\n\r\nexport interface GxGridColumn {\r\n  readonly title: string;\r\n  readonly visible: boolean;\r\n  readonly gxColumnClass: string;\r\n  readonly gxControl: GxControl;\r\n  readonly gxAttId: string;\r\n  readonly gxAttName: string;\r\n  readonly htmlName: string;\r\n  readonly index: number;\r\n\r\n  // UserControl\r\n  readonly Icon: string;\r\n  readonly NamePosition: \"title\" | \"text\";\r\n  readonly HeaderClass: string;\r\n  Hidden: number;\r\n  readonly Hideable: number;\r\n  readonly Sortable: number;\r\n  readonly Filterable: number;\r\n  readonly Resizeable: number;\r\n  Size: \"min\" | \"max\" | \"minmax\" | \"auto\" | \"length\" | \"css\";\r\n  SizeLength: string;\r\n  SizeMinLength: string;\r\n  SizeMaxLength: string;\r\n  SizeVariableName: string;\r\n  readonly FilterMode: \"single\" | \"range\";\r\n  readonly FilterEnum: GridChameleonColumnFilterEnum[];\r\n  readonly FilterDateTimeAsDate: number;\r\n  readonly FilterCaption: string;\r\n  readonly FilterLabelEqual: string;\r\n  readonly FilterLabelLess: string;\r\n  readonly FilterLabelGreater: string;\r\n  SortDirection: \"asc\" | \"desc\";\r\n\r\n  order: number;\r\n  filterEqual: string;\r\n  filterLess: string;\r\n  filterGreater: string;\r\n  isFiltering: boolean;\r\n\r\n  render: boolean;\r\n}\r\n\r\nexport interface GxGridRow {\r\n  readonly id: number;\r\n  readonly gxId: string;\r\n  readonly values: string[];\r\n  readonly gxProps: any[];\r\n}\r\n\r\nexport interface GxGridCellProperties {\r\n  column: GxGridColumn;\r\n  visible: boolean;\r\n}\r\n\r\nexport interface GxControl {\r\n  setProperties(): void;\r\n  getHtml(): string;\r\n\r\n  dataType: GxControlDataType;\r\n  type: GxControlType;\r\n  possibleValues: GxControlPossibleValues;\r\n}\r\n\r\nexport type GxControlPossibleValues = [string, string][];\r\n\r\nexport interface GxObject {\r\n  refreshGrid(gridName: string): void;\r\n}\r\n\r\nexport enum GxControlType {\r\n  EDIT = 1,\r\n  RADIO = 4,\r\n  COMBO = 5,\r\n  CHECK = 7\r\n}\r\n\r\nexport enum GxControlDataType {\r\n  NUMBER = 0,\r\n  CHAR = 1,\r\n  DATE = 2,\r\n  DATETIME = 3,\r\n  VARCHAR = 5,\r\n  LONGVARCHAR = 6,\r\n  BOOLEAN = 7\r\n}\r\n",null,"import {\r\n  Element,\r\n  Component,\r\n  h,\r\n  Host,\r\n  Prop,\r\n  Event,\r\n  EventEmitter\r\n} from \"@stencil/core\";\r\nimport {\r\n  Gx,\r\n  GxControlDataType,\r\n  GxControlPossibleValues,\r\n  GxControlType,\r\n  gxdate,\r\n  GxGridColumn\r\n} from \"../genexus\";\r\n\r\ndeclare let gx: Gx;\r\n\r\n/**\r\n * Represents a component that provides filtering controls for a grid column.\r\n */\r\n@Component({\r\n  tag: \"gx-grid-chameleon-column-filter\",\r\n  styleUrl: \"gx-grid-chameleon-column-filter.scss\",\r\n  shadow: true\r\n})\r\n// eslint-disable-next-line @stencil-community/required-prefix\r\nexport class GridChameleonColumnFilter {\r\n  private filterEnum: GridChameleonColumnFilterEnum[] = [];\r\n  private inputEqual: HTMLInputElement | HTMLSelectElement;\r\n  private inputLess: HTMLInputElement | HTMLSelectElement;\r\n  private inputGreater: HTMLInputElement | HTMLSelectElement;\r\n\r\n  @Element() el: HTMLGxGridChameleonColumnFilterElement;\r\n\r\n  /**\r\n   * The grid column associated with this filter.\r\n   */\r\n  @Prop() readonly column!: GxGridColumn;\r\n\r\n  /**\r\n   * The text to display on the \"Apply\" button.\r\n   */\r\n  @Prop() readonly buttonApplyText: string;\r\n\r\n  /**\r\n   * The text to display on the \"Reset\" button.\r\n   */\r\n  @Prop() readonly buttonResetText: string;\r\n\r\n  /**\r\n   * The value to filter for equality comparison.\r\n   */\r\n  @Prop({ mutable: true }) equal: string;\r\n\r\n  /**\r\n   * The value to filter for less-than comparison.\r\n   */\r\n  @Prop({ mutable: true }) less: string;\r\n\r\n  /**\r\n   * The value to filter for greater-than comparison.\r\n   */\r\n  @Prop({ mutable: true }) greater: string;\r\n\r\n  /**\r\n   * Emitted when the filter settings for the column have changed.\r\n   * This event carries the updated filter values.\r\n   */\r\n  @Event()\r\n  columnSettingsChanged: EventEmitter<GridChameleonColumnFilterChanged>;\r\n\r\n  componentWillLoad() {\r\n    if (\r\n      Array.isArray(this.column.FilterEnum) &&\r\n      this.column.FilterEnum.length > 0\r\n    ) {\r\n      this.filterEnum = this.column.FilterEnum;\r\n    }\r\n  }\r\n\r\n  private applyClickHandler = () => {\r\n    this.equal = this.getControlValue(this.inputEqual);\r\n    this.less = this.getControlValue(this.inputLess);\r\n    this.greater = this.getControlValue(this.inputGreater);\r\n\r\n    this.columnSettingsChanged.emit({\r\n      column: this.column,\r\n      equal: this.equal,\r\n      less: this.less,\r\n      greater: this.greater\r\n    });\r\n  };\r\n\r\n  private resetClickHandler = () => {\r\n    this.equal = \"\";\r\n    this.less = \"\";\r\n    this.greater = \"\";\r\n\r\n    this.columnSettingsChanged.emit({\r\n      column: this.column,\r\n      equal: this.equal,\r\n      less: this.less,\r\n      greater: this.greater\r\n    });\r\n  };\r\n\r\n  private getControlValue(input: HTMLInputElement | HTMLSelectElement): string {\r\n    const value = input?.value ?? \"\";\r\n    let dataType = this.column.gxControl.dataType;\r\n\r\n    if (\r\n      dataType === GxControlDataType.DATETIME &&\r\n      this.column.FilterDateTimeAsDate === -1\r\n    ) {\r\n      dataType = GxControlDataType.DATE;\r\n    }\r\n\r\n    switch (dataType) {\r\n      case GxControlDataType.DATE:\r\n        return gx.date.ctod(value, \"Y4MD\").toString();\r\n      case GxControlDataType.DATETIME:\r\n        return gx.date.ctot(value, \"Y4MD\").toString();\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  private toControlValue(value: string): string {\r\n    let dataType = this.column.gxControl.dataType;\r\n\r\n    if (!value) {\r\n      return \"\";\r\n    }\r\n\r\n    if (\r\n      dataType === GxControlDataType.DATETIME &&\r\n      this.column.FilterDateTimeAsDate === -1\r\n    ) {\r\n      dataType = GxControlDataType.DATE;\r\n    }\r\n\r\n    switch (dataType) {\r\n      case GxControlDataType.DATE:\r\n        return this.convertGxDateToISO(gx.date.ctod(value), false);\r\n      case GxControlDataType.DATETIME:\r\n        return this.convertGxDateToISO(gx.date.ctot(value), true);\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  private convertGxDateToISO(gxdate: gxdate, isDateTime: boolean): string {\r\n    const pad = (n: number) => n.toString().padStart(2, \"0\");\r\n    const date = gxdate.Value;\r\n\r\n    if (gx.date.isNullDate(date)) {\r\n      return \"\";\r\n    }\r\n\r\n    if (isDateTime) {\r\n      return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(\r\n        date.getDate()\r\n      )}T${pad(date.getHours())}:${pad(date.getMinutes())}`;\r\n    }\r\n    return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(\r\n      date.getDate()\r\n    )}`;\r\n  }\r\n\r\n  private getFilterInputType(dataType: GxControlDataType): string {\r\n    switch (dataType) {\r\n      case GxControlDataType.BOOLEAN:\r\n        return \"checkbox\";\r\n      case GxControlDataType.CHAR:\r\n      case GxControlDataType.VARCHAR:\r\n      case GxControlDataType.LONGVARCHAR:\r\n        return \"text\";\r\n      case GxControlDataType.DATE:\r\n        return \"date\";\r\n      case GxControlDataType.DATETIME:\r\n        return \"datetime-local\";\r\n      case GxControlDataType.NUMBER:\r\n        return \"number\";\r\n      default:\r\n        return \"text\";\r\n    }\r\n  }\r\n\r\n  private renderColumnFilterControl(\r\n    input: string,\r\n    type: GxControlType,\r\n    dataType: GxControlDataType,\r\n    possibleValues: GxControlPossibleValues,\r\n    label: string,\r\n    value: string\r\n  ) {\r\n    const part = input.replace(\"input\", \"\").toLowerCase();\r\n\r\n    if (this.filterEnum.length > 0) {\r\n      type = GxControlType.COMBO;\r\n      possibleValues = this.filterEnum.map(filter => [\r\n        filter.Value,\r\n        filter.Description\r\n      ]);\r\n    }\r\n\r\n    if (\r\n      dataType === GxControlDataType.DATETIME &&\r\n      this.column.FilterDateTimeAsDate === -1\r\n    ) {\r\n      dataType = GxControlDataType.DATE;\r\n    }\r\n\r\n    switch (type) {\r\n      case GxControlType.EDIT:\r\n      case GxControlType.CHECK:\r\n        return (\r\n          <label part={`label ${part}`}>\r\n            {label}\r\n            <input\r\n              type={this.getFilterInputType(dataType)}\r\n              value={this.toControlValue(value)}\r\n              ref={el => (this[input] = el)}\r\n              part={`field ${part}`}\r\n            />\r\n          </label>\r\n        );\r\n      case GxControlType.COMBO:\r\n        return (\r\n          <label part={`label ${part}`}>\r\n            {label}\r\n            <select ref={el => (this[input] = el)} part={`field ${part}`}>\r\n              {possibleValues.map(([optionValue, optionDescription]) => (\r\n                <option value={optionValue} selected={optionValue === value}>\r\n                  {optionDescription}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n        );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <fieldset part=\"main\">\r\n          <caption part=\"caption\">{this.column.FilterCaption}</caption>\r\n          {this.column.FilterMode === \"single\" &&\r\n            this.renderColumnFilterControl(\r\n              \"inputEqual\",\r\n              this.column.gxControl.type,\r\n              this.column.gxControl.dataType,\r\n              this.column.gxControl.possibleValues,\r\n              this.column.FilterLabelEqual,\r\n              this.equal\r\n            )}\r\n          {this.column.FilterMode === \"range\" &&\r\n            this.renderColumnFilterControl(\r\n              \"inputGreater\",\r\n              this.column.gxControl.type,\r\n              this.column.gxControl.dataType,\r\n              this.column.gxControl.possibleValues,\r\n              this.column.FilterLabelGreater,\r\n              this.greater\r\n            )}\r\n          {this.column.FilterMode === \"range\" &&\r\n            this.renderColumnFilterControl(\r\n              \"inputLess\",\r\n              this.column.gxControl.type,\r\n              this.column.gxControl.dataType,\r\n              this.column.gxControl.possibleValues,\r\n              this.column.FilterLabelLess,\r\n              this.less\r\n            )}\r\n        </fieldset>\r\n        <section part=\"footer\">\r\n          <button part=\"button reset\" onClick={this.resetClickHandler}>\r\n            {this.buttonResetText}\r\n          </button>\r\n          <button part=\"button apply\" onClick={this.applyClickHandler}>\r\n            {this.buttonApplyText}\r\n          </button>\r\n        </section>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nexport interface GridChameleonColumnFilterEnum {\r\n  Description: string;\r\n  Value: string;\r\n}\r\n\r\nexport interface GridChameleonColumnFilterChanged {\r\n  column: GxGridColumn;\r\n  equal?: string;\r\n  less?: string;\r\n  greater?: string;\r\n}\r\n"],"mappings":"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"}