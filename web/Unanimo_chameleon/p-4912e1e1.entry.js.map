{"version":3,"names":["addMetadataInActionMenuItem","itemUIModel","parentItem","MODEL_METADATA","getActionMenuItemMetadata","parseSubModel","parentModel","index","length","actionMenuItemIsActionable","actionMenuItemActionableIsExpandable","items","actionMenuCss","ChActionMenuStyle0","SEPARATE_BY_SPACE_REGEX","DEFAULT_GET_IMAGE_PATH_CALLBACK","item","iconDirection","base","startImgSrc","endImgSrc","ACTION_LINK","ACTION_MENU_ITEM_PARTS_DICTIONARY","ACTION","LINK","ACTION_LINK_EXPANDABLE","EXPANDABLE","ACTION_BUTTON","BUTTON","ACTION_BUTTON_EXPANDABLE","WINDOW_ID","GET_IMAGE_PATH_CALLBACK_REGISTRY","ChActionMenu","startImage","endImage","mainAction","endImgSrcChanged","this","computeImage","getImagePathCallbackChanged","partsChanged","newParts","setExportparts","startImgSrcChanged","undefined","getImagePathCallback","img","model","updateDirectionInImageCustomVar","itemContent","h","class","part","CONTENT","caption","shortcut","SHORTCUT","actionRender","startImageClasses","classes","endImageClasses","action","DISABLED_CLASS","disabled","startImgType","endImgType","expandable","href","role","expanded","toString","style","styles","tokenMap","DISABLED","EXPANDED","COLLAPSED","ref","el","popoverTarget","type","popoverRender","id","WINDOW","actionById","actionElement","blockAlign","firstLayer","actionGroupParent","inlineAlign","popover","show","parts","customParts","ACTION_MENU_ITEM_EXPORT_PARTS","split","join","setAttribute","connectedCallback","getControlRegisterProperty","componentDidRender","metadata","focusFirstItemAfterExpand","requestAnimationFrame","focusFirstActionMenuItem","focusAfterCollapse","focus","render","Host","key","actionMenuKeyEventsDictionary","KEY_CODES","ARROW_UP","event","popoverRef","actionMenuInfo","getActionMenuInfoInEvent","preventDefault","ACTION_MENU_RENDER_TAG_NAME","focusActionMenuLastItem","focusNextElement","ARROW_DOWN","ARROW_RIGHT","newExpanded","ARROW_LEFT","itemMetadata","HOME","actionMenuElementIsFocused","parentElement","END","collapseAllItems","collapseSubTree","expandFromRootToNode","itemUIModelExtended","parentUIModelExtended","actionMenuRenderCss","ChActionMenuRenderStyle0","ChActionMenuRender","actionRef","expandedChanged","addCloseOnClickOutside","removeCloseOnClickOutside","modelChanged","addMetadataToItems","buttonClick","expandedChange","expandedItemChange","hyperlinkClick","renderActionItem","itemsBlockAlign","useGxRender","fromGxImageToURL","gxSettings","gxImageConstructor","link","url","renderItems","renderDictionary","separator","SEPARATOR","slot","name","map","processEvent","closeActionMenu","openActionMenu","actionMenuItemIsHyperlink","eventInfo","emit","defaultPrevented","isExpanded","forceUpdate","handleActionMenuItemClick","handleActionMenuItemMouseOver","handleActionMenuItemMouseOut","handleActionMenuKeyDown","code","keyboardEvent","result","closeOnClickOutside","composedPath","includes","closeOnClickOutsideKeyboard","ESCAPE","document","addEventListener","capture","passive","removeEventListener","disconnectedCallback","canAddEventListeners","onClick","onKeyDown","buttonAccessibleName","ACTION_MENU_PARTS_DICTIONARY","EXPANDABLE_BUTTON","onMouseOver","onMouseOut"],"sources":["src/components/action-menu/internal/parse-model.ts","src/components/action-menu/internal/action-menu/action-menu.scss?tag=ch-action-menu&encapsulation=shadow","src/components/action-menu/internal/action-menu/action-menu.tsx","src/components/action-menu/internal/keyboard-actions.ts","src/components/action-menu/internal/update-expanded.ts","src/components/action-menu/action-menu-render.scss?tag=ch-action-menu-render&encapsulation=shadow","src/components/action-menu/action-menu-render.tsx"],"sourcesContent":["import { MODEL_METADATA } from \"../../../common/reserved-names\";\r\nimport {\r\n  ActionMenuItemActionableModel,\r\n  ActionMenuItemModel,\r\n  ActionMenuItemModelMetadata,\r\n  ActionMenuModel\r\n} from \"../types\";\r\nimport {\r\n  actionMenuItemActionableIsExpandable,\r\n  actionMenuItemIsActionable\r\n} from \"./utils\";\r\n\r\nexport const addMetadataInActionMenuItem = (\r\n  itemUIModel: ActionMenuItemModel,\r\n  parentItem: ActionMenuItemActionableModel | undefined\r\n) => {\r\n  itemUIModel[MODEL_METADATA] = {\r\n    parentItem\r\n  } satisfies ActionMenuItemModelMetadata;\r\n};\r\n\r\nexport const getActionMenuItemMetadata = (\r\n  itemUIModel: ActionMenuItemModel\r\n): ActionMenuItemModelMetadata => itemUIModel[MODEL_METADATA];\r\n\r\nexport const parseSubModel = (\r\n  parentModel: ActionMenuModel,\r\n  parentItem: ActionMenuItemActionableModel | undefined\r\n) => {\r\n  // For loop is the fastest iterator\r\n  for (let index = 0; index < parentModel.length; index++) {\r\n    const itemUIModel = parentModel[index];\r\n\r\n    addMetadataInActionMenuItem(itemUIModel, parentItem);\r\n\r\n    if (\r\n      actionMenuItemIsActionable(itemUIModel) &&\r\n      actionMenuItemActionableIsExpandable(itemUIModel)\r\n    ) {\r\n      parseSubModel(itemUIModel.items, itemUIModel);\r\n    }\r\n  }\r\n};\r\n","@import \"../../../../common/_base\";\r\n\r\n// Must be placed after the \":where(a, button)\"\r\n@include button-reset();\r\n@include box-sizing();\r\n\r\n:host {\r\n  display: grid;\r\n}\r\n\r\n.expandable-button {\r\n  justify-content: center;\r\n  align-self: center;\r\n}\r\n\r\n// TODO: Add a unit test for this\r\n.ch-disabled {\r\n  pointer-events: none;\r\n}\r\n\r\n// Remove focus of the button content\r\n// TODO: Is this necessary?\r\n::slotted([slot=\"action\"]) {\r\n  pointer-events: none;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//           Separation\r\n// - - - - - - - - - - - - - - - -\r\nch-popover {\r\n  --ch-popover-separation-x: var(--ch-action-menu-separation-x);\r\n  --ch-popover-separation-y: var(--ch-action-menu-separation-y);\r\n\r\n  &:not(.hydrated) {\r\n    display: none;\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n// Dummy separation to keep opened the popup when expand-behavior === \"ClickOrHover\"\r\n// ch-window[y-align=\"outside-start\"] {\r\n//   --ch-window-separation: var(--separation-y);\r\n//   --ch-window-separation-y: calc(var(--separation-y) * -1);\r\n// }\r\n\r\n// ch-window[y-align=\"outside-end\"] {\r\n//   --ch-window-separation: var(--separation-y);\r\n//   --ch-window-separation-y: var(--separation-y);\r\n// }\r\n\r\n// ch-window[x-align=\"outside-start\"] {\r\n//   --ch-window-separation: var(--separation-x);\r\n//   --ch-window-separation-x: calc(var(--separation-x) * -1);\r\n// }\r\n\r\n// ch-window[x-align=\"outside-end\"] {\r\n//   --ch-window-separation: var(--separation-x);\r\n//   --ch-window-separation-x: var(--separation-x);\r\n// }\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//             Images\r\n// - - - - - - - - - - - - - - - -\r\n.action {\r\n  text-align: start;\r\n\r\n  --ch-action-menu-item-start-img: var(--ch-start-img--base);\r\n  --ch-action-menu-item-end-img: var(--ch-end-img--base);\r\n\r\n  &.start-img--hover:hover {\r\n    --ch-action-menu-item-start-img: var(--ch-start-img--hover);\r\n  }\r\n  &.end-img--hover:hover {\r\n    --ch-action-menu-item-end-img: var(--ch-start-end--hover);\r\n  }\r\n\r\n  &.start-img--active:active {\r\n    --ch-action-menu-item-start-img: var(--ch-start-img--active);\r\n  }\r\n  &.end-img--active:active {\r\n    --ch-action-menu-item-end-img: var(--ch-start-end--active);\r\n  }\r\n\r\n  &.start-img--focus:focus {\r\n    --ch-action-menu-item-start-img: var(--ch-start-img--focus);\r\n  }\r\n  &.end-img--focus:focus {\r\n    --ch-action-menu-item-end-img: var(--ch-end-img--focus);\r\n  }\r\n\r\n  &.start-img--disabled.ch-disabled {\r\n    --ch-action-menu-item-start-img: var(--ch-start-img--disabled);\r\n  }\r\n  &.end-img--disabled.ch-disabled {\r\n    --ch-action-menu-item-end-img: var(--ch-end-img--disabled);\r\n  }\r\n}\r\n\r\n.pseudo-img--start::before,\r\n.pseudo-img--end::before {\r\n  content: \"\";\r\n  display: block;\r\n  inline-size: var(--ch-action-menu-item__image-size);\r\n  block-size: var(--ch-action-menu-item__image-size);\r\n  min-inline-size: var(--ch-action-menu-item__image-size);\r\n}\r\n\r\n// Background\r\n.start-img-type--background::before {\r\n  background: no-repeat center /\r\n    var(--ch-action-menu-item__background-image-size)\r\n    var(--ch-action-menu-item-start-img);\r\n}\r\n.end-img-type--background::after {\r\n  background: no-repeat center /\r\n    var(--ch-action-menu-item__background-image-size)\r\n    var(--ch-action-menu-item-end-img);\r\n}\r\n\r\n// Mask\r\n.start-img-type--mask::before {\r\n  -webkit-mask: no-repeat center /\r\n    var(--ch-action-menu-item__background-image-size)\r\n    var(--ch-action-menu-item-start-img);\r\n  background-color: currentColor;\r\n}\r\n.end-img-type--mask::after {\r\n  -webkit-mask: no-repeat center /\r\n    var(--ch-action-menu-item__background-image-size)\r\n    var(--ch-action-menu-item-end-img);\r\n  background-color: currentColor;\r\n}\r\n\r\n.content {\r\n  inline-size: 100%;\r\n}\r\n","import {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\n\r\nimport { ChPopoverAlign } from \"../../../popover/types\";\r\nimport {\r\n  tokenMap,\r\n  updateDirectionInImageCustomVar\r\n} from \"../../../../common/utils\";\r\nimport type {\r\n  GxImageMultiStateByDirection,\r\n  GxImageMultiStateEnd,\r\n  GxImageMultiStateStart,\r\n  ImageRender\r\n} from \"../../../../common/types\";\r\nimport {\r\n  DISABLED_CLASS,\r\n  ACTION_MENU_ITEM_EXPORT_PARTS,\r\n  ACTION_MENU_ITEM_PARTS_DICTIONARY\r\n} from \"../../../../common/reserved-names\";\r\nimport type {\r\n  ActionMenuImagePathCallback,\r\n  ActionMenuItemActionableModel\r\n} from \"../../types\";\r\nimport { focusFirstActionMenuItem } from \"../utils\";\r\nimport { getActionMenuItemMetadata } from \"../parse-model\";\r\nimport { getControlRegisterProperty } from \"../../../../common/registry-properties\";\r\n\r\nconst SEPARATE_BY_SPACE_REGEX = /\\s+/;\r\n\r\nconst DEFAULT_GET_IMAGE_PATH_CALLBACK: ActionMenuImagePathCallback = (\r\n  item,\r\n  iconDirection\r\n) => ({ base: iconDirection === \"start\" ? item.startImgSrc : item.endImgSrc });\r\n\r\n// Parts\r\nconst ACTION_LINK =\r\n  `${ACTION_MENU_ITEM_PARTS_DICTIONARY.ACTION} ${ACTION_MENU_ITEM_PARTS_DICTIONARY.LINK}` as const;\r\n\r\nconst ACTION_LINK_EXPANDABLE =\r\n  `${ACTION_LINK} ${ACTION_MENU_ITEM_PARTS_DICTIONARY.EXPANDABLE}` as const;\r\n\r\nconst ACTION_BUTTON =\r\n  `${ACTION_MENU_ITEM_PARTS_DICTIONARY.ACTION} ${ACTION_MENU_ITEM_PARTS_DICTIONARY.BUTTON}` as const;\r\n\r\nconst ACTION_BUTTON_EXPANDABLE =\r\n  `${ACTION_BUTTON} ${ACTION_MENU_ITEM_PARTS_DICTIONARY.EXPANDABLE}` as const;\r\n\r\nconst WINDOW_ID = \"window\";\r\n\r\nlet GET_IMAGE_PATH_CALLBACK_REGISTRY: ActionMenuImagePathCallback;\r\n\r\n@Component({\r\n  shadow: { delegatesFocus: true },\r\n  styleUrl: \"action-menu.scss\",\r\n  tag: \"ch-action-menu\"\r\n})\r\nexport class ChActionMenu implements ComponentInterface {\r\n  #startImage: GxImageMultiStateStart | undefined;\r\n  #endImage: GxImageMultiStateEnd | undefined;\r\n\r\n  // Refs\r\n  #mainAction: HTMLButtonElement | HTMLAnchorElement;\r\n\r\n  @Element() el: HTMLChActionMenuElement;\r\n\r\n  /**\r\n   * Specifies if the current parent of the item is the action-group control.\r\n   */\r\n  @Prop() readonly actionGroupParent: boolean = false;\r\n\r\n  /**\r\n   * Specifies the block alignment of the dropdown menu that is placed\r\n   * relative to the expandable button.\r\n   */\r\n  @Prop() readonly blockAlign: ChPopoverAlign = \"center\";\r\n\r\n  /**\r\n   * Specifies the caption that the control will display.\r\n   */\r\n  @Prop() readonly caption: string;\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * Specifies the src of the end image.\r\n   */\r\n  @Prop() readonly endImgSrc?: string | undefined;\r\n  @Watch(\"endImgSrc\")\r\n  endImgSrcChanged() {\r\n    this.#endImage = this.#computeImage(\"end\");\r\n  }\r\n\r\n  /**\r\n   * Specifies how the end image will be rendered.\r\n   */\r\n  @Prop() readonly endImgType: ImageRender = \"background\";\r\n\r\n  /**\r\n   * Specifies whether the item contains a subtree. `true` if the item has a\r\n   * subtree.\r\n   */\r\n  @Prop() readonly expandable: boolean = false;\r\n\r\n  /**\r\n   * `true` to display the dropdown menu.\r\n   */\r\n  @Prop() readonly expanded: boolean | undefined = false;\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * startImgSrc or endImgSrc needs to be resolved.\r\n   */\r\n  @Prop() readonly getImagePathCallback?: ActionMenuImagePathCallback;\r\n  @Watch(\"getImagePathCallback\")\r\n  getImagePathCallbackChanged() {\r\n    this.#startImage = this.#computeImage(\"start\");\r\n    this.#endImage = this.#computeImage(\"end\");\r\n  }\r\n\r\n  /**\r\n   * Specifies the hyperlink of the item. If this property is defined, the\r\n   * control will render an anchor tag with this `href`. Otherwise, it will\r\n   * render a button tag.\r\n   */\r\n  @Prop() readonly href: string | undefined;\r\n\r\n  /**\r\n   * Specifies the inline alignment of the dropdown menu that is placed\r\n   * relative to the expandable button.\r\n   */\r\n  @Prop() readonly inlineAlign: ChPopoverAlign = \"center\";\r\n\r\n  /**\r\n   * Specifies the extended model of the control. This property is only needed\r\n   * to know the UI Model on each event\r\n   */\r\n  @Prop() readonly model!: ActionMenuItemActionableModel;\r\n\r\n  /**\r\n   * Determine if the dropdown menu should be opened when the expandable\r\n   * button of the control is focused.\r\n   * TODO: Add implementation\r\n   */\r\n  @Prop() readonly openOnFocus: boolean = false;\r\n\r\n  /**\r\n   * Specifies a set of parts to use in every DOM element of the control.\r\n   */\r\n  @Prop() readonly parts?: string;\r\n  @Watch(\"parts\")\r\n  partsChanged(newParts: string) {\r\n    this.#setExportparts(newParts);\r\n  }\r\n\r\n  /**\r\n   * Specifies the shortcut caption that the control will display.\r\n   */\r\n  @Prop() readonly shortcut: string | undefined;\r\n\r\n  /**\r\n   * Specifies the src for the left img.\r\n   */\r\n  @Prop() readonly startImgSrc?: string | undefined;\r\n  @Watch(\"startImgSrc\")\r\n  startImgSrcChanged() {\r\n    this.#startImage = this.#computeImage(\"start\");\r\n  }\r\n\r\n  /**\r\n   * Specifies how the start image will be rendered.\r\n   */\r\n  @Prop() readonly startImgType: ImageRender = \"background\";\r\n\r\n  #computeImage = <T extends \"start\" | \"end\">(\r\n    iconDirection: T\r\n  ): GxImageMultiStateByDirection<T> | undefined => {\r\n    if (\r\n      (iconDirection === \"start\" && !this.startImgSrc) ||\r\n      (iconDirection === \"end\" && !this.endImgSrc)\r\n    ) {\r\n      return undefined;\r\n    }\r\n\r\n    const getImagePathCallback =\r\n      this.getImagePathCallback ?? GET_IMAGE_PATH_CALLBACK_REGISTRY;\r\n\r\n    if (!getImagePathCallback) {\r\n      return undefined;\r\n    }\r\n\r\n    const img = getImagePathCallback(this.model, iconDirection);\r\n\r\n    return img\r\n      ? (updateDirectionInImageCustomVar(\r\n          img,\r\n          iconDirection\r\n        ) as GxImageMultiStateByDirection<T>)\r\n      : undefined;\r\n  };\r\n\r\n  #itemContent = () => [\r\n    <span class=\"content\" part={ACTION_MENU_ITEM_PARTS_DICTIONARY.CONTENT}>\r\n      {this.caption}\r\n    </span>,\r\n\r\n    !!this.shortcut && (\r\n      <span\r\n        aria-hidden=\"true\"\r\n        part={ACTION_MENU_ITEM_PARTS_DICTIONARY.SHORTCUT}\r\n      >\r\n        {this.shortcut}\r\n      </span>\r\n    )\r\n  ];\r\n\r\n  #actionRender = () => {\r\n    // Classes\r\n    const startImageClasses = this.#startImage?.classes;\r\n    const endImageClasses = this.#endImage?.classes;\r\n\r\n    const classes = {\r\n      action: true,\r\n      [DISABLED_CLASS]: this.disabled,\r\n\r\n      [`start-img-type--${\r\n        this.startImgType ?? \"background\"\r\n      } pseudo-img--start`]: !!this.#startImage,\r\n      [startImageClasses]: !!startImageClasses,\r\n\r\n      [`end-img-type--${this.endImgType ?? \"background\"} pseudo-img--end`]:\r\n        !!this.#endImage,\r\n      [endImageClasses]: !!endImageClasses\r\n    };\r\n\r\n    const expandable = this.expandable;\r\n\r\n    return this.href ? (\r\n      <a\r\n        role={this.disabled ? \"link\" : undefined}\r\n        aria-controls={expandable ? WINDOW_ID : null}\r\n        aria-disabled={this.disabled ? \"true\" : undefined}\r\n        aria-expanded={expandable ? (!!this.expanded).toString() : null}\r\n        aria-haspopup={expandable ? \"true\" : null}\r\n        class={classes}\r\n        style={this.#endImage?.styles ?? undefined}\r\n        part={tokenMap({\r\n          [ACTION_LINK_EXPANDABLE]: expandable,\r\n          [ACTION_LINK]: !expandable,\r\n          [ACTION_MENU_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n          [ACTION_MENU_ITEM_PARTS_DICTIONARY.EXPANDED]:\r\n            expandable && this.expanded,\r\n          [ACTION_MENU_ITEM_PARTS_DICTIONARY.COLLAPSED]:\r\n            expandable && !this.expanded\r\n        })}\r\n        href={!this.disabled ? this.href : undefined}\r\n        // TODO: Use a different ref due to a StencilJS bug when reassigning\r\n        // the same variable with a different element's ref in runtime\r\n        ref={el => (this.#mainAction = el)}\r\n      >\r\n        {this.#itemContent()}\r\n      </a>\r\n    ) : (\r\n      <button\r\n        popoverTarget={WINDOW_ID}\r\n        aria-controls={expandable ? WINDOW_ID : null}\r\n        aria-expanded={expandable ? (!!this.expanded).toString() : null}\r\n        aria-haspopup={expandable ? \"true\" : null}\r\n        class={classes}\r\n        part={tokenMap({\r\n          [ACTION_BUTTON_EXPANDABLE]: expandable,\r\n          [ACTION_BUTTON]: !expandable,\r\n          [ACTION_MENU_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n          [ACTION_MENU_ITEM_PARTS_DICTIONARY.EXPANDED]:\r\n            expandable && this.expanded,\r\n          [ACTION_MENU_ITEM_PARTS_DICTIONARY.COLLAPSED]:\r\n            expandable && !this.expanded\r\n        })}\r\n        style={this.#endImage?.styles ?? undefined}\r\n        disabled={this.disabled}\r\n        type=\"button\"\r\n        ref={el => (this.#mainAction = el)}\r\n      >\r\n        {this.#itemContent()}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  #popoverRender = () => (\r\n    <ch-popover\r\n      role=\"list\"\r\n      id={WINDOW_ID}\r\n      part={ACTION_MENU_ITEM_PARTS_DICTIONARY.WINDOW}\r\n      actionById\r\n      actionElement={this.#mainAction as HTMLButtonElement}\r\n      blockAlign={this.blockAlign}\r\n      firstLayer={this.actionGroupParent}\r\n      inlineAlign={this.inlineAlign}\r\n      popover=\"manual\"\r\n      show\r\n    >\r\n      <slot />\r\n    </ch-popover>\r\n  );\r\n\r\n  #setExportparts = (parts?: string) => {\r\n    // TODO: Add tests for this.\r\n    // TODO: Should be global the Regex?\r\n    // TODO: Test this with multiple parts\r\n\r\n    const customParts = parts\r\n      ? `${ACTION_MENU_ITEM_EXPORT_PARTS},${parts\r\n          .split(SEPARATE_BY_SPACE_REGEX)\r\n          .join(\",\")}`\r\n      : ACTION_MENU_ITEM_EXPORT_PARTS;\r\n\r\n    this.el.setAttribute(\"exportparts\", customParts);\r\n  };\r\n\r\n  connectedCallback() {\r\n    this.el.setAttribute(\"role\", \"listitem\");\r\n    this.#setExportparts(this.parts);\r\n\r\n    // Initialize default getImagePathCallback\r\n    GET_IMAGE_PATH_CALLBACK_REGISTRY ??=\r\n      getControlRegisterProperty(\r\n        \"getImagePathCallback\",\r\n        \"ch-action-menu-render\"\r\n      ) ?? DEFAULT_GET_IMAGE_PATH_CALLBACK;\r\n\r\n    this.#startImage = this.#computeImage(\"start\");\r\n    this.#endImage = this.#computeImage(\"end\");\r\n  }\r\n\r\n  componentDidRender() {\r\n    const metadata = getActionMenuItemMetadata(this.model);\r\n\r\n    if (this.expanded && metadata.focusFirstItemAfterExpand) {\r\n      metadata.focusFirstItemAfterExpand = false;\r\n\r\n      // Wait until the first item is rendered\r\n      requestAnimationFrame(() => focusFirstActionMenuItem(this.el));\r\n    }\r\n\r\n    if (!this.expanded && metadata.focusAfterCollapse) {\r\n      metadata.focusAfterCollapse = false;\r\n      this.el.focus();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host style={this.#startImage?.styles ?? undefined}>\r\n        {this.#actionRender()}\r\n\r\n        {this.expandable && this.expanded && this.#popoverRender()}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","import { KEY_CODES } from \"../../../common/reserved-names\";\r\nimport {\r\n  ActionMenuItemActionableModel,\r\n  ActionMenuKeyboardActionResult\r\n} from \"../types\";\r\nimport { getActionMenuItemMetadata } from \"./parse-model\";\r\nimport {\r\n  ACTION_MENU_RENDER_TAG_NAME,\r\n  actionMenuElementIsFocused,\r\n  actionMenuItemActionableIsExpandable,\r\n  focusActionMenuLastItem,\r\n  focusFirstActionMenuItem,\r\n  focusNextElement,\r\n  getActionMenuInfoInEvent\r\n} from \"./utils\";\r\n\r\ntype ActionMenuKeyDownEvents =\r\n  | typeof KEY_CODES.ARROW_UP\r\n  | typeof KEY_CODES.ARROW_RIGHT\r\n  | typeof KEY_CODES.ARROW_DOWN\r\n  | typeof KEY_CODES.ARROW_LEFT\r\n  | typeof KEY_CODES.HOME\r\n  | typeof KEY_CODES.END;\r\n\r\nexport const actionMenuKeyEventsDictionary: Record<\r\n  ActionMenuKeyDownEvents,\r\n  (\r\n    event: KeyboardEvent,\r\n    popoverRef: HTMLChPopoverElement\r\n  ) => void | ActionMenuKeyboardActionResult\r\n> = {\r\n  [KEY_CODES.ARROW_UP]: (event, popoverRef) => {\r\n    const actionMenuInfo = getActionMenuInfoInEvent(event);\r\n\r\n    if (actionMenuInfo === undefined) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n\r\n    return actionMenuInfo === ACTION_MENU_RENDER_TAG_NAME\r\n      ? focusActionMenuLastItem(popoverRef)\r\n      : focusNextElement(actionMenuInfo, \"previous\");\r\n  },\r\n\r\n  [KEY_CODES.ARROW_DOWN]: (event, popoverRef) => {\r\n    const actionMenuInfo = getActionMenuInfoInEvent(event);\r\n\r\n    if (actionMenuInfo === undefined) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n\r\n    return actionMenuInfo === ACTION_MENU_RENDER_TAG_NAME\r\n      ? focusFirstActionMenuItem(popoverRef)\r\n      : focusNextElement(actionMenuInfo, \"next\");\r\n  },\r\n\r\n  [KEY_CODES.ARROW_RIGHT]: event => {\r\n    const actionMenuInfo = getActionMenuInfoInEvent(event);\r\n\r\n    if (\r\n      actionMenuInfo === undefined ||\r\n      actionMenuInfo === ACTION_MENU_RENDER_TAG_NAME ||\r\n      !actionMenuItemActionableIsExpandable(\r\n        actionMenuInfo.model as ActionMenuItemActionableModel\r\n      )\r\n    ) {\r\n      return;\r\n    }\r\n    event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n\r\n    if (actionMenuInfo.model.expanded) {\r\n      return focusFirstActionMenuItem(actionMenuInfo.ref);\r\n    }\r\n\r\n    getActionMenuItemMetadata(actionMenuInfo.model).focusFirstItemAfterExpand =\r\n      true;\r\n\r\n    return {\r\n      newExpanded: true,\r\n      model: actionMenuInfo.model\r\n    };\r\n  },\r\n\r\n  [KEY_CODES.ARROW_LEFT]: event => {\r\n    const actionMenuInfo = getActionMenuInfoInEvent(event);\r\n\r\n    if (\r\n      actionMenuInfo === undefined ||\r\n      actionMenuInfo === ACTION_MENU_RENDER_TAG_NAME\r\n    ) {\r\n      return undefined;\r\n    }\r\n    const itemMetadata = getActionMenuItemMetadata(actionMenuInfo.model);\r\n\r\n    if (!itemMetadata.parentItem) {\r\n      return undefined;\r\n    }\r\n    event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n\r\n    // Focus the parent after collapse\r\n    getActionMenuItemMetadata(itemMetadata.parentItem).focusAfterCollapse =\r\n      true;\r\n\r\n    return {\r\n      newExpanded: false,\r\n      model: itemMetadata.parentItem\r\n    };\r\n  },\r\n\r\n  [KEY_CODES.HOME]: (event, popoverRef) => {\r\n    const actionMenuInfo = getActionMenuInfoInEvent(event);\r\n\r\n    if (actionMenuInfo === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (actionMenuInfo === ACTION_MENU_RENDER_TAG_NAME) {\r\n      event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n      return focusFirstActionMenuItem(popoverRef);\r\n    }\r\n\r\n    // TODO: Is this function necessary?\r\n    if (actionMenuElementIsFocused(actionMenuInfo.ref)) {\r\n      event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n      return focusFirstActionMenuItem(\r\n        actionMenuInfo.ref.parentElement as HTMLChActionMenuElement\r\n      );\r\n    }\r\n  },\r\n\r\n  [KEY_CODES.END]: (event, popoverRef) => {\r\n    const actionMenuInfo = getActionMenuInfoInEvent(event);\r\n\r\n    if (actionMenuInfo === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (actionMenuInfo === ACTION_MENU_RENDER_TAG_NAME) {\r\n      event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n      return focusActionMenuLastItem(popoverRef);\r\n    }\r\n\r\n    // TODO: Is this function necessary?\r\n    if (actionMenuElementIsFocused(actionMenuInfo.ref)) {\r\n      event.preventDefault(); // Prevent page scroll. TODO: Add a unit test for this\r\n      return focusActionMenuLastItem(\r\n        actionMenuInfo.ref.parentElement as HTMLChActionMenuElement\r\n      );\r\n    }\r\n  }\r\n};\r\n","import { ActionMenuItemActionableModel, ActionMenuModel } from \"../types\";\r\nimport { getActionMenuItemMetadata } from \"./parse-model\";\r\nimport { actionMenuItemIsActionable } from \"./utils\";\r\n\r\nexport const collapseAllItems = (model: ActionMenuModel) => {\r\n  // For loop is the fastest iterator\r\n  for (let index = 0; index < model.length; index++) {\r\n    const itemUIModel = model[index];\r\n\r\n    if (actionMenuItemIsActionable(itemUIModel) && itemUIModel.expanded) {\r\n      itemUIModel.expanded = false;\r\n\r\n      if (itemUIModel.items?.length > 0) {\r\n        collapseAllItems(itemUIModel.items);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport const collapseSubTree = (item: ActionMenuItemActionableModel) => {\r\n  item.expanded = false;\r\n\r\n  if (item.items?.length > 0) {\r\n    collapseAllItems(item.items);\r\n  }\r\n};\r\n\r\nexport const expandFromRootToNode = (\r\n  itemUIModelExtended: ActionMenuItemActionableModel\r\n) => {\r\n  let parentUIModelExtended = itemUIModelExtended;\r\n\r\n  while (parentUIModelExtended !== undefined) {\r\n    parentUIModelExtended.expanded = true;\r\n\r\n    parentUIModelExtended = getActionMenuItemMetadata(\r\n      parentUIModelExtended\r\n    ).parentItem;\r\n  }\r\n};\r\n","@import \"../../common/base\";\r\n\r\n@include button-reset();\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-action-menu-item__image-size:\r\n   * Specifies the box size that contains the start or end images of the items.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-action-menu-item__image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-action-menu-item__background-image-size:\r\n   * Specifies the size of the start and end images of the items.\r\n   * @default 100%\r\n   */\r\n  --ch-action-menu-item__background-image-size: 100%;\r\n\r\n  --ch-action-menu-separation: 0px;\r\n  --ch-action-menu-separation-x: var(--ch-action-menu-separation);\r\n  --ch-action-menu-separation-y: var(--ch-action-menu-separation);\r\n\r\n  display: contents;\r\n}\r\n\r\n::slotted(action) {\r\n  pointer-events: none;\r\n}\r\n\r\nhr {\r\n  display: grid;\r\n  block-size: 1px;\r\n  margin: 0;\r\n  background-color: color-mix(in srgb, currentColor 25%, transparent);\r\n  border: unset;\r\n  pointer-events: none;\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  forceUpdate,\r\n  h,\r\n  Host,\r\n  Prop,\r\n  Watch\r\n} from \"@stencil/core\";\r\n\r\nimport type {\r\n  ActionMenuExpandedChangeEvent,\r\n  ActionMenuHyperlinkClickEvent,\r\n  ActionMenuImagePathCallback,\r\n  ActionMenuItemActionableModel,\r\n  ActionMenuItemTypeMapping,\r\n  ActionMenuItemTypeSeparator,\r\n  ActionMenuItemTypeSlot,\r\n  ActionMenuKeyboardActionResult,\r\n  ActionMenuModel\r\n} from \"./types\";\r\nimport type { ChPopoverAlign } from \"../popover/types\";\r\n\r\nimport { fromGxImageToURL } from \"../tree-view/genexus-implementation\";\r\nimport {\r\n  ACTION_MENU_ITEM_PARTS_DICTIONARY,\r\n  ACTION_MENU_PARTS_DICTIONARY,\r\n  KEY_CODES\r\n} from \"../../common/reserved-names\";\r\n\r\nimport { tokenMap } from \"../../common/utils\";\r\nimport { actionMenuKeyEventsDictionary } from \"./internal/keyboard-actions\";\r\nimport { parseSubModel } from \"./internal/parse-model\";\r\nimport {\r\n  collapseAllItems,\r\n  collapseSubTree,\r\n  expandFromRootToNode\r\n} from \"./internal/update-expanded\";\r\nimport {\r\n  ACTION_MENU_RENDER_TAG_NAME,\r\n  actionMenuItemActionableIsExpandable,\r\n  actionMenuItemIsActionable,\r\n  actionMenuItemIsHyperlink,\r\n  getActionMenuInfoInEvent,\r\n  WINDOW_ID\r\n} from \"./internal/utils\";\r\n\r\n@Component({\r\n  tag: \"ch-action-menu-render\",\r\n  styleUrl: \"action-menu-render.scss\",\r\n  shadow: true // Necessary to avoid focus capture\r\n})\r\nexport class ChActionMenuRender {\r\n  // Refs\r\n  #actionRef!: HTMLButtonElement;\r\n  #popoverRef: HTMLChPopoverElement | undefined;\r\n\r\n  @Element() el: HTMLChActionMenuRenderElement;\r\n\r\n  /**\r\n   * This attribute lets you specify the label for the first expandable button.\r\n   * Important for accessibility.\r\n   */\r\n  @Prop() readonly buttonAccessibleName: string;\r\n\r\n  /**\r\n   * Specifies the block alignment of the dropdown menu that is placed\r\n   * relative to the expandable button.\r\n   */\r\n  @Prop() readonly blockAlign: ChPopoverAlign = \"outside-end\";\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * startImgSrc or endImgSrc (of an item) needs to be resolved.\r\n   */\r\n  @Prop() readonly getImagePathCallback?: ActionMenuImagePathCallback;\r\n\r\n  /**\r\n   * `true` to expand the dropdown window.\r\n   */\r\n  @Prop({ mutable: true }) expanded: boolean = false;\r\n  @Watch(\"expanded\")\r\n  expandedChanged() {\r\n    if (this.expanded) {\r\n      this.#addCloseOnClickOutside();\r\n    } else {\r\n      this.#removeCloseOnClickOutside();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly gxImageConstructor?: (name: string) => any;\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly gxSettings?: any;\r\n\r\n  /**\r\n   * Specifies the inline alignment of the dropdown section that is placed\r\n   * relative to the expandable button.\r\n   */\r\n  @Prop() readonly inlineAlign: ChPopoverAlign = \"center\";\r\n\r\n  /**\r\n   * This property lets you define the model of the control.\r\n   */\r\n  @Prop() readonly model: ActionMenuModel | undefined;\r\n  @Watch(\"model\")\r\n  modelChanged() {\r\n    this.#addMetadataToItems();\r\n  }\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly useGxRender?: boolean = false;\r\n\r\n  /**\r\n   * Fired when a button is clicked.\r\n   * This event can be prevented.\r\n   */\r\n  @Event() buttonClick: EventEmitter<ActionMenuItemActionableModel>;\r\n\r\n  /**\r\n   * Fired when the visibility of the main dropdown is changed.\r\n   */\r\n  @Event() expandedChange: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Fired when the visibility of a dropdown item is changed.\r\n   */\r\n  @Event() expandedItemChange: EventEmitter<ActionMenuExpandedChangeEvent>;\r\n\r\n  /**\r\n   * Fired when an hyperlink is clicked.\r\n   * This event can be prevented, but the dropdown will be closed in any case\r\n   * (prevented or not).\r\n   */\r\n  @Event() hyperlinkClick: EventEmitter<ActionMenuHyperlinkClickEvent>;\r\n\r\n  #renderActionItem = (itemUIModel: ActionMenuItemActionableModel) => {\r\n    const expandable = actionMenuItemActionableIsExpandable(itemUIModel);\r\n\r\n    return (\r\n      <ch-action-menu\r\n        blockAlign={itemUIModel.itemsBlockAlign ?? \"inside-start\"}\r\n        caption={itemUIModel.caption}\r\n        disabled={itemUIModel.disabled ?? this.disabled}\r\n        endImgSrc={\r\n          this.useGxRender\r\n            ? fromGxImageToURL(\r\n                itemUIModel.endImgSrc,\r\n                this.gxSettings,\r\n                this.gxImageConstructor\r\n              )\r\n            : itemUIModel.endImgSrc\r\n        }\r\n        endImgType={itemUIModel.endImgType}\r\n        expandable={expandable}\r\n        expanded={itemUIModel.expanded}\r\n        getImagePathCallback={this.getImagePathCallback}\r\n        href={itemUIModel.link?.url}\r\n        inlineAlign={itemUIModel.itemsBlockAlign ?? \"outside-end\"}\r\n        model={itemUIModel}\r\n        parts={itemUIModel.parts}\r\n        shortcut={itemUIModel.shortcut}\r\n        startImgSrc={\r\n          this.useGxRender\r\n            ? fromGxImageToURL(\r\n                itemUIModel.startImgSrc,\r\n                this.gxSettings,\r\n                this.gxImageConstructor\r\n              )\r\n            : itemUIModel.startImgSrc\r\n        }\r\n        startImgType={itemUIModel.startImgType}\r\n      >\r\n        {expandable &&\r\n          itemUIModel.expanded &&\r\n          this.#renderItems(itemUIModel.items)}\r\n      </ch-action-menu>\r\n    );\r\n  };\r\n\r\n  #renderDictionary: {\r\n    [key in ActionMenuItemTypeSeparator | ActionMenuItemTypeSlot]: (\r\n      model: ActionMenuItemTypeMapping[key]\r\n    ) => any;\r\n  } = {\r\n    separator: item => (\r\n      <hr\r\n        key={item.id}\r\n        part={tokenMap({\r\n          [item.id]: !!item.id,\r\n          [ACTION_MENU_ITEM_PARTS_DICTIONARY.SEPARATOR]: true,\r\n          [item.parts]: !!item.parts\r\n        })}\r\n      />\r\n    ),\r\n    slot: item => <slot name={item.id} />\r\n  };\r\n\r\n  #renderItems = (model: ActionMenuModel) =>\r\n    model.map(itemUIModel =>\r\n      actionMenuItemIsActionable(itemUIModel)\r\n        ? this.#renderActionItem(itemUIModel)\r\n        : this.#renderDictionary[itemUIModel.type](\r\n            // TODO: Improve type inference\r\n            itemUIModel as any\r\n          )\r\n    );\r\n\r\n  #processEvent = (\r\n    event: MouseEvent | PointerEvent,\r\n    type: \"click\" | \"mouseover\" | \"mouseout\"\r\n  ) => {\r\n    const actionMenuInfo = getActionMenuInfoInEvent(event);\r\n\r\n    if (actionMenuInfo === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (actionMenuInfo === ACTION_MENU_RENDER_TAG_NAME) {\r\n      if (type === \"click\") {\r\n        return this.expanded ? this.#closeActionMenu() : this.#openActionMenu();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const itemUIModel = actionMenuInfo.model;\r\n\r\n    // If \"click\" the event is a PointerEvent\r\n    if (type === \"click\") {\r\n      // Clicked a hyperlink element\r\n      if (actionMenuItemIsHyperlink(itemUIModel)) {\r\n        const eventInfo = this.hyperlinkClick.emit({\r\n          item: itemUIModel,\r\n          event: event as PointerEvent\r\n        });\r\n\r\n        // Prevent a tag navigation, but don't return so we can close the dropdown\r\n        if (eventInfo.defaultPrevented) {\r\n          event.preventDefault();\r\n        }\r\n\r\n        // TODO: Emit expandedChange event for all element?\r\n        this.#closeActionMenu();\r\n\r\n        return;\r\n      }\r\n\r\n      // Clicked a button element that is a leaf\r\n      if (!actionMenuItemActionableIsExpandable(itemUIModel)) {\r\n        const eventInfo = this.buttonClick.emit(itemUIModel);\r\n\r\n        // Prevent button click and avoid closing the dropdown\r\n        if (eventInfo.defaultPrevented) {\r\n          event.preventDefault();\r\n          return;\r\n        }\r\n\r\n        // TODO: Emit expandedChange event for all element?\r\n        this.#closeActionMenu();\r\n\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (type === \"mouseout\") {\r\n      collapseSubTree(itemUIModel);\r\n\r\n      // TODO: Emit expandedChange event\r\n    } else {\r\n      collapseAllItems(this.model);\r\n      expandFromRootToNode(itemUIModel);\r\n\r\n      const isExpanded = type === \"mouseover\" || itemUIModel.expanded;\r\n\r\n      if (itemUIModel.expanded !== isExpanded) {\r\n        itemUIModel.expanded = isExpanded;\r\n\r\n        // Only emit the event if the expanded value was changed\r\n        this.expandedItemChange.emit({\r\n          item: itemUIModel,\r\n          expanded: isExpanded\r\n        });\r\n      }\r\n    }\r\n\r\n    forceUpdate(this);\r\n  };\r\n\r\n  #handleActionMenuItemClick = (event: PointerEvent) =>\r\n    this.#processEvent(event, \"click\");\r\n\r\n  #handleActionMenuItemMouseOver = (event: MouseEvent) =>\r\n    this.#processEvent(event, \"mouseover\");\r\n\r\n  #handleActionMenuItemMouseOut = (event: MouseEvent) =>\r\n    this.#processEvent(event, \"mouseout\");\r\n\r\n  #handleActionMenuKeyDown = (event: KeyboardEvent) => {\r\n    if (\r\n      !this.expanded &&\r\n      (event.code === KEY_CODES.ARROW_UP || event.code === KEY_CODES.ARROW_DOWN)\r\n    ) {\r\n      this.expanded = true;\r\n      this.expandedChange.emit(true);\r\n      return;\r\n    }\r\n\r\n    const keyboardEvent = actionMenuKeyEventsDictionary[event.code];\r\n\r\n    if (keyboardEvent) {\r\n      const result: void | ActionMenuKeyboardActionResult = keyboardEvent(\r\n        event,\r\n        this.#popoverRef\r\n      );\r\n\r\n      if (!result) {\r\n        return;\r\n      }\r\n\r\n      if (result.newExpanded) {\r\n        // TODO: Emit expandedChange event for the collapsed dropdown items\r\n\r\n        collapseAllItems(this.model);\r\n        expandFromRootToNode(result.model);\r\n      } else {\r\n        collapseSubTree(result.model);\r\n      }\r\n\r\n      this.expandedItemChange.emit({\r\n        item: result.model,\r\n        expanded: result.newExpanded\r\n      });\r\n\r\n      forceUpdate(this);\r\n    }\r\n  };\r\n\r\n  #closeOnClickOutside = (event: MouseEvent) => {\r\n    const composedPath = event.composedPath();\r\n\r\n    if (!composedPath.includes(this.el)) {\r\n      this.#closeActionMenu();\r\n    }\r\n  };\r\n\r\n  #closeOnClickOutsideKeyboard = (event: KeyboardEvent) => {\r\n    if (event.code === KEY_CODES.ESCAPE) {\r\n      this.#actionRef.focus();\r\n      this.#closeActionMenu();\r\n    }\r\n  };\r\n\r\n  #openActionMenu = () => {\r\n    this.expanded = true;\r\n    this.expandedChange.emit(true);\r\n  };\r\n\r\n  #closeActionMenu = () => {\r\n    collapseAllItems(this.model);\r\n\r\n    this.expanded = false;\r\n    this.expandedChange.emit(false);\r\n  };\r\n\r\n  #addCloseOnClickOutside = () => {\r\n    document.addEventListener(\"click\", this.#closeOnClickOutside, {\r\n      capture: true,\r\n      passive: true\r\n    });\r\n    document.addEventListener(\"keydown\", this.#closeOnClickOutsideKeyboard, {\r\n      capture: true,\r\n      passive: true\r\n    });\r\n  };\r\n\r\n  #removeCloseOnClickOutside = () => {\r\n    document.removeEventListener(\"click\", this.#closeOnClickOutside, true);\r\n    document.removeEventListener(\r\n      \"keydown\",\r\n      this.#closeOnClickOutsideKeyboard,\r\n      true\r\n    );\r\n  };\r\n\r\n  #addMetadataToItems = () => {\r\n    if (this.model) {\r\n      parseSubModel(this.model, undefined);\r\n    }\r\n  };\r\n\r\n  connectedCallback() {\r\n    // TODO: Check if this code should be in the constructor\r\n    this.#addMetadataToItems();\r\n\r\n    if (this.expanded) {\r\n      this.#addCloseOnClickOutside();\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.#removeCloseOnClickOutside();\r\n  }\r\n\r\n  render() {\r\n    const canAddEventListeners = !(this.disabled && !this.expanded);\r\n\r\n    return (\r\n      // TODO: Should we let expand the control if it is disabled? If so, we\r\n      // can't disable the click interaction...\r\n      <Host\r\n        onClick={canAddEventListeners && this.#handleActionMenuItemClick}\r\n        onKeyDown={canAddEventListeners && this.#handleActionMenuKeyDown}\r\n      >\r\n        <button\r\n          aria-controls={WINDOW_ID}\r\n          aria-expanded={this.expanded.toString()}\r\n          aria-haspopup=\"true\"\r\n          aria-label={this.buttonAccessibleName}\r\n          part={tokenMap({\r\n            [ACTION_MENU_PARTS_DICTIONARY.EXPANDABLE_BUTTON]: true,\r\n            [ACTION_MENU_ITEM_PARTS_DICTIONARY.EXPANDED]: this.expanded,\r\n            [ACTION_MENU_ITEM_PARTS_DICTIONARY.COLLAPSED]: !this.expanded,\r\n            [ACTION_MENU_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled\r\n          })}\r\n          disabled={this.disabled}\r\n          popoverTarget={WINDOW_ID}\r\n          type=\"button\"\r\n          ref={el => (this.#actionRef = el)}\r\n        >\r\n          <slot />\r\n        </button>\r\n\r\n        {this.expanded && this.model && (\r\n          <ch-popover\r\n            role=\"list\"\r\n            id={WINDOW_ID}\r\n            part={ACTION_MENU_ITEM_PARTS_DICTIONARY.WINDOW}\r\n            actionById\r\n            // TODO: We must be careful with this property because the control\r\n            // can be expanded on the initial load an the ref will not be\r\n            // correctly computed\r\n            actionElement={this.#actionRef as HTMLButtonElement}\r\n            blockAlign={this.blockAlign}\r\n            firstLayer\r\n            inlineAlign={this.inlineAlign}\r\n            popover=\"manual\"\r\n            show\r\n            onMouseOver={this.#handleActionMenuItemMouseOver}\r\n            onMouseOut={this.#handleActionMenuItemMouseOut}\r\n            ref={el => (this.#popoverRef = el)}\r\n          >\r\n            {this.model !== undefined && this.#renderItems(this.model)}\r\n          </ch-popover>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}