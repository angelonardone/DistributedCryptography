{"version":3,"names":["tabularGridSettingsCss","ChTabularGridSettingsStyle0","ChTabularGridSettings","settingsCloseClicked","windowClosedHandler","eventInfo","stopPropagation","this","show","emit","render","h","Host","key","modal","container","grid","caption","closeText","closeOnOutsideClick","closeOnEscape","allowDrag","hidden","exportparts","tabularGridSettingsColumnsCss","ChTabularGridSettingsColumnsStyle0","ChTabularGridSettingsColumns","handleClick","checkbox","target","column","columns","find","columnId","name","checked","getColumnsSorted","sort","a","b","order","columnsSorted","map","part","type","disabled","hideable","onClick","columnName"],"sources":["src/components/tabular-grid/settings/tabular-grid-settings.scss?tag=ch-tabular-grid-settings&encapsulation=shadow","src/components/tabular-grid/settings/tabular-grid-settings.tsx","src/components/tabular-grid/settings/columns/tabular-grid-settings-columns.scss?tag=ch-tabular-grid-settings-columns&encapsulation=shadow","src/components/tabular-grid/settings/columns/tabular-grid-settings-columns.tsx"],"sourcesContent":[":host {\r\n  display: contents;\r\n  --ch-window-mask-z-index: var(--ch-tabular-grid-settings-layer);\r\n}\r\n","import {\r\n  Component,\r\n  h,\r\n  Host,\r\n  Listen,\r\n  Prop,\r\n  Event,\r\n  EventEmitter\r\n} from \"@stencil/core\";\r\n\r\n/**\r\n * The `ch-tabular-grid-settings` component represents a settings window for a grid component.\r\n */\r\n@Component({\r\n  tag: \"ch-tabular-grid-settings\",\r\n  styleUrl: \"tabular-grid-settings.scss\",\r\n  shadow: true\r\n})\r\nexport class ChTabularGridSettings {\r\n  /**\r\n   * The `HTMLChTabularGridElement` that the settings window is associated with.\r\n   */\r\n  @Prop() readonly grid!: HTMLChTabularGridElement;\r\n\r\n  /**\r\n   * Indicates whether the settings window is currently shown or not.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) show = false;\r\n\r\n  /**\r\n   * Event emitted when the close button of the settings window is clicked.\r\n   */\r\n  @Event() settingsCloseClicked: EventEmitter;\r\n\r\n  @Listen(\"windowClosed\")\r\n  windowClosedHandler(eventInfo: Event) {\r\n    eventInfo.stopPropagation();\r\n    this.show = false;\r\n\r\n    this.settingsCloseClicked.emit();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <ch-window\r\n          modal={true}\r\n          container={this.grid}\r\n          caption=\"Options\"\r\n          closeText=\"Close\"\r\n          closeOnOutsideClick={true}\r\n          closeOnEscape={true}\r\n          allowDrag=\"header\"\r\n          hidden={!this.show}\r\n          exportparts=\"mask,window,header,caption,close,main,footer\"\r\n        >\r\n          <slot></slot>\r\n        </ch-window>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\nul {\r\n    display: contents;\r\n    list-style-type: none;\r\n}\r\n","import { Component, h, Prop } from \"@stencil/core\";\r\n\r\n/**\r\n * The `ch-tabular-grid-settings-columns` component represents the settings for a grid's columns.\r\n */\r\n@Component({\r\n  tag: \"ch-tabular-grid-settings-columns\",\r\n  styleUrl: \"tabular-grid-settings-columns.scss\",\r\n  shadow: true\r\n})\r\nexport class ChTabularGridSettingsColumns {\r\n  /**\r\n   * An array of column elements to render.\r\n   */\r\n  @Prop() readonly columns!: HTMLChTabularGridColumnElement[];\r\n\r\n  private handleClick = (eventInfo: Event) => {\r\n    const checkbox = eventInfo.target as HTMLInputElement;\r\n    const column = this.columns.find(\r\n      column => column.columnId === checkbox.name\r\n    );\r\n\r\n    column.hidden = !checkbox.checked;\r\n\r\n    eventInfo.stopPropagation();\r\n  };\r\n\r\n  private getColumnsSorted(): HTMLChTabularGridColumnElement[] {\r\n    return [...this.columns].sort(\r\n      (\r\n        a: HTMLChTabularGridColumnElement,\r\n        b: HTMLChTabularGridColumnElement\r\n      ) => {\r\n        if (a.order < b.order) {\r\n          return -1;\r\n        }\r\n        if (a.order > b.order) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const columnsSorted = this.getColumnsSorted();\r\n\r\n    return (\r\n      <ul>\r\n        {columnsSorted.map(column => (\r\n          <li part=\"column\">\r\n            <label part=\"column-label\">\r\n              <input\r\n                part={\r\n                  !column.hidden\r\n                    ? \"column-visible column-visible-checked\"\r\n                    : \"column-visible\"\r\n                }\r\n                type=\"checkbox\"\r\n                checked={!column.hidden}\r\n                disabled={!column.hideable}\r\n                name={column.columnId}\r\n                onClick={this.handleClick}\r\n              />\r\n              {column.columnName}\r\n            </label>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"yDAAA,MAAMA,EAAyB,yFAC/B,MAAAC,EAAeD,E,MCiBFE,EAAqB,M,kHASe,K,CAKtCC,qBAGT,mBAAAC,CAAoBC,GAClBA,EAAUC,kBACVC,KAAKC,KAAO,MAEZD,KAAKJ,qBAAqBM,M,CAG5B,MAAAC,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAA,aAAAE,IAAA,2CACEC,MAAO,KACPC,UAAWR,KAAKS,KAChBC,QAAQ,UACRC,UAAU,QACVC,oBAAqB,KACrBC,cAAe,KACfC,UAAU,SACVC,QAASf,KAAKC,KACde,YAAY,gDAEZZ,EAAA,QAAAE,IAAA,8C,aCxDV,MAAMW,EAAgC,mIACtC,MAAAC,EAAeD,E,MCSFE,EAA4B,M,gDAM/BC,YAAetB,IACrB,MAAMuB,EAAWvB,EAAUwB,OAC3B,MAAMC,EAASvB,KAAKwB,QAAQC,MAC1BF,GAAUA,EAAOG,WAAaL,EAASM,OAGzCJ,EAAOR,QAAUM,EAASO,QAE1B9B,EAAUC,iBAAiB,EAGrB,gBAAA8B,GACN,MAAO,IAAI7B,KAAKwB,SAASM,MACvB,CACEC,EACAC,KAEA,GAAID,EAAEE,MAAQD,EAAEC,MAAO,CACrB,OAAQ,C,CAEV,GAAIF,EAAEE,MAAQD,EAAEC,MAAO,CACrB,OAAO,C,CAET,OAAO,CAAC,G,CAKd,MAAA9B,GACE,MAAM+B,EAAgBlC,KAAK6B,mBAE3B,OACEzB,EAAA,MAAAE,IAAA,4CACG4B,EAAcC,KAAIZ,GACjBnB,EAAA,MAAIgC,KAAK,UACPhC,EAAA,SAAOgC,KAAK,gBACVhC,EAAA,SACEgC,MACGb,EAAOR,OACJ,wCACA,iBAENsB,KAAK,WACLT,SAAUL,EAAOR,OACjBuB,UAAWf,EAAOgB,SAClBZ,KAAMJ,EAAOG,SACbc,QAASxC,KAAKoB,cAEfG,EAAOkB,e"}