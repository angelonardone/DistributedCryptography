{"version":3,"names":["editCss","ChEditStyle0","GET_IMAGE_PATH_CALLBACK_REGISTRY","DEFAULT_GET_IMAGE_PATH_CALLBACK","imageSrc","base","AUTOFILL_START_ANIMATION_NAME","DATE_TYPES","MAX_DATE_VALUE","date","MIN_DATE_VALUE","TEXTAREA_CLASSES","SCROLLABLE_CLASS","ChEdit","undefined","accessibleNameFromExternalLabel","startImage","debounceId","shouldComputePictureValue","inputRef","textareaRef","internals","getImagePathCallbackChanged","this","computeImage","pictureChanged","pictureCallbackChanged","startImgSrcChanged","valueChanged","newValue","getInputRef","value","setFormValue","change","input","triggerClick","startImgSrc","getImagePathCallback","img","updateDirectionInImageCustomVar","getValueFromEvent","event","target","setValueAndEmitInputEventWithDebounce","valueToEmit","clearTimeout","debounce","setTimeout","emit","handleAutoFill","autoFilled","animationName","handleChange","handleValueChanging","stopPropagation","validity","valid","handleTriggerClick","disabled","clearValue","requestAnimationFrame","el","focus","hasPictureApplied","picture","pictureCallback","computePictureValue","pictureValue","trim","showPictureOnFocus","isFocusOnControl","removePictureOnBlur","connectedCallback","adoptCommonThemes","shadowRoot","adoptedStyleSheets","getControlRegisterProperty","labels","getElementInternalsLabel","analyzeLabelExistence","accessibleName","componentWillUpdate","componentDidLoad","autoFocus","render","isDateType","includes","type","showDatePLaceholder","placeholder","shouldDisplayPicture","canAddListeners","readonly","h","Host","key","class","multiline","autoGrow","showTrigger","startImgType","DISABLED_CLASS","part","tokenMap","EDIT_HOST_PARTS","EMPTY_VALUE","hostParts","style","styles","autoCapitalize","autocapitalize","autoComplete","autocomplete","maxLength","readOnly","spellcheck","onChange","onInput","onAnimationStart","ref","inputMode","mode","max","min","pattern","step","onFocus","onBlur","triggerButtonAccessibleName","onClick","name","EDIT_PARTS_DICTIONARY","DATE_PLACEHOLDER","clearSearchButtonAccessibleName","CLEAR_BUTTON","DISABLED"],"sources":["src/components/edit/edit.scss?tag=ch-edit&encapsulation=shadow","src/components/edit/edit.tsx"],"sourcesContent":["@import \"../../common/base\";\r\n@import \"../../common/icons\";\r\n\r\n// Used to change the placeholder color in the input controls\r\n// Opacity property is necessary, because some browsers (e.g., mozilla) change this value\r\n@mixin placeholder-color {\r\n  color: var(--ch-placeholder-color);\r\n  opacity: 1;\r\n}\r\n\r\n@include button-reset();\r\n@include input-reset();\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-edit-auto-fill-background-color:\r\n   * Define the background color when the edit is auto filled.\r\n   * (#e8f0fe by default)\r\n   */\r\n  --ch-edit-auto-fill-background-color: #e8f0fe;\r\n\r\n  /**\r\n   * @prop --ch-edit__image-size:\r\n   * Specifies the box size that contains the start and clear images of the\r\n   * control.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-edit__image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n    * @prop --ch-edit__background-image-size:\r\n    * Specifies the size of the start and clear images of the control.\r\n    * @default 100%\r\n    */\r\n  --ch-edit__background-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-edit-gap:\r\n   * Specifies the gap between the start image and the value of the control.\r\n   * @default 0px\r\n   */\r\n  --ch-edit-gap: 0px;\r\n\r\n  /**\r\n   * @prop --ch-placeholder-color:\r\n   * Define the placeholder color when the edit does not have a value set.\r\n   * (currentColor by default)\r\n   */\r\n  --ch-placeholder-color: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-edit__clear-button-image:\r\n   * Specifies the image for the clear button. \r\n   * @default #{$close-icon}\r\n   */\r\n  --ch-edit__clear-button-image: #{$close-icon};\r\n\r\n  // --ch-edit-trigger-button-inline-size: #{$ch-icon-size};\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  // Base image\r\n  --ch-start-img: var(--ch-start-img--base);\r\n}\r\n\r\n:host(.ch-edit--cursor-text) {\r\n  cursor: text;\r\n}\r\n\r\n// Auto fill color\r\n:host:is(\r\n    .gx-edit--auto-fill,\r\n    .gx-edit--auto-fill:focus-within,\r\n    .gx-edit--auto-fill:hover\r\n  ) {\r\n  background-color: var(--ch-edit-auto-fill-background-color) !important;\r\n}\r\n\r\n.content {\r\n  inline-size: 100%;\r\n  cursor: inherit;\r\n\r\n  &::placeholder {\r\n    @include placeholder-color();\r\n  }\r\n\r\n  // Hide native eye icon from password input in MS Edge\r\n  &::-ms-reveal {\r\n    display: none;\r\n  }\r\n\r\n  // @include scrollbar-customization-for-one-element();\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//                 Images\r\n// - - - - - - - - - - - - - - - - - - - -\r\n:host(:hover) {\r\n  --ch-start-img: var(--ch-start-img--hover, var(--ch-start-img--base));\r\n}\r\n\r\n:host(:active) {\r\n  --ch-start-img: var(--ch-start-img--active, var(--ch-start-img--base));\r\n}\r\n\r\n:host(:focus) {\r\n  --ch-start-img: var(\r\n    --ch-start-img--focus,\r\n    var(--ch-start-img--active, var(--ch-start-img--base))\r\n  );\r\n}\r\n\r\n:host(.ch-disabled) {\r\n  pointer-events: none;\r\n  --ch-start-img: var(--ch-start-img--disabled, var(--ch-start-img--base));\r\n}\r\n\r\n:host(.ch-edit-pseudo-img--start) {\r\n  & > .content {\r\n    margin-inline-start: var(--ch-edit-gap);\r\n  }\r\n\r\n  &::before {\r\n    content: \"\";\r\n    display: block;\r\n    inline-size: var(--ch-edit__image-size);\r\n    // Necessary to properly size the image, due to the Host has display: flex\r\n    min-inline-size: var(--ch-edit__image-size);\r\n    block-size: var(--ch-edit__image-size);\r\n\r\n    // Do not add content-visibility with display: flex. The Tree View control\r\n    // had browser crashes with this combination\r\n    // content-visibility: auto;\r\n    // contain-intrinsic-size: auto var(--ch-edit__image-size);\r\n  }\r\n}\r\n\r\n// Background\r\n:host(.ch-edit-start-img-type--background)::before {\r\n  background: no-repeat center / var(--ch-edit__background-image-size)\r\n    var(--ch-start-img);\r\n}\r\n\r\n// Mask\r\n:host(.ch-edit-start-img-type--mask)::before {\r\n  -webkit-mask: no-repeat center / var(--ch-edit__background-image-size)\r\n    var(--ch-start-img);\r\n  background-color: currentColor;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//           Multiline Auto Grow\r\n// - - - - - - - - - - - - - - - - - - - -\r\n// Hide textarea resize button\r\n.multiline {\r\n  position: absolute;\r\n  inset: 0;\r\n  block-size: 100%; // Necessary for Mozilla Firefox\r\n  padding: inherit;\r\n  resize: unset;\r\n}\r\n\r\n// Auto grow = True and multiline = true\r\n:host(.ch-edit--multiline) {\r\n  overflow: hidden;\r\n}\r\n\r\n// Implements auto-grow when the ch-edit is multiline\r\n.hidden-multiline {\r\n  inline-size: 100%;\r\n  block-size: 100%;\r\n\r\n  // Implement line breaks\r\n  white-space: pre-wrap;\r\n\r\n  // Break words that do not enter in a single line\r\n  word-break: break-word;\r\n\r\n  // Hide from the accessibility tree but take space in the layout\r\n  visibility: hidden;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//                Date type\r\n// - - - - - - - - - - - - - - - - - - - -\r\n.readonly-date {\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n:host(.ch-edit--editable-date) {\r\n  cursor: pointer;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//    Custom placeholder for date types\r\n// - - - - - - - - - - - - - - - - - - - -\r\n// Used when the ch-edit has type=\"datetime-local\" | \"date\" | \"time\"\r\n// and its value is not set\r\n.null-date {\r\n  opacity: 0; // Hide the input by default\r\n\r\n  // When the ch-edit is focused, we hide the placeholder\r\n  &:focus {\r\n    opacity: 1; // Hide the input when focused\r\n\r\n    & ~ .date-placeholder {\r\n      opacity: 0;\r\n    }\r\n  }\r\n}\r\n\r\n// Implements a non-native placeholder for date types\r\n.date-placeholder {\r\n  display: grid;\r\n  align-items: center;\r\n  inset: 0;\r\n  inset-inline-start: calc(var(--ch-edit__image-size) + var(--ch-edit-gap));\r\n  position: absolute;\r\n  padding: inherit;\r\n  pointer-events: none;\r\n\r\n  @include placeholder-color();\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//             Trigger button\r\n// - - - - - - - - - - - - - - - - - - - -\r\n:host(.ch-edit__trigger-button-space)::after {\r\n  content: \"\";\r\n  block-size: 100%;\r\n  margin-inline-start: var(--ch-edit-trigger-button-inline-size);\r\n  padding-inline-start: inherit;\r\n}\r\n\r\n.trigger-button {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-items: center;\r\n  position: absolute;\r\n  inset-block: 0;\r\n  inset-inline-end: 0;\r\n  padding-inline: inherit;\r\n  cursor: pointer;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//              Clear button\r\n// - - - - - - - - - - - - - - - - - - - -\r\n[type=\"search\"]::-webkit-search-decoration,\r\n[type=\"search\"]::-webkit-search-cancel-button {\r\n  appearance: none;\r\n}\r\n\r\n.clear-button {\r\n  display: inline-grid;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    display: block;\r\n    inline-size: var(--ch-edit__image-size);\r\n    // Necessary to properly size the image, due to the Host has display: flex\r\n    min-inline-size: var(--ch-edit__image-size);\r\n    block-size: var(--ch-edit__image-size);\r\n    -webkit-mask: no-repeat center / var(--ch-edit__background-image-size)\r\n      var(--ch-edit__clear-button-image);\r\n    background-color: currentColor;\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//            Auto Fill\r\n// - - - - - - - - - - - - - - - -\r\n.autofill {\r\n  // Dummy animation to trigger the onAnimationStart event\r\n  &:-webkit-autofill {\r\n    animation: AutoFillStart 0.000001s;\r\n    transition: background-color 99999999s 0s;\r\n  }\r\n\r\n  // Dummy animation to trigger the onAnimationStart event\r\n  &:not(:-webkit-autofill) {\r\n    animation: AutoFillCancel 0.000001s;\r\n  }\r\n}\r\n\r\n@keyframes AutoFillStart {\r\n  0% {\r\n    visibility: inherit;\r\n  }\r\n}\r\n@keyframes AutoFillCancel {\r\n  0% {\r\n    visibility: inherit;\r\n  }\r\n}\r\n","import {\r\n  AttachInternals,\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\n\r\nimport type {\r\n  AccessibleNameComponent,\r\n  DisableableComponent\r\n} from \"../../common/interfaces\";\r\n\r\nimport {\r\n  DISABLED_CLASS,\r\n  EDIT_HOST_PARTS,\r\n  EDIT_PARTS_DICTIONARY,\r\n  SCROLLABLE_CLASS\r\n} from \"../../common/reserved-names\";\r\nimport type { EditInputMode, EditType } from \"./types\";\r\nimport type {\r\n  GxImageMultiState,\r\n  GxImageMultiStateStart,\r\n  ImageRender\r\n} from \"../../common/types\";\r\nimport { tokenMap, updateDirectionInImageCustomVar } from \"../../common/utils\";\r\nimport { getControlRegisterProperty } from \"../../common/registry-properties\";\r\nimport { adoptCommonThemes } from \"../../common/theme\";\r\nimport {\r\n  analyzeLabelExistence,\r\n  getElementInternalsLabel\r\n} from \"../../common/analysis/accessibility\";\r\n\r\nlet GET_IMAGE_PATH_CALLBACK_REGISTRY: (\r\n  imageSrc: string\r\n) => GxImageMultiState | undefined;\r\n\r\nconst DEFAULT_GET_IMAGE_PATH_CALLBACK: (\r\n  imageSrc: string\r\n) => GxImageMultiState | undefined = imageSrc => ({ base: imageSrc });\r\n\r\nconst AUTOFILL_START_ANIMATION_NAME = \"AutoFillStart\";\r\n\r\nconst DATE_TYPES = [\"datetime-local\", \"date\", \"time\"];\r\n\r\nconst MAX_DATE_VALUE: { [key: string]: string } = {\r\n  date: \"9999-12-31\",\r\n  \"datetime-local\": \"9999-12-31T23:59:59\"\r\n};\r\n\r\nconst MIN_DATE_VALUE: { [key: string]: string } = {\r\n  date: \"0001-01-01\",\r\n  \"datetime-local\": \"0001-01-01T00:00:00\"\r\n};\r\n\r\nconst TEXTAREA_CLASSES = `content autofill multiline ${SCROLLABLE_CLASS}`;\r\n\r\n/**\r\n * A wrapper for the input and textarea elements. It additionally provides:\r\n *  - A placeholder for `\"date\"`, `\"datetime-local\"` and `\"time\"` types.\r\n *  - An action button.\r\n *  - Useful style resets.\r\n *  - Support for picture formatting.\r\n *  - Support to auto grow the control when used with multiline (useful to\r\n *    model chat inputs).\r\n *  - An image which can have multiple states.\r\n *  - Support for debouncing the input event.\r\n *\r\n * @part date-placeholder - A placeholder displayed when the control is editable (`readonly=\"false\"`), has no value set, and its type is `\"datetime-local\" | \"date\" | \"time\"`.\r\n * @part hidden-multiline - The auxiliary content rendered in the control to implement the auto-grow. This part only applies when `multiline=\"true\"`.\r\n * @part trigger-button - The trigger button displayed on the right side of the control when `show-trigger=\"true\"`.\r\n *\r\n * @slot trigger-content - The slot used for the content of the trigger button.\r\n */\r\n@Component({\r\n  formAssociated: true,\r\n  shadow: { delegatesFocus: true },\r\n  styleUrl: \"edit.scss\",\r\n  tag: \"ch-edit\"\r\n})\r\nexport class ChEdit implements AccessibleNameComponent, DisableableComponent {\r\n  #accessibleNameFromExternalLabel: string | undefined;\r\n  #startImage: GxImageMultiStateStart | undefined;\r\n\r\n  #debounceId: NodeJS.Timeout | undefined;\r\n  #shouldComputePictureValue = false;\r\n\r\n  // Refs\r\n  // TODO: StencilJS issue. We have to use two refs because StencilJS does not,\r\n  // update the ref when updating the multiline property\r\n  #inputRef: HTMLInputElement | undefined;\r\n  #textareaRef: HTMLTextAreaElement | undefined;\r\n\r\n  @State() isFocusOnControl = false;\r\n\r\n  @State() pictureValue: string;\r\n\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  @Element() el!: HTMLChEditElement;\r\n\r\n  /**\r\n   * Determine if the gx-edit's value was auto-completed\r\n   */\r\n  @State() autoFilled = false;\r\n\r\n  /**\r\n   * Specifies a short string, typically 1 to 3 words, that authors associate\r\n   * with an element to provide users of assistive technologies with a label\r\n   * for the element.\r\n   */\r\n  @Prop() readonly accessibleName: string;\r\n\r\n  /**\r\n   * Specifies the auto-capitalization behavior. Same as [autocapitalize](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-autocapitalize)\r\n   * attribute for `input` elements. Only supported by Safari and Chrome.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/reserved-member-names\r\n  @Prop() readonly autocapitalize: string; // TODO: StencilJS' bug. It does not allow to specify a better type\r\n\r\n  /**\r\n   * This attribute indicates whether the value of the control can be\r\n   * automatically completed by the browser. Same as [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly autocomplete: \"on\" | \"off\" = \"off\";\r\n\r\n  /**\r\n   * Specifies if the control automatically get focus when the page loads.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/reserved-member-names\r\n  @Prop() readonly autoFocus: boolean = false;\r\n\r\n  /**\r\n   * This property defines if the control size will grow automatically, to\r\n   * adjust to its content size.\r\n   */\r\n  @Prop() readonly autoGrow: boolean = false;\r\n\r\n  /**\r\n   * This property lets you specify the label for the clear search button.\r\n   * Important for accessibility.\r\n   *\r\n   * Only works if `type = \"search\"` and `multiline = false`.\r\n   */\r\n  @Prop() readonly clearSearchButtonAccessibleName: string = \"Clear search\";\r\n\r\n  /**\r\n   * Specifies a debounce for the input event.\r\n   */\r\n  @Prop() readonly debounce?: number = 0;\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * startImgSrc needs to be resolved.\r\n   */\r\n  @Prop() readonly getImagePathCallback?: (\r\n    imageSrc: string\r\n  ) => GxImageMultiState | undefined;\r\n  @Watch(\"getImagePathCallback\")\r\n  getImagePathCallbackChanged() {\r\n    this.#computeImage();\r\n  }\r\n\r\n  /**\r\n   * Specifies a set of parts to use in the Host element (`ch-edit`).\r\n   */\r\n  @Prop() readonly hostParts?: string;\r\n\r\n  /**\r\n   * This property defines the maximum string length that the user can enter\r\n   * into the control.\r\n   */\r\n  @Prop() readonly maxLength: number = undefined;\r\n\r\n  /**\r\n   * This attribute hints at the type of data that might be entered by the user\r\n   * while editing the element or its contents. This allows a browser to\r\n   * display an appropriate virtual keyboard. Only works when\r\n   * `multiline === false`.\r\n   */\r\n  @Prop() readonly mode: EditInputMode | undefined;\r\n\r\n  /**\r\n   * Controls if the element accepts multiline text.\r\n   */\r\n  @Prop() readonly multiline: boolean = false;\r\n\r\n  /**\r\n   * This property specifies the `name` of the control when used in a form.\r\n   */\r\n  @Prop({ reflect: true }) readonly name?: string;\r\n\r\n  /**\r\n   * This attribute specifies a regular expression the form control's value\r\n   * should match. Only works when `multiline === false`.\r\n   */\r\n  @Prop() readonly pattern: string = undefined;\r\n\r\n  /**\r\n   * Specifies a picture to apply for the value of the control. Only works if\r\n   * not `multiline`.\r\n   */\r\n  @Prop() readonly picture?: string;\r\n  @Watch(\"picture\")\r\n  pictureChanged() {\r\n    this.#shouldComputePictureValue = true;\r\n  }\r\n\r\n  /**\r\n   * Specifies the callback to execute when the picture must computed for the\r\n   * new value.\r\n   */\r\n  @Prop() readonly pictureCallback?: (value: any, picture: string) => string;\r\n  @Watch(\"pictureCallback\")\r\n  pictureCallbackChanged() {\r\n    this.#shouldComputePictureValue = true;\r\n  }\r\n\r\n  /**\r\n   * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly placeholder: string;\r\n\r\n  /**\r\n   * This attribute indicates that the user cannot modify the value of the control.\r\n   * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly readonly: boolean = false;\r\n\r\n  /**\r\n   * If true, a trigger button is shown next to the edit field. The button can\r\n   * be customized adding a child element with `slot=\"trigger-content\"`\r\n   * attribute to specify the content inside the trigger button.\r\n   */\r\n  @Prop() readonly showTrigger: boolean;\r\n\r\n  /**\r\n   * Specifies whether the element may be checked for spelling errors\r\n   */\r\n  // eslint-disable-next-line @stencil-community/reserved-member-names\r\n  @Prop() readonly spellcheck: boolean = false;\r\n\r\n  /**\r\n   * Specifies the source of the start image.\r\n   */\r\n  @Prop() readonly startImgSrc: string;\r\n  @Watch(\"startImgSrc\")\r\n  startImgSrcChanged() {\r\n    this.#computeImage();\r\n  }\r\n\r\n  /**\r\n   * Specifies the source of the start image.\r\n   */\r\n  @Prop() readonly startImgType: Exclude<ImageRender, \"img\"> = \"background\";\r\n\r\n  /**\r\n   * This attribute lets you specify the label for the trigger button.\r\n   * Important for accessibility.\r\n   */\r\n  @Prop() readonly triggerButtonAccessibleName: string;\r\n\r\n  /**\r\n   * The type of control to render. A subset of the types supported by the `input` element is supported:\r\n   *\r\n   * * `\"date\"`\r\n   * * `\"datetime-local\"`\r\n   * * `\"email\"`\r\n   * * `\"file\"`\r\n   * * `\"number\"`\r\n   * * `\"password\"`\r\n   * * `\"search\"`\r\n   * * `\"tel\"`\r\n   * * `\"text\"`\r\n   * * `\"url\"`\r\n   */\r\n  @Prop() readonly type: EditType = \"text\";\r\n\r\n  /**\r\n   * The initial value of the control.\r\n   */\r\n  @Prop({ mutable: true }) value: string;\r\n  @Watch(\"value\")\r\n  valueChanged(newValue: string) {\r\n    this.#shouldComputePictureValue = true;\r\n\r\n    if (!this.#getInputRef()) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Synchronize the input value with value prop. This use case is only\r\n     * needed when the value prop is changed outside of the component.\r\n     * Without this verification, the following case would occur:\r\n     *  - ValueChanging. Input ref: \"X\"\r\n     *  - Render. Value prop: \"X\"\r\n     *  - (Enter key event resets the value). Value prop: \"\" <---- The Angular's UIModel now has value = \"\"\r\n     *  - ChangeEvent. Input ref: \"X\"\r\n     *  Result: Angular's UIModel has value = \"\", but the control has value = \"X\"\r\n     */\r\n    if (this.#getInputRef().value !== this.value) {\r\n      this.#getInputRef().value = this.value;\r\n    }\r\n\r\n    // Update form value\r\n    this.internals.setFormValue(newValue);\r\n  }\r\n\r\n  /**\r\n   * The `change` event is emitted when a change to the element's value is\r\n   * committed by the user. Unlike the `input` event, the `change` event is not\r\n   * necessarily fired for each change to an element's value but when the\r\n   * control loses focus.\r\n   * This event is _NOT_ debounced by the `debounce` property.\r\n   */\r\n  @Event() change: EventEmitter;\r\n\r\n  /**\r\n   * Fired synchronously when the value is changed.\r\n   * This event is debounced by the `debounce` property.\r\n   */\r\n  @Event() input: EventEmitter<string>;\r\n\r\n  /**\r\n   * Fired when the trigger button is clicked.\r\n   */\r\n  @Event() triggerClick: EventEmitter;\r\n\r\n  #getInputRef = () => this.#inputRef ?? this.#textareaRef;\r\n\r\n  #computeImage = () => {\r\n    if (!this.startImgSrc) {\r\n      this.#startImage = null;\r\n      return;\r\n    }\r\n    const getImagePathCallback =\r\n      this.getImagePathCallback ?? GET_IMAGE_PATH_CALLBACK_REGISTRY;\r\n\r\n    if (!getImagePathCallback) {\r\n      this.#startImage = null;\r\n      return;\r\n    }\r\n    const img = getImagePathCallback(this.startImgSrc);\r\n\r\n    if (!img) {\r\n      this.#startImage = null;\r\n      return;\r\n    }\r\n\r\n    this.#startImage = updateDirectionInImageCustomVar(\r\n      img,\r\n      \"start\"\r\n    ) as GxImageMultiStateStart;\r\n  };\r\n\r\n  #getValueFromEvent = (event: InputEvent): string =>\r\n    (event.target as HTMLInputElement).value;\r\n\r\n  #setValueAndEmitInputEventWithDebounce = (valueToEmit: string) => {\r\n    clearTimeout(this.#debounceId);\r\n\r\n    if (this.debounce > 0) {\r\n      this.#debounceId = setTimeout(() => {\r\n        this.value = valueToEmit;\r\n        this.input.emit(valueToEmit);\r\n      }, this.debounce);\r\n    } else {\r\n      this.value = valueToEmit;\r\n      this.input.emit(valueToEmit);\r\n    }\r\n  };\r\n\r\n  #handleAutoFill = (event: AnimationEvent) => {\r\n    this.autoFilled = event.animationName === AUTOFILL_START_ANIMATION_NAME;\r\n  };\r\n\r\n  #handleChange = (event: InputEvent) => {\r\n    this.value = this.#getValueFromEvent(event);\r\n    this.change.emit(event);\r\n  };\r\n\r\n  #handleValueChanging = (event: InputEvent) => {\r\n    event.stopPropagation();\r\n\r\n    // Don't allow invalid values\r\n    if (!this.#getInputRef().validity.valid) {\r\n      this.#getInputRef().value = this.value;\r\n      return;\r\n    }\r\n\r\n    this.#setValueAndEmitInputEventWithDebounce(this.#getValueFromEvent(event));\r\n  };\r\n\r\n  #handleTriggerClick = (event: UIEvent) => {\r\n    if (!this.disabled) {\r\n      event.stopPropagation();\r\n    }\r\n    this.triggerClick.emit(event);\r\n  };\r\n\r\n  #clearValue = (event: PointerEvent) => {\r\n    event.stopPropagation();\r\n    this.#setValueAndEmitInputEventWithDebounce(\"\");\r\n\r\n    requestAnimationFrame(() => this.el.focus());\r\n  };\r\n\r\n  // - - - - - - - - - - - - - - - - - - - - - -\r\n  //                  Pictures\r\n  // - - - - - - - - - - - - - - - - - - - - - -\r\n  #hasPictureApplied = () => this.picture && !!this.pictureCallback;\r\n\r\n  #computePictureValue(value: string | number) {\r\n    if (this.#hasPictureApplied()) {\r\n      this.pictureValue = this.pictureCallback(value, this.picture).trim();\r\n    }\r\n  }\r\n\r\n  #showPictureOnFocus = () => {\r\n    this.isFocusOnControl = true;\r\n  };\r\n\r\n  #removePictureOnBlur = () => {\r\n    this.isFocusOnControl = false;\r\n  };\r\n\r\n  connectedCallback() {\r\n    adoptCommonThemes(this.el.shadowRoot.adoptedStyleSheets);\r\n\r\n    // Initialize default getImagePathCallback\r\n    GET_IMAGE_PATH_CALLBACK_REGISTRY ??=\r\n      getControlRegisterProperty(\"getImagePathCallback\", \"ch-edit\") ??\r\n      DEFAULT_GET_IMAGE_PATH_CALLBACK;\r\n\r\n    this.#computeImage();\r\n    this.#computePictureValue(this.value);\r\n\r\n    // Accessibility\r\n    this.internals.setFormValue(this.value);\r\n    const labels = this.internals.labels;\r\n    this.#accessibleNameFromExternalLabel = getElementInternalsLabel(labels);\r\n\r\n    // Report any accessibility issue\r\n    analyzeLabelExistence(\r\n      this.el,\r\n      \"ch-edit\",\r\n      labels,\r\n      this.#accessibleNameFromExternalLabel,\r\n      this.accessibleName\r\n    );\r\n  }\r\n\r\n  componentWillUpdate() {\r\n    if (this.#shouldComputePictureValue) {\r\n      this.#shouldComputePictureValue = false;\r\n      this.#computePictureValue(this.value);\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    if (this.autoFocus) {\r\n      this.el.focus();\r\n    }\r\n  }\r\n\r\n  // TODO: Remove the icon with multiline and add overflow: clip in the Host with multiline\r\n  render() {\r\n    const isDateType = DATE_TYPES.includes(this.type);\r\n    const showDatePLaceholder = isDateType && this.placeholder && !this.value;\r\n    const shouldDisplayPicture = this.#hasPictureApplied();\r\n    const canAddListeners = !this.disabled && !this.readonly;\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          \"ch-edit--auto-fill\": this.autoFilled,\r\n          \"ch-edit--cursor-text\": !isDateType && !this.disabled,\r\n          \"ch-edit--editable-date\": isDateType && !this.readonly,\r\n          \"ch-edit--multiline\": this.multiline && this.autoGrow,\r\n          \"ch-edit__trigger-button-space\": this.showTrigger,\r\n\r\n          [`ch-edit-start-img-type--${this.startImgType} ch-edit-pseudo-img--start`]:\r\n            !!this.#startImage,\r\n\r\n          [DISABLED_CLASS]: this.disabled\r\n        }}\r\n        // TODO: Add unit tests for this feature, since it breaks custom parts\r\n        // rendered outside of the ch-edit render() method\r\n        part={tokenMap({\r\n          [EDIT_HOST_PARTS.EMPTY_VALUE]: !this.value,\r\n          [this.hostParts]: !!this.hostParts\r\n        })}\r\n        style={this.#startImage?.styles ?? undefined}\r\n        // Alignment\r\n        data-text-align=\"\"\r\n        data-valign={!this.multiline ? \"\" : undefined}\r\n      >\r\n        {this.multiline\r\n          ? [\r\n              <textarea\r\n                autoFocus={this.autoFocus}\r\n                aria-label={\r\n                  this.#accessibleNameFromExternalLabel ||\r\n                  this.accessibleName ||\r\n                  null\r\n                }\r\n                autoCapitalize={this.autocapitalize}\r\n                autoComplete={this.autocomplete}\r\n                class={TEXTAREA_CLASSES}\r\n                disabled={this.disabled}\r\n                maxLength={this.maxLength}\r\n                placeholder={this.placeholder}\r\n                readOnly={this.readonly}\r\n                spellcheck={this.spellcheck}\r\n                value={this.value}\r\n                // Event listeners\r\n                onChange={canAddListeners && this.#handleChange}\r\n                onInput={canAddListeners && this.#handleValueChanging}\r\n                onAnimationStart={canAddListeners && this.#handleAutoFill}\r\n                ref={el => (this.#textareaRef = el)}\r\n              ></textarea>,\r\n\r\n              // The space at the end of the value is necessary to correctly display the enters\r\n              this.autoGrow && (\r\n                <div class=\"hidden-multiline\" part=\"hidden-multiline\">\r\n                  {this.value}{\" \"}\r\n                </div>\r\n              )\r\n            ]\r\n          : [\r\n              <input\r\n                autoFocus={this.autoFocus}\r\n                aria-label={\r\n                  this.#accessibleNameFromExternalLabel ||\r\n                  this.accessibleName ||\r\n                  null\r\n                }\r\n                autoCapitalize={this.autocapitalize}\r\n                autoComplete={this.autocomplete}\r\n                class={{\r\n                  \"content autofill\": true,\r\n                  \"null-date\": showDatePLaceholder\r\n                }}\r\n                disabled={this.disabled}\r\n                inputMode={this.mode}\r\n                maxLength={this.maxLength}\r\n                max={MAX_DATE_VALUE[this.type]} // Limit the year to 4 digits\r\n                min={MIN_DATE_VALUE[this.type]} // Extend the minimum value of the date\r\n                pattern={this.pattern || undefined}\r\n                placeholder={this.placeholder}\r\n                readOnly={this.readonly}\r\n                spellcheck={this.spellcheck}\r\n                step={isDateType ? \"1\" : undefined}\r\n                type={this.type}\r\n                value={\r\n                  shouldDisplayPicture && !this.isFocusOnControl\r\n                    ? this.pictureValue\r\n                    : this.value\r\n                }\r\n                // Event listeners\r\n                onAnimationStart={canAddListeners && this.#handleAutoFill}\r\n                onChange={canAddListeners && this.#handleChange}\r\n                onInput={canAddListeners && this.#handleValueChanging}\r\n                onFocus={\r\n                  canAddListeners &&\r\n                  shouldDisplayPicture &&\r\n                  !this.isFocusOnControl &&\r\n                  this.#showPictureOnFocus\r\n                }\r\n                onBlur={\r\n                  canAddListeners &&\r\n                  shouldDisplayPicture &&\r\n                  this.isFocusOnControl &&\r\n                  this.#removePictureOnBlur\r\n                }\r\n                ref={el => (this.#inputRef = el)}\r\n              />,\r\n\r\n              this.showTrigger && (\r\n                <button\r\n                  aria-label={this.triggerButtonAccessibleName}\r\n                  class={{\r\n                    \"trigger-button\": true,\r\n                    disabled: this.disabled\r\n                  }}\r\n                  part=\"trigger-button\"\r\n                  type=\"button\"\r\n                  disabled={this.disabled}\r\n                  onClick={canAddListeners && this.#handleTriggerClick}\r\n                >\r\n                  <slot name=\"trigger-content\" />\r\n                </button>\r\n              ),\r\n\r\n              // Implements a non-native placeholder for date types. TODO: Add unit tests for this\r\n              showDatePLaceholder && (\r\n                <div\r\n                  aria-hidden=\"true\"\r\n                  class=\"date-placeholder\"\r\n                  part={EDIT_PARTS_DICTIONARY.DATE_PLACEHOLDER}\r\n                >\r\n                  {this.placeholder}\r\n                </div>\r\n              ),\r\n\r\n              this.type === \"search\" && !!this.value && (\r\n                <button\r\n                  aria-label={this.clearSearchButtonAccessibleName}\r\n                  class=\"clear-button\"\r\n                  part={tokenMap({\r\n                    [EDIT_PARTS_DICTIONARY.CLEAR_BUTTON]: true,\r\n                    [EDIT_PARTS_DICTIONARY.DISABLED]: this.disabled\r\n                  })}\r\n                  type=\"button\"\r\n                  onClick={!this.disabled && this.#clearValue}\r\n                ></button>\r\n              )\r\n            ]}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}