{"version":3,"names":["switchCss","ChSwitchStyle0","ChSwitch","exports","_a","_accessibleNameFromExternalLabel","set","this","_inputRef","_handleInput","event","stopPropagation","checked","target","_this","value","checkedValue","unCheckedValue","input","emit","_handleClickChange","__classPrivateFieldGet","click","_stopClickPropagation","undefined","class_1","prototype","handleValueChange","newValue","internals","setFormValue","toString","connectedCallback","_b","labels","__classPrivateFieldSet","getElementInternalsLabel","render","h","Host","key","class","disabled","DISABLED_CLASS","onClick","track","part","tokenMap","SWITCH_PARTS_DICTIONARY","TRACK","DISABLED","CHECKED","UNCHECKED","role","_e","accessibleName","thumb","_c","THUMB","type","onInput","ref","el","_d","CAPTION","checkedCaption","unCheckedCaption"],"sources":["src/components/switch/switch.scss?tag=ch-switch&encapsulation=shadow","src/components/switch/switch.tsx"],"sourcesContent":["@import \"../../common/_base\";\r\n\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-switch-thumb__checked-background-color:\r\n   * Specifies the background color of the thumb when the control is unchecked. \r\n   * @default currentColor\r\n   */\r\n  --ch-switch-thumb__checked-background-color: currentColor;\r\n\r\n  /**\r\n    * @prop --ch-switch-thumb__unchecked-background-color:\r\n    * Specifies the background color of the thumb when the control is unchecked. \r\n    * @default #b2b2b2\r\n    */\r\n  --ch-switch-thumb__unchecked-background-color: #b2b2b2;\r\n\r\n  /**\r\n   * @prop --ch-switch-thumb-size:\r\n   * Specifies the size of the thumb. \r\n   * @default clamp(8px, 1em, 24px)\r\n   */\r\n  --ch-switch-thumb-size: clamp(8px, 1em, 24px);\r\n\r\n  /**\r\n    * @prop --ch-switch-thumb__state-transition-duration:\r\n    * Specifies the transition duration of the thumb when switching between\r\n    * states.\r\n    * @default 0ms\r\n    */\r\n  --ch-switch-thumb__state-transition-duration: 0ms;\r\n\r\n  /**\r\n   * @prop --ch-switch-track-block-size:\r\n   * Specifies the block size of the track. \r\n   * @default clamp(3px, 0.5em, 16px)\r\n   */\r\n  --ch-switch-track-block-size: clamp(3px, 0.5em, 16px);\r\n\r\n  /**\r\n   * @prop --ch-switch-track-inline-size:\r\n   * Specifies the inline size of the track. \r\n   * @default clamp(3px, 0.5em, 16px)\r\n   */\r\n  --ch-switch-track-inline-size: clamp(3px, 2em, 40px);\r\n\r\n  /**\r\n   * @prop --ch-switch-track__checked-background-color:\r\n   * Specifies the background color of the track when the control is checked. \r\n   * @default color-mix(in srgb, currentColor 35%, #b2b2b2)\r\n   */\r\n  --ch-switch-track__checked-background-color: color-mix(\r\n    in srgb,\r\n    currentColor 35%,\r\n    #b2b2b2\r\n  );\r\n\r\n  /**\r\n   * @prop --ch-switch-track__unchecked-background-color:\r\n   * Specifies the background color of the track when the control is unchecked. \r\n   * @default color-mix(in srgb, currentColor 35%, #b2b2b2)\r\n   */\r\n  --ch-switch-track__unchecked-background-color: color-mix(\r\n    in srgb,\r\n    currentColor 35%,\r\n    #b2b2b2\r\n  );\r\n\r\n  display: inline-grid;\r\n\r\n  // Avoid zooming on double tap\r\n  touch-action: manipulation;\r\n\r\n  // Remove text selection on double click\r\n  user-select: none;\r\n\r\n  // Necessary to implement to focus delegation to the input when clicking on\r\n  // external labels\r\n  pointer-events: none;\r\n}\r\n\r\n// Necessary to implement to focus delegation to the input when clicking on\r\n// external labels\r\n:host(:not(.ch-disabled)) .wrapper-for-click-event {\r\n  pointer-events: all;\r\n}\r\n\r\n.wrapper-for-click-event {\r\n  display: inline-grid;\r\n  grid-auto-flow: column;\r\n  grid-auto-columns: max-content;\r\n  align-items: center;\r\n  min-block-size: var(--ch-switch-thumb-size);\r\n  max-inline-size: max-content;\r\n  cursor: pointer;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//              Track\r\n// - - - - - - - - - - - - - - - -\r\n.track {\r\n  display: inline-grid;\r\n  position: relative;\r\n  align-items: center;\r\n  inline-size: var(--ch-switch-track-inline-size);\r\n  block-size: var(--ch-switch-track-block-size);\r\n\r\n  background-color: var(--ch-switch-track__unchecked-background-color);\r\n  border-radius: calc(var(--ch-switch-track-block-size) / 2);\r\n\r\n  // Switch slider has more priority to display in the width if there is\r\n  // not enough space to display switch and label at the same time\r\n  min-inline-size: var(--ch-switch-track-inline-size);\r\n  pointer-events: none;\r\n\r\n  &--checked {\r\n    background-color: var(--ch-switch-track__checked-background-color);\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//              Thumb\r\n// - - - - - - - - - - - - - - - -\r\n.thumb {\r\n  display: flex;\r\n  position: absolute;\r\n  background-color: var(--ch-switch-thumb__unchecked-background-color);\r\n  border-radius: 50%;\r\n  inline-size: var(--ch-switch-thumb-size);\r\n  block-size: var(--ch-switch-thumb-size);\r\n  inset-inline-start: 0px;\r\n\r\n  pointer-events: none;\r\n  transition: inset linear var(--ch-switch-thumb__state-transition-duration);\r\n\r\n  &--checked {\r\n    background-color: var(--ch-switch-thumb__checked-background-color);\r\n\r\n    // We move the circle using margin-inline-start to support RTL\r\n    inset-inline-start: calc(100% - var(--ch-switch-thumb-size));\r\n  }\r\n}\r\n\r\n// We \"hide\" the input, but not its area to help accessibility readers\r\ninput {\r\n  // Reset browser defaults\r\n  appearance: none;\r\n  margin: 0;\r\n  outline: unset;\r\n  font: unset; // Necessary to inherit the font-size and place the correct inline-size\r\n\r\n  display: flex;\r\n  position: absolute;\r\n  background-color: var(--ch-switch-thumb__unchecked-background-color);\r\n  border-radius: 50%;\r\n  inline-size: var(--ch-switch-thumb-size);\r\n  block-size: var(--ch-switch-thumb-size);\r\n  inset-inline-start: 0px;\r\n  pointer-events: none;\r\n  transition: inset linear var(--ch-switch-thumb__state-transition-duration);\r\n\r\n  &--checked {\r\n    background-color: var(--ch-switch-thumb__checked-background-color);\r\n\r\n    // We move the circle using margin-inline-start to support RTL\r\n    inset-inline-start: calc(100% - var(--ch-switch-thumb-size));\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//             Caption\r\n// - - - - - - - - - - - - - - - -\r\n.caption {\r\n  cursor: pointer;\r\n}\r\n","import {\r\n  AttachInternals,\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\nimport { AccessibleNameComponent } from \"../../common/interfaces\";\r\nimport {\r\n  DISABLED_CLASS,\r\n  SWITCH_PARTS_DICTIONARY\r\n} from \"../../common/reserved-names\";\r\nimport { tokenMap } from \"../../common/utils\";\r\nimport { getElementInternalsLabel } from \"../../common/analysis/accessibility\";\r\n\r\n/**\r\n * @status experimental\r\n *\r\n * A switch/toggle control that enables you to select between options.\r\n *\r\n * @part track - The track of the switch element.\r\n * @part thumb - The thumb of the switch element.\r\n * @part caption - The caption (checked or unchecked) of the switch element.\r\n *\r\n * @part checked - Present in the `track`, `thumb` and `caption` parts when the control is checked (`value` === `checkedValue`).\r\n * @part disabled - Present in the `track`, `thumb` and `caption` parts when the control is disabled (`disabled` === `true`).\r\n * @part unchecked - Present in the `track`, `thumb` and `caption` parts when the control is unchecked (`value` === `unCheckedValue`).\r\n */\r\n@Component({\r\n  formAssociated: true,\r\n  shadow: { delegatesFocus: true },\r\n  styleUrl: \"switch.scss\",\r\n  tag: \"ch-switch\"\r\n})\r\nexport class ChSwitch implements AccessibleNameComponent {\r\n  #accessibleNameFromExternalLabel: string | undefined;\r\n  #inputRef: HTMLInputElement;\r\n\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  @Element() el: HTMLChSwitchElement;\r\n\r\n  /**\r\n   * Specifies a short string, typically 1 to 3 words, that authors associate\r\n   * with an element to provide users of assistive technologies with a label\r\n   * for the element.\r\n   */\r\n  @Prop() readonly accessibleName?: string;\r\n\r\n  /**\r\n   * Caption displayed when the switch is 'on'\r\n   */\r\n  @Prop() readonly checkedCaption: string;\r\n\r\n  /**\r\n   * The value when the switch is 'on'\r\n   */\r\n  @Prop() readonly checkedValue!: string;\r\n\r\n  /**\r\n   * This attribute allows you specify if the element is disabled.\r\n   * If disabled, it will not trigger any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This property specifies the `name` of the control when used in a form.\r\n   */\r\n  @Prop({ reflect: true }) readonly name?: string;\r\n\r\n  /**\r\n   * Caption displayed when the switch is 'off'\r\n   */\r\n  @Prop() readonly unCheckedCaption: string;\r\n\r\n  /**\r\n   * The value when the switch is 'off'. If you want to not add the value when\r\n   * the control is used in a form and it's unchecked, just let this property\r\n   * with the default `undefined` value.\r\n   */\r\n  @Prop() readonly unCheckedValue: string = undefined;\r\n\r\n  /**\r\n   * The value of the control.\r\n   */\r\n  @Prop({ mutable: true }) value: string = null;\r\n  @Watch(\"value\")\r\n  handleValueChange(newValue: number) {\r\n    // Update form value\r\n    this.internals.setFormValue(newValue?.toString());\r\n  }\r\n\r\n  /**\r\n   * The 'input' event is emitted when a change to the element's value is committed by the user.\r\n   */\r\n  @Event() input: EventEmitter;\r\n\r\n  #handleInput = (event: UIEvent) => {\r\n    event.stopPropagation();\r\n    const checked = (event.target as HTMLInputElement).checked;\r\n\r\n    // Toggle the value property\r\n    this.value = checked ? this.checkedValue : this.unCheckedValue;\r\n\r\n    this.input.emit(event);\r\n  };\r\n\r\n  #handleClickChange = () => {\r\n    this.#inputRef.click();\r\n  };\r\n\r\n  #stopClickPropagation = (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n  };\r\n\r\n  connectedCallback() {\r\n    // Set initial value to unchecked if empty\r\n    this.value ||= this.unCheckedValue;\r\n\r\n    // Accessibility\r\n    this.internals.setFormValue(this.value?.toString());\r\n    const labels = this.internals.labels;\r\n    this.#accessibleNameFromExternalLabel = getElementInternalsLabel(labels);\r\n\r\n    // Report any accessibility issue. // TODO: It should take into account the \"caption\" properties\r\n    // analyzeLabelExistence(\r\n    //   this.el,\r\n    //   \"ch-switch\",\r\n    //   labels,\r\n    //   this.#accessibleNameFromExternalLabel,\r\n    //   this.accessibleName\r\n    // );\r\n  }\r\n\r\n  render() {\r\n    const checked = this.value === this.checkedValue;\r\n\r\n    return (\r\n      <Host\r\n        class={this.disabled ? DISABLED_CLASS : null}\r\n        onClick={!this.disabled ? this.#handleClickChange : null}\r\n      >\r\n        <label\r\n          class=\"wrapper-for-click-event\"\r\n          onClick={!this.disabled ? this.#stopClickPropagation : null}\r\n        >\r\n          <div\r\n            class={{ track: true, \"track--checked\": checked }}\r\n            part={tokenMap({\r\n              [SWITCH_PARTS_DICTIONARY.TRACK]: true,\r\n              [SWITCH_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n              [SWITCH_PARTS_DICTIONARY.CHECKED]: checked,\r\n              [SWITCH_PARTS_DICTIONARY.UNCHECKED]: !checked\r\n            })}\r\n          >\r\n            <input\r\n              role=\"switch\"\r\n              aria-checked={checked ? \"true\" : \"false\"}\r\n              aria-label={\r\n                this.#accessibleNameFromExternalLabel ?? this.accessibleName\r\n              }\r\n              class={{ thumb: true, \"thumb--checked\": checked }}\r\n              part={tokenMap({\r\n                [SWITCH_PARTS_DICTIONARY.THUMB]: true,\r\n                [SWITCH_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n                [SWITCH_PARTS_DICTIONARY.CHECKED]: checked,\r\n                [SWITCH_PARTS_DICTIONARY.UNCHECKED]: !checked\r\n              })}\r\n              checked={checked}\r\n              disabled={this.disabled}\r\n              type=\"checkbox\"\r\n              value={checked ? this.checkedValue : this.unCheckedValue}\r\n              onInput={!this.disabled ? this.#handleInput : null}\r\n              ref={el => (this.#inputRef = el)}\r\n            />\r\n          </div>\r\n\r\n          <span\r\n            // The values are hidden from the accessibility tree, because the\r\n            // switch has the aria-valuetext attribute\r\n            aria-hidden=\"true\"\r\n            class=\"caption\"\r\n            part={tokenMap({\r\n              [SWITCH_PARTS_DICTIONARY.CAPTION]: true,\r\n              [SWITCH_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n              [SWITCH_PARTS_DICTIONARY.CHECKED]: checked,\r\n              [SWITCH_PARTS_DICTIONARY.UNCHECKED]: !checked\r\n            })}\r\n          >\r\n            {checked ? this.checkedCaption : this.unCheckedCaption}\r\n          </span>\r\n        </label>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"0nCAAA,IAAMA,EAAY,g1FAClB,IAAAC,EAAeD,E,ICqCFE,EAAQC,EAAA,aAAAC,EAAA,W,yBACnBC,EAAAC,IAAAC,UAAA,GACAC,EAAAF,IAAAC,UAAA,GA8DAE,EAAAH,IAAAC,MAAe,SAACG,GACdA,EAAMC,kBACN,IAAMC,EAAWF,EAAMG,OAA4BD,QAGnDE,EAAKC,MAAQH,EAAUE,EAAKE,aAAeF,EAAKG,eAEhDH,EAAKI,MAAMC,KAAKT,E,IAGlBU,EAAAd,IAAAC,MAAqB,WACnBc,uBAAAP,EAAIN,EAAA,KAAWc,O,IAGjBC,EAAAjB,IAAAC,MAAwB,SAACG,GACvBA,EAAMC,iB,iTAjD6B,M,wEAiBKa,U,WAKD,I,6GAEzCC,EAAAC,UAAAC,kBAAA,SAAkBC,GAEhBrB,KAAKsB,UAAUC,aAAaF,IAAQ,MAARA,SAAQ,SAARA,EAAUG,W,EA0BxCN,EAAAC,UAAAM,kBAAA,W,MAEEzB,KAAKQ,QAALR,KAAKQ,MAAUR,KAAKU,gBAGpBV,KAAKsB,UAAUC,cAAaG,EAAA1B,KAAKQ,SAAK,MAAAkB,SAAA,SAAAA,EAAEF,YACxC,IAAMG,EAAS3B,KAAKsB,UAAUK,OAC9BC,uBAAA5B,KAAIF,EAAoC+B,EAAyBF,GAAO,I,EAY1ET,EAAAC,UAAAW,OAAA,W,UAAA,IAAAvB,EAAAP,K,MACE,IAAMK,EAAUL,KAAKQ,QAAUR,KAAKS,aAEpC,OACEsB,EAACC,EAAI,CAAAC,IAAA,2CACHC,MAAOlC,KAAKmC,SAAWC,EAAiB,KACxCC,SAAUrC,KAAKmC,SAAWrB,uBAAAd,KAAIa,EAAA,KAAsB,MAEpDkB,EAAA,SAAAE,IAAA,2CACEC,MAAM,0BACNG,SAAUrC,KAAKmC,SAAWrB,uBAAAd,KAAIgB,EAAA,KAAyB,MAEvDe,EAAA,OAAAE,IAAA,2CACEC,MAAO,CAAEI,MAAO,KAAM,iBAAkBjC,GACxCkC,KAAMC,GAAQd,EAAA,GACZA,EAACe,EAAwBC,OAAQ,KACjChB,EAACe,EAAwBE,UAAW3C,KAAKmC,SACzCT,EAACe,EAAwBG,SAAUvC,EACnCqB,EAACe,EAAwBI,YAAaxC,E,KAGxC0B,EAAA,SAAAE,IAAA,2CACEa,KAAK,SAAQ,eACCzC,EAAU,OAAS,QAAO,cAEtC0C,EAAAjC,uBAAAd,KAAIF,EAAA,QAAiC,MAAAiD,SAAA,EAAAA,EAAI/C,KAAKgD,eAEhDd,MAAO,CAAEe,MAAO,KAAM,iBAAkB5C,GACxCkC,KAAMC,GAAQU,EAAA,GACZA,EAACT,EAAwBU,OAAQ,KACjCD,EAACT,EAAwBE,UAAW3C,KAAKmC,SACzCe,EAACT,EAAwBG,SAAUvC,EACnC6C,EAACT,EAAwBI,YAAaxC,E,IAExCA,QAASA,EACT8B,SAAUnC,KAAKmC,SACfiB,KAAK,WACL5C,MAAOH,EAAUL,KAAKS,aAAeT,KAAKU,eAC1C2C,SAAUrD,KAAKmC,SAAWrB,uBAAAd,KAAIE,EAAA,KAAgB,KAC9CoD,IAAK,SAAAC,GAAE,OAAK3B,uBAAArB,EAAIN,EAAasD,EAAE,IAAxB,KAIXxB,EAAA,QAAAE,IAAA,yDAGc,OACZC,MAAM,UACNK,KAAMC,GAAQgB,EAAA,GACZA,EAACf,EAAwBgB,SAAU,KACnCD,EAACf,EAAwBE,UAAW3C,KAAKmC,SACzCqB,EAACf,EAAwBG,SAAUvC,EACnCmD,EAACf,EAAwBI,YAAaxC,E,KAGvCA,EAAUL,KAAK0D,eAAiB1D,KAAK2D,mB,8VA5J7B,G"}