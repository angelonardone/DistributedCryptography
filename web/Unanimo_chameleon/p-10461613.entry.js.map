{"version":3,"names":["tabularGridRenderCss","ChTabularGridRenderStyle0","ARIA_SORT_MAP","undefined","asc","desc","ChTabularGridRender","modelVersion","modelChanged","this","isRowsetItemSimpleModel","rowset","isRowsetItemGroupModel","renderGrid","columns","rowsets","h","key","class","renderColumns","renderRowsets","parts","map","renderColumn","column","role","accessibleName","sortDirection","columnId","id","columnName","caption","columnNameHidden","captionHidden","columnTooltip","tooltip","order","size","resizable","columnResizable","sortable","columnSortable","hidden","hideable","columnHideable","freeze","settingable","normalizedModel","Array","isArray","renderRowsetSimple","rows","renderRowsetGroup","renderRow","rowsetId","row","rowid","ref","el","cells","renderCell","cell","index","cellid","text","render","Host","theme","model"],"sources":["src/components/tabular-grid-render/tabular-grid-render.scss?tag=ch-tabular-grid-render&encapsulation=shadow","src/components/tabular-grid-render/tabular-grid-render.tsx"],"sourcesContent":["ch-tabular-grid {\r\n  --indent: 16px;\r\n}\r\n","import { Component, Host, Prop, Watch, h } from \"@stencil/core\";\r\nimport {\r\n  TabularGridCellItemModel,\r\n  TabularGridColumnItemModel,\r\n  TabularGridColumnsModel,\r\n  TabularGridModel,\r\n  TabularGridRowItemModel,\r\n  TabularGridRowsetItemGroupModel,\r\n  TabularGridRowsetItemSimpleModel,\r\n  TabularGridRowsetsGroupModel,\r\n  TabularGridRowsetsModel,\r\n  TabularGridRowsModel\r\n} from \"./types\";\r\n\r\nconst ARIA_SORT_MAP = {\r\n  undefined: \"none\",\r\n  asc: \"ascending\",\r\n  desc: \"descending\"\r\n} as const;\r\n\r\n@Component({\r\n  tag: \"ch-tabular-grid-render\",\r\n  styleUrl: \"tabular-grid-render.scss\",\r\n  shadow: true\r\n})\r\nexport class ChTabularGridRender {\r\n  #modelVersion = 0;\r\n\r\n  /**\r\n   * Determines if the columns can be hidden by the user\r\n   */\r\n  @Prop() readonly columnHideable: boolean = true;\r\n\r\n  /**\r\n   *  Determines if the columns can be resized by the user.\r\n   */\r\n  @Prop() readonly columnResizable: boolean = true;\r\n\r\n  /**\r\n   * Determines if the columns can be sorted by the user.\r\n   */\r\n  @Prop() readonly columnSortable: boolean = true;\r\n\r\n  /**\r\n   * Specifies the content of the tabular grid control.\r\n   */\r\n  @Prop() readonly model: TabularGridModel;\r\n  @Watch(\"model\")\r\n  modelChanged() {\r\n    this.#modelVersion++;\r\n  }\r\n\r\n  /**\r\n   * TODO: Remove this property\r\n   */\r\n  @Prop() readonly theme: string;\r\n\r\n  #isRowsetItemSimpleModel = (\r\n    rowset: any\r\n  ): rowset is TabularGridRowsetItemSimpleModel => rowset && !(\"id\" in rowset);\r\n\r\n  #isRowsetItemGroupModel = (\r\n    rowset: any\r\n  ): rowset is TabularGridRowsetItemGroupModel => rowset && \"id\" in rowset;\r\n\r\n  #renderGrid = (\r\n    columns: TabularGridColumnsModel,\r\n    rowsets: TabularGridRowsetsModel\r\n  ) => (\r\n    <ch-tabular-grid key={this.#modelVersion} class=\"tabular-grid\">\r\n      {this.#renderColumns(columns)}\r\n      {this.#renderRowsets(rowsets)}\r\n    </ch-tabular-grid>\r\n  );\r\n\r\n  #renderColumns = (columns: TabularGridColumnsModel) => (\r\n    <ch-tabular-grid-columnset parts={true} class=\"tabular-grid-column-set\">\r\n      {columns.map(this.#renderColumn)}\r\n    </ch-tabular-grid-columnset>\r\n  );\r\n\r\n  #renderColumn = (column: TabularGridColumnItemModel) => (\r\n    <ch-tabular-grid-column\r\n      parts={column.parts ?? true}\r\n      role=\"columnheader\"\r\n      aria-label={column.accessibleName}\r\n      aria-sort={ARIA_SORT_MAP[column.sortDirection]}\r\n      class=\"tabular-grid-column\"\r\n      columnId={column.id}\r\n      columnName={column.caption}\r\n      columnNameHidden={column.captionHidden}\r\n      columnTooltip={column.tooltip}\r\n      order={column.order}\r\n      size={column.size}\r\n      resizable={column.resizable ?? this.columnResizable}\r\n      sortable={column.sortable ?? this.columnSortable}\r\n      sortDirection={column.sortDirection}\r\n      hidden={column.hidden}\r\n      hideable={column.hideable ?? this.columnHideable}\r\n      freeze={column.freeze}\r\n      settingable={false}\r\n    ></ch-tabular-grid-column>\r\n  );\r\n\r\n  #renderRowsets = (rowsets: TabularGridRowsetsModel) => {\r\n    const normalizedModel = Array.isArray(rowsets) ? rowsets : [rowsets];\r\n\r\n    return normalizedModel.map(rowset => {\r\n      if (this.#isRowsetItemSimpleModel(rowset)) {\r\n        return this.#renderRowsetSimple(rowset.rows, rowset.rowsets);\r\n      }\r\n      if (this.#isRowsetItemGroupModel(rowset)) {\r\n        return this.#renderRowsetGroup(rowset);\r\n      }\r\n    });\r\n  };\r\n\r\n  #renderRowsetSimple = (\r\n    rows: TabularGridRowsModel,\r\n    rowsets?: TabularGridRowsetsGroupModel\r\n  ) => (\r\n    <ch-tabular-grid-rowset role=\"rowgroup\" class=\"tabular-grid-rowset\">\r\n      {rows.map(this.#renderRow)}\r\n      {rowsets && rowsets.map(this.#renderRowsetGroup)}\r\n    </ch-tabular-grid-rowset>\r\n  );\r\n\r\n  #renderRowsetGroup = (rowset: TabularGridRowsetItemGroupModel) => (\r\n    <ch-tabular-grid-rowset\r\n      rowsetId={rowset.id}\r\n      role=\"rowgroup\"\r\n      class=\"tabular-grid-rowset\"\r\n    >\r\n      <ch-tabular-grid-rowset-legend\r\n        parts={rowset.parts ?? true}\r\n        aria-label={rowset.accessibleName}\r\n        class=\"tabular-grid-rowset-legend\"\r\n      >\r\n        {rowset.caption}\r\n      </ch-tabular-grid-rowset-legend>\r\n\r\n      {rowset.rows.map(this.#renderRow)}\r\n      {rowset.rowsets && rowset.rowsets.map(this.#renderRowsetGroup)}\r\n    </ch-tabular-grid-rowset>\r\n  );\r\n\r\n  #renderRow = (row: TabularGridRowItemModel) => (\r\n    <ch-tabular-grid-row\r\n      rowid={row.id}\r\n      /**\r\n       * TODO: Replace the temporary workaround of using \"ref={}\" to assign the property instead of the attribute.\r\n       * Use \"parts={row.parts ?? true}\" when <ch-tabular-grid-row> correctly declare the JSX property.\r\n       */\r\n      ref={(el: any) => {\r\n        if (el) {\r\n          el.parts = row.parts ?? true;\r\n        }\r\n      }}\r\n      role=\"row\"\r\n      class=\"tabular-grid-row\"\r\n    >\r\n      {row.cells.map(this.#renderCell)}\r\n      {row.rows && this.#renderRowsetSimple(row.rows)}\r\n    </ch-tabular-grid-row>\r\n  );\r\n\r\n  #renderCell = (cell: TabularGridCellItemModel, index: number) => {\r\n    return (\r\n      <ch-tabular-grid-cell\r\n        cellid={cell.id}\r\n        /**\r\n         * TODO: Replace the temporary workaround of using \"ref={}\" to assign the property instead of the attribute.\r\n         * Use \"parts={row.parts ?? true}\" when <ch-tabular-grid-cell> correctly declare the JSX property.\r\n         */\r\n        ref={(el: any) => {\r\n          if (el) {\r\n            el.parts = cell.parts ?? true;\r\n          }\r\n        }}\r\n        role=\"gridcell\"\r\n        aria-colindex={++index}\r\n        class=\"tabular-grid-cell\"\r\n      >\r\n        {cell.text}\r\n      </ch-tabular-grid-cell>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Host role=\"grid\">\r\n        {this.theme && <ch-theme model={this.theme}></ch-theme>}\r\n        {this.model && this.#renderGrid(this.model.columns, this.model.rowsets)}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"6CAAA,MAAMA,EAAuB,iCAC7B,MAAAC,EAAeD,ECaf,MAAME,EAAgB,CACpBC,UAAW,OACXC,IAAK,YACLC,KAAM,c,MAQKC,EAAmB,M,6CAMa,K,qBAKC,K,oBAKD,K,0CAf3CC,GAAgB,EAsBhB,YAAAC,GACEC,MAAKF,G,CAQPG,GACEC,GAC+CA,KAAY,OAAQA,GAErEC,GACED,GAC8CA,GAAU,OAAQA,EAElEE,GAAc,CACZC,EACAC,IAEAC,EAAA,mBAAiBC,IAAKR,MAAKF,EAAeW,MAAM,gBAC7CT,MAAKU,EAAeL,GACpBL,MAAKW,EAAeL,IAIzBI,GAAkBL,GAChBE,EAAA,6BAA2BK,MAAO,KAAMH,MAAM,2BAC3CJ,EAAQQ,IAAIb,MAAKc,IAItBA,GAAiBC,GACfR,EAAA,0BACEK,MAAOG,EAAOH,OAAS,KACvBI,KAAK,eAAc,aACPD,EAAOE,eAAc,YACtBxB,EAAcsB,EAAOG,eAChCT,MAAM,sBACNU,SAAUJ,EAAOK,GACjBC,WAAYN,EAAOO,QACnBC,iBAAkBR,EAAOS,cACzBC,cAAeV,EAAOW,QACtBC,MAAOZ,EAAOY,MACdC,KAAMb,EAAOa,KACbC,UAAWd,EAAOc,WAAa7B,KAAK8B,gBACpCC,SAAUhB,EAAOgB,UAAY/B,KAAKgC,eAClCd,cAAeH,EAAOG,cACtBe,OAAQlB,EAAOkB,OACfC,SAAUnB,EAAOmB,UAAYlC,KAAKmC,eAClCC,OAAQrB,EAAOqB,OACfC,YAAa,QAIjB1B,GAAkBL,IAChB,MAAMgC,EAAkBC,MAAMC,QAAQlC,GAAWA,EAAU,CAACA,GAE5D,OAAOgC,EAAgBzB,KAAIX,IACzB,GAAIF,MAAKC,EAAyBC,GAAS,CACzC,OAAOF,MAAKyC,EAAoBvC,EAAOwC,KAAMxC,EAAOI,Q,CAEtD,GAAIN,MAAKG,EAAwBD,GAAS,CACxC,OAAOF,MAAK2C,EAAmBzC,E,IAEjC,EAGJuC,GAAsB,CACpBC,EACApC,IAEAC,EAAA,0BAAwBS,KAAK,WAAWP,MAAM,uBAC3CiC,EAAK7B,IAAIb,MAAK4C,GACdtC,GAAWA,EAAQO,IAAIb,MAAK2C,IAIjCA,GAAsBzC,GACpBK,EAAA,0BACEsC,SAAU3C,EAAOkB,GACjBJ,KAAK,WACLP,MAAM,uBAENF,EAAA,iCACEK,MAAOV,EAAOU,OAAS,KAAI,aACfV,EAAOe,eACnBR,MAAM,8BAELP,EAAOoB,SAGTpB,EAAOwC,KAAK7B,IAAIb,MAAK4C,GACrB1C,EAAOI,SAAWJ,EAAOI,QAAQO,IAAIb,MAAK2C,IAI/CC,GAAcE,GACZvC,EAAA,uBACEwC,MAAOD,EAAI1B,GAKX4B,IAAMC,IACJ,GAAIA,EAAI,CACNA,EAAGrC,MAAQkC,EAAIlC,OAAS,I,GAG5BI,KAAK,MACLP,MAAM,oBAELqC,EAAII,MAAMrC,IAAIb,MAAKmD,GACnBL,EAAIJ,MAAQ1C,MAAKyC,EAAoBK,EAAIJ,OAI9CS,GAAc,CAACC,EAAgCC,IAE3C9C,EAAA,wBACE+C,OAAQF,EAAKhC,GAKb4B,IAAMC,IACJ,GAAIA,EAAI,CACNA,EAAGrC,MAAQwC,EAAKxC,OAAS,I,GAG7BI,KAAK,WAAU,kBACEqC,EACjB5C,MAAM,qBAEL2C,EAAKG,MAKZ,MAAAC,GACE,OACEjD,EAACkD,EAAI,CAAAjD,IAAA,2CAACQ,KAAK,QACRhB,KAAK0D,OAASnD,EAAA,YAAAC,IAAA,2CAAUmD,MAAO3D,KAAK0D,QACpC1D,KAAK2D,OAAS3D,MAAKI,EAAYJ,KAAK2D,MAAMtD,QAASL,KAAK2D,MAAMrD,S"}