{"version":3,"names":["sidebarCss","ChSidebarStyle0","autoId","ChSidebar","exports","_a","_sidebarId","set","this","_handleExpandedChange","event","stopPropagation","newExpandedValue","_this","expanded","expandedChange","emit","class_1","prototype","expandedChanged","newValue","notifySubscribers","__classPrivateFieldGet","connectedCallback","__classPrivateFieldSet","concat","el","id","addObservable","disconnectedCallback","removeObservable","render","accessibleName","expandButtonCollapseAccessibleName","expandButtonExpandAccessibleName","caption","expandButtonCollapseCaption","expandButtonExpandCaption","h","Host","key","class","showExpandButton","undefined","part","type","onClick"],"sources":["src/components/sidebar/sidebar.scss?tag=ch-sidebar&encapsulation=shadow","src/components/sidebar/sidebar.tsx"],"sourcesContent":["@import \"../../common/base\";\r\n@import \"../../common/icons\";\r\n\r\n@include button-reset();\r\n@include box-sizing();\r\n\r\n:host {\r\n  --ch-sidebar-inline-size--expanded: auto;\r\n  --ch-sidebar-inline-size--collapsed: auto;\r\n\r\n  /**\r\n   * @prop --ch-sidebar__chevron-size:\r\n   * Specifies the expandable button size.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-sidebar__chevron-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n    * @prop --ch-sidebar__chevron-image-size:\r\n    * Specifies the image size of the expandable button.\r\n    * @default 100%\r\n    */\r\n  --ch-sidebar__chevron-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-sidebar__chevron-background-image:\r\n   * Specifies the image of expand button.\r\n   * @default #{$expandable-icon}\r\n   */\r\n  --ch-sidebar__chevron-background-image: #{$expandable-icon};\r\n\r\n  display: grid;\r\n  grid-template-rows: 1fr max-content;\r\n  inline-size: var(--ch-sidebar-inline-size--expanded);\r\n}\r\n\r\n:host(.ch-sidebar--collapsed) {\r\n  inline-size: var(--ch-sidebar-inline-size--collapsed);\r\n}\r\n\r\n.expand-button {\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  grid-auto-columns: max-content;\r\n  align-items: center;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    display: inline-grid;\r\n    inline-size: var(--ch-sidebar__chevron-size);\r\n    block-size: var(--ch-sidebar__chevron-size);\r\n    -webkit-mask: no-repeat center / var(--ch-sidebar__chevron-image-size)\r\n      var(--ch-sidebar__chevron-background-image);\r\n    background-color: currentColor;\r\n    transform: rotate(90deg);\r\n  }\r\n\r\n  &--collapsed {\r\n    justify-content: center;\r\n\r\n    &::before {\r\n      transform: rotate(-90deg);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Prop,\r\n  Host,\r\n  h,\r\n  Watch\r\n} from \"@stencil/core\";\r\nimport {\r\n  addObservable,\r\n  notifySubscribers,\r\n  removeObservable\r\n} from \"./expanded-change-obervables\";\r\n\r\nlet autoId = 0;\r\n\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"sidebar.scss\",\r\n  tag: \"ch-sidebar\"\r\n})\r\nexport class ChSidebar {\r\n  /**\r\n   * This ID is used to identify the control. Useful when the expandedChange\r\n   * event is fired and the subscribed nodes travel all the tree up to the root\r\n   * searching for the ID that emitted the expandedChange event.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #sidebarId: string;\r\n\r\n  @Element() el: HTMLChSidebarElement;\r\n\r\n  /**\r\n   * Specifies a short string, typically 1 to 3 words, that authors associate\r\n   * with an element to provide users of assistive technologies with a label\r\n   * for expand button when `expanded = true`.\r\n   */\r\n  @Prop() readonly expandButtonCollapseAccessibleName?: string;\r\n\r\n  /**\r\n   * Specifies a short string, typically 1 to 3 words, that authors associate\r\n   * with an element to provide users of assistive technologies with a label\r\n   * for expand button when `expanded = false`.\r\n   */\r\n  @Prop() readonly expandButtonExpandAccessibleName?: string;\r\n\r\n  /**\r\n   * Specifies the caption of the expand button when `expanded = true`.\r\n   */\r\n  @Prop() readonly expandButtonCollapseCaption?: string;\r\n\r\n  /**\r\n   * Specifies the caption of the expand button when `expanded = false`.\r\n   */\r\n  @Prop() readonly expandButtonExpandCaption?: string;\r\n\r\n  /**\r\n   * Specifies whether the control is expanded or collapsed.\r\n   */\r\n  @Prop({ mutable: true }) expanded: boolean = true;\r\n  @Watch(\"expanded\")\r\n  expandedChanged(newValue: boolean) {\r\n    notifySubscribers(this.#sidebarId, newValue);\r\n  }\r\n\r\n  /**\r\n   * `true` to display a expandable button at the bottom of the control.\r\n   */\r\n  @Prop() readonly showExpandButton: boolean = false;\r\n\r\n  /**\r\n   * Emitted when the element is clicked or the space key is pressed and\r\n   * released.\r\n   */\r\n  @Event() expandedChange: EventEmitter<boolean>;\r\n\r\n  #handleExpandedChange = (event: MouseEvent) => {\r\n    event.stopPropagation();\r\n\r\n    const newExpandedValue = !this.expanded;\r\n    this.expanded = newExpandedValue;\r\n\r\n    this.expandedChange.emit(newExpandedValue);\r\n  };\r\n\r\n  connectedCallback() {\r\n    this.#sidebarId ||= `ch-sidebar-${autoId++}`;\r\n\r\n    // The ID MUST be set in this instance, because when searching for the\r\n    // ancestors in `syncStateWithObservableAncestors` we use the DOM id and\r\n    // the method could be executed before the first render of the sidebar,\r\n    // where we typically attach the Host attributes, in this case, the id attr\r\n    this.el.id = this.#sidebarId;\r\n\r\n    addObservable(this.#sidebarId, this.expanded);\r\n    notifySubscribers(this.#sidebarId, this.expanded); // Must run after the ID and the observable has been configured\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    removeObservable(this.#sidebarId);\r\n  }\r\n\r\n  render() {\r\n    const accessibleName = this.expanded\r\n      ? this.expandButtonCollapseAccessibleName\r\n      : this.expandButtonExpandAccessibleName;\r\n\r\n    const caption = this.expanded\r\n      ? this.expandButtonCollapseCaption\r\n      : this.expandButtonExpandCaption;\r\n\r\n    return (\r\n      <Host\r\n        class={this.expanded ? \"ch-sidebar--expanded\" : \"ch-sidebar--collapsed\"}\r\n      >\r\n        <slot />\r\n\r\n        {this.showExpandButton && (\r\n          <button\r\n            aria-label={accessibleName !== caption ? accessibleName : undefined}\r\n            class={{\r\n              \"expand-button\": true,\r\n              \"expand-button--collapsed\": !this.expanded\r\n            }}\r\n            part={`expand-button ${this.expanded ? \"expanded\" : \"collapsed\"}`}\r\n            type=\"button\"\r\n            onClick={this.#handleExpandedChange}\r\n          >\r\n            {caption}\r\n          </button>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"0/BAAA,IAAMA,EAAa,+nDACnB,IAAAC,EAAeD,ECef,IAAIE,EAAS,E,IAOAC,EAASC,EAAA,cAAAC,EAAA,W,yBAOpBC,EAAAC,IAAAC,UAAA,GAgDAC,EAAAF,IAAAC,MAAwB,SAACE,GACvBA,EAAMC,kBAEN,IAAMC,GAAoBC,EAAKC,SAC/BD,EAAKC,SAAWF,EAEhBC,EAAKE,eAAeC,KAAKJ,E,iQAvBkB,K,sBASA,K,6GAP7CK,EAAAC,UAAAC,gBAAA,SAAgBC,GACdC,EAAkBC,uBAAAd,KAAIF,EAAA,KAAac,E,EAuBrCH,EAAAC,UAAAK,kBAAA,WACEC,uBAAAhB,KAAAF,EAAAgB,uBAAAd,KAAAF,EAAA,MAAoB,cAAAmB,OAAcvB,KAAU,KAM5CM,KAAKkB,GAAGC,GAAKL,uBAAAd,KAAIF,EAAA,KAEjBsB,EAAcN,uBAAAd,KAAIF,EAAA,KAAaE,KAAKM,UACpCO,EAAkBC,uBAAAd,KAAIF,EAAA,KAAaE,KAAKM,S,EAG1CG,EAAAC,UAAAW,qBAAA,WACEC,EAAiBR,uBAAAd,KAAIF,EAAA,K,EAGvBW,EAAAC,UAAAa,OAAA,WACE,IAAMC,EAAiBxB,KAAKM,SACxBN,KAAKyB,mCACLzB,KAAK0B,iCAET,IAAMC,EAAU3B,KAAKM,SACjBN,KAAK4B,4BACL5B,KAAK6B,0BAET,OACEC,EAACC,EAAI,CAAAC,IAAA,2CACHC,MAAOjC,KAAKM,SAAW,uBAAyB,yBAEhDwB,EAAA,QAAAE,IAAA,6CAEChC,KAAKkC,kBACJJ,EAAA,UAAAE,IAAA,wDACcR,IAAmBG,EAAUH,EAAiBW,UAC1DF,MAAO,CACL,gBAAiB,KACjB,4BAA6BjC,KAAKM,UAEpC8B,KAAM,iBAAAnB,OAAiBjB,KAAKM,SAAW,WAAa,aACpD+B,KAAK,SACLC,QAASxB,uBAAAd,KAAIC,EAAA,MAEZ0B,G,yIA3GS,G"}