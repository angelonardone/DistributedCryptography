{"version":3,"names":["HTMLChTabularGridRowElement","HTMLElement","parentGrid","parts","observedAttributes","constructor","super","this","defineProperties","connectedCallback","addEventListener","cellCaretClickedHandler","selected","marked","grid","syncRowState","renderAttributes","attributeChangedCallback","name","_oldValue","value","loadParentGrid","rowId","getAttribute","highlighted","hasAttribute","highlightedClasses","rowHighlightedClass","split","setAttribute","classList","add","removeAttribute","remove","selectedClasses","rowSelectedClass","markedClasses","rowMarkedClass","focused","focusedClasses","rowFocusedClass","hasChildRows","querySelector","collapsed","dispatchEvent","CustomEvent","bubbles","composed","detail","leaf","getCell","column","physicalOrder","isVisible","Array","from","querySelectorAll","some","cell","ensureVisible","getBoundingClientRect","rect","firstElementChild","DOMRect","lastElementChild","firstCellRect","lastCellRect","x","y","width","height","eventInfo","targetRow","currentTarget","stopPropagation","closest","Object","defineProperty","get","set","enumerable","configurable","tokenMap","TABULAR_GRID_PARTS_DICTIONARY","ROW","toString","customElements","define","HTMLChTabularGridRowsetElement","computedLevel","rowsetId","rowsetLegendClickedHandler","defineLevel","level","computeLevel","paddingTop","parseInt","style","getPropertyValue","paddingbottom","mainRect","shadowRoot","firstRowRect","lastRowRect","setProperty","getParentRowset","hasLegend","isNestedRow","tagName","parentElement","node","undefined","TabularGridCellType","HTMLChTabularGridCellElement","cellType","Plain","caret","drag","action","selector","selectorLabel","rowDrag","rowSelector","rowActions","defineFocusHandler","Rich","type","cellIndex","prototype","indexOf","call","row","cellId","offsetParent","setSelectorChecked","checked","caretMouseDownHandler","selectorClickHandler","range","shiftKey","selectorLabelClickHandler","dragMouseDownHandler","preventDefault","actionClickHandler","defineRich","TreeNode","defineTreeNode","html","innerHTML","attachShadow","mode","bind","CELL","TabularGridManagerColumnDrag","columns","isRTL","lastTargetOrder","columnId","map","element","translateX","order","find","item","forEach","setColumnHiddenRect","dragging","position","sourceOrder","sourceFreeze","freeze","targetOrder","targetOrderChanged","filter","columnOrder","dragDirection","shiftDirection","left","right","swapColumnPosition","resetColumnPosition","dragEnd","getColumnStyle","columnItem","getColumnsFirstLast","itemFirst","itemLast","hidden","columnFirst","columnLast","columnSibling","getPreviousSiblingVisible","getNextSiblingVisible","previous","next","TabularGridManagerColumns","manager","columnsetObserver","MutationObserver","reloadColumns","columnResizeObserver","ResizeObserver","resizeColumnHandler","columnsDisplay","columnsWidth","observeColumnset","defineColumns","defineColumnsVariables","adjustFreezeOrder","adjustBaseLayer","getColumn","getColumns","sorted","sort","fnSortByOrder","getColumnSelector","columnType","richRowSelector","freezeStart","noFreeze","freezeEnd","defineColumnId","defineColumnIndex","defineColumnOrder","defineColumnSize","defineColumnDisplayObserver","defineColumnResizeObserver","defineColumnType","getColumnUniqueId","size","displayObserverClass","i","push","document","createElement","appendChild","observe","box","richRowDrag","richRowActions","root","getRootNode","length","selectors","styleInnerHTML","Document","head","insertAdjacentHTML","ShadowRoot","s","id","dataset","innerText","undefineColumns","unobserve","columnDisplay","childList","columnsAdded","includes","columnsRemoved","adjustOrders","entries","entry","target","contentRect","setColumnWidthVariables","uniqueId","Date","now","Math","random","substring","setBaseLayer","columnA","columnB","TabularGridManagerSelection","rangeStart","rangeValue","lastSelected","lastRowMarked","selectionStateNone","rowFocused","rowsSelected","cellFocused","cellSelected","touch","selecting","selectingRow","selectingCell","touchStart","touchEvent","clientX","touches","clientY","isTouchEndSelection","abs","changedTouches","cancelable","select","state","append","rangeStartOn","context","keyboardNavigationMode","rowSelectionMode","rangeRows","getRowsRange","Set","concat","preserveInstanceIfSame","getFirstColumn","rowSelected","selectAll","rows","getRows","getFirstRow","selectSet","moveFirstRow","firstRow","movePreviousRow","previousRow","getPreviousRow","moveNextRow","nextRow","getNextRow","moveLastRow","lastRow","getLastRow","movePreviousPageRow","rowsPerPage","getRowsPerPage","previousPageRow","max","moveNextPageRow","nextPageRow","min","movePreviousCell","previousCell","getPreviousCell","moveNextCell","nextCell","getNextCell","markRow","currentRowsMarked","r","markRows","rowsMarked","markAllRows","syncRowSelector","selectorMode","columnSelector","richRowSelectorMode","indexColumnSelector","children","syncColumnSelector","richRowSelectorState","newSelection","oldSelection","every","TabularGridManagerRowDrag","rowIndex","rowShadow","dragMouseMoveFn","dragMouseMoveHandler","dragStart","getGridRowIndex","defineListeners","createRowShadow","floatRow","updateRowPosition","rowHover","rowHoverIndex","rowHoverGridPosition","offsetPosition","dragMouseUpHandler","removeEventListener","dropPosition","rowDrop","before","after","unfloatRow","passive","once","rowHeight","getRowHeight","display","getColumnsWidth","opacity","minWidth","gridRowStart","rowWidth","gridLayout","clientWidth","columnPosition","top","TabularGridManagerRowActions","showOnRowHover","showOnRowActions","showOnRowContext","TabularGridManagerColumnResize","columnWidthStart","columnSizeStart","columnAfter","columnAfterWidthStart","columnAfterSizeStart","resizingFn","resizeEndFn","columnResizeMode","resizingSplitter","resizeEndSplitter","resizingSingle","parseCSSValue","getNextColumn","resizing","deltaWidth","resizeEnd","columnWidth","convertUnit","columnAfterWidth","columnWidthEnd","columnAfterWidthEnd","cssValue","match","number","parseFloat","unit","startSize","startWidth","newWidth","StyleRule","TabularGridManager","styleSheet","CSSStyleSheet","gridLayoutElement","columnDragManager","columnResizeManager","rowDragManager","selection","insertRule","BASE_LAYER","COLUMNS_WIDTH","adoptedStyleSheets","adoptCommonThemes","componentDidLoad","getComputedStyle","gridTemplateColumns","getColumnsetHeight","gridColumnsHeight","gridTemplateRows","getScrollOffsetTop","offsetTop","getScrollOffsetLeft","reduce","offsetRight","offsetWidth","getScrollOffsetRight","current","slice","reverse","getPreviousColumn","previousColumn","nextColumn","getRowsetRowIndex","gridRowsHeight","gridHeight","clientHeight","columnsHeight","floor","getRow","start","end","indexStart","indexEnd","getRowEventTarget","composedPath","isRowActionsEventTarget","getCellEventTarget","columnDragStart","isRTLDirection","columnDragging","columnDragEnd","columnResizeStart","columnResizing","columnResizeEnd","rowDragStart","getGridStyle","getGridTemplateColumns","getRowBoxSimulationStyle","getDragTransitionStyle","getColumnsStyle","deleteRule","columnIndex","join","ensureRowVisible","ensureCellVisible","isColumnFreeze","scroll","scrollOffsetTop","scrollOffsetLeft","scrollOffsetRight","scrollTop","scrollBy","offsetHeight","scrollLeft","offsetLeft","getColumnSizeStyle","getColumnOrderStyle","getColumnDisplayStyle","getColumnFreezeStyle","getColumnDraggingStyle","getColumnIndentStyle","getColumnFreezeStartStyle","getColumnFreezeEndStyle","calcItems","direction","tabularGridCss","ChTabularGridStyle0","ChTabularGrid","settingsUI","rowFocusedHandler","cellFocusedHandler","rowHighlightedHandler","openRowHover","close","rowsMarkedHandler","rowMarkingChanged","emit","getChangedEventDetail","rowsSelectedHandler","selectionChanged","cellSelectedHandler","cellSelectionChanged","rowClicked","rowDoubleClicked","rowEnterPressed","rowContextMenu","componentWillLoad","el","gridStyle","componentShouldUpdate","_newValue","focusHandler","selectByKeyboardEvent","blurHandler","cellFocusedEventHandler","setCellSelected","windowKeyDownHandler","focusComposedPath","key","keyDownHandler","mouseEventModifierKey","spacePressedEvent","setRowCollapsed","moveByKeyboardEvent","enterPressedHandler","mouseMoveHandler","rowHighlightEnabled","rowHighlighted","selectingBlock","stopSelecting","isKeyModifierPressed","isMouseButtonRightPressed","mouseEventHasButtonPressed","MouseEventButtons","RIGHT","selectByPointerEvent","mouseLeaveHandler","mouseDownHandler","button","MouseEventButton","mouseUpHandler","clickHandler","emitRowClicked","dblclickHandler","touchstartHandler","touchendHandler","contextmenuHandler","KEY_SHORTCUT","rowContextMenuEventInfo","selectedRowsId","openRowContext","defaultPrevented","columnSelectorClickedHandler","cellSelectorClickedHandler","cellRowActionClickedHandler","openRowActions","columnStyleChangedHandler","columnFreezeChangedHandler","columnResizeStartedHandler","columnResizingHandler","columnResizeFinishedHandler","columnDragStartHandler","columnDraggingHandler","positionX","columnDragEndHandler","rowDragStartHandler","rowEnsureVisibleHandler","cellEnsureVisibleHandler","settingsShowClickedHandler","show","settingsCloseClickedHandler","getFocusedRow","getHoveredRow","getSelectedRows","getMarkedRows","getFocusedCell","getSelectedCell","selectRow","selectAllRows","selectCell","expandRow","collapseRow","rowEnsureVisible","cellEnsureVisible","currentRow","syncRowStateSelected","syncRowStateMarked","syncRowStateSelector","index","splice","rowsId","addedRowsId","removedRowsId","unalteredRowsId","ctrl","shift","markByKeyboardEvent","fn","renderSettings","h","ref","exportparts","part","render","Host","tabindex","class","tabularGridColumnCss","ChTabularGridColumnStyle0","ChTabularGridColumn","dragMouseMoveStartPositionX","freezeHandler","columnFreezeChanged","hiddenHandler","columnHiddenChanged","orderHandler","columnOrderChanged","sizeHandler","columnSizeChanging","sortDirectionHandler","sortDirection","columnSortChanged","columnSizeChanged","columnDragStarted","columnDragEnded","columnSelectorClicked","mousedownHandler","sortable","allowColumnReorder","pageX","movementX","settingsMouseDownHandler","settingsClickHandler","showSettings","selectorTouchEndHandler","COLUMN","renderSelector","renderName","renderSort","renderResize","onMouseDown","onClick","onTouchEnd","indeterminate","title","columnTooltip","columnNamePosition","columnName","columnIconUrl","columnImage","columnImageSet","src","srcSet","columnNameHidden","settingable","resizable","tabularGridColumnsetCss","ChTabularGridColumnsetStyle0","ChTabularGridColumnset","columnSortChangedHandler","COLUMNSET","tabularGridRowsetLegendCss","ChTabularGridRowsetLegendStyle0","ChTabularGridRowsetLegend","rowsetLegendClicked","getRowsetId","rowset","ROWSET_LEGEND"],"sources":["src/components/tabular-grid/row/tabular-grid-row.ts","src/components/tabular-grid/rowset/tabular-grid-rowset.tsx","src/components/tabular-grid/cell/tabular-grid-cell.ts","src/components/tabular-grid/tabular-grid-manager-column-drag.ts","src/components/tabular-grid/tabular-grid-manager-columns.ts","src/components/tabular-grid/tabular-grid-manager-selection.ts","src/components/tabular-grid/tabular-grid-manager-row-drag.ts","src/components/tabular-grid/tabular-grid-manager-row-actions.ts","src/components/tabular-grid/tabular-grid-manager-column-resize.ts","src/components/tabular-grid/tabular-grid-manager.ts","src/components/tabular-grid/tabular-grid.scss?tag=ch-tabular-grid&encapsulation=shadow","src/components/tabular-grid/tabular-grid.tsx","src/components/tabular-grid/column/tabular-grid-column.scss?tag=ch-tabular-grid-column&encapsulation=shadow","src/components/tabular-grid/column/tabular-grid-column.tsx","src/components/tabular-grid/columnset/tabular-grid-columnset.scss?tag=ch-tabular-grid-columnset","src/components/tabular-grid/columnset/tabular-grid-columnset.tsx","src/components/tabular-grid/rowset/legend/tabular-grid-rowset-legend.scss?tag=ch-tabular-grid-rowset-legend&encapsulation=shadow","src/components/tabular-grid/rowset/legend/tabular-grid-rowset-legend.tsx"],"sourcesContent":["import { ITabularGridCollapsible } from \"../tabular-grid-types\";\r\nimport HTMLChTabularGridCellElement from \"../cell/tabular-grid-cell\";\r\nimport { tokenMap } from \"../../../common/utils\";\r\nimport { TABULAR_GRID_PARTS_DICTIONARY } from \"../../../common/reserved-names\";\r\n\r\n/**\r\n * The `ch-tabular-grid-row` component represents a grid row.\r\n */\r\nexport default class HTMLChTabularGridRowElement\r\n  extends HTMLElement\r\n  implements ITabularGridCollapsible\r\n{\r\n  private parentGrid: HTMLChTabularGridElement;\r\n  #parts: boolean | string;\r\n\r\n  static get observedAttributes() {\r\n    return [\"selected\", \"marked\"];\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.#defineProperties();\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.addEventListener(\"cellCaretClicked\", this.cellCaretClickedHandler);\r\n\r\n    if (this.selected || this.marked) {\r\n      this.grid.syncRowState(this);\r\n    }\r\n\r\n    this.#renderAttributes();\r\n  }\r\n\r\n  attributeChangedCallback(name: string, _oldValue: string, value: string) {\r\n    if (name === \"selected\") {\r\n      this.selected = value !== null ? value !== \"false\" : false;\r\n    }\r\n    if (name === \"marked\") {\r\n      this.marked = value !== null ? value !== \"false\" : false;\r\n    }\r\n\r\n    this.grid?.syncRowState(this);\r\n  }\r\n\r\n  /**\r\n   * Returns the parent ch-tabular-grid element of the grid row.\r\n   */\r\n  get grid(): HTMLChTabularGridElement {\r\n    return this.parentGrid ?? this.loadParentGrid();\r\n  }\r\n\r\n  /**\r\n   * A unique identifier for the row.\r\n   */\r\n  get rowId(): string {\r\n    return this.getAttribute(\"rowid\") ?? \"\";\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is highlighted.\r\n   */\r\n  get highlighted(): boolean {\r\n    return this.hasAttribute(\"highlighted\");\r\n  }\r\n\r\n  set highlighted(value: boolean) {\r\n    const highlightedClasses = this.grid.rowHighlightedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      this.setAttribute(\"highlighted\", \"\");\r\n      if (this.grid.rowHighlightedClass) {\r\n        this.classList.add(...highlightedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"highlighted\");\r\n      if (this.grid.rowHighlightedClass) {\r\n        this.classList.remove(...highlightedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is selected.\r\n   */\r\n  get selected(): boolean {\r\n    return this.hasAttribute(\"selected\");\r\n  }\r\n\r\n  set selected(value: boolean) {\r\n    const selectedClasses = this.grid.rowSelectedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      if (!this.hasAttribute(\"selected\")) {\r\n        this.setAttribute(\"selected\", \"\");\r\n      }\r\n      if (this.grid.rowSelectedClass) {\r\n        this.classList.add(...selectedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"selected\");\r\n      if (this.grid.rowSelectedClass) {\r\n        this.classList.remove(...selectedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is marked.\r\n   */\r\n  get marked(): boolean {\r\n    return this.hasAttribute(\"marked\");\r\n  }\r\n\r\n  set marked(value: boolean) {\r\n    const markedClasses = this.grid.rowMarkedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      if (!this.hasAttribute(\"marked\")) {\r\n        this.setAttribute(\"marked\", \"\");\r\n      }\r\n      if (this.grid.rowMarkedClass) {\r\n        this.classList.add(...markedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"marked\");\r\n      if (this.grid.rowMarkedClass) {\r\n        this.classList.remove(...markedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is focused.\r\n   */\r\n  get focused(): boolean {\r\n    return this.hasAttribute(\"focused\");\r\n  }\r\n\r\n  set focused(value: boolean) {\r\n    const focusedClasses = this.grid.rowFocusedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      this.setAttribute(\"focused\", \"\");\r\n      if (this.grid.rowFocusedClass) {\r\n        this.classList.add(...focusedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"focused\");\r\n      if (this.grid.rowFocusedClass) {\r\n        this.classList.remove(...focusedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the grid row has child rows.\r\n   */\r\n  get hasChildRows(): boolean {\r\n    return !!this.querySelector(\"ch-tabular-grid-rowset\");\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid row is collapsed.\r\n   */\r\n  get collapsed(): boolean {\r\n    return this.hasAttribute(\"collapsed\");\r\n  }\r\n\r\n  set collapsed(value: boolean) {\r\n    const dispatchEvent = this.collapsed !== value;\r\n\r\n    if (value) {\r\n      this.setAttribute(\"collapsed\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"collapsed\");\r\n    }\r\n\r\n    if (dispatchEvent) {\r\n      this.dispatchEvent(\r\n        new CustomEvent(\"rowCollapsedChanged\", {\r\n          bubbles: true,\r\n          composed: true,\r\n          detail: { rowId: this.rowId, collapsed: value }\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid row is a leaf node.\r\n   */\r\n  get leaf(): boolean {\r\n    return this.hasAttribute(\"leaf\");\r\n  }\r\n\r\n  set leaf(value: boolean) {\r\n    if (value === true) {\r\n      this.setAttribute(\"leaf\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"leaf\");\r\n    }\r\n  }\r\n\r\n  public getCell(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): HTMLChTabularGridCellElement {\r\n    return this.querySelector(\r\n      `:scope > ch-tabular-grid-cell:nth-of-type(${column.physicalOrder})`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid row is visible.\r\n   */\r\n  public isVisible(): boolean {\r\n    return Array.from(\r\n      this.querySelectorAll(\":scope > ch-tabular-grid-cell\")\r\n    ).some((cell: HTMLChTabularGridCellElement) => cell.isVisible());\r\n  }\r\n\r\n  /**\r\n   * Ensures that the row is visible within the control, scrolling the contents of the control if necessary.\r\n   */\r\n  public ensureVisible() {\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"rowEnsureVisible\", { bubbles: true, composed: true })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * returns a `DOMRect` object representing the size of the grid row element.\r\n   */\r\n  public getBoundingClientRect(): DOMRect {\r\n    let rect: DOMRect;\r\n\r\n    if (!this.firstElementChild) {\r\n      rect = new DOMRect();\r\n    } else if (this.firstElementChild === this.lastElementChild) {\r\n      rect = this.firstElementChild.getBoundingClientRect();\r\n    } else {\r\n      const firstCellRect = this.firstElementChild.getBoundingClientRect();\r\n      const lastCellRect = this.lastElementChild.getBoundingClientRect();\r\n\r\n      rect = new DOMRect(\r\n        firstCellRect.x,\r\n        firstCellRect.y,\r\n        lastCellRect.x - firstCellRect.x + lastCellRect.width,\r\n        lastCellRect.y - firstCellRect.y + lastCellRect.height\r\n      );\r\n    }\r\n\r\n    return rect;\r\n  }\r\n\r\n  private cellCaretClickedHandler(eventInfo: PointerEvent) {\r\n    const targetRow = eventInfo.currentTarget as HTMLChTabularGridRowElement;\r\n\r\n    if (targetRow.hasChildRows) {\r\n      this.collapsed = !this.collapsed;\r\n    }\r\n    eventInfo.stopPropagation();\r\n  }\r\n\r\n  private loadParentGrid(): HTMLChTabularGridElement {\r\n    this.parentGrid = this.closest(\"ch-tabular-grid\");\r\n    return this.parentGrid;\r\n  }\r\n\r\n  #defineProperties = () => {\r\n    this.#parts = (this as any).parts;\r\n    Object.defineProperty(this, \"parts\", {\r\n      get: () => this.#parts,\r\n      set: value => {\r\n        this.#parts = value;\r\n        this.#renderAttributes();\r\n      },\r\n      enumerable: true,\r\n      configurable: true\r\n    });\r\n  };\r\n\r\n  #renderAttributes = () => {\r\n    if (this.#parts) {\r\n      this.setAttribute(\r\n        \"part\",\r\n        tokenMap({\r\n          [TABULAR_GRID_PARTS_DICTIONARY.ROW]: true,\r\n          [this.rowId]: true,\r\n          [this.#parts.toString()]: typeof this.#parts === \"string\"\r\n        })\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nif (!customElements.get(\"ch-tabular-grid-row\")) {\r\n  customElements.define(\"ch-tabular-grid-row\", HTMLChTabularGridRowElement);\r\n}\r\n","import { ITabularGridCollapsible } from \"../tabular-grid-types\";\r\n\r\n/**\r\n * The `ch-tabular-grid-rowset` component represents a group of rows.\r\n */\r\nexport default class HTMLChTabularGridRowsetElement\r\n  extends HTMLElement\r\n  implements ITabularGridCollapsible\r\n{\r\n  private computedLevel = 0;\r\n  private grid: HTMLChTabularGridElement;\r\n\r\n  rowsetId: string;\r\n\r\n  static get observedAttributes() {\r\n    return [\"rowsetid\"];\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.addEventListener(\r\n      \"rowsetLegendClicked\",\r\n      this.rowsetLegendClickedHandler\r\n    );\r\n    this.defineLevel();\r\n  }\r\n\r\n  attributeChangedCallback(name: string, _oldValue: string, value: string) {\r\n    if (name === \"rowsetid\") {\r\n      this.rowsetId = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid rowset is collapsed.\r\n   */\r\n  get collapsed(): boolean {\r\n    return this.hasAttribute(\"collapsed\");\r\n  }\r\n\r\n  set collapsed(value: boolean) {\r\n    if (value) {\r\n      this.setAttribute(\"collapsed\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"collapsed\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the zero-based depth of the rowset in the tree.\r\n   */\r\n  get level(): number {\r\n    if (!this.computedLevel) {\r\n      this.computeLevel();\r\n    }\r\n\r\n    return this.computedLevel;\r\n  }\r\n\r\n  /**\r\n   * returns a `DOMRect` object representing the size of the grid rowset element.\r\n   */\r\n  public getBoundingClientRect(): DOMRect {\r\n    let rect: DOMRect;\r\n\r\n    const paddingTop = parseInt(this.style.getPropertyValue(\"padding-top\"));\r\n    const paddingbottom = parseInt(\r\n      this.style.getPropertyValue(\"padding-bottom\")\r\n    );\r\n\r\n    if (!this.firstElementChild) {\r\n      const mainRect = this.grid.shadowRoot\r\n        .querySelector(\".main\")\r\n        .getBoundingClientRect();\r\n      rect = new DOMRect(mainRect.x, mainRect.y, mainRect.width, 0);\r\n    } else if (this.firstElementChild === this.lastElementChild) {\r\n      const firstRowRect = this.firstElementChild.getBoundingClientRect();\r\n\r\n      rect = new DOMRect(\r\n        firstRowRect.x,\r\n        firstRowRect.y - paddingTop,\r\n        firstRowRect.x + firstRowRect.width,\r\n        firstRowRect.y + firstRowRect.height + paddingTop + paddingbottom\r\n      );\r\n    } else {\r\n      const firstRowRect = this.firstElementChild.getBoundingClientRect();\r\n      const lastRowRect = this.lastElementChild.getBoundingClientRect();\r\n\r\n      rect = new DOMRect(\r\n        firstRowRect.x,\r\n        firstRowRect.y - paddingTop,\r\n        lastRowRect.x - firstRowRect.x + lastRowRect.width,\r\n        lastRowRect.y -\r\n          firstRowRect.y +\r\n          lastRowRect.height +\r\n          paddingTop +\r\n          paddingbottom\r\n      );\r\n    }\r\n\r\n    return rect;\r\n  }\r\n\r\n  private rowsetLegendClickedHandler(eventInfo: CustomEvent) {\r\n    eventInfo.stopPropagation();\r\n\r\n    this.collapsed = !this.collapsed;\r\n  }\r\n\r\n  private defineLevel() {\r\n    this.style.setProperty(\"--level\", this.level.toString());\r\n  }\r\n\r\n  private computeLevel() {\r\n    this.computedLevel = this.getParentRowset()?.level ?? 0;\r\n\r\n    if (this.hasLegend() || this.isNestedRow()) {\r\n      this.computedLevel++;\r\n    }\r\n  }\r\n\r\n  private hasLegend(): boolean {\r\n    return this.firstElementChild?.tagName === \"CH-TABULAR-GRID-ROWSET-LEGEND\";\r\n  }\r\n\r\n  private isNestedRow(): boolean {\r\n    return this.parentElement.tagName === \"CH-TABULAR-GRID-ROW\";\r\n  }\r\n\r\n  private getParentRowset(): HTMLChTabularGridRowsetElement | undefined {\r\n    const node = this.parentElement.closest(\r\n      \"ch-tabular-grid-rowset, ch-tabular-grid\"\r\n    );\r\n\r\n    if (node.tagName === \"CH-TABULAR-GRID-ROWSET\") {\r\n      return node as HTMLChTabularGridRowsetElement;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n}\r\n\r\nif (!customElements.get(\"ch-tabular-grid-rowset\")) {\r\n  customElements.define(\r\n    \"ch-tabular-grid-rowset\",\r\n    HTMLChTabularGridRowsetElement\r\n  );\r\n}\r\n","import { TABULAR_GRID_PARTS_DICTIONARY } from \"../../../common/reserved-names\";\r\nimport { tokenMap } from \"../../../common/utils\";\r\nimport HTMLChTabularGridRowElement from \"../row/tabular-grid-row\";\r\n\r\n/**\r\n * TabularGridCellType indicates the type of cell.\r\n * \"Plain\" is a simple cell that shows the contents of it.\r\n * \"Rich\" is a rich cell that, in addition to displaying its content, enables\r\n * the user to execute different actions on the row.\r\n * The actions are:\r\n * - allow dragging the row to reorder it.\r\n * - allow to select the row by means of a checkbox.\r\n * - allow displaying actions to be executed in the row.\r\n * \"TreeNode\" is a cell that represents a node of the Tree.\r\n */\r\nexport enum TabularGridCellType {\r\n  Plain = \"plain\",\r\n  Rich = \"rich\",\r\n  TreeNode = \"node\"\r\n}\r\n\r\n/**\r\n * The `ch-tabular-grid-cell` component represents a grid cell.\r\n */\r\nexport default class HTMLChTabularGridCellElement extends HTMLElement {\r\n  private cellType = TabularGridCellType.Plain;\r\n  private caret: HTMLDivElement;\r\n  private drag: HTMLDivElement;\r\n  private action: HTMLButtonElement;\r\n  private selector: HTMLInputElement;\r\n  private selectorLabel: HTMLLabelElement;\r\n  #parts: boolean | string;\r\n\r\n  public rowDrag: boolean;\r\n  public rowSelector: boolean;\r\n  public rowActions: boolean;\r\n\r\n  static get observedAttributes() {\r\n    return [\"cell-type\", \"row-drag\", \"row-selector\", \"row-actions\"];\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.#defineProperties();\r\n    this.defineFocusHandler();\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.#renderAttributes();\r\n    if (this.cellType !== TabularGridCellType.Plain) {\r\n      this.define();\r\n    }\r\n  }\r\n\r\n  attributeChangedCallback(name: string, _oldValue: string, value: string) {\r\n    if (name === \"cell-type\") {\r\n      this.cellType = value as TabularGridCellType;\r\n    }\r\n    if (name === \"row-drag\") {\r\n      this.cellType = TabularGridCellType.Rich;\r\n      this.rowDrag = value !== null ? value !== \"false\" : false;\r\n    }\r\n    if (name === \"row-selector\") {\r\n      this.cellType = TabularGridCellType.Rich;\r\n      this.rowSelector = value !== null ? value !== \"false\" : false;\r\n    }\r\n    if (name === \"row-actions\") {\r\n      this.cellType = TabularGridCellType.Rich;\r\n      this.rowActions = value !== null ? value !== \"false\" : false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * One of \"plain\", \"rich\", or \"node\", indicating the type of cell.\r\n   */\r\n  get type(): TabularGridCellType {\r\n    return this.cellType;\r\n  }\r\n\r\n  set type(value: TabularGridCellType) {\r\n    if (this.cellType !== value) {\r\n      this.cellType = value;\r\n      this.define();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the parent ch-tabular-grid element of the cell.\r\n   */\r\n  get grid(): HTMLChTabularGridElement {\r\n    return this.closest(\"ch-tabular-grid\");\r\n  }\r\n\r\n  /**\r\n   * Returns the ch-tabular-grid-column element of the cell.\r\n   */\r\n  get column(): HTMLChTabularGridColumnElement {\r\n    const cellIndex = Array.prototype.indexOf.call(\r\n      this.row.querySelectorAll(`:scope > ch-tabular-grid-cell`),\r\n      this\r\n    );\r\n    return this.grid.querySelector(\r\n      `ch-tabular-grid-column:nth-of-type(${cellIndex + 1})`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the parent ch-tabular-grid-row element of the cell.\r\n   */\r\n  get row(): HTMLChTabularGridRowElement {\r\n    return this.parentElement as HTMLChTabularGridRowElement;\r\n  }\r\n\r\n  /**\r\n   * A unique identifier for the cell.\r\n   */\r\n  get cellId(): string {\r\n    return this.getAttribute(\"cellid\") ?? \"\";\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the cell is selected.\r\n   */\r\n  get selected(): boolean {\r\n    return this.hasAttribute(\"selected\");\r\n  }\r\n\r\n  set selected(value: boolean) {\r\n    if (value === true) {\r\n      this.setAttribute(\"selected\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"selected\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the cell is focused.\r\n   */\r\n  get focused(): boolean {\r\n    return this.hasAttribute(\"focused\");\r\n  }\r\n\r\n  set focused(value: boolean) {\r\n    if (value === true) {\r\n      this.setAttribute(\"focused\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"focused\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid cell is visible.\r\n   */\r\n  public isVisible(): boolean {\r\n    return this.offsetParent !== null;\r\n  }\r\n\r\n  /**\r\n   * Ensures that the cell is visible within the control, scrolling the contents of the control if necessary.\r\n   */\r\n  public ensureVisible() {\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"cellEnsureVisible\", { bubbles: true, composed: true })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the selector of cell is checked or not.\r\n   */\r\n  public setSelectorChecked(value: boolean) {\r\n    this.selector.checked = value;\r\n\r\n    if (this.selector.checked) {\r\n      this.selector.setAttribute(\"part\", \"selector checked\");\r\n    } else {\r\n      this.selector.setAttribute(\"part\", \"selector\");\r\n    }\r\n  }\r\n\r\n  private defineFocusHandler() {\r\n    this.addEventListener(\"focusin\", () => {\r\n      if (!this.rowSelector) {\r\n        this.dispatchEvent(\r\n          new CustomEvent(\"cellFocused\", { bubbles: true, composed: true })\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  private caretMouseDownHandler(eventInfo: Event) {\r\n    eventInfo.stopPropagation();\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"cellCaretClicked\", { bubbles: true, composed: true })\r\n    );\r\n  }\r\n\r\n  private selectorClickHandler(eventInfo: MouseEvent) {\r\n    eventInfo.stopPropagation();\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent<TabularGridCellSelectorClickedEvent>(\r\n        \"cellSelectorClicked\",\r\n        {\r\n          bubbles: true,\r\n          composed: true,\r\n          detail: {\r\n            checked: this.selector.checked,\r\n            range: eventInfo.shiftKey\r\n          }\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  private selectorLabelClickHandler(eventInfo: MouseEvent) {\r\n    if (!eventInfo.shiftKey) {\r\n      eventInfo.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private dragMouseDownHandler(eventInfo: MouseEvent) {\r\n    eventInfo.preventDefault();\r\n    eventInfo.stopPropagation();\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent<TabularGridRowDragEvent>(\"rowDragStarted\", {\r\n        bubbles: true,\r\n        composed: true,\r\n        detail: {\r\n          row: this.row\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private actionClickHandler() {\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"cellRowActionClicked\", {\r\n        bubbles: true,\r\n        composed: true\r\n      })\r\n    );\r\n  }\r\n\r\n  private define() {\r\n    switch (this.cellType) {\r\n      case TabularGridCellType.Rich:\r\n        this.defineRich();\r\n        break;\r\n      case TabularGridCellType.TreeNode:\r\n        this.defineTreeNode();\r\n        break;\r\n    }\r\n  }\r\n\r\n  private defineRich() {\r\n    let html = \"\";\r\n\r\n    if (!this.shadowRoot || this.shadowRoot.innerHTML === \"\") {\r\n      this.attachShadow({ mode: \"open\" });\r\n\r\n      if (this.rowDrag) {\r\n        html += `\r\n          <div part=\"drag-icon\"></div>\r\n        `;\r\n      }\r\n\r\n      if (this.rowSelector) {\r\n        html += `\r\n          <style>label {display:flex}</style>\r\n          <label part=\"selector-label\">\r\n            <input type=\"checkbox\" part=\"selector\">\r\n          </label>\r\n        `;\r\n      }\r\n\r\n      if (this.rowActions) {\r\n        html += `\r\n          <button part=\"actions-icon\"></button>\r\n        `;\r\n      }\r\n\r\n      this.shadowRoot.innerHTML = `\r\n        ${html}\r\n        <slot></slot>\r\n      `;\r\n\r\n      if (this.rowDrag) {\r\n        this.drag = this.shadowRoot.querySelector(\"[part='drag-icon']\");\r\n        this.drag.addEventListener(\r\n          \"mousedown\",\r\n          this.dragMouseDownHandler.bind(this)\r\n        );\r\n      }\r\n\r\n      if (this.rowActions) {\r\n        this.action = this.shadowRoot.querySelector(\"[part='actions-icon']\");\r\n        this.action.addEventListener(\r\n          \"click\",\r\n          this.actionClickHandler.bind(this)\r\n        );\r\n      }\r\n\r\n      if (this.rowSelector) {\r\n        this.selector = this.shadowRoot.querySelector(\"[part='selector']\");\r\n        this.selector.addEventListener(\"mousedown\", (eventInfo: MouseEvent) =>\r\n          eventInfo.stopPropagation()\r\n        );\r\n        this.selector.addEventListener(\"touchend\", (eventInfo: TouchEvent) =>\r\n          eventInfo.stopPropagation()\r\n        );\r\n        this.selector.addEventListener(\r\n          \"click\",\r\n          this.selectorClickHandler.bind(this)\r\n        );\r\n\r\n        this.selectorLabel = this.shadowRoot.querySelector(\r\n          \"[part='selector-label']\"\r\n        );\r\n        this.selectorLabel.addEventListener(\r\n          \"mousedown\",\r\n          (eventInfo: MouseEvent) => eventInfo.stopPropagation()\r\n        );\r\n        this.selectorLabel.addEventListener(\r\n          \"touchend\",\r\n          (eventInfo: MouseEvent) => eventInfo.stopPropagation()\r\n        );\r\n        this.selectorLabel.addEventListener(\r\n          \"click\",\r\n          this.selectorLabelClickHandler.bind(this)\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private defineTreeNode() {\r\n    if (!this.shadowRoot || this.shadowRoot.innerHTML === \"\") {\r\n      this.attachShadow({ mode: \"open\" });\r\n      this.shadowRoot.innerHTML = `\r\n        <style>:host::before {content: none !important}</style>\r\n        <div part=\"indent\"></div>\r\n        <div part=\"caret\"></div>\r\n        <input type=\"checkbox\" part=\"node-selector\" hidden>\r\n        <div part=\"node-icon\"></div>\r\n        <slot></slot>\r\n      `;\r\n\r\n      this.caret = this.shadowRoot.querySelector(\"[part='caret']\");\r\n      this.caret.addEventListener(\r\n        \"mousedown\",\r\n        this.caretMouseDownHandler.bind(this)\r\n      );\r\n      this.caret.addEventListener(\"click\", eventInfo =>\r\n        eventInfo.stopPropagation()\r\n      );\r\n    }\r\n  }\r\n\r\n  #defineProperties = () => {\r\n    this.#parts = (this as any).parts;\r\n    Object.defineProperty(this, \"parts\", {\r\n      get: () => this.#parts,\r\n      set: value => {\r\n        this.#parts = value;\r\n        this.#renderAttributes();\r\n      },\r\n      enumerable: true,\r\n      configurable: true\r\n    });\r\n  };\r\n\r\n  #renderAttributes = () => {\r\n    this.#parts &&\r\n      this.setAttribute(\r\n        \"part\",\r\n        tokenMap({\r\n          [TABULAR_GRID_PARTS_DICTIONARY.CELL]: true,\r\n          [this.cellId]: !!this.cellId,\r\n          [this.#parts.toString()]: typeof this.#parts === \"string\"\r\n        })\r\n      );\r\n  };\r\n}\r\n\r\nexport interface TabularGridCellSelectorClickedEvent {\r\n  checked: boolean;\r\n  range: boolean;\r\n}\r\n\r\nexport interface TabularGridRowDragEvent {\r\n  row: HTMLChTabularGridRowElement;\r\n  positionX?: number;\r\n  direction?: \"top\" | \"bottom\";\r\n}\r\n\r\nif (!customElements.get(\"ch-tabular-grid-cell\")) {\r\n  customElements.define(\"ch-tabular-grid-cell\", HTMLChTabularGridCellElement);\r\n}\r\n","import { CSSProperties } from \"./tabular-grid-types\";\r\n\r\nexport class TabularGridManagerColumnDrag {\r\n  private column: TabularGridManagerColumnDragItem;\r\n  private columns: TabularGridManagerColumnDragItem[];\r\n  private isRTL: boolean;\r\n  private lastTargetOrder = 0;\r\n\r\n  constructor(\r\n    columnId: string,\r\n    columns: HTMLChTabularGridColumnElement[],\r\n    isRTL: boolean\r\n  ) {\r\n    this.isRTL = isRTL;\r\n    this.columns = columns.map(column => ({\r\n      element: column,\r\n      rect: column.getBoundingClientRect(),\r\n      translateX: 0,\r\n      order: column.order\r\n    }));\r\n    this.column = this.columns.find(item => item.element.columnId === columnId);\r\n\r\n    this.columns.forEach(this.setColumnHiddenRect.bind(this));\r\n  }\r\n\r\n  dragging(position: number): boolean {\r\n    /**\r\n     * Indica el orden inicial de la columna que se está arrastrando\r\n     */\r\n    const sourceOrder = this.column.element.order;\r\n\r\n    /**\r\n     * Indica a qué grupo de fijación pertenece la columna que se está arrastrando\r\n     */\r\n    const sourceFreeze = this.column.element.freeze;\r\n\r\n    let targetOrder = 0;\r\n    let targetOrderChanged = false;\r\n\r\n    this.column.translateX = 0;\r\n    this.columns\r\n      .filter(column => column.element.freeze === sourceFreeze)\r\n      .forEach(column => {\r\n        /**\r\n         * Indica el orden de la columna actual\r\n         */\r\n        const columnOrder = column.element.order;\r\n\r\n        /**\r\n         * Indica si la columna que se está arrastrando estaba a la derecha o\r\n         * a la izquierda de la actual cuando se inició el arrastre para\r\n         * incrementar el orden según corresponda.\r\n         */\r\n        const dragDirection = sourceOrder > columnOrder ? 1 : -1;\r\n\r\n        /**\r\n         * Indica si la columna actual hay que desplazarla a la derecha o\r\n         * a la izquierda cuando se cruce con la columna arrastrada.\r\n         */\r\n        const shiftDirection =\r\n          (sourceOrder > columnOrder ? 1 : -1) * (this.isRTL ? -1 : 1);\r\n\r\n        if (\r\n          column.rect.left < position &&\r\n          position < column.rect.right &&\r\n          columnOrder !== sourceOrder\r\n        ) {\r\n          /*\r\n            La posicion actual del mouse está dentro de la columna actual y\r\n            no es la columna que se está arrastrando\r\n          */\r\n          this.swapColumnPosition(column, shiftDirection);\r\n\r\n          // actualizo el orden de la columna actual\r\n          column.order = column.element.order + dragDirection;\r\n\r\n          targetOrder = columnOrder;\r\n        } else if (\r\n          position < column.rect.left &&\r\n          (this.isRTL ? columnOrder > sourceOrder : columnOrder < sourceOrder)\r\n        ) {\r\n          /*\r\n            La posicion actual del mouse está a la izquierda de la columna actual\r\n            haciendo que la columna arrastrada cruce la actual.\r\n          */\r\n          this.swapColumnPosition(column, shiftDirection);\r\n\r\n          // actualizo el orden de la columna actual\r\n          column.order = column.element.order + dragDirection;\r\n\r\n          if (\r\n            !targetOrder ||\r\n            (this.isRTL ? columnOrder > targetOrder : columnOrder < targetOrder)\r\n          ) {\r\n            targetOrder = columnOrder;\r\n          }\r\n        } else if (\r\n          position > column.rect.right &&\r\n          (this.isRTL ? columnOrder < sourceOrder : columnOrder > sourceOrder)\r\n        ) {\r\n          /*\r\n            La posicion actual del mouse está a la derecha de la columna actual\r\n            haciendo que la columna arrastrada cruce la actual.\r\n          */\r\n          this.swapColumnPosition(column, shiftDirection);\r\n\r\n          // actualizo el orden de la columna actual\r\n          column.order = column.element.order + dragDirection;\r\n\r\n          if (\r\n            !targetOrder ||\r\n            (this.isRTL ? columnOrder < targetOrder : columnOrder > targetOrder)\r\n          ) {\r\n            targetOrder = columnOrder;\r\n          }\r\n        } else if (columnOrder !== sourceOrder) {\r\n          /*\r\n            La posicion actual del mouse NO está dentro de la columna actual ni\r\n            la cruza.\r\n          */\r\n          this.resetColumnPosition(column);\r\n        }\r\n      });\r\n\r\n    this.column.order = targetOrder ? targetOrder : this.column.element.order;\r\n\r\n    targetOrderChanged = targetOrder !== this.lastTargetOrder;\r\n    this.lastTargetOrder = targetOrder;\r\n\r\n    return targetOrderChanged;\r\n  }\r\n\r\n  dragEnd() {\r\n    this.columns.forEach(column => {\r\n      column.element.order = column.order;\r\n      column.translateX = 0;\r\n    });\r\n  }\r\n\r\n  getColumnStyle(column: HTMLChTabularGridColumnElement): CSSProperties {\r\n    return {\r\n      [`--ch-tabular-grid-column-${column.physicalOrder}-transform`]: `translateX(${\r\n        this.columns.find(columnItem => columnItem.element === column)\r\n          .translateX\r\n      }px)`\r\n    };\r\n  }\r\n\r\n  getColumnsFirstLast(): {\r\n    columnFirst: HTMLChTabularGridColumnElement;\r\n    columnLast: HTMLChTabularGridColumnElement;\r\n  } {\r\n    let itemFirst: TabularGridManagerColumnDragItem;\r\n    let itemLast: TabularGridManagerColumnDragItem;\r\n\r\n    this.columns.forEach(item => {\r\n      if (\r\n        !item.element.hidden &&\r\n        (!itemFirst || item.order < itemFirst.order)\r\n      ) {\r\n        itemFirst = item;\r\n      }\r\n      if (!item.element.hidden && (!itemLast || item.order > itemLast.order)) {\r\n        itemLast = item;\r\n      }\r\n    });\r\n\r\n    return {\r\n      columnFirst: itemFirst.element,\r\n      columnLast: itemLast.element\r\n    };\r\n  }\r\n\r\n  private swapColumnPosition(\r\n    column: TabularGridManagerColumnDragItem,\r\n    shiftDirection: number\r\n  ) {\r\n    // desplazo la columna actual para ocupar el espacio que dejó\r\n    // la columna arrastrada\r\n    column.translateX = this.column.rect.width * shiftDirection;\r\n\r\n    // desplazo la columna que se está arrastrando para que ocupe el\r\n    // espacio que dejó la columna actual\r\n    this.column.translateX += column.rect.width * (shiftDirection * -1);\r\n  }\r\n\r\n  private resetColumnPosition(column: TabularGridManagerColumnDragItem) {\r\n    // no desplazo la columna actual\r\n    column.translateX = 0;\r\n\r\n    // asigno su posición original\r\n    column.order = column.element.order;\r\n  }\r\n\r\n  private setColumnHiddenRect(column: TabularGridManagerColumnDragItem) {\r\n    if (column.element.hidden) {\r\n      const columnSibling =\r\n        this.getPreviousSiblingVisible(column) ||\r\n        this.getNextSiblingVisible(column);\r\n\r\n      column.rect = new DOMRect(\r\n        column.element.order < columnSibling.element.order\r\n          ? columnSibling.rect.left\r\n          : columnSibling.rect.right,\r\n        columnSibling.rect.y,\r\n        0,\r\n        columnSibling.rect.height\r\n      );\r\n    }\r\n  }\r\n\r\n  private getPreviousSiblingVisible(\r\n    hidden: TabularGridManagerColumnDragItem\r\n  ): TabularGridManagerColumnDragItem {\r\n    let previous: TabularGridManagerColumnDragItem;\r\n\r\n    this.columns.forEach(column => {\r\n      if (\r\n        !column.element.hidden &&\r\n        column.element.order < hidden.element.order &&\r\n        (!previous || column.element.order > previous.element.order)\r\n      ) {\r\n        previous = column;\r\n      }\r\n    });\r\n\r\n    return previous;\r\n  }\r\n\r\n  private getNextSiblingVisible(\r\n    hidden: TabularGridManagerColumnDragItem\r\n  ): TabularGridManagerColumnDragItem {\r\n    let next: TabularGridManagerColumnDragItem;\r\n\r\n    this.columns.forEach(column => {\r\n      if (\r\n        !column.element.hidden &&\r\n        column.element.order > hidden.element.order &&\r\n        (!next || column.element.order < next.element.order)\r\n      ) {\r\n        next = column;\r\n      }\r\n    });\r\n\r\n    return next;\r\n  }\r\n}\r\n\r\ninterface TabularGridManagerColumnDragItem {\r\n  element: HTMLChTabularGridColumnElement;\r\n  rect: DOMRect;\r\n  translateX: number;\r\n  order: number;\r\n}\r\n","import HTMLChTabularGridCellElement, {\r\n  TabularGridCellType\r\n} from \"./cell/tabular-grid-cell\";\r\nimport { TabularGridManager } from \"./tabular-grid-manager\";\r\n\r\nexport class TabularGridManagerColumns {\r\n  private manager: TabularGridManager;\r\n  private columnsetObserver = new MutationObserver(\r\n    this.reloadColumns.bind(this)\r\n  );\r\n  private columnResizeObserver = new ResizeObserver(\r\n    this.resizeColumnHandler.bind(this)\r\n  );\r\n  private columns: HTMLChTabularGridColumnElement[];\r\n  private columnsDisplay: HTMLChTabularGridColumnDisplayElement[] = [];\r\n  private columnsWidth: number[] = [];\r\n\r\n  constructor(manager: TabularGridManager) {\r\n    this.manager = manager;\r\n    this.columns = Array.from(\r\n      this.manager.grid.querySelectorAll(\"ch-tabular-grid-column\")\r\n    );\r\n\r\n    this.observeColumnset();\r\n\r\n    this.defineColumns(this.columns);\r\n    this.defineColumnsVariables();\r\n\r\n    this.adjustFreezeOrder();\r\n    this.adjustBaseLayer();\r\n  }\r\n\r\n  public getColumn(columnId: string): HTMLChTabularGridColumnElement {\r\n    return this.columns.find(column => column.columnId === columnId);\r\n  }\r\n\r\n  public getColumns(sorted = false): HTMLChTabularGridColumnElement[] {\r\n    if (sorted) {\r\n      return this.columns.sort(this.fnSortByOrder);\r\n    }\r\n    return this.columns;\r\n  }\r\n\r\n  public getColumnsFirstLast(): {\r\n    columnFirst: HTMLChTabularGridColumnElement;\r\n    columnLast: HTMLChTabularGridColumnElement;\r\n  } {\r\n    let columnFirst: HTMLChTabularGridColumnElement;\r\n    let columnLast: HTMLChTabularGridColumnElement;\r\n\r\n    this.columns.forEach(column => {\r\n      if (\r\n        !column.hidden &&\r\n        (!columnFirst || column.order < columnFirst.order)\r\n      ) {\r\n        columnFirst = column;\r\n      }\r\n      if (!column.hidden && (!columnLast || column.order > columnLast.order)) {\r\n        columnLast = column;\r\n      }\r\n    });\r\n\r\n    return {\r\n      columnFirst,\r\n      columnLast\r\n    };\r\n  }\r\n\r\n  public getColumnSelector(): HTMLChTabularGridColumnElement {\r\n    return this.columns.find(\r\n      column => column.columnType === \"rich\" && column.richRowSelector\r\n    );\r\n  }\r\n\r\n  public adjustFreezeOrder() {\r\n    const freezeStart = this.columns\r\n      .filter(column => column.freeze === \"start\")\r\n      .sort(this.fnSortByOrder);\r\n    const noFreeze = this.columns\r\n      .filter(column => column.freeze !== \"start\" && column.freeze !== \"end\")\r\n      .sort(this.fnSortByOrder);\r\n    const freezeEnd = this.columns\r\n      .filter(column => column.freeze === \"end\")\r\n      .sort(this.fnSortByOrder);\r\n    let order = 1;\r\n\r\n    freezeStart.forEach(column => (column.order = order++));\r\n    noFreeze.forEach(column => (column.order = order++));\r\n    freezeEnd.forEach(column => (column.order = order++));\r\n  }\r\n\r\n  private defineColumns(columns: HTMLChTabularGridColumnElement[]) {\r\n    columns.forEach(column => {\r\n      this.defineColumnId(column);\r\n      this.defineColumnIndex(column);\r\n      this.defineColumnOrder(column);\r\n      this.defineColumnSize(column);\r\n      this.defineColumnDisplayObserver(column);\r\n      this.defineColumnResizeObserver(column);\r\n      this.defineColumnType(column);\r\n    });\r\n  }\r\n\r\n  private defineColumnId(column: HTMLChTabularGridColumnElement) {\r\n    column.columnId ||= this.getColumnUniqueId();\r\n  }\r\n\r\n  private defineColumnIndex(column: HTMLChTabularGridColumnElement) {\r\n    column.physicalOrder = this.columns.indexOf(column) + 1;\r\n  }\r\n\r\n  private defineColumnOrder(column: HTMLChTabularGridColumnElement) {\r\n    column.order ||= column.physicalOrder;\r\n  }\r\n\r\n  private defineColumnSize(column: HTMLChTabularGridColumnElement) {\r\n    column.size ||= \"auto\";\r\n  }\r\n\r\n  private defineColumnDisplayObserver(column: HTMLChTabularGridColumnElement) {\r\n    if (column.displayObserverClass && !column.hidden) {\r\n      const i =\r\n        this.columnsDisplay.push(\r\n          document.createElement(\"ch-tabular-grid-column-display\")\r\n        ) - 1;\r\n\r\n      this.columnsDisplay[i].setAttribute(\"slot\", \"column-display\");\r\n      this.columnsDisplay[i].setAttribute(\"class\", column.displayObserverClass);\r\n      this.columnsDisplay[i].column = column;\r\n\r\n      this.manager.grid.appendChild(this.columnsDisplay[i]);\r\n    }\r\n  }\r\n\r\n  private defineColumnResizeObserver(column: HTMLChTabularGridColumnElement) {\r\n    this.columnResizeObserver.observe(column, { box: \"border-box\" });\r\n  }\r\n\r\n  private defineColumnType(column: HTMLChTabularGridColumnElement) {\r\n    switch (column.columnType) {\r\n      case \"tree\":\r\n        this.manager.grid\r\n          .querySelectorAll(\r\n            `ch-tabular-grid-cell:nth-child(${column.physicalOrder})`\r\n          )\r\n          .forEach((cell: HTMLChTabularGridCellElement) => {\r\n            cell.type = TabularGridCellType.TreeNode;\r\n          });\r\n        break;\r\n      case \"rich\":\r\n        this.manager.grid\r\n          .querySelectorAll(\r\n            `ch-tabular-grid-cell:nth-child(${column.physicalOrder})`\r\n          )\r\n          .forEach((cell: HTMLChTabularGridCellElement) => {\r\n            cell.rowDrag = column.richRowDrag;\r\n            cell.rowSelector = column.richRowSelector;\r\n            cell.rowActions = column.richRowActions;\r\n            cell.type = TabularGridCellType.Rich;\r\n          });\r\n        break;\r\n    }\r\n  }\r\n\r\n  private defineColumnsVariables() {\r\n    const root: Document | ShadowRoot = this.manager.grid.getRootNode() as\r\n      | Document\r\n      | ShadowRoot;\r\n    const style = root.querySelector(\"#ch-tabular-grid-columns-variables\");\r\n\r\n    if (\r\n      !style ||\r\n      parseInt(style.getAttribute(\"data-columns\")) < this.columns.length\r\n    ) {\r\n      let selectors = \"\";\r\n      for (let i = 1; i <= this.columns.length; i++) {\r\n        selectors += `ch-tabular-grid-column:nth-child(${i}), ch-tabular-grid-cell:nth-child(${i}) {\r\n                        display: var(--ch-tabular-grid-column-${i}-display, flex);\r\n                        grid-column: var(--ch-tabular-grid-column-${i}-position, ${i});\r\n                        margin-inline-start: var(--ch-tabular-grid-column-${i}-margin-start);\r\n                        border-inline-start: var(--ch-tabular-grid-column-${i}-border-start);\r\n                        padding-inline-start: var(--ch-tabular-grid-column-${i}-padding-start);\r\n                        margin-inline-end: var(--ch-tabular-grid-column-${i}-margin-end);\r\n                        border-inline-end: var(--ch-tabular-grid-column-${i}-border-end);\r\n                        padding-inline-end: var(--ch-tabular-grid-column-${i}-padding-end);\r\n                        left: var(--ch-tabular-grid-column-${i}-left-freeze);\r\n                        right: var(--ch-tabular-grid-column-${i}-right-freeze);\r\n                    }\r\n                    ch-tabular-grid-column:nth-child(${i}) {\r\n                      transform: var(--ch-tabular-grid-column-${i}-transform);\r\n                      z-index: calc(var(--ch-tabular-grid-column-${i}-z-index-freeze, 0) + var(--ch-tabular-grid-column-z-index-head, 0)  + var(--ch-tabular-grid-column-z-index-active, 0));\r\n                    }\r\n                    ch-tabular-grid-cell:nth-child(${i}) {\r\n                      transform: var(--ch-tabular-grid-virtual-scroller-position,) var(--ch-tabular-grid-column-${i}-transform,);\r\n                      z-index: calc(var(--ch-tabular-grid-column-${i}-z-index-freeze, 0) + var(--ch-tabular-grid-cell-z-index-active, 0));\r\n                    }\r\n                    ch-tabular-grid-cell:nth-child(${i})::before {\r\n                      content: var(--ch-tabular-grid-column-${i}-content);\r\n                    }\r\n                `;\r\n      }\r\n\r\n      const styleInnerHTML = `@layer ch-tabular-grid {\r\n        ${selectors}\r\n      }`;\r\n\r\n      if (style) {\r\n        style.setAttribute(\"data-columns\", this.columns.length.toString());\r\n        style.innerHTML = styleInnerHTML;\r\n      } else if (root instanceof Document) {\r\n        root.head.insertAdjacentHTML(\r\n          \"beforeend\",\r\n          `<style id=\"ch-tabular-grid-columns-variables\" data-columns=\"${this.columns.length}\">${styleInnerHTML}</style>`\r\n        );\r\n      } else if (root instanceof ShadowRoot) {\r\n        const s = document.createElement(\"style\");\r\n        s.id = \"ch-tabular-grid-columns-variables\";\r\n        s.dataset.columns = this.columns.length.toString();\r\n        s.innerText = styleInnerHTML;\r\n        root.appendChild(s);\r\n      }\r\n    }\r\n  }\r\n\r\n  private undefineColumns(columns: HTMLChTabularGridColumnElement[]) {\r\n    columns.forEach(column => {\r\n      this.columnResizeObserver.unobserve(column);\r\n      this.columnsDisplay\r\n        .filter(columnDisplay => columnDisplay.column === column)\r\n        .forEach(item => {\r\n          item.remove();\r\n        });\r\n    });\r\n  }\r\n\r\n  private observeColumnset() {\r\n    this.columnsetObserver.observe(\r\n      this.manager.grid.querySelector(\"ch-tabular-grid-columnset\"),\r\n      { childList: true }\r\n    );\r\n  }\r\n\r\n  private reloadColumns() {\r\n    const columns = Array.from(\r\n      this.manager.grid.querySelectorAll(\"ch-tabular-grid-column\")\r\n    );\r\n    const columnsAdded = columns.filter(\r\n      column => !this.columns.includes(column)\r\n    );\r\n    const columnsRemoved = this.columns.filter(\r\n      column => !columns.includes(column)\r\n    );\r\n\r\n    if (columnsAdded.length || columnsRemoved.length) {\r\n      this.columns = columns;\r\n\r\n      this.undefineColumns(columnsRemoved);\r\n      this.defineColumns(columnsAdded);\r\n      this.defineColumnsVariables();\r\n\r\n      this.adjustOrders();\r\n      this.adjustBaseLayer();\r\n    }\r\n  }\r\n\r\n  private resizeColumnHandler(entries: ResizeObserverEntry[]) {\r\n    for (const entry of entries) {\r\n      const column = entry.target as HTMLChTabularGridColumnElement;\r\n      this.columnsWidth[column.physicalOrder - 1] = entry.contentRect.width;\r\n    }\r\n\r\n    this.manager.setColumnWidthVariables(this.columnsWidth);\r\n  }\r\n\r\n  private getColumnUniqueId(): string {\r\n    const uniqueId =\r\n      Date.now().toString(36) + Math.random().toString(36).substring(2);\r\n\r\n    return `ch-tabular-grid-column-auto-${uniqueId}`;\r\n  }\r\n\r\n  private adjustOrders() {\r\n    // adjust physicalOrder\r\n    this.columns.forEach((column, i) => (column.physicalOrder = i + 1));\r\n\r\n    // adjust order, preserving physicalOrder array\r\n    [...this.columns].sort(this.fnSortByOrder).forEach((column, i) => {\r\n      column.order = i + 1;\r\n    });\r\n  }\r\n\r\n  private adjustBaseLayer() {\r\n    this.manager.setBaseLayer(this.columns.length);\r\n  }\r\n\r\n  private fnSortByOrder(\r\n    columnA: HTMLChTabularGridColumnElement,\r\n    columnB: HTMLChTabularGridColumnElement\r\n  ): number {\r\n    if (columnA.order < columnB.order) {\r\n      return -1;\r\n    }\r\n    if (columnA.order > columnB.order) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n}\r\n","import HTMLChTabularGridCellElement from \"./cell/tabular-grid-cell\";\r\nimport HTMLChTabularGridRowElement from \"./row/tabular-grid-row\";\r\nimport { TabularGridManager } from \"./tabular-grid-manager\";\r\n\r\nexport type ManagerSelectionState = {\r\n  rowFocused: HTMLChTabularGridRowElement;\r\n  rowsSelected: HTMLChTabularGridRowElement[];\r\n  cellFocused: HTMLChTabularGridCellElement;\r\n  cellSelected: HTMLChTabularGridCellElement;\r\n};\r\n\r\nexport class TabularGridManagerSelection {\r\n  private manager: TabularGridManager;\r\n  private rangeStart: HTMLChTabularGridRowElement;\r\n  private rangeValue: boolean;\r\n  private lastSelected: HTMLChTabularGridRowElement;\r\n  private lastRowMarked: HTMLChTabularGridRowElement;\r\n  private selectionStateNone: ManagerSelectionState = {\r\n    rowFocused: null,\r\n    rowsSelected: [],\r\n    cellFocused: null,\r\n    cellSelected: null\r\n  };\r\n  private touch: {\r\n    clientX: number;\r\n    clientY: number;\r\n  };\r\n\r\n  selecting: boolean;\r\n  selectingRow: HTMLChTabularGridRowElement;\r\n  selectingCell: HTMLChTabularGridCellElement;\r\n\r\n  constructor(manager: TabularGridManager) {\r\n    this.manager = manager;\r\n  }\r\n\r\n  touchStart(touchEvent: TouchEvent) {\r\n    this.touch = {\r\n      clientX: touchEvent.touches[0].clientX,\r\n      clientY: touchEvent.touches[0].clientY\r\n    };\r\n  }\r\n\r\n  isTouchEndSelection(touchEvent: TouchEvent): boolean {\r\n    return (\r\n      Math.abs(this.touch.clientX - touchEvent.changedTouches[0].clientX) <\r\n        10 &&\r\n      Math.abs(this.touch.clientY - touchEvent.changedTouches[0].clientY) <\r\n        10 &&\r\n      touchEvent.cancelable\r\n    );\r\n  }\r\n\r\n  select(\r\n    state: ManagerSelectionState,\r\n    row: HTMLChTabularGridRowElement,\r\n    cell: HTMLChTabularGridCellElement,\r\n    select: boolean,\r\n    append: boolean,\r\n    range: boolean,\r\n    rangeStartOn: \"focus\" | \"last-selected\",\r\n    context: boolean\r\n  ): ManagerSelectionState {\r\n    const grid = this.manager.grid;\r\n\r\n    if (\r\n      grid.keyboardNavigationMode === \"none\" &&\r\n      grid.rowSelectionMode === \"none\"\r\n    ) {\r\n      return this.selectionStateNone;\r\n    }\r\n    if (grid.rowSelectionMode === \"none\") {\r\n      select = false;\r\n    }\r\n    if (grid.rowSelectionMode !== \"multiple\") {\r\n      append = false;\r\n      range = false;\r\n    }\r\n    if (!row) {\r\n      return state;\r\n    }\r\n\r\n    let { rowFocused, rowsSelected, cellFocused, cellSelected } = state;\r\n\r\n    rowFocused = row;\r\n    cellFocused = cell;\r\n    if (range) {\r\n      if (!this.rangeStart) {\r\n        if (rangeStartOn === \"focus\") {\r\n          this.rangeStart = state.rowFocused;\r\n          this.rangeValue = append ? !state.rowFocused.selected : true;\r\n        } else if (rangeStartOn === \"last-selected\") {\r\n          this.rangeStart = this.lastSelected ?? state.rowFocused;\r\n          this.rangeValue = append ? this.lastSelected.selected : true;\r\n        }\r\n      }\r\n\r\n      const rangeRows = this.manager.getRowsRange(this.rangeStart ?? row, row);\r\n\r\n      if (this.rangeValue) {\r\n        if (append) {\r\n          rowsSelected = Array.from(new Set(rowsSelected.concat(rangeRows)));\r\n        } else {\r\n          rowsSelected = this.preserveInstanceIfSame(\r\n            rangeRows,\r\n            state.rowsSelected\r\n          );\r\n        }\r\n        cellSelected =\r\n          cell ||\r\n          row.getCell(cellSelected?.column || this.manager.getFirstColumn());\r\n      } else {\r\n        rowsSelected = rowsSelected.filter(\r\n          rowSelected => !rangeRows.includes(rowSelected)\r\n        );\r\n        cellSelected = null;\r\n      }\r\n    } else if (append) {\r\n      this.rangeStart = null;\r\n      this.lastSelected = row;\r\n\r\n      if (rowsSelected.includes(row)) {\r\n        rowsSelected = rowsSelected.filter(rowSelected => rowSelected !== row);\r\n        cellSelected = state.cellSelected?.row === row ? null : cellSelected;\r\n      } else {\r\n        rowsSelected = [...rowsSelected, row];\r\n        cellSelected =\r\n          cell ||\r\n          row.getCell(cellSelected?.column || this.manager.getFirstColumn());\r\n      }\r\n    } else if (select) {\r\n      this.rangeStart = null;\r\n      this.lastSelected = row;\r\n\r\n      if (!(context && state.rowsSelected.includes(row))) {\r\n        rowsSelected = this.preserveInstanceIfSame([row], state.rowsSelected);\r\n      }\r\n      cellSelected =\r\n        cell ||\r\n        row.getCell(cellSelected?.column || this.manager.getFirstColumn());\r\n    } else {\r\n      this.rangeStart = null;\r\n    }\r\n\r\n    return { rowFocused, rowsSelected, cellFocused, cellSelected };\r\n  }\r\n\r\n  selectAll(state: ManagerSelectionState, value = true): ManagerSelectionState {\r\n    if (this.manager.grid.rowSelectionMode === \"none\") {\r\n      return this.selectionStateNone;\r\n    }\r\n\r\n    const rows = this.manager.getRows();\r\n    let rowFocused = state.rowFocused;\r\n    let rowsSelected = state.rowsSelected;\r\n    let cellFocused = state.cellFocused;\r\n    let cellSelected = state.cellSelected;\r\n\r\n    rowFocused ??= this.manager.getFirstRow();\r\n    cellFocused ??= rowFocused?.getCell(\r\n      state.cellFocused?.column || this.manager.getFirstColumn()\r\n    );\r\n\r\n    if (value) {\r\n      rowsSelected = rows;\r\n      cellSelected = cellFocused;\r\n    } else {\r\n      rowsSelected = [];\r\n      cellSelected = null;\r\n    }\r\n\r\n    return { rowFocused, rowsSelected, cellFocused, cellSelected };\r\n  }\r\n\r\n  selectSet(\r\n    state: ManagerSelectionState,\r\n    row: HTMLChTabularGridRowElement,\r\n    cell: HTMLChTabularGridCellElement,\r\n    value = true\r\n  ): ManagerSelectionState {\r\n    let append = true;\r\n\r\n    if (this.manager.grid.rowSelectionMode === \"none\") {\r\n      return this.selectionStateNone;\r\n    }\r\n    if (this.manager.grid.rowSelectionMode !== \"multiple\") {\r\n      append = false;\r\n    }\r\n\r\n    let rowFocused = state.rowFocused;\r\n    let rowsSelected = state.rowsSelected;\r\n    let cellFocused = state.cellFocused;\r\n    let cellSelected = state.cellSelected;\r\n\r\n    rowFocused = row;\r\n    cellFocused = cell;\r\n    if (value) {\r\n      if (append) {\r\n        rowsSelected = rowsSelected.includes(row)\r\n          ? rowsSelected\r\n          : [...rowsSelected, row];\r\n      } else {\r\n        rowsSelected = rowsSelected.includes(row) ? rowsSelected : [row];\r\n      }\r\n      cellSelected = cell;\r\n    } else {\r\n      rowsSelected = !rowsSelected.includes(row)\r\n        ? rowsSelected\r\n        : rowsSelected.filter(rowSelected => rowSelected !== row);\r\n      cellSelected = null;\r\n    }\r\n\r\n    return { rowFocused, rowsSelected, cellFocused, cellSelected };\r\n  }\r\n\r\n  moveFirstRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const firstRow = this.manager.getFirstRow();\r\n\r\n    if (firstRow) {\r\n      return this.select(\r\n        state,\r\n        firstRow,\r\n        firstRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  movePreviousRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const previousRow = this.manager.getPreviousRow(state.rowFocused);\r\n\r\n    if (previousRow) {\r\n      return this.select(\r\n        state,\r\n        previousRow,\r\n        previousRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveNextRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const nextRow = this.manager.getNextRow(state.rowFocused);\r\n\r\n    if (nextRow) {\r\n      return this.select(\r\n        state,\r\n        nextRow,\r\n        nextRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveLastRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const lastRow = this.manager.getLastRow();\r\n\r\n    if (lastRow) {\r\n      return this.select(\r\n        state,\r\n        lastRow,\r\n        lastRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  movePreviousPageRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const rows = this.manager.getRows();\r\n    const rowsPerPage = this.manager.getRowsPerPage();\r\n    const previousPageRow =\r\n      rows[Math.max(rows.indexOf(state.rowFocused) - rowsPerPage, 0)];\r\n\r\n    if (previousPageRow) {\r\n      return this.select(\r\n        state,\r\n        previousPageRow,\r\n        previousPageRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveNextPageRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const rows = this.manager.getRows();\r\n    const rowsPerPage = this.manager.getRowsPerPage();\r\n    const nextPageRow =\r\n      rows[\r\n        Math.min(rows.indexOf(state.rowFocused) + rowsPerPage, rows.length - 1)\r\n      ];\r\n\r\n    if (nextPageRow) {\r\n      return this.select(\r\n        state,\r\n        nextPageRow,\r\n        nextPageRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  movePreviousCell(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean\r\n  ): ManagerSelectionState {\r\n    const previousCell = this.manager.getPreviousCell(state.cellFocused);\r\n\r\n    if (previousCell) {\r\n      return this.select(\r\n        state,\r\n        state.rowFocused,\r\n        previousCell,\r\n        select,\r\n        false,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveNextCell(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean\r\n  ): ManagerSelectionState {\r\n    const nextCell = this.manager.getNextCell(state.cellFocused);\r\n\r\n    if (nextCell) {\r\n      return this.select(\r\n        state,\r\n        state.rowFocused,\r\n        nextCell,\r\n        select,\r\n        false,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  markRow(\r\n    row: HTMLChTabularGridRowElement,\r\n    checked: boolean,\r\n    range: boolean,\r\n    currentRowsMarked: HTMLChTabularGridRowElement[]\r\n  ): HTMLChTabularGridRowElement[] {\r\n    if (row) {\r\n      if (range) {\r\n        const value = !row.marked;\r\n        const rows = this.manager.getRowsRange(this.lastRowMarked ?? row, row);\r\n\r\n        this.lastRowMarked = row;\r\n\r\n        if (value) {\r\n          return currentRowsMarked.concat(\r\n            rows.filter(row => !currentRowsMarked.includes(row))\r\n          );\r\n        }\r\n        return currentRowsMarked.filter(row => !rows.includes(row));\r\n      }\r\n      this.lastRowMarked = row;\r\n\r\n      if (checked && !currentRowsMarked.includes(row)) {\r\n        return currentRowsMarked.concat([row]);\r\n      }\r\n      if (!checked && currentRowsMarked.includes(row)) {\r\n        return currentRowsMarked.filter(r => r !== row);\r\n      }\r\n    }\r\n\r\n    return currentRowsMarked;\r\n  }\r\n\r\n  markRows(\r\n    rowFocused: HTMLChTabularGridRowElement,\r\n    rowsMarked: HTMLChTabularGridRowElement[],\r\n    rowsSelected: HTMLChTabularGridRowElement[]\r\n  ): HTMLChTabularGridRowElement[] {\r\n    const rows = rowsSelected.includes(rowFocused)\r\n      ? rowsSelected\r\n      : [rowFocused];\r\n\r\n    if (rows.some(row => !row.marked)) {\r\n      return Array.from(new Set(rowsMarked.concat(rows)));\r\n    }\r\n    return rowsMarked.filter(row => !rows.includes(row));\r\n  }\r\n\r\n  markAllRows(value = true): HTMLChTabularGridRowElement[] {\r\n    if (value) {\r\n      return this.manager.getRows();\r\n    }\r\n    return [];\r\n  }\r\n\r\n  syncRowSelector(\r\n    rows: HTMLChTabularGridRowElement[],\r\n    previous: HTMLChTabularGridRowElement[] = [],\r\n    selectorMode: \"select\" | \"mark\"\r\n  ) {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === selectorMode) {\r\n      const indexColumnSelector = columnSelector.physicalOrder - 1;\r\n\r\n      previous\r\n        ?.filter(x => !rows.includes(x))\r\n        .forEach(row => {\r\n          row.marked = false;\r\n          const cell = row.children[\r\n            indexColumnSelector\r\n          ] as HTMLChTabularGridCellElement;\r\n          cell.setSelectorChecked(false);\r\n        });\r\n\r\n      rows?.forEach(row => {\r\n        row.marked = columnSelector.richRowSelectorMode === \"mark\";\r\n        const cell = row.children[\r\n          indexColumnSelector\r\n        ] as HTMLChTabularGridCellElement;\r\n        cell.setSelectorChecked(true);\r\n      });\r\n\r\n      this.syncColumnSelector(rows.length, columnSelector);\r\n    }\r\n  }\r\n\r\n  syncColumnSelector(\r\n    length: number,\r\n    columnSelector?: HTMLChTabularGridColumnElement\r\n  ) {\r\n    columnSelector ??= this.manager.columns.getColumnSelector();\r\n\r\n    if (length === 0) {\r\n      columnSelector.richRowSelectorState = \"\";\r\n    } else if (length === this.manager.getRows().length) {\r\n      columnSelector.richRowSelectorState = \"checked\";\r\n    } else {\r\n      columnSelector.richRowSelectorState = \"indeterminate\";\r\n    }\r\n  }\r\n\r\n  private preserveInstanceIfSame(\r\n    newSelection: HTMLChTabularGridRowElement[],\r\n    oldSelection: HTMLChTabularGridRowElement[]\r\n  ): HTMLChTabularGridRowElement[] {\r\n    return newSelection.length === oldSelection.length &&\r\n      newSelection.every(item => oldSelection.includes(item))\r\n      ? oldSelection\r\n      : newSelection;\r\n  }\r\n}\r\n","import HTMLChTabularGridRowElement from \"./row/tabular-grid-row\";\r\nimport HTMLChTabularGridCellElement from \"./cell/tabular-grid-cell\";\r\nimport { TabularGridManager } from \"./tabular-grid-manager\";\r\n\r\nexport class TabularGridManagerRowDrag {\r\n  private readonly manager: TabularGridManager;\r\n  private row: HTMLChTabularGridRowElement;\r\n  private rowIndex: number;\r\n  private rowShadow: HTMLDivElement;\r\n  private dragMouseMoveFn = this.dragMouseMoveHandler.bind(this);\r\n\r\n  constructor(manager: TabularGridManager) {\r\n    this.manager = manager;\r\n  }\r\n\r\n  public dragStart(row: HTMLChTabularGridRowElement) {\r\n    this.row = row;\r\n    this.rowIndex = this.manager.getGridRowIndex(row);\r\n\r\n    this.defineListeners();\r\n    this.createRowShadow();\r\n    this.floatRow();\r\n    this.updateRowPosition();\r\n  }\r\n\r\n  private dragMouseMoveHandler(eventInfo: MouseEvent) {\r\n    const target = eventInfo.target as HTMLElement;\r\n    const rowHover = target.closest(\r\n      \"ch-tabular-grid-row\"\r\n    ) as HTMLChTabularGridRowElement;\r\n\r\n    if (\r\n      rowHover &&\r\n      rowHover.parentElement === this.row.parentElement &&\r\n      rowHover.grid === this.manager.grid\r\n    ) {\r\n      const rowHoverIndex = this.manager.getGridRowIndex(rowHover);\r\n      const rowHoverGridPosition = rowHoverIndex + 2; // +1 RowHeaderColumn, +1 array start at 1\r\n      const offsetPosition = this.rowIndex < rowHoverIndex ? -1 : 1;\r\n\r\n      if (\r\n        this.rowShadow.style.getPropertyValue(\"--row-shadow-row-start\") !==\r\n        `${rowHoverGridPosition}`\r\n      ) {\r\n        this.rowShadow.style.setProperty(\r\n          \"--row-shadow-row-start\",\r\n          `${rowHoverGridPosition}`\r\n        );\r\n      } else {\r\n        this.rowShadow.style.setProperty(\r\n          \"--row-shadow-row-start\",\r\n          `${rowHoverGridPosition + offsetPosition}`\r\n        );\r\n      }\r\n\r\n      this.updateRowPosition();\r\n    }\r\n  }\r\n\r\n  private dragMouseUpHandler() {\r\n    document.removeEventListener(\"mousemove\", this.dragMouseMoveFn);\r\n\r\n    const dropPosition = parseInt(\r\n      this.rowShadow.style.getPropertyValue(\"--row-shadow-row-start\")\r\n    );\r\n    const rowDrop = this.manager.grid\r\n      .querySelectorAll(\"ch-tabular-grid-row\")\r\n      .item(dropPosition - 2);\r\n\r\n    if (dropPosition < this.rowIndex + 2) {\r\n      rowDrop.before(this.row);\r\n    }\r\n    if (dropPosition > this.rowIndex + 2) {\r\n      rowDrop.after(this.row);\r\n    }\r\n\r\n    this.unfloatRow();\r\n    this.rowShadow.remove();\r\n\r\n    this.row = null;\r\n    this.rowShadow = null;\r\n  }\r\n\r\n  private defineListeners() {\r\n    document.addEventListener(\"mousemove\", this.dragMouseMoveFn, {\r\n      passive: true\r\n    });\r\n    document.addEventListener(\"mouseup\", this.dragMouseUpHandler.bind(this), {\r\n      once: true\r\n    });\r\n  }\r\n\r\n  private createRowShadow() {\r\n    const rowHeight = this.manager.getRowHeight(this.row);\r\n\r\n    this.rowShadow = document.createElement(\"div\");\r\n    this.rowShadow.style.display = \"contents\";\r\n\r\n    this.manager.getColumnsWidth().forEach(width => {\r\n      const column = document.createElement(\"div\");\r\n\r\n      column.style.opacity = \"0\";\r\n      column.style.minWidth = width;\r\n      column.style.height = `${rowHeight}px`;\r\n      column.style.gridRowStart = \"var(--row-shadow-row-start)\";\r\n\r\n      this.rowShadow.append(column);\r\n    });\r\n  }\r\n\r\n  private floatRow() {\r\n    const columnsWidth = this.manager.getColumnsWidth();\r\n    const rowWidth = this.manager.gridLayout.clientWidth;\r\n\r\n    this.row.before(this.rowShadow);\r\n    this.row.setAttribute(\"dragging\", \"\");\r\n    this.row.style.width = `${rowWidth}px`;\r\n\r\n    this.row\r\n      .querySelectorAll(\":scope > ch-tabular-grid-cell\")\r\n      .forEach((cell: HTMLChTabularGridCellElement, i) => {\r\n        const columnPosition = parseInt(\r\n          this.manager.gridLayout.style.getPropertyValue(\r\n            `--ch-tabular-grid-column-${i + 1}-position`\r\n          )\r\n        );\r\n\r\n        if (!cell.hidden) {\r\n          cell.style.width = columnsWidth[columnPosition - 1];\r\n          cell.style.order = `${columnPosition}`;\r\n        }\r\n      });\r\n  }\r\n\r\n  private unfloatRow() {\r\n    this.row.removeAttribute(\"dragging\");\r\n    this.row.style.width = \"\";\r\n\r\n    this.row\r\n      .querySelectorAll(\":scope > ch-tabular-grid-cell\")\r\n      .forEach((cell: HTMLChTabularGridCellElement) => {\r\n        cell.style.width = \"\";\r\n        cell.style.order = \"\";\r\n      });\r\n  }\r\n\r\n  private updateRowPosition() {\r\n    const rect = this.rowShadow.children[0].getBoundingClientRect();\r\n\r\n    this.row.style.top = `${rect.top}px`;\r\n    this.row.style.left = `${rect.left}px`;\r\n  }\r\n}\r\n","import { TabularGridManager } from \"./tabular-grid-manager\";\r\n\r\nexport class TabularGridManagerRowActions {\r\n  private readonly manager: TabularGridManager;\r\n\r\n  showOnRowHover: HTMLChTabularGridRowActionsElement;\r\n  showOnRowActions: HTMLChTabularGridRowActionsElement;\r\n  showOnRowContext: HTMLChTabularGridRowActionsElement;\r\n\r\n  constructor(manager: TabularGridManager) {\r\n    this.manager = manager;\r\n    this.manager.grid\r\n      .querySelectorAll(\"ch-tabular-grid-row-actions\")\r\n      ?.forEach(rowActions => {\r\n        if (rowActions.showOnRowHover) {\r\n          this.showOnRowHover = rowActions;\r\n        }\r\n        if (rowActions.showOnRowActions) {\r\n          this.showOnRowActions = rowActions;\r\n        }\r\n        if (rowActions.showOnRowContext) {\r\n          this.showOnRowContext = rowActions;\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { TabularGridManager } from \"./tabular-grid-manager\";\r\n\r\nexport class TabularGridManagerColumnResize {\r\n  private manager: TabularGridManager;\r\n  private column: HTMLChTabularGridColumnElement;\r\n  private columnWidthStart: number;\r\n  private columnSizeStart: CssValue;\r\n  private columnAfter: HTMLChTabularGridColumnElement;\r\n  private columnAfterWidthStart: number;\r\n  private columnAfterSizeStart: CssValue;\r\n  private dragDirection: number;\r\n  private resizingFn: (deltaWidth: number) => void;\r\n  private resizeEndFn: () => void;\r\n\r\n  constructor(manager: TabularGridManager, columnId: string, isRTL: boolean) {\r\n    this.manager = manager;\r\n    this.dragDirection = isRTL ? -1 : 1;\r\n\r\n    if (this.manager.grid.columnResizeMode === \"splitter\") {\r\n      this.resizingFn = this.resizingSplitter;\r\n      this.resizeEndFn = this.resizeEndSplitter;\r\n    } else {\r\n      this.resizingFn = this.resizingSingle;\r\n      this.resizeEndFn = null;\r\n    }\r\n\r\n    this.column = this.manager.columns.getColumn(columnId);\r\n    this.columnWidthStart = this.column.getBoundingClientRect().width;\r\n    this.columnSizeStart = this.parseCSSValue(this.column.size);\r\n\r\n    this.columnAfter = this.manager.getNextColumn(this.column);\r\n    this.columnAfterWidthStart =\r\n      this.columnAfter?.getBoundingClientRect().width;\r\n    this.columnAfterSizeStart = this.parseCSSValue(this.columnAfter.size);\r\n  }\r\n\r\n  resizing(deltaWidth: number) {\r\n    this.resizingFn(deltaWidth);\r\n  }\r\n\r\n  resizeEnd() {\r\n    if (this.resizeEndFn) {\r\n      this.resizeEndFn();\r\n    }\r\n  }\r\n\r\n  private resizingSingle = (deltaWidth: number) => {\r\n    const columnWidth = this.columnWidthStart - deltaWidth * this.dragDirection;\r\n    if (columnWidth >= 0) {\r\n      this.column.size = `minmax(min-content, ${columnWidth}px)`;\r\n    }\r\n  };\r\n\r\n  private resizingSplitter = (deltaWidth: number) => {\r\n    const columnWidth = this.columnWidthStart - deltaWidth * this.dragDirection;\r\n    if (columnWidth >= 0) {\r\n      if (this.columnSizeStart) {\r\n        this.column.size = this.convertUnit(\r\n          this.columnSizeStart,\r\n          this.columnWidthStart,\r\n          columnWidth\r\n        );\r\n      } else {\r\n        this.column.size = `minmax(min-content, ${columnWidth}px)`;\r\n      }\r\n    }\r\n\r\n    if (this.columnAfter) {\r\n      const columnAfterWidth =\r\n        this.columnAfterWidthStart + deltaWidth * this.dragDirection;\r\n      if (columnAfterWidth >= 0) {\r\n        if (this.columnAfterSizeStart) {\r\n          this.columnAfter.size = this.convertUnit(\r\n            this.columnAfterSizeStart,\r\n            this.columnAfterWidthStart,\r\n            columnAfterWidth\r\n          );\r\n        } else {\r\n          this.columnAfter.size = `minmax(min-content, ${columnAfterWidth}px)`;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private resizeEndSplitter() {\r\n    const columnWidthEnd = this.column.getBoundingClientRect().width;\r\n    this.column.size = this.convertUnit(\r\n      this.columnSizeStart,\r\n      this.columnWidthStart,\r\n      columnWidthEnd\r\n    );\r\n\r\n    if (this.columnAfter) {\r\n      const columnAfterWidthEnd =\r\n        this.columnAfterWidthStart - (columnWidthEnd - this.columnWidthStart);\r\n      this.columnAfter.size = this.convertUnit(\r\n        this.columnSizeStart,\r\n        this.columnWidthStart,\r\n        columnAfterWidthEnd\r\n      );\r\n    }\r\n  }\r\n\r\n  private parseCSSValue(cssValue: string): CssValue {\r\n    const match = cssValue.match(/([+-]?[\\d.]+)([\\w%]+)/);\r\n    if (match) {\r\n      const number = parseFloat(match[1]);\r\n      const unit = match[2];\r\n      return { number, unit };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private convertUnit(\r\n    startSize: CssValue,\r\n    startWidth: number,\r\n    newWidth: number\r\n  ): string {\r\n    return `${(newWidth * startSize.number) / startWidth}${startSize.unit}`;\r\n  }\r\n}\r\n\r\ntype CssValue = {\r\n  number: number;\r\n  unit: string;\r\n};\r\n","import { ITabularGridCollapsible, CSSProperties } from \"./tabular-grid-types\";\r\nimport { TabularGridManagerColumnDrag } from \"./tabular-grid-manager-column-drag\";\r\n\r\nimport HTMLChTabularGridRowElement from \"./row/tabular-grid-row\";\r\nimport { TabularGridManagerColumns } from \"./tabular-grid-manager-columns\";\r\nimport HTMLChTabularGridCellElement from \"./cell/tabular-grid-cell\";\r\nimport { TabularGridManagerSelection } from \"./tabular-grid-manager-selection\";\r\nimport { TabularGridManagerRowDrag } from \"./tabular-grid-manager-row-drag\";\r\nimport { TabularGridManagerRowActions } from \"./tabular-grid-manager-row-actions\";\r\nimport { adoptCommonThemes } from \"../../common/theme\";\r\nimport { TabularGridManagerColumnResize } from \"./tabular-grid-manager-column-resize\";\r\n\r\nenum StyleRule {\r\n  BASE_LAYER,\r\n  COLUMNS_WIDTH\r\n}\r\n\r\nexport class TabularGridManager {\r\n  private styleSheet = new CSSStyleSheet();\r\n  private gridLayoutElement: HTMLElement;\r\n  private columnDragManager: TabularGridManagerColumnDrag;\r\n  private columnResizeManager: TabularGridManagerColumnResize;\r\n  private rowDragManager: TabularGridManagerRowDrag;\r\n\r\n  readonly grid: HTMLChTabularGridElement;\r\n  readonly selection: TabularGridManagerSelection;\r\n  readonly columns: TabularGridManagerColumns;\r\n  readonly rowActions: TabularGridManagerRowActions;\r\n\r\n  constructor(grid: HTMLChTabularGridElement) {\r\n    this.grid = grid;\r\n\r\n    this.styleSheet.insertRule(`:host {}`, StyleRule.BASE_LAYER);\r\n    this.styleSheet.insertRule(\".main {}\", StyleRule.COLUMNS_WIDTH);\r\n    this.grid.shadowRoot.adoptedStyleSheets.push(this.styleSheet);\r\n    adoptCommonThemes(this.grid.shadowRoot.adoptedStyleSheets);\r\n\r\n    this.columns = new TabularGridManagerColumns(this);\r\n    this.selection = new TabularGridManagerSelection(this);\r\n    this.rowActions = new TabularGridManagerRowActions(this);\r\n  }\r\n\r\n  get gridLayout(): HTMLElement {\r\n    return this.gridLayoutElement;\r\n  }\r\n\r\n  componentDidLoad(gridLayout: HTMLElement) {\r\n    this.gridLayoutElement = gridLayout;\r\n  }\r\n\r\n  getColumns() {\r\n    return this.columns.getColumns();\r\n  }\r\n\r\n  getColumnsWidth(): string[] {\r\n    return getComputedStyle(this.gridLayout).gridTemplateColumns.split(\" \");\r\n  }\r\n\r\n  getColumnsetHeight(): number {\r\n    const gridColumnsHeight = getComputedStyle(\r\n      this.gridLayout\r\n    ).gridTemplateRows.split(\" \");\r\n\r\n    return parseInt(gridColumnsHeight[0]) || 0;\r\n  }\r\n\r\n  getFirstColumn(): HTMLChTabularGridColumnElement {\r\n    return this.columns.getColumnsFirstLast().columnFirst;\r\n  }\r\n\r\n  getFirstRow(): HTMLChTabularGridRowElement {\r\n    return this.grid.querySelector(\"ch-tabular-grid-row\");\r\n  }\r\n\r\n  getScrollOffsetTop(): number {\r\n    return this.gridLayout.offsetTop + this.getColumnsetHeight();\r\n  }\r\n\r\n  getScrollOffsetLeft(): number {\r\n    return this.columns.getColumns(true).reduce((offsetRight, column) => {\r\n      return column.freeze === \"start\" && !column.hidden\r\n        ? offsetRight + column.offsetWidth\r\n        : offsetRight;\r\n    }, 0);\r\n  }\r\n\r\n  getScrollOffsetRight(): number {\r\n    return this.columns.getColumns(true).reduce((offsetRight, column) => {\r\n      return column.freeze === \"end\" && !column.hidden\r\n        ? offsetRight + column.offsetWidth\r\n        : offsetRight;\r\n    }, 0);\r\n  }\r\n\r\n  getPreviousRow(\r\n    current: HTMLChTabularGridRowElement\r\n  ): HTMLChTabularGridRowElement {\r\n    const rows = this.getRows();\r\n    const i = rows.indexOf(current);\r\n\r\n    return rows\r\n      .slice(0, i)\r\n      .reverse()\r\n      .find(row => row.isVisible());\r\n  }\r\n\r\n  getNextRow(\r\n    current: HTMLChTabularGridRowElement\r\n  ): HTMLChTabularGridRowElement {\r\n    const rows = this.getRows();\r\n    const i = rows.indexOf(current);\r\n\r\n    return rows.slice(i + 1).find(row => row.isVisible());\r\n  }\r\n\r\n  getLastRow(): HTMLChTabularGridRowElement {\r\n    const rows = this.getRows();\r\n\r\n    return rows.reverse().find(row => row.isVisible());\r\n  }\r\n\r\n  getPreviousColumn(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): HTMLChTabularGridColumnElement {\r\n    return this.columns.getColumns().reduce((previous, current) => {\r\n      return current.order < column.order &&\r\n        !current.hidden &&\r\n        (!previous || current.order > previous.order)\r\n        ? current\r\n        : previous;\r\n    }, null);\r\n  }\r\n\r\n  getNextColumn(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): HTMLChTabularGridColumnElement {\r\n    return this.columns.getColumns().reduce((previous, current) => {\r\n      return current.order > column.order &&\r\n        !current.hidden &&\r\n        (!previous || current.order < previous.order)\r\n        ? current\r\n        : previous;\r\n    }, null);\r\n  }\r\n\r\n  getPreviousCell(\r\n    current: HTMLChTabularGridCellElement\r\n  ): HTMLChTabularGridCellElement | void {\r\n    const previousColumn = this.getPreviousColumn(current.column);\r\n\r\n    if (previousColumn) {\r\n      return current.row.querySelector(\r\n        `:scope > ch-tabular-grid-cell:nth-of-type(${previousColumn.physicalOrder})`\r\n      ) as HTMLChTabularGridCellElement;\r\n    }\r\n  }\r\n\r\n  getNextCell(\r\n    current: HTMLChTabularGridCellElement\r\n  ): HTMLChTabularGridCellElement | void {\r\n    const nextColumn = this.getNextColumn(current.column);\r\n\r\n    if (nextColumn) {\r\n      return current.row.querySelector(\r\n        `:scope > ch-tabular-grid-cell:nth-of-type(${nextColumn.physicalOrder})`\r\n      ) as HTMLChTabularGridCellElement;\r\n    }\r\n  }\r\n\r\n  getGridRowIndex(row: HTMLChTabularGridRowElement): number {\r\n    return Array.prototype.indexOf.call(\r\n      this.grid.querySelectorAll(\r\n        \"ch-tabular-grid-row, ch-tabular-grid-rowset-legend\"\r\n      ),\r\n      row\r\n    );\r\n  }\r\n\r\n  getRowsetRowIndex(row: HTMLChTabularGridRowElement): number {\r\n    return Array.prototype.indexOf.call(row.parentElement.children, row);\r\n  }\r\n\r\n  getRowHeight(row: HTMLChTabularGridRowElement): number {\r\n    const gridRowsHeight = getComputedStyle(\r\n      this.gridLayout\r\n    ).gridTemplateRows.split(\" \");\r\n    const rowIndex = this.getGridRowIndex(row) + 1;\r\n\r\n    return parseInt(gridRowsHeight[rowIndex]) || 0;\r\n  }\r\n\r\n  getRowsPerPage(): number {\r\n    const gridHeight = this.gridLayout.clientHeight;\r\n    const columnsHeight = this.getColumnsetHeight();\r\n    const rowHeight = this.getRowHeight(this.getFirstRow());\r\n\r\n    return Math.floor((gridHeight - columnsHeight) / rowHeight);\r\n  }\r\n\r\n  getRow(rowId: string): HTMLChTabularGridRowElement {\r\n    return this.grid.querySelector(`ch-tabular-grid-row[rowid=\"${rowId}\"]`);\r\n  }\r\n\r\n  getRows(state: \"all\" | \"visible\" = \"all\"): HTMLChTabularGridRowElement[] {\r\n    const rows = Array.from(\r\n      this.grid.querySelectorAll(`ch-tabular-grid-row`)\r\n    ) as HTMLChTabularGridRowElement[];\r\n\r\n    if (state === \"visible\") {\r\n      return rows.filter(row => row.isVisible());\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  getRowsRange(\r\n    start: HTMLChTabularGridRowElement,\r\n    end: HTMLChTabularGridRowElement\r\n  ): HTMLChTabularGridRowElement[] {\r\n    const rows = this.getRows();\r\n    const indexStart = rows.indexOf(start);\r\n    const indexEnd = rows.indexOf(end);\r\n\r\n    return rows\r\n      .slice(Math.min(indexStart, indexEnd), Math.max(indexStart, indexEnd) + 1)\r\n      .filter(row => row.isVisible());\r\n  }\r\n\r\n  getRowEventTarget(eventInfo: Event): HTMLChTabularGridRowElement {\r\n    return eventInfo\r\n      .composedPath()\r\n      .find(\r\n        (target: HTMLElement) => target.tagName === \"CH-TABULAR-GRID-ROW\"\r\n      ) as HTMLChTabularGridRowElement;\r\n  }\r\n\r\n  isRowActionsEventTarget(eventInfo: Event): boolean {\r\n    return (\r\n      eventInfo\r\n        .composedPath()\r\n        .find(\r\n          (target: HTMLElement) =>\r\n            target.tagName === \"CH-TABULAR-GRID-ROW-ACTIONS\"\r\n        ) != null\r\n    );\r\n  }\r\n\r\n  getCell(\r\n    cellId?: string,\r\n    rowId?: string,\r\n    columnId?: string\r\n  ): HTMLChTabularGridCellElement | void {\r\n    if (cellId) {\r\n      return this.grid.querySelector(\r\n        `ch-tabular-grid-cell[cellid=\"${cellId}\"]`\r\n      ) as HTMLChTabularGridCellElement;\r\n    }\r\n    if (rowId && columnId) {\r\n      const row = this.getRow(rowId);\r\n      const column = this.columns.getColumn(columnId);\r\n\r\n      if (row && column) {\r\n        return row.getCell(column);\r\n      }\r\n    }\r\n  }\r\n\r\n  getCellEventTarget(eventInfo: Event): HTMLChTabularGridCellElement {\r\n    return eventInfo\r\n      .composedPath()\r\n      .find(\r\n        (target: HTMLElement) => target.tagName === \"CH-TABULAR-GRID-CELL\"\r\n      ) as HTMLChTabularGridCellElement;\r\n  }\r\n\r\n  columnDragStart(columnId: string) {\r\n    this.columnDragManager = new TabularGridManagerColumnDrag(\r\n      columnId,\r\n      this.columns.getColumns(),\r\n      this.isRTLDirection()\r\n    );\r\n  }\r\n\r\n  columnDragging(position: number): boolean {\r\n    return this.columnDragManager.dragging(position);\r\n  }\r\n\r\n  columnDragEnd() {\r\n    this.columnDragManager.dragEnd();\r\n    this.columnDragManager = null;\r\n  }\r\n\r\n  columnResizeStart(columnId: string) {\r\n    this.columnResizeManager = new TabularGridManagerColumnResize(\r\n      this,\r\n      columnId,\r\n      this.isRTLDirection()\r\n    );\r\n  }\r\n\r\n  columnResizing(deltaWidth: number) {\r\n    this.columnResizeManager.resizing(deltaWidth);\r\n  }\r\n\r\n  columnResizeEnd() {\r\n    this.columnResizeManager.resizeEnd();\r\n    this.columnResizeManager = null;\r\n  }\r\n\r\n  rowDragStart(row: HTMLChTabularGridRowElement) {\r\n    this.rowDragManager = new TabularGridManagerRowDrag(this);\r\n    this.rowDragManager.dragStart(row);\r\n  }\r\n\r\n  getGridStyle(): CSSProperties {\r\n    return {\r\n      display: \"grid\",\r\n      ...this.getGridTemplateColumns(),\r\n      ...this.getRowBoxSimulationStyle(),\r\n      ...this.getDragTransitionStyle(),\r\n      ...this.getColumnsStyle()\r\n    };\r\n  }\r\n\r\n  setBaseLayer(value: number) {\r\n    this.styleSheet.deleteRule(StyleRule.BASE_LAYER);\r\n    this.styleSheet.insertRule(\r\n      `:host { --ch-tabular-grid-base-layer: ${value}; }`,\r\n      StyleRule.BASE_LAYER\r\n    );\r\n  }\r\n\r\n  setColumnWidthVariables(columnsWidth: number[]) {\r\n    this.styleSheet.deleteRule(StyleRule.COLUMNS_WIDTH);\r\n    this.styleSheet.insertRule(\r\n      `.main { ${columnsWidth\r\n        .map(\r\n          (columnWidth, columnIndex) =>\r\n            `--ch-tabular-grid-column-${\r\n              columnIndex + 1\r\n            }-width:${columnWidth}px;`\r\n        )\r\n        .join(\"\\n\")} }`,\r\n      StyleRule.COLUMNS_WIDTH\r\n    );\r\n  }\r\n\r\n  ensureRowVisible(row: HTMLChTabularGridRowElement) {\r\n    let node: ITabularGridCollapsible = row.parentElement.closest(\r\n      \"ch-tabular-grid-row, ch-tabular-grid-rowset\"\r\n    );\r\n    const { columnFirst } = this.columns.getColumnsFirstLast();\r\n\r\n    while (node) {\r\n      node.collapsed = false;\r\n      node = node.parentElement.closest(\r\n        \"ch-tabular-grid-row, ch-tabular-grid-rowset\"\r\n      );\r\n    }\r\n\r\n    if (row.children[columnFirst.physicalOrder]) {\r\n      this.ensureVisible(\r\n        row.children[columnFirst.physicalOrder] as HTMLChTabularGridCellElement\r\n      );\r\n    }\r\n  }\r\n\r\n  ensureCellVisible(cell: HTMLChTabularGridCellElement) {\r\n    let node: ITabularGridCollapsible = cell.closest(\r\n      \"ch-tabular-grid-row, ch-tabular-grid-rowset\"\r\n    );\r\n\r\n    while (!cell.isVisible() && node) {\r\n      node.collapsed = false;\r\n      node = node.parentElement.closest(\r\n        \"ch-tabular-grid-row, ch-tabular-grid-rowset\"\r\n      );\r\n    }\r\n\r\n    if (!cell.isVisible()) {\r\n      cell.column.hidden = false;\r\n    }\r\n\r\n    this.ensureVisible(cell);\r\n  }\r\n\r\n  private ensureVisible(cell: HTMLChTabularGridCellElement) {\r\n    const isColumnFreeze = [\"start\", \"end\"].includes(cell.column.freeze);\r\n    const scroll = this.gridLayout;\r\n    const scrollOffsetTop = this.getScrollOffsetTop();\r\n    const scrollOffsetLeft = this.getScrollOffsetLeft();\r\n    const scrollOffsetRight = this.getScrollOffsetRight();\r\n\r\n    if (scroll.scrollTop + scrollOffsetTop > cell.offsetTop) {\r\n      scroll.scrollBy({\r\n        top: (scroll.scrollTop - cell.offsetTop + scrollOffsetTop) * -1\r\n      });\r\n    } else if (\r\n      scroll.scrollTop + scroll.offsetHeight <\r\n      cell.offsetTop + cell.offsetHeight\r\n    ) {\r\n      scroll.scrollBy({\r\n        top:\r\n          cell.offsetTop +\r\n          cell.offsetHeight -\r\n          (scroll.scrollTop + scroll.offsetHeight)\r\n      });\r\n    } else if (\r\n      scroll.scrollLeft + scrollOffsetLeft > cell.offsetLeft &&\r\n      !isColumnFreeze\r\n    ) {\r\n      scroll.scrollBy({\r\n        left: (scroll.scrollLeft - cell.offsetLeft + scrollOffsetLeft) * -1\r\n      });\r\n    } else if (\r\n      scroll.scrollLeft + scroll.clientWidth - scrollOffsetRight <\r\n        cell.offsetLeft + cell.offsetWidth &&\r\n      !isColumnFreeze\r\n    ) {\r\n      scroll.scrollBy({\r\n        left:\r\n          cell.offsetLeft +\r\n          cell.offsetWidth -\r\n          (scroll.scrollLeft + scroll.clientWidth - scrollOffsetRight)\r\n      });\r\n    }\r\n  }\r\n\r\n  private getGridTemplateColumns(): CSSProperties {\r\n    return {\r\n      \"grid-template-columns\": this.columns\r\n        .getColumns()\r\n        .map(\r\n          column => `var(--ch-tabular-grid-column-${column.physicalOrder}-size)`\r\n        )\r\n        .join(\" \")\r\n    };\r\n  }\r\n\r\n  private getRowBoxSimulationStyle(): CSSProperties {\r\n    const { columnFirst, columnLast } = this.columnDragManager\r\n      ? this.columnDragManager.getColumnsFirstLast()\r\n      : this.columns.getColumnsFirstLast();\r\n\r\n    if (!columnFirst || !columnLast) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      [`--ch-tabular-grid-column-${columnFirst.physicalOrder}-margin-start`]:\r\n        \"var(--ch-tabular-grid-fallback, inherit)\",\r\n      [`--ch-tabular-grid-column-${columnFirst.physicalOrder}-border-start`]:\r\n        \"var(--ch-tabular-grid-fallback, inherit)\",\r\n      [`--ch-tabular-grid-column-${columnFirst.physicalOrder}-padding-start`]:\r\n        \"var(--ch-tabular-grid-fallback, inherit)\",\r\n      [`--ch-tabular-grid-column-${columnLast.physicalOrder}-margin-end`]:\r\n        \"var(--ch-tabular-grid-fallback, inherit)\",\r\n      [`--ch-tabular-grid-column-${columnLast.physicalOrder}-border-end`]:\r\n        \"var(--ch-tabular-grid-fallback, inherit)\",\r\n      [`--ch-tabular-grid-column-${columnLast.physicalOrder}-padding-end`]:\r\n        \"var(--ch-tabular-grid-fallback, inherit)\"\r\n    };\r\n  }\r\n\r\n  private getDragTransitionStyle(): CSSProperties {\r\n    return {\r\n      \"--column-drag-transition-duration\": this.columnDragManager ? \".2s\" : \"0s\"\r\n    };\r\n  }\r\n\r\n  private getColumnsStyle(): CSSProperties {\r\n    return this.columns.getColumns().reduce((style, column) => {\r\n      return {\r\n        ...style,\r\n        ...this.getColumnStyle(column)\r\n      };\r\n    }, {} as CSSProperties);\r\n  }\r\n\r\n  private getColumnStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    return {\r\n      ...this.getColumnSizeStyle(column),\r\n      ...this.getColumnOrderStyle(column),\r\n      ...this.getColumnDisplayStyle(column),\r\n      ...this.getColumnFreezeStyle(column),\r\n      ...this.getColumnDraggingStyle(column),\r\n      ...this.getColumnIndentStyle(column)\r\n    };\r\n  }\r\n\r\n  private getColumnSizeStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    return {\r\n      [`--ch-tabular-grid-column-${column.order}-size`]: column.hidden\r\n        ? \"0px\"\r\n        : column.size\r\n    };\r\n  }\r\n\r\n  private getColumnOrderStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    return {\r\n      [`--ch-tabular-grid-column-${column.physicalOrder}-position`]:\r\n        column.order.toString()\r\n    };\r\n  }\r\n\r\n  private getColumnFreezeStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    switch (column.freeze) {\r\n      case \"start\":\r\n        return this.getColumnFreezeStartStyle(column);\r\n      case \"end\":\r\n        return this.getColumnFreezeEndStyle(column);\r\n    }\r\n  }\r\n\r\n  private getColumnFreezeStartStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    const calcItems = [\"0px\"];\r\n\r\n    for (let i = 1; i < column.order; i++) {\r\n      calcItems.push(`var(--ch-tabular-grid-column-${i}-width)`);\r\n    }\r\n\r\n    return {\r\n      [`--ch-tabular-grid-column-${column.physicalOrder}-left-freeze`]: `calc(${calcItems.join(\r\n        \" + \"\r\n      )})`,\r\n      [`--ch-tabular-grid-column-${column.physicalOrder}-z-index-freeze`]:\r\n        \"var(--ch-tabular-grid-column-freeze-layer)\"\r\n    };\r\n  }\r\n\r\n  private getColumnFreezeEndStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    const calcItems = [\"0px\"];\r\n    for (let i = this.columns.getColumns().length; i > column.order; i--) {\r\n      calcItems.push(`var(--ch-tabular-grid-column-${i}-width)`);\r\n    }\r\n\r\n    return {\r\n      [`--ch-tabular-grid-column-${column.physicalOrder}-right-freeze`]: `calc(${calcItems.join(\r\n        \" + \"\r\n      )})`,\r\n      [`--ch-tabular-grid-column-${column.physicalOrder}-z-index-freeze`]:\r\n        \"var(--ch-tabular-grid-column-freeze-layer)\"\r\n    };\r\n  }\r\n\r\n  private getColumnDisplayStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    return column.hidden\r\n      ? {\r\n          [`--ch-tabular-grid-column-${column.physicalOrder}-display`]: \"none\"\r\n        }\r\n      : null;\r\n  }\r\n\r\n  private getColumnDraggingStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    return this.columnDragManager\r\n      ? this.columnDragManager.getColumnStyle(column)\r\n      : null;\r\n  }\r\n\r\n  private getColumnIndentStyle(\r\n    column: HTMLChTabularGridColumnElement\r\n  ): CSSProperties {\r\n    return {\r\n      [`--ch-tabular-grid-column-${column.physicalOrder}-content`]:\r\n        column.order === 1 ? \"''\" : \"none\"\r\n    };\r\n  }\r\n\r\n  private isRTLDirection(): boolean {\r\n    return getComputedStyle(this.grid).direction === \"rtl\";\r\n  }\r\n}\r\n",":host {\r\n  display: flex;\r\n  position: relative;\r\n  flex-direction: column;\r\n  inline-size: 100%;\r\n\r\n  --ch-tabular-grid-cell-active-layer: calc(\r\n    var(--ch-tabular-grid-base-layer) * 1\r\n  );\r\n  --ch-tabular-grid-column-header-layer: calc(\r\n    var(--ch-tabular-grid-base-layer) * 2\r\n  );\r\n  --ch-tabular-grid-column-freeze-layer: calc(\r\n    var(--ch-tabular-grid-base-layer) * 4\r\n  );\r\n  --ch-tabular-grid-column-active-layer: calc(\r\n    var(--ch-tabular-grid-base-layer) * 8\r\n  );\r\n  --ch-tabular-grid-settings-layer: calc(\r\n    var(--ch-tabular-grid-base-layer) * 16\r\n  );\r\n}\r\n.main {\r\n  display: none;\r\n  grid-auto-flow: dense; /* necesario para poder reordenar las columnas */\r\n  grid-auto-rows: max-content;\r\n  overflow-x: auto;\r\n  user-select: none;\r\n  block-size: 100%;\r\n}\r\n","import \"./row/tabular-grid-row\";\r\nimport \"./rowset/tabular-grid-rowset\";\r\nimport \"./cell/tabular-grid-cell\";\r\n\r\nimport {\r\n  CSSProperties,\r\n  TabularGridSelectionChangedEvent,\r\n  TabularGridRowClickedEvent,\r\n  TabularGridMarkingChangedEvent,\r\n  TabularGridCellSelectionChangedEvent,\r\n  TabularGridRowPressedEvent,\r\n  TabularGridRowContextMenuEvent\r\n} from \"./tabular-grid-types\";\r\nimport {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Listen,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n  h,\r\n  Method\r\n} from \"@stencil/core\";\r\n\r\nimport { TabularGridManager } from \"./tabular-grid-manager\";\r\nimport HTMLChTabularGridCellElement, {\r\n  TabularGridCellSelectorClickedEvent,\r\n  TabularGridRowDragEvent\r\n} from \"./cell/tabular-grid-cell\";\r\nimport HTMLChTabularGridRowElement from \"./row/tabular-grid-row\";\r\nimport {\r\n  TabularGridColumnDragEvent,\r\n  TabularGridColumnResizeEvent,\r\n  TabularGridColumnSelectorClickedEvent\r\n} from \"./column/tabular-grid-column-types\";\r\nimport {\r\n  MouseEventButton,\r\n  MouseEventButtons,\r\n  focusComposedPath,\r\n  mouseEventHasButtonPressed,\r\n  mouseEventModifierKey\r\n} from \"../common/helpers\";\r\nimport { ManagerSelectionState } from \"./tabular-grid-manager-selection\";\r\n\r\n/**\r\n * The `ch-tabular-grid` component represents a Grid/TreeGrid of data, with rows and cells.\r\n */\r\n@Component({\r\n  tag: \"ch-tabular-grid\",\r\n  styleUrl: \"tabular-grid.scss\",\r\n  shadow: true\r\n})\r\nexport class ChTabularGrid {\r\n  private manager: TabularGridManager;\r\n  private gridLayoutElement: HTMLElement;\r\n  private settingsUI: HTMLChTabularGridSettingsElement;\r\n\r\n  @Element() el: HTMLChTabularGridElement;\r\n\r\n  @State() rowFocused: HTMLChTabularGridRowElement;\r\n  @Watch(\"rowFocused\")\r\n  rowFocusedHandler(\r\n    row: HTMLChTabularGridRowElement,\r\n    previous: HTMLChTabularGridRowElement\r\n  ) {\r\n    if (row) {\r\n      row.focused = true;\r\n    }\r\n    if (previous) {\r\n      previous.focused = false;\r\n    }\r\n  }\r\n\r\n  @State() cellFocused: HTMLChTabularGridCellElement;\r\n  @Watch(\"cellFocused\")\r\n  cellFocusedHandler(\r\n    cell: HTMLChTabularGridCellElement,\r\n    previous: HTMLChTabularGridCellElement\r\n  ) {\r\n    if (cell) {\r\n      cell.focused = true;\r\n    }\r\n    if (previous) {\r\n      previous.focused = false;\r\n    }\r\n  }\r\n\r\n  @State() rowHighlighted: HTMLChTabularGridRowElement;\r\n  @Watch(\"rowHighlighted\")\r\n  rowHighlightedHandler(\r\n    row: HTMLChTabularGridRowElement,\r\n    previous: HTMLChTabularGridRowElement\r\n  ) {\r\n    // highlight\r\n    if (row) {\r\n      row.highlighted = true;\r\n    }\r\n    if (previous) {\r\n      previous.highlighted = false;\r\n    }\r\n\r\n    // actions\r\n    if (row) {\r\n      this.manager.rowActions.showOnRowHover?.openRowHover(row);\r\n    } else {\r\n      this.manager.rowActions.showOnRowHover?.close();\r\n    }\r\n  }\r\n\r\n  @State() rowsMarked: HTMLChTabularGridRowElement[] = [];\r\n  @Watch(\"rowsMarked\")\r\n  rowsMarkedHandler(\r\n    rows: HTMLChTabularGridRowElement[],\r\n    previous: HTMLChTabularGridRowElement[]\r\n  ) {\r\n    this.manager.selection.syncRowSelector(rows, previous, \"mark\");\r\n    this.rowMarkingChanged.emit(this.getChangedEventDetail(rows, previous));\r\n  }\r\n\r\n  @State() rowsSelected: HTMLChTabularGridRowElement[] = [];\r\n  @Watch(\"rowsSelected\")\r\n  rowsSelectedHandler(\r\n    rows: HTMLChTabularGridRowElement[],\r\n    previous: HTMLChTabularGridRowElement[]\r\n  ) {\r\n    if (previous) {\r\n      previous\r\n        .filter(row => !rows.includes(row))\r\n        .forEach(row => (row.selected = false));\r\n    }\r\n    if (rows) {\r\n      rows.forEach(row => (row.selected = true));\r\n    }\r\n\r\n    this.manager.selection.syncRowSelector(rows, previous, \"select\");\r\n    this.selectionChanged.emit(this.getChangedEventDetail(rows, previous));\r\n  }\r\n\r\n  @State() cellSelected: HTMLChTabularGridCellElement;\r\n  @Watch(\"cellSelected\")\r\n  cellSelectedHandler(\r\n    cell: HTMLChTabularGridCellElement,\r\n    previous: HTMLChTabularGridCellElement\r\n  ) {\r\n    if (cell) {\r\n      cell.selected = true;\r\n    }\r\n    if (previous) {\r\n      previous.selected = false;\r\n    }\r\n\r\n    this.cellSelectionChanged.emit({\r\n      cellId: this.cellSelected ? this.cellSelected.cellId : null,\r\n      rowId: this.cellSelected ? this.cellSelected.row.rowId : null,\r\n      columnId: this.cellSelected ? this.cellSelected.column.columnId : null\r\n    });\r\n  }\r\n\r\n  @State() gridStyle: CSSProperties;\r\n\r\n  /**\r\n   * One of \"none\", \"single\" or \"multiple\", indicating how rows can be selected.\r\n   * It can be set to \"none\" if no rows should be selectable,\r\n   * \"single\" if only one row can be selected at a time, or\r\n   * \"multiple\" if multiple rows can be selected at once.\r\n   */\r\n  @Prop() readonly rowSelectionMode: \"none\" | \"single\" | \"multiple\" = \"single\";\r\n\r\n  /**\r\n   * Specifies the keyboard navigation mode for the component.\r\n   * - \"none\": Disables keyboard navigation for the grid rows.\r\n   * - \"select\": Allows keyboard navigation by changing the selection of grid rows.\r\n   * - \"focus\": Allows keyboard navigation by focusing on grid rows, but does not change the selection.\r\n   */\r\n  @Prop() readonly keyboardNavigationMode: \"none\" | \"select\" | \"focus\" =\r\n    \"select\";\r\n\r\n  /**\r\n   * One of \"false\", \"true\" or \"auto\", indicating whether or not rows can be highlighted.\r\n   * \"auto\", row highlighting will be enabled if the row selection mode is set to \"single\" or \"multiple\".\r\n   */\r\n  @Prop() readonly rowHighlightEnabled: boolean | \"auto\" = \"auto\";\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is selected.\r\n   */\r\n  @Prop() readonly rowSelectedClass: string;\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is hovered.\r\n   */\r\n  @Prop() readonly rowHighlightedClass: string;\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is focused.\r\n   */\r\n  @Prop() readonly rowFocusedClass: string;\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is marked.\r\n   */\r\n  @Prop() readonly rowMarkedClass: string;\r\n\r\n  /**\r\n   * A boolean indicating whether the user can drag column headers to reorder columns.\r\n   */\r\n  @Prop() readonly allowColumnReorder: boolean = true;\r\n\r\n  /**\r\n   * One of \"single\" or \"splitter\", indicating the behavior of column resizing.\r\n   * \"single\", resize a single column at a time.\r\n   * \"splitter\", when adjusts the width of one column, the neighboring columns\r\n   *    are also resized proportionally, maintaining the overall width.\r\n   */\r\n  @Prop() readonly columnResizeMode: \"single\" | \"splitter\" = \"single\";\r\n\r\n  /**\r\n   * An object that contains localized strings for the grid.\r\n   */\r\n  @Prop() readonly localization: GridLocalization;\r\n\r\n  /**\r\n   * Event emitted when the row selection is changed.\r\n   */\r\n  @Event() selectionChanged: EventEmitter<TabularGridSelectionChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the row marking is changed.\r\n   */\r\n  @Event() rowMarkingChanged: EventEmitter<TabularGridMarkingChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the cell selection is changed.\r\n   */\r\n  @Event()\r\n  cellSelectionChanged: EventEmitter<TabularGridCellSelectionChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when a row is clicked.\r\n   */\r\n  @Event() rowClicked: EventEmitter<TabularGridRowClickedEvent>;\r\n\r\n  /**\r\n   * Event emitted when a row is double clicked.\r\n   */\r\n  @Event() rowDoubleClicked: EventEmitter<TabularGridRowClickedEvent>;\r\n\r\n  /**\r\n   * Event emitted when Enter is pressed on a row.\r\n   */\r\n  @Event() rowEnterPressed: EventEmitter<TabularGridRowPressedEvent>;\r\n\r\n  /**\r\n   * Event emitted when attempts to open a context menu on a row.\r\n   */\r\n  @Event() rowContextMenu: EventEmitter<TabularGridRowContextMenuEvent>;\r\n\r\n  componentWillLoad() {\r\n    this.manager = new TabularGridManager(this.el);\r\n    this.gridStyle = this.manager.getGridStyle();\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.manager.componentDidLoad(this.gridLayoutElement);\r\n  }\r\n\r\n  // @ts-expect-error: TODO: Fix this error\r\n  componentShouldUpdate(_newValue, _oldValue, name: string) {\r\n    if (\r\n      name === \"rowFocused\" ||\r\n      name === \"rowHighlighted\" ||\r\n      name === \"rowSelected\" ||\r\n      name === \"rowsMarked\" ||\r\n      name === \"cellSelected\"\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  @Listen(\"focus\", { passive: true })\r\n  focusHandler() {\r\n    if (this.keyboardNavigationMode !== \"none\") {\r\n      this.rowFocused ||= this.rowsSelected[0] ?? this.manager.getFirstRow();\r\n      this.cellFocused = this.rowFocused?.getCell(\r\n        this.cellSelected?.column || this.manager.getFirstColumn()\r\n      );\r\n\r\n      if (this.keyboardNavigationMode === \"select\") {\r\n        this.selectByKeyboardEvent(false, false, \"focus\");\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"blur\", { passive: true })\r\n  blurHandler(eventInfo: Event) {\r\n    if (!eventInfo.composedPath().includes(this.el)) {\r\n      this.rowFocused = null;\r\n      this.cellFocused = null;\r\n    }\r\n  }\r\n\r\n  @Listen(\"cellFocused\", { passive: true })\r\n  cellFocusedEventHandler(eventInfo: CustomEvent) {\r\n    const cell = eventInfo.target as HTMLChTabularGridCellElement;\r\n    if (this.rowSelectionMode !== \"none\" && !cell.selected) {\r\n      this.setCellSelected(cell);\r\n    }\r\n  }\r\n\r\n  @Listen(\"keydown\", { target: \"window\" })\r\n  windowKeyDownHandler(eventInfo: KeyboardEvent) {\r\n    if (\r\n      focusComposedPath()[0] === this.el &&\r\n      [\r\n        \" \",\r\n        \"+\",\r\n        \"-\",\r\n        \"Home\",\r\n        \"End\",\r\n        \"PageUp\",\r\n        \"PageDown\",\r\n        \"ArrowUp\",\r\n        \"ArrowDown\",\r\n        \"ArrowLeft\",\r\n        \"ArrowRight\"\r\n      ].includes(eventInfo.key)\r\n    ) {\r\n      eventInfo.preventDefault();\r\n    }\r\n  }\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  keyDownHandler(eventInfo: KeyboardEvent) {\r\n    if (\r\n      focusComposedPath()[0] === this.el &&\r\n      this.keyboardNavigationMode !== \"none\"\r\n    ) {\r\n      const range = eventInfo.shiftKey;\r\n      const append = mouseEventModifierKey(eventInfo);\r\n\r\n      switch (eventInfo.key) {\r\n        case \" \":\r\n          this.spacePressedEvent(\r\n            mouseEventModifierKey(eventInfo),\r\n            eventInfo.shiftKey\r\n          );\r\n          break;\r\n        case \"+\":\r\n          this.setRowCollapsed(this.rowFocused, false);\r\n          break;\r\n        case \"-\":\r\n          this.setRowCollapsed(this.rowFocused, true);\r\n          break;\r\n        case \"Home\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveFirstRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"End\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveLastRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"PageUp\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.movePreviousPageRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"PageDown\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveNextPageRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowUp\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.movePreviousRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowDown\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveNextRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowLeft\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.movePreviousCell,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowRight\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveNextCell,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"Enter\":\r\n          this.enterPressedHandler();\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"mousemove\", { passive: true })\r\n  mouseMoveHandler(eventInfo: MouseEvent) {\r\n    if (\r\n      (this.rowHighlightEnabled === \"auto\" &&\r\n        this.rowSelectionMode !== \"none\") ||\r\n      this.rowHighlightEnabled === true\r\n    ) {\r\n      this.rowHighlighted =\r\n        this.manager.getRowEventTarget(eventInfo) ||\r\n        (this.manager.isRowActionsEventTarget(eventInfo)\r\n          ? this.rowHighlighted\r\n          : null);\r\n    }\r\n\r\n    selectingBlock: {\r\n      if (this.manager.selection.selecting) {\r\n        if (focusComposedPath()[0] !== this.el) {\r\n          this.stopSelecting();\r\n          break selectingBlock;\r\n        }\r\n\r\n        const row = this.manager.getRowEventTarget(eventInfo);\r\n        const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n        if (\r\n          row &&\r\n          (this.manager.selection.selectingRow !== row ||\r\n            this.manager.selection.selectingCell !== cell)\r\n        ) {\r\n          const isKeyModifierPressed = mouseEventModifierKey(eventInfo);\r\n          const isMouseButtonRightPressed = mouseEventHasButtonPressed(\r\n            eventInfo,\r\n            MouseEventButtons.RIGHT\r\n          );\r\n\r\n          this.selectByPointerEvent(\r\n            row,\r\n            cell,\r\n            isKeyModifierPressed && !isMouseButtonRightPressed,\r\n            !isMouseButtonRightPressed,\r\n            isMouseButtonRightPressed\r\n          );\r\n\r\n          this.manager.selection.selectingRow = row;\r\n          this.manager.selection.selectingCell = cell;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"mouseleave\", { passive: true })\r\n  mouseLeaveHandler() {\r\n    this.rowHighlighted &&= null;\r\n  }\r\n\r\n  @Listen(\"mousedown\", { passive: true })\r\n  mouseDownHandler(eventInfo: MouseEvent) {\r\n    const row = this.manager.getRowEventTarget(eventInfo);\r\n    const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n    if (row) {\r\n      this.manager.selection.selecting = true;\r\n      this.selectByPointerEvent(\r\n        row,\r\n        cell,\r\n        mouseEventModifierKey(eventInfo),\r\n        eventInfo.shiftKey,\r\n        eventInfo.button === MouseEventButton.RIGHT\r\n      );\r\n    }\r\n  }\r\n\r\n  @Listen(\"mouseup\", { passive: true })\r\n  mouseUpHandler() {\r\n    if (this.manager.selection.selecting) {\r\n      this.stopSelecting();\r\n    }\r\n  }\r\n\r\n  @Listen(\"click\", { passive: true })\r\n  clickHandler(eventInfo: MouseEvent) {\r\n    const row = this.manager.getRowEventTarget(eventInfo);\r\n    const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n    if (row) {\r\n      this.emitRowClicked(row, cell);\r\n    }\r\n  }\r\n\r\n  @Listen(\"dblclick\", { passive: true })\r\n  dblclickHandler(eventInfo: MouseEvent) {\r\n    const row = this.manager.getRowEventTarget(eventInfo);\r\n    const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n    if (row) {\r\n      this.rowDoubleClicked.emit({\r\n        rowId: row.rowId,\r\n        cellId: cell?.cellId,\r\n        columnId: cell?.column.columnId\r\n      });\r\n    }\r\n  }\r\n\r\n  @Listen(\"touchstart\", { passive: true })\r\n  touchstartHandler(eventInfo: TouchEvent) {\r\n    this.manager.selection.touchStart(eventInfo);\r\n  }\r\n\r\n  @Listen(\"touchend\", { passive: false })\r\n  touchendHandler(eventInfo: TouchEvent) {\r\n    if (eventInfo.cancelable) {\r\n      eventInfo.preventDefault();\r\n    }\r\n\r\n    if (this.manager.selection.isTouchEndSelection(eventInfo)) {\r\n      const columnSelector = this.manager.columns.getColumnSelector();\r\n      const row = this.manager.getRowEventTarget(eventInfo);\r\n      const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n      if (row) {\r\n        this.selectByPointerEvent(\r\n          row,\r\n          cell,\r\n          columnSelector?.richRowSelectorMode !== \"select\",\r\n          false,\r\n          false\r\n        );\r\n\r\n        this.emitRowClicked(row, cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"contextmenu\")\r\n  contextmenuHandler(eventInfo: MouseEvent) {\r\n    let targetRow: HTMLChTabularGridRowElement;\r\n\r\n    if (\r\n      eventInfo.target === this.el &&\r\n      eventInfo.button === MouseEventButton.KEY_SHORTCUT\r\n    ) {\r\n      targetRow = this.rowFocused;\r\n    } else {\r\n      targetRow = this.manager.getRowEventTarget(eventInfo);\r\n    }\r\n\r\n    if (targetRow) {\r\n      const cellFocused =\r\n        this.cellSelected?.row === targetRow ? this.cellSelected : null;\r\n\r\n      const rowContextMenuEventInfo = this.rowContextMenu.emit({\r\n        rowId: targetRow.rowId,\r\n        cellId: cellFocused?.cellId,\r\n        columnId: cellFocused?.column.columnId,\r\n        selectedRowsId: this.rowsSelected.map(row => row.rowId),\r\n        clientX: eventInfo.clientX,\r\n        clientY: eventInfo.clientY\r\n      });\r\n\r\n      this.manager.rowActions.showOnRowContext?.openRowContext(\r\n        eventInfo.clientX,\r\n        eventInfo.clientY\r\n      );\r\n\r\n      if (\r\n        rowContextMenuEventInfo.defaultPrevented ||\r\n        this.manager.rowActions.showOnRowContext\r\n      ) {\r\n        eventInfo.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnSelectorClicked\", { passive: true })\r\n  columnSelectorClickedHandler(\r\n    eventInfo: CustomEvent<TabularGridColumnSelectorClickedEvent>\r\n  ) {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"select\") {\r\n      this.selectAll(eventInfo.detail.checked);\r\n    } else if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markAllRows(\r\n        eventInfo.detail.checked\r\n      );\r\n    }\r\n  }\r\n\r\n  @Listen(\"cellSelectorClicked\", { passive: true })\r\n  cellSelectorClickedHandler(\r\n    eventInfo: CustomEvent<TabularGridCellSelectorClickedEvent>\r\n  ) {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"select\") {\r\n      this.selectByPointerEvent(\r\n        this.manager.getRowEventTarget(eventInfo),\r\n        this.manager.getCellEventTarget(eventInfo),\r\n        true,\r\n        eventInfo.detail.range,\r\n        false\r\n      );\r\n    } else if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markRow(\r\n        this.manager.getRowEventTarget(eventInfo),\r\n        eventInfo.detail.checked,\r\n        eventInfo.detail.range,\r\n        this.rowsMarked\r\n      );\r\n    }\r\n  }\r\n\r\n  @Listen(\"cellRowActionClicked\", { passive: true })\r\n  cellRowActionClickedHandler(eventInfo: CustomEvent) {\r\n    const cell = eventInfo.target as HTMLChTabularGridCellElement;\r\n    this.manager.rowActions.showOnRowActions?.openRowActions(cell);\r\n  }\r\n\r\n  @Listen(\"columnHiddenChanged\")\r\n  @Listen(\"columnOrderChanged\")\r\n  @Listen(\"columnFreezeChanged\")\r\n  @Listen(\"columnSizeChanging\")\r\n  columnStyleChangedHandler() {\r\n    if (this.manager) {\r\n      this.gridStyle = this.manager.getGridStyle();\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnFreezeChanged\")\r\n  columnFreezeChangedHandler() {\r\n    this.manager.columns.adjustFreezeOrder();\r\n  }\r\n\r\n  @Listen(\"columnResizeStarted\")\r\n  columnResizeStartedHandler(\r\n    eventInfo: CustomEvent<TabularGridColumnResizeEvent>\r\n  ) {\r\n    this.manager.columnResizeStart(eventInfo.detail.columnId);\r\n  }\r\n\r\n  @Listen(\"columnResizing\")\r\n  columnResizingHandler(eventInfo: CustomEvent<TabularGridColumnResizeEvent>) {\r\n    this.manager.columnResizing(eventInfo.detail.deltaWidth);\r\n  }\r\n\r\n  @Listen(\"columnResizeFinished\")\r\n  columnResizeFinishedHandler() {\r\n    this.manager.columnResizeEnd();\r\n  }\r\n\r\n  @Listen(\"columnDragStarted\")\r\n  columnDragStartHandler(eventInfo: CustomEvent<TabularGridColumnDragEvent>) {\r\n    this.manager.columnDragStart(eventInfo.detail.columnId);\r\n  }\r\n\r\n  @Listen(\"columnDragging\")\r\n  columnDraggingHandler(eventInfo: CustomEvent<TabularGridColumnDragEvent>) {\r\n    if (this.manager.columnDragging(eventInfo.detail.positionX)) {\r\n      this.gridStyle = this.manager.getGridStyle();\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnDragEnded\")\r\n  columnDragEndHandler() {\r\n    this.manager.columnDragEnd();\r\n    this.gridStyle = this.manager.getGridStyle();\r\n  }\r\n\r\n  @Listen(\"rowDragStarted\")\r\n  rowDragStartHandler(eventInfo: CustomEvent<TabularGridRowDragEvent>) {\r\n    this.manager.rowDragStart(eventInfo.detail.row);\r\n  }\r\n\r\n  @Listen(\"rowEnsureVisible\")\r\n  rowEnsureVisibleHandler(eventInfo: CustomEvent) {\r\n    this.manager.ensureRowVisible(\r\n      eventInfo.target as HTMLChTabularGridRowElement\r\n    );\r\n  }\r\n\r\n  @Listen(\"cellEnsureVisible\")\r\n  cellEnsureVisibleHandler(eventInfo: CustomEvent) {\r\n    this.manager.ensureCellVisible(\r\n      eventInfo.target as HTMLChTabularGridCellElement\r\n    );\r\n  }\r\n\r\n  @Listen(\"settingsShowClicked\")\r\n  settingsShowClickedHandler() {\r\n    this.settingsUI.show = true;\r\n  }\r\n\r\n  @Listen(\"settingsCloseClicked\")\r\n  settingsCloseClickedHandler() {\r\n    this.settingsUI.show = false;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the currently focused row.\r\n   */\r\n  @Method()\r\n  async getFocusedRow(): Promise<string> {\r\n    return this.rowFocused?.rowId;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the currently hovered row.\r\n   */\r\n  @Method()\r\n  async getHoveredRow(): Promise<string> {\r\n    return this.rowHighlighted?.rowId;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the list of rowId of the selected rows.\r\n   */\r\n  @Method()\r\n  async getSelectedRows(): Promise<string[]> {\r\n    return this.rowsSelected.map(row => row.rowId);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the list of rowId of the marked rows.\r\n   */\r\n  @Method()\r\n  async getMarkedRows(): Promise<string[]> {\r\n    return this.rowsMarked.map(row => row.rowId);\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the currently focused cell.\r\n   */\r\n  @Method()\r\n  async getFocusedCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    return {\r\n      cellId: this.cellFocused ? this.cellFocused.cellId : null,\r\n      rowId: this.cellFocused ? this.cellFocused.row.rowId : null,\r\n      columnId: this.cellFocused ? this.cellFocused.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getSelectedCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    return {\r\n      cellId: this.cellSelected ? this.cellSelected.cellId : null,\r\n      rowId: this.cellSelected ? this.cellSelected.row.rowId : null,\r\n      columnId: this.cellSelected ? this.cellSelected.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Selects or deselects a row.\r\n   * @param rowId - The rowId of the row to select or deselect.\r\n   * @param selected - A boolean indicating whether to select or deselect the row.\r\n   */\r\n  @Method()\r\n  async selectRow(rowId: string, selected = true): Promise<void> {\r\n    const row = this.manager.getRow(rowId);\r\n\r\n    if (row) {\r\n      const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n        this.manager.selection.selectSet(\r\n          {\r\n            rowFocused: this.rowFocused,\r\n            rowsSelected: this.rowsSelected,\r\n            cellFocused: this.cellFocused,\r\n            cellSelected: this.cellSelected\r\n          },\r\n          row,\r\n          null,\r\n          selected\r\n        );\r\n\r\n      this.rowFocused = rowFocused;\r\n      this.rowsSelected = rowsSelected;\r\n      this.cellFocused = cellFocused;\r\n      this.cellSelected = cellSelected;\r\n\r\n      rowFocused?.ensureVisible();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects or deselects all rows.\r\n   * @param selected - A boolean indicating whether to select or deselect all rows.\r\n   */\r\n  @Method()\r\n  async selectAllRows(selected = true): Promise<void> {\r\n    this.selectAll(selected);\r\n  }\r\n\r\n  /**\r\n   * Select or deselect a cell.\r\n   * The cell can be identified by the cellId parameter or\r\n   * by using the rowId and columnId pair.\r\n   * @param cellId - The cellId of the cell to select or deselect.\r\n   * @param rowId - The rowId of the row containing the cell.\r\n   * @param columnId - The columnId of the column containing the cell.\r\n   * @param selected - A boolean indicating whether to select or deselect the cell.\r\n   */\r\n  @Method()\r\n  async selectCell(\r\n    cellId?: string,\r\n    rowId?: string,\r\n    columnId?: string,\r\n    selected = true\r\n  ): Promise<void> {\r\n    const cell = this.manager.getCell(cellId, rowId, columnId);\r\n\r\n    if (cell) {\r\n      this.setCellSelected(cell, selected);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark or unmark a row.\r\n   * @param rowId - The rowId of the row to select or deselect.\r\n   * @param marked - A boolean indicating whether to mark or unmark the row.\r\n   */\r\n  @Method()\r\n  async markRow(rowId: string, marked = true): Promise<void> {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n    const row = this.manager.getRow(rowId);\r\n\r\n    if (row && columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markRow(\r\n        row,\r\n        marked,\r\n        false,\r\n        this.rowsMarked\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark or unmark all rows.\r\n   * @param marked - A boolean indicating whether to mark or unmark all rows.\r\n   */\r\n  @Method()\r\n  async markAllRows(marked = true): Promise<void> {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markAllRows(marked);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Expands a row, showing its children.\r\n   * @param rowId - The rowId of the row to expand.\r\n   */\r\n  @Method()\r\n  async expandRow(rowId: string): Promise<void> {\r\n    this.setRowCollapsed(this.manager.getRow(rowId), false);\r\n  }\r\n\r\n  /**\r\n   * Collapses a row, hiding its children.\r\n   * @param rowId - The rowId of the row to collapse.\r\n   */\r\n  @Method()\r\n  async collapseRow(rowId: string): Promise<void> {\r\n    this.setRowCollapsed(this.manager.getRow(rowId), true);\r\n  }\r\n\r\n  /**\r\n   * Ensures that the row is visible within the control, scrolling the contents of the control if necessary.\r\n   * @param rowId - The rowId of the row to ensure visibility.\r\n   */\r\n  @Method()\r\n  async rowEnsureVisible(rowId: string): Promise<void> {\r\n    const row = this.manager.getRow(rowId);\r\n\r\n    if (row) {\r\n      this.manager.ensureRowVisible(row);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensures that the cell is visible within the control, scrolling the contents of the control if necessary.\r\n   * @param cellId - The cellId of the cell to ensure visibility.\r\n   */\r\n  @Method()\r\n  async cellEnsureVisible(cellId: string): Promise<void> {\r\n    const cell = this.manager.getCell(cellId);\r\n\r\n    if (cell) {\r\n      this.manager.ensureCellVisible(cell);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the previous row relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getPreviousRow(): Promise<string | void> {\r\n    const currentRow = this.cellSelected?.row;\r\n\r\n    if (currentRow) {\r\n      return this.manager.getPreviousRow(currentRow)?.rowId || null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the next row relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getNextRow(): Promise<string | void> {\r\n    const currentRow = this.cellSelected?.row;\r\n\r\n    if (currentRow) {\r\n      return this.manager.getNextRow(currentRow)?.rowId || null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the previous cell relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getPreviousCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    const previousCell = this.manager.getPreviousCell(this.cellSelected);\r\n\r\n    return {\r\n      cellId: previousCell ? previousCell.cellId : null,\r\n      rowId: previousCell ? previousCell.row.rowId : null,\r\n      columnId: previousCell ? previousCell.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the next cell relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getNextCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    const nextCell = this.manager.getNextCell(this.cellSelected);\r\n\r\n    return {\r\n      cellId: nextCell ? nextCell.cellId : null,\r\n      rowId: nextCell ? nextCell.row.rowId : null,\r\n      columnId: nextCell ? nextCell.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Synchronizes the state of a row in the grid.\r\n   */\r\n  @Method()\r\n  async syncRowState(el: HTMLElement) {\r\n    const row = el as HTMLChTabularGridRowElement;\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (this.rowSelectionMode !== \"none\") {\r\n      this.syncRowStateSelected(row);\r\n    }\r\n    if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.syncRowStateMarked(row);\r\n    }\r\n\r\n    if (columnSelector) {\r\n      this.syncRowStateSelector(row, columnSelector);\r\n\r\n      if (columnSelector.richRowSelectorMode === \"select\") {\r\n        this.manager.selection.syncColumnSelector(\r\n          this.rowsSelected.length,\r\n          columnSelector\r\n        );\r\n      } else if (columnSelector.richRowSelectorMode === \"mark\") {\r\n        this.manager.selection.syncColumnSelector(\r\n          this.rowsMarked.length,\r\n          columnSelector\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private syncRowStateSelected(row: HTMLChTabularGridRowElement) {\r\n    if (row.selected && this.rowSelectionMode === \"single\") {\r\n      this.rowsSelected[0] = row;\r\n    }\r\n    if (\r\n      row.selected &&\r\n      this.rowSelectionMode === \"multiple\" &&\r\n      !this.rowsSelected.includes(row)\r\n    ) {\r\n      this.rowsSelected.push(row);\r\n    }\r\n\r\n    if (!row.selected) {\r\n      const index = this.rowsSelected.indexOf(row);\r\n\r\n      if (index !== -1) {\r\n        this.rowsSelected.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  private syncRowStateMarked(row: HTMLChTabularGridRowElement) {\r\n    if (row.marked && !this.rowsMarked.includes(row)) {\r\n      this.rowsMarked.push(row);\r\n    }\r\n\r\n    if (!row.marked) {\r\n      const index = this.rowsMarked.indexOf(row);\r\n\r\n      if (index !== -1) {\r\n        this.rowsMarked.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  private syncRowStateSelector(\r\n    row: HTMLChTabularGridRowElement,\r\n    columnSelector: HTMLChTabularGridColumnElement\r\n  ) {\r\n    const cell = row.getCell(columnSelector);\r\n    const value =\r\n      (columnSelector.richRowSelectorMode === \"select\" && row.selected) ||\r\n      (columnSelector.richRowSelectorMode === \"mark\" && row.marked);\r\n\r\n    cell.setSelectorChecked(value);\r\n  }\r\n\r\n  private getChangedEventDetail(\r\n    rows: HTMLChTabularGridRowElement[],\r\n    previous: HTMLChTabularGridRowElement[]\r\n  ): TabularGridSelectionChangedEvent | TabularGridMarkingChangedEvent {\r\n    return {\r\n      rowsId: rows.map(row => row.rowId),\r\n      addedRowsId: rows\r\n        .filter(row => !previous.includes(row))\r\n        .map(row => row.rowId),\r\n      removedRowsId: previous\r\n        .filter(row => !rows.includes(row))\r\n        .map(row => row.rowId),\r\n      unalteredRowsId: rows\r\n        .filter(row => previous.includes(row))\r\n        .map(row => row.rowId)\r\n    };\r\n  }\r\n\r\n  private enterPressedHandler() {\r\n    if (this.rowFocused) {\r\n      this.rowEnterPressed.emit({\r\n        rowId: this.rowFocused.rowId,\r\n        cellId: this.cellFocused ? this.cellFocused.cellId : null,\r\n        columnId: this.cellFocused ? this.cellFocused.column.columnId : null\r\n      });\r\n    }\r\n  }\r\n\r\n  private spacePressedEvent(ctrl: boolean, shift: boolean) {\r\n    if (this.keyboardNavigationMode === \"focus\") {\r\n      this.selectByKeyboardEvent(ctrl, shift, \"last-selected\");\r\n    } else if (this.keyboardNavigationMode === \"select\") {\r\n      this.markByKeyboardEvent();\r\n    }\r\n\r\n    this.emitRowClicked(this.rowFocused, this.cellFocused);\r\n  }\r\n\r\n  private markByKeyboardEvent() {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markRows(\r\n        this.rowFocused,\r\n        this.rowsMarked,\r\n        this.rowsSelected\r\n      );\r\n    }\r\n  }\r\n\r\n  private selectByKeyboardEvent(\r\n    append: boolean,\r\n    range: boolean,\r\n    rangeStartOn: \"focus\" | \"last-selected\"\r\n  ) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.select(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        this.rowFocused,\r\n        this.cellFocused,\r\n        true,\r\n        append,\r\n        range,\r\n        rangeStartOn,\r\n        false\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private selectByPointerEvent(\r\n    row: HTMLChTabularGridRowElement,\r\n    cell: HTMLChTabularGridCellElement,\r\n    append: boolean,\r\n    range: boolean,\r\n    context: boolean\r\n  ) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.select(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        row,\r\n        cell,\r\n        true,\r\n        append,\r\n        range,\r\n        \"last-selected\",\r\n        context\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private moveByKeyboardEvent(\r\n    fn: (\r\n      state: ManagerSelectionState,\r\n      select: boolean,\r\n      range: boolean,\r\n      append: boolean\r\n    ) => ManagerSelectionState,\r\n    range: boolean,\r\n    append: boolean\r\n  ) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } = fn.call(\r\n      this.manager.selection,\r\n      {\r\n        rowFocused: this.rowFocused,\r\n        rowsSelected: this.rowsSelected,\r\n        cellFocused: this.cellFocused,\r\n        cellSelected: this.cellSelected\r\n      },\r\n      this.rowSelectionMode !== \"none\" &&\r\n        this.keyboardNavigationMode === \"select\",\r\n      this.rowSelectionMode === \"multiple\" ? range : false,\r\n      this.rowSelectionMode === \"multiple\" ? range && append : false\r\n    );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private selectAll(value = true) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.selectAll(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        value\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private setRowCollapsed(\r\n    row: HTMLChTabularGridRowElement,\r\n    collapsed: boolean\r\n  ) {\r\n    if (row && collapsed) {\r\n      if (row && row.hasChildRows) {\r\n        row.collapsed = true;\r\n      }\r\n    } else if (row && !collapsed) {\r\n      row.collapsed = false;\r\n    }\r\n  }\r\n\r\n  private setCellSelected(cell: HTMLChTabularGridCellElement, selected = true) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.selectSet(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        cell.row,\r\n        cell,\r\n        selected\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private emitRowClicked(\r\n    row: HTMLChTabularGridRowElement,\r\n    cell: HTMLChTabularGridCellElement\r\n  ) {\r\n    this.rowClicked.emit({\r\n      rowId: row.rowId,\r\n      cellId: cell?.cellId,\r\n      columnId: cell?.column.columnId\r\n    });\r\n  }\r\n\r\n  private stopSelecting() {\r\n    this.manager.selection.selecting = false;\r\n    this.manager.selection.selectingRow = null;\r\n    this.manager.selection.selectingCell = null;\r\n  }\r\n\r\n  private renderSettings() {\r\n    return (\r\n      <ch-tabular-grid-settings\r\n        grid={this.el}\r\n        ref={el => (this.settingsUI = el)}\r\n        exportparts=\"\r\n          mask:settings-mask,\r\n          window:settings-window,\r\n          header:settings-header,\r\n          caption:settings-caption,\r\n          close:settings-close,\r\n          main:settings-main,\r\n          footer:settings-footer\r\n        \"\r\n      >\r\n        <slot name=\"settings\">\r\n          <ch-tabular-grid-settings-columns\r\n            part=\"settings-columns\"\r\n            columns={[...this.manager.getColumns()]}\r\n            exportparts=\"\r\n              column:settings-columns-item,\r\n              column-label:settings-columns-label,\r\n              column-visible:settings-columns-visible,\r\n              column-visible-checked:settings-columns-visible-checked\r\n            \"\r\n          ></ch-tabular-grid-settings-columns>\r\n        </slot>\r\n      </ch-tabular-grid-settings>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host tabindex={this.keyboardNavigationMode !== \"none\" ? \"0\" : false}>\r\n        <header part=\"header\">\r\n          <slot name=\"header\"></slot>\r\n        </header>\r\n        <section\r\n          class=\"main ch-scrollable\"\r\n          style={this.gridStyle}\r\n          part=\"main\"\r\n          ref={el => (this.gridLayoutElement = el)}\r\n        >\r\n          <slot></slot>\r\n        </section>\r\n        <aside>\r\n          {this.renderSettings()}\r\n          <slot name=\"column-display\"></slot>\r\n          <slot name=\"row-actions\"></slot>\r\n        </aside>\r\n        <footer part=\"footer\">\r\n          <slot name=\"footer\"></slot>\r\n        </footer>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nexport interface GridLocalization {\r\n  settingsCaption: string;\r\n  settingsCloseText: string;\r\n  settingsCloseTooltip: string;\r\n}\r\n","@import \"../../common/reset.scss\";\r\n@import \"../helpers/styles.scss\";\r\n\r\n:host {\r\n  display: flex;\r\n  position: sticky;\r\n  top: 0;\r\n  grid-row: 1;\r\n}\r\n\r\n// column-set box simulation\r\n:host {\r\n  @include box-simulation;\r\n  @include column-drag-transition;\r\n}\r\n\r\n// z-index levels\r\n:host {\r\n  --ch-tabular-grid-column-z-index-head: var(\r\n    --ch-tabular-grid-column-header-layer\r\n  );\r\n}\r\n:host([show-settings]),\r\n:host([resizing]) {\r\n  --ch-tabular-grid-column-z-index-active: var(\r\n    --ch-tabular-grid-column-active-layer\r\n  );\r\n}\r\n\r\n:host([sort-direction=\"asc\"]) .bar .sort .sort-asc {\r\n  visibility: visible;\r\n}\r\n:host([sort-direction=\"desc\"]) .bar .sort .sort-desc {\r\n  visibility: visible;\r\n}\r\n\r\n.bar {\r\n  @include reset-list;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  & .selector {\r\n    overflow: hidden;\r\n    order: 0;\r\n    &:not([hidden]) {\r\n      display: flex;\r\n    }\r\n  }\r\n\r\n  & .name {\r\n    display: flex;\r\n    overflow: hidden;\r\n    order: 1;\r\n\r\n    & .name-text {\r\n      white-space: nowrap;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n    }\r\n  }\r\n\r\n  & .sort {\r\n    position: relative;\r\n    align-items: center;\r\n    order: 2;\r\n    &:not([hidden]) {\r\n      display: flex;\r\n    }\r\n\r\n    & .sort-asc {\r\n      visibility: hidden;\r\n      animation-fill-mode: forwards;\r\n    }\r\n    & .sort-desc {\r\n      position: absolute;\r\n      visibility: hidden;\r\n      animation-fill-mode: forwards;\r\n    }\r\n  }\r\n  & .settings {\r\n    order: 3;\r\n  }\r\n  & .resize {\r\n    align-self: stretch;\r\n    margin-inline-start: auto;\r\n    order: 4;\r\n  }\r\n}\r\n\r\n@keyframes column-sort {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  10% {\r\n    opacity: 1;\r\n  }\r\n  90% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h,\r\n  Listen\r\n} from \"@stencil/core\";\r\nimport {\r\n  TabularGridColumnDragEvent,\r\n  TabularGridColumnFreezeChangedEvent,\r\n  TabularGridColumnHiddenChangedEvent,\r\n  TabularGridColumnOrderChangedEvent,\r\n  TabularGridColumnSelectorClickedEvent,\r\n  TabularGridColumnSizeChangedEvent,\r\n  TabularGridColumnSortChangedEvent,\r\n  TabularGridColumnFreeze,\r\n  TabularGridColumnSortDirection\r\n} from \"./tabular-grid-column-types\";\r\nimport { tokenMap } from \"../../../common/utils\";\r\nimport { TABULAR_GRID_PARTS_DICTIONARY } from \"../../../common/reserved-names\";\r\n\r\n/**\r\n * The `ch-tabular-grid-column` component represents a grid column.\r\n */\r\n@Component({\r\n  tag: \"ch-tabular-grid-column\",\r\n  styleUrl: \"tabular-grid-column.scss\",\r\n  shadow: true\r\n})\r\nexport class ChTabularGridColumn {\r\n  private dragging = false;\r\n  private dragMouseMoveFn = this.dragMouseMoveHandler.bind(this);\r\n  private dragMouseMoveStartPositionX: number;\r\n\r\n  @Element() el: HTMLChTabularGridColumnElement;\r\n\r\n  /**\r\n   * A unique identifier for the column.\r\n   */\r\n  @Prop() readonly columnId: string;\r\n\r\n  /**\r\n   * One of \"plain\", \"rich\", or \"tree\", indicating the type of cell displayed in the column.\r\n   */\r\n  @Prop() readonly columnType: \"plain\" | \"rich\" | \"tree\" = \"plain\";\r\n\r\n  /**\r\n   * @deprecated Use \"columnImage\" or \"columnImageSet\" instead.\r\n   * A URL to an icon to display in the column header.\r\n   */\r\n  @Prop() readonly columnIconUrl: string;\r\n\r\n  /**\r\n   * A URL to an icon to display in the column header.\r\n   */\r\n  @Prop() readonly columnImage: string;\r\n\r\n  /**\r\n   * A URL to an icon to display in the column header.\r\n   */\r\n  @Prop() readonly columnImageSet: string;\r\n\r\n  /**\r\n   * The text to display in the column header and settings.\r\n   */\r\n  @Prop() readonly columnName: string;\r\n\r\n  /**\r\n   * Indicates whether the text in the column header is visible or not\r\n   */\r\n  @Prop() readonly columnNameHidden: boolean;\r\n\r\n  /**\r\n   * The text to display when the cursor is placed over the column header.\r\n   */\r\n  @Prop() readonly columnTooltip: string;\r\n\r\n  /**\r\n   * @deprecated Use \"columnTooltip\" and \"columnNameHidden\" instead.\r\n   * One of \"text\" or \"title\", indicating whether the `columnName` should be displayed as the column text or as tooltip of the column image.\r\n   */\r\n  @Prop() readonly columnNamePosition: \"text\" | \"title\" = \"text\";\r\n\r\n  /**\r\n   * A boolean value indicating whether the column cells are draggable to reorder the grid rows (only applicable for columnType=\"rich\").\r\n   */\r\n  @Prop() readonly richRowDrag: boolean;\r\n\r\n  /**\r\n   * A boolean indicating whether the column cells in the grid should have a checkbox selector (only applicable for columnType=\"rich\").\r\n   */\r\n  @Prop() readonly richRowSelector: boolean;\r\n\r\n  /**\r\n   * One of \"select\" or \"mark\", indicating the mode of rich row selector.\r\n   * \"select\" indicates that the row selector is bound to the row selection.\r\n   * \"mark\" allows to mark a row independently of the selection.\r\n   */\r\n  @Prop() readonly richRowSelectorMode: \"select\" | \"mark\" = \"select\";\r\n\r\n  /**\r\n   * Indicate the state of the rich row selector.\r\n   * \"\" indicates that all rows are unchecked.\r\n   * \"checked\" indicates that all rows are checked.\r\n   * \"indeterminate\" indicates that some rows are marked.\r\n   */\r\n  @Prop({ mutable: true }) richRowSelectorState:\r\n    | \"\"\r\n    | \"checked\"\r\n    | \"indeterminate\" = \"\";\r\n\r\n  /**\r\n   * A boolean indicating whether the column cells in the grid should have a set of action buttons (only applicable for columnType=\"rich\").\r\n   */\r\n  @Prop() readonly richRowActions: boolean;\r\n\r\n  /**\r\n   * A CSS class name to apply to the display observer element used to detect changes in the column visibility.\r\n   */\r\n  @Prop() readonly displayObserverClass: string;\r\n\r\n  /**\r\n   * One of \"left\" or \"right\", indicating whether the column should be \"frozen\" (i.e. remain visible when the user scrolls horizontally).\r\n   */\r\n  @Prop() readonly freeze?: TabularGridColumnFreeze;\r\n\r\n  @Watch(\"freeze\")\r\n  freezeHandler() {\r\n    this.columnFreezeChanged.emit({\r\n      columnId: this.columnId,\r\n      freeze: this.freeze\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be hidden.\r\n   * The user can display it from the grid settings.\r\n   */\r\n  @Prop({ reflect: true }) readonly hidden: boolean = false;\r\n\r\n  @Watch(\"hidden\")\r\n  hiddenHandler() {\r\n    this.columnHiddenChanged.emit({\r\n      columnId: this.columnId,\r\n      hidden: this.hidden\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be hideable (i.e. whether the user should be able to show/hide the column).\r\n   */\r\n  @Prop() readonly hideable: boolean = true;\r\n\r\n  /**\r\n   * A number indicating the order in which the column should appear.\r\n   */\r\n  @Prop({ reflect: true }) readonly order: number;\r\n\r\n  @Watch(\"order\")\r\n  orderHandler() {\r\n    this.columnOrderChanged.emit({\r\n      columnId: this.columnId,\r\n      order: this.order\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A boolean or string that controls the parts applied to the column.\r\n   * - When `true`, it automatically applies the part names \"column\" and the column's unique ID.\r\n   * - When a string is provided, it appends that string to the default part names \"column\" and the column's ID.\r\n   */\r\n  @Prop() readonly parts: boolean | string;\r\n\r\n  /**\r\n   * A number indicating the physical order of the column (i.e. its position in the DOM).\r\n   */\r\n  @Prop() readonly physicalOrder: number;\r\n\r\n  /**\r\n   * A string indicating the width of the column.\r\n   * Any value supported by the \"grid-template-columns\" CSS property is valid.\r\n   */\r\n  @Prop({ reflect: true }) readonly size: string;\r\n\r\n  @Watch(\"size\")\r\n  sizeHandler() {\r\n    this.columnSizeChanging.emit({\r\n      columnId: this.columnId,\r\n      size: this.size\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be resizable (i.e. whether the user should be able to drag its width).\r\n   */\r\n  @Prop() readonly resizable: boolean = true;\r\n\r\n  /**\r\n   * A boolean indicating whether the column is currently being resized.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) resizing: boolean;\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be sortable (i.e. whether the user should be able to click the column header to sort the data).\r\n   */\r\n  @Prop() readonly sortable: boolean = true;\r\n\r\n  /**\r\n   * A boolean indicating whether the user should be able to open a settings panel for the column.\r\n   */\r\n  @Prop() readonly settingable: boolean = true;\r\n\r\n  /**\r\n   * One of \"asc\" or \"desc\", indicating the current sort direction.\r\n   */\r\n  @Prop({ mutable: true, reflect: true })\r\n  sortDirection?: TabularGridColumnSortDirection;\r\n\r\n  @Watch(\"sortDirection\")\r\n  sortDirectionHandler() {\r\n    if (this.sortDirection) {\r\n      this.columnSortChanged.emit({\r\n        columnId: this.columnId,\r\n        sortDirection: this.sortDirection\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the settings panel for the column should be visible.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) showSettings = false;\r\n\r\n  /**\r\n   * Event emitted when the `hidden` property is changed.\r\n   */\r\n  @Event()\r\n  columnHiddenChanged: EventEmitter<TabularGridColumnHiddenChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `size` property is currently being changed (i.e. when the user is dragging to resize the column).\r\n   */\r\n  @Event() columnSizeChanging: EventEmitter<TabularGridColumnSizeChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `size` property has been changed (i.e. when the user finishes dragging to resize the column).\r\n   */\r\n  @Event() columnSizeChanged: EventEmitter<TabularGridColumnSizeChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `order` property is changed.\r\n   */\r\n  @Event() columnOrderChanged: EventEmitter<TabularGridColumnOrderChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `sortDirection` property is changed.\r\n   */\r\n  @Event() columnSortChanged: EventEmitter<TabularGridColumnSortChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `freeze` property is changed.\r\n   */\r\n  @Event()\r\n  columnFreezeChanged: EventEmitter<TabularGridColumnFreezeChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user is dragging the column header to move it.\r\n   */\r\n  @Event() columnDragStarted: EventEmitter<TabularGridColumnDragEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user is dragging the column header to move it.\r\n   */\r\n  @Event() columnDragging: EventEmitter<TabularGridColumnDragEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user stops dragging the column header to move it.\r\n   */\r\n  @Event() columnDragEnded: EventEmitter<TabularGridColumnDragEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user clicks the row selector checkbox (only applicable for `richRowSelector=\"true\"`.\r\n   */\r\n  @Event()\r\n  columnSelectorClicked: EventEmitter<TabularGridColumnSelectorClickedEvent>;\r\n\r\n  componentDidLoad() {\r\n    this.el.addEventListener(\"mousedown\", this.mousedownHandler.bind(this));\r\n  }\r\n\r\n  @Listen(\"click\", { passive: true })\r\n  clickHandler() {\r\n    if (!this.dragging) {\r\n      if (this.sortable) {\r\n        this.sortDirection = this.sortDirection === \"asc\" ? \"desc\" : \"asc\";\r\n      }\r\n    } else {\r\n      this.dragging = false;\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnResizeStarted\")\r\n  columnResizeStartedHandler() {\r\n    this.resizing = true;\r\n  }\r\n\r\n  @Listen(\"columnResizeFinished\")\r\n  columnResizeFinishedHandler() {\r\n    this.resizing = false;\r\n\r\n    this.columnSizeChanged.emit({\r\n      columnId: this.columnId,\r\n      size: this.size\r\n    });\r\n  }\r\n\r\n  private allowColumnReorder(): boolean {\r\n    return this.el.closest(\"ch-tabular-grid\").allowColumnReorder;\r\n  }\r\n\r\n  private mousedownHandler(eventInfo: MouseEvent) {\r\n    eventInfo.preventDefault();\r\n    eventInfo.stopPropagation();\r\n\r\n    if (this.allowColumnReorder()) {\r\n      this.dragMouseDownHandler(eventInfo);\r\n\r\n      document.addEventListener(\"mousemove\", this.dragMouseMoveFn, {\r\n        passive: true\r\n      });\r\n      document.addEventListener(\"mouseup\", this.dragMouseUpHandler.bind(this), {\r\n        once: true\r\n      });\r\n    }\r\n  }\r\n\r\n  private dragMouseDownHandler(eventInfo: MouseEvent) {\r\n    this.dragMouseMoveStartPositionX = eventInfo.pageX;\r\n    this.columnDragStarted.emit({ columnId: this.columnId });\r\n  }\r\n\r\n  private dragMouseMoveHandler(eventInfo: MouseEvent) {\r\n    if (\r\n      this.dragging ||\r\n      Math.abs(this.dragMouseMoveStartPositionX - eventInfo.pageX) > 5\r\n    ) {\r\n      this.dragging = true;\r\n\r\n      this.columnDragging.emit({\r\n        columnId: this.columnId,\r\n        positionX: eventInfo.pageX,\r\n        direction: eventInfo.movementX > 0 ? \"right\" : \"left\"\r\n      });\r\n    }\r\n  }\r\n\r\n  private dragMouseUpHandler() {\r\n    document.removeEventListener(\"mousemove\", this.dragMouseMoveFn);\r\n    this.columnDragEnded.emit({ columnId: this.columnId });\r\n  }\r\n\r\n  private settingsMouseDownHandler(eventInfo: MouseEvent) {\r\n    eventInfo.stopPropagation();\r\n  }\r\n\r\n  private settingsClickHandler = (eventInfo: MouseEvent) => {\r\n    eventInfo.stopPropagation();\r\n    this.showSettings = true;\r\n  };\r\n\r\n  private selectorClickHandler = (eventInfo: MouseEvent) => {\r\n    const target = eventInfo.target as HTMLInputElement;\r\n\r\n    this.richRowSelectorState = target.checked ? \"checked\" : \"\";\r\n    this.columnSelectorClicked.emit({\r\n      checked: target.checked\r\n    });\r\n\r\n    eventInfo.stopPropagation();\r\n  };\r\n\r\n  private selectorTouchEndHandler = (eventInfo: TouchEvent) => {\r\n    eventInfo.stopPropagation();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        part={\r\n          this.parts\r\n            ? tokenMap({\r\n                [TABULAR_GRID_PARTS_DICTIONARY.COLUMN]: true,\r\n                [this.columnId]: true,\r\n                [this.parts.toString()]: typeof this.parts === \"string\"\r\n              })\r\n            : null\r\n        }\r\n      >\r\n        <ul class=\"bar\" part=\"bar\">\r\n          {this.renderSelector()}\r\n          {this.renderName()}\r\n          {this.renderSort()}\r\n          {this.renderSettings()}\r\n          {this.renderResize()}\r\n        </ul>\r\n        <ch-tabular-grid-column-settings\r\n          column={this.el}\r\n          onMouseDown={this.settingsMouseDownHandler}\r\n          show={this.showSettings}\r\n          exportparts=\"\r\n            mask:settings-mask,\r\n            window:settings-window,\r\n            header:settings-header,\r\n            caption:settings-caption,\r\n            close:settings-close,\r\n            main:settings-main,\r\n            footer:settings-footer\r\n          \"\r\n        >\r\n          <slot name=\"settings\"></slot>\r\n        </ch-tabular-grid-column-settings>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  private renderSelector() {\r\n    return (\r\n      <li\r\n        class=\"selector\"\r\n        part=\"bar-selector\"\r\n        hidden={!(this.columnType === \"rich\" && this.richRowSelector)}\r\n      >\r\n        <label part=\"selector-label\">\r\n          <input\r\n            type=\"checkbox\"\r\n            part={[\"selector\", this.richRowSelectorState]\r\n              .filter(part => part !== \"\")\r\n              .join(\" \")}\r\n            onClick={this.selectorClickHandler}\r\n            onTouchEnd={this.selectorTouchEndHandler}\r\n            checked={this.richRowSelectorState === \"checked\"}\r\n            indeterminate={this.richRowSelectorState === \"indeterminate\"}\r\n          />\r\n        </label>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderName() {\r\n    return (\r\n      <li\r\n        class=\"name\"\r\n        part=\"bar-name\"\r\n        title={\r\n          this.columnTooltip ||\r\n          (this.columnNamePosition === \"title\" ? this.columnName : null)\r\n        }\r\n      >\r\n        {this.columnIconUrl || this.columnImage || this.columnImageSet ? (\r\n          <img\r\n            class=\"name-icon\"\r\n            part=\"bar-name-icon\"\r\n            src={this.columnImage || this.columnIconUrl}\r\n            srcSet={this.columnImageSet}\r\n          />\r\n        ) : (\r\n          <div class=\"name-icon\" part=\"bar-name-icon\"></div>\r\n        )}\r\n        <span\r\n          class=\"name-text\"\r\n          part=\"bar-name-text\"\r\n          hidden={this.columnNameHidden || this.columnNamePosition !== \"text\"}\r\n        >\r\n          {this.columnName}\r\n        </span>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderSort() {\r\n    return (\r\n      <li class=\"sort\" part=\"bar-sort\" hidden={!this.sortable}>\r\n        <div class=\"sort-asc\" part=\"bar-sort-ascending\"></div>\r\n        <div class=\"sort-desc\" part=\"bar-sort-descending\"></div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderSettings() {\r\n    return (\r\n      <li class=\"settings\" part=\"bar-settings\" hidden={!this.settingable}>\r\n        <button\r\n          class=\"button\"\r\n          part=\"bar-settings-button\"\r\n          onClick={this.settingsClickHandler}\r\n        ></button>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderResize() {\r\n    return (\r\n      <li class=\"resize\" part=\"bar-resize\" hidden={!this.resizable}>\r\n        <ch-tabular-grid-column-resize\r\n          column={this.el}\r\n          class=\"resize-split\"\r\n          part=\"bar-resize-split\"\r\n        ></ch-tabular-grid-column-resize>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","@layer ch-tabular-grid {\r\n  ch-tabular-grid-columnset {\r\n    display: contents;\r\n  }\r\n}\r\n\r\n@import \"../row/tabular-grid-row.scss\";\r\n@import \"../rowset/tabular-grid-rowset.scss\";\r\n@import \"../cell/tabular-grid-cell.scss\";\r\n","import { Component, Element, h, Host, Listen, Prop } from \"@stencil/core\";\r\nimport { TabularGridColumnSortChangedEvent } from \"../column/tabular-grid-column-types\";\r\nimport { TABULAR_GRID_PARTS_DICTIONARY } from \"../../../common/reserved-names\";\r\nimport { tokenMap } from \"../../../common/utils\";\r\n\r\n/**\r\n * The `ch-tabular-grid-columnset` component represents a group of columns.\r\n */\r\n@Component({\r\n  tag: \"ch-tabular-grid-columnset\",\r\n  styleUrl: \"tabular-grid-columnset.scss\",\r\n  shadow: false\r\n})\r\nexport class ChTabularGridColumnset {\r\n  @Element() el: HTMLChTabularGridColumnsetElement;\r\n\r\n  /**\r\n   * A boolean or string that controls the parts applied to the column.\r\n   * - When `true`, it automatically applies the part names \"column\" and the column's unique ID.\r\n   * - When a string is provided, it appends that string to the default part names \"column\" and the column's ID.\r\n   */\r\n  @Prop() readonly parts: boolean | string;\r\n\r\n  @Listen(\"columnSortChanged\")\r\n  columnSortChangedHandler(\r\n    eventInfo: CustomEvent<TabularGridColumnSortChangedEvent>\r\n  ) {\r\n    const columns: HTMLChTabularGridColumnElement[] = Array.from(\r\n      this.el.querySelectorAll(\"ch-tabular-grid-column\")\r\n    );\r\n\r\n    columns.forEach(column => {\r\n      if (column.columnId !== eventInfo.detail.columnId) {\r\n        column.sortDirection = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        part={\r\n          this.parts\r\n            ? tokenMap({\r\n                [TABULAR_GRID_PARTS_DICTIONARY.COLUMNSET]: true,\r\n                [this.parts.toString()]: typeof this.parts === \"string\"\r\n              })\r\n            : null\r\n        }\r\n      ></Host>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: flex;\r\n  grid-column-start: 1;\r\n  grid-column-end: -1;\r\n  margin-inline-start: calc(var(--indent) * (var(--level) - 1));\r\n}\r\n:host::part(selector-label) {\r\n  display: none;\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Listen,\r\n  Event,\r\n  EventEmitter,\r\n  h,\r\n  Host,\r\n  Prop\r\n} from \"@stencil/core\";\r\nimport { tokenMap } from \"../../../../common/utils\";\r\nimport { TABULAR_GRID_PARTS_DICTIONARY } from \"../../../../common/reserved-names\";\r\nimport HTMLChTabularGridRowsetElement from \"../tabular-grid-rowset\";\r\n\r\n/**\r\n * The `ch-tabular-grid-rowset-legend` component represents a caption for the `ch-tabular-grid-rowset` element.\r\n */\r\n@Component({\r\n  tag: \"ch-tabular-grid-rowset-legend\",\r\n  styleUrl: \"tabular-grid-rowset-legend.scss\",\r\n  shadow: true\r\n})\r\nexport class ChTabularGridRowsetLegend {\r\n  @Element() el: HTMLChTabularGridRowsetLegendElement;\r\n\r\n  /**\r\n   * A boolean or string that controls the parts applied to the legend.\r\n   * - When `true`, it automatically applies the part names \"column\" and the column's unique ID.\r\n   * - When a string is provided, it appends that string to the default part names \"column\" and the column's ID.\r\n   */\r\n  @Prop() readonly parts: boolean | string;\r\n\r\n  /**\r\n   * Event emitted when the legend is clicked.\r\n   */\r\n  @Event() rowsetLegendClicked: EventEmitter<CustomEvent>;\r\n\r\n  @Listen(\"click\", { passive: true })\r\n  clickHandler() {\r\n    this.rowsetLegendClicked.emit();\r\n  }\r\n\r\n  #getRowsetId = () => {\r\n    const rowset = this.el.parentElement as HTMLChTabularGridRowsetElement;\r\n    return rowset?.rowsetId;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        part={\r\n          this.parts\r\n            ? tokenMap({\r\n                [TABULAR_GRID_PARTS_DICTIONARY.ROWSET_LEGEND]: true,\r\n                [this.#getRowsetId()]: !!this.#getRowsetId(),\r\n                [this.parts.toString()]: typeof this.parts === \"string\"\r\n              })\r\n            : null\r\n        }\r\n      >\r\n        <div part=\"caret\"></div>\r\n        <label part=\"selector-label\">\r\n          <input type=\"checkbox\" part=\"selector\"></input>\r\n        </label>\r\n        <div part=\"icon\"></div>\r\n        <slot></slot>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}