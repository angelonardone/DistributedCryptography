{"version":3,"names":["radioGroupRenderCss","ChRadioGroupRenderStyle0","PARTS","checked","disabled","checkedValue","RADIO_ITEM_PARTS_DICTIONARY","CHECKED","UNCHECKED","concat","DISABLED","ChRadioGroupRender","exports","_a","_handleCheckedInputChange","set","this","value","event","stopPropagation","_this","change","emit","_itemRender","item","index","additionalParts","h","class","part","RADIO_ITEM","container","CONTAINER","id","caption","name","accessibleName","input","INPUT","type","onInput","__classPrivateFieldGet","call","option","OPTION","label","LABEL","htmlFor","class_1","prototype","handleValueChange","newValue","internals","setFormValue","connectedCallback","render","Host","key","role","direction","_b","model","map"],"sources":["src/components/radio-group/radio-group-render.scss?tag=ch-radio-group-render&encapsulation=shadow","src/components/radio-group/radio-group-render.tsx"],"sourcesContent":["@import \"../../common/_base\";\r\n\r\n@include box-sizing();\r\n\r\n$option-checked-background-color: transparent;\r\n$option-checked-border-color: currentColor;\r\n$option-checked-color: currentColor;\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-radio-group__radio-container-size:\r\n   * Specifies the size for the container of the `radio__input` and `radio__option` elements.\r\n   * @default min(1em, 20px)\r\n   */\r\n  --ch-radio-group__radio-container-size: min(1em, 20px);\r\n\r\n  /**\r\n   * @prop --ch-radio-group__radio-option-size:\r\n   * Specifies the size for the `radio__option` element.\r\n   * @default 50%\r\n   */\r\n  --ch-radio-group__radio-option-size: 50%;\r\n\r\n  // This property is necessary to ensure the focus is not delegated to the\r\n  // checked radio when clicking the background of the control, but not an item\r\n  pointer-events: none;\r\n}\r\n\r\n:host(.ch-radio-group--direction-horizontal) {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n:host(.ch-radio-group--direction-vertical) {\r\n  display: inline-grid;\r\n  grid-auto-rows: max-content;\r\n}\r\n\r\n.radio-item {\r\n  display: flex;\r\n  align-items: center;\r\n  align-self: stretch;\r\n\r\n  // Avoid zooming on double tap\r\n  touch-action: manipulation;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n  inline-size: var(--ch-radio-group__radio-container-size);\r\n  block-size: var(--ch-radio-group__radio-container-size);\r\n  border: 1px solid $option-checked-border-color;\r\n  border-radius: 50%;\r\n\r\n  &--checked {\r\n    background-color: $option-checked-background-color;\r\n  }\r\n}\r\n\r\n.input {\r\n  display: flex;\r\n  inline-size: 100%;\r\n  block-size: 100%;\r\n  opacity: 0;\r\n  margin: 0;\r\n  padding: 0;\r\n  cursor: pointer;\r\n\r\n  &--enabled {\r\n    pointer-events: all;\r\n  }\r\n}\r\n\r\n.option {\r\n  position: absolute;\r\n  inline-size: var(--ch-radio-group__radio-option-size);\r\n  block-size: var(--ch-radio-group__radio-option-size);\r\n  background-color: $option-checked-color;\r\n  border-radius: 50%;\r\n  pointer-events: none;\r\n\r\n  &--unchecked {\r\n    opacity: 0;\r\n    visibility: hidden;\r\n  }\r\n}\r\n\r\n.label {\r\n  cursor: pointer;\r\n\r\n  &--enabled {\r\n    pointer-events: all;\r\n  }\r\n}\r\n","import {\r\n  AttachInternals,\r\n  Component,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\nimport { RadioGroupItemModel, RadioGroupModel } from \"./types\";\r\nimport { RADIO_ITEM_PARTS_DICTIONARY } from \"../../common/reserved-names\";\r\n\r\nconst PARTS = (checked: boolean, disabled: boolean) => {\r\n  const checkedValue = checked\r\n    ? RADIO_ITEM_PARTS_DICTIONARY.CHECKED\r\n    : RADIO_ITEM_PARTS_DICTIONARY.UNCHECKED;\r\n\r\n  return disabled\r\n    ? `${RADIO_ITEM_PARTS_DICTIONARY.DISABLED} ${checkedValue}`\r\n    : checkedValue;\r\n};\r\n\r\n/**\r\n * The radio group control is used to render a short list of mutually exclusive options.\r\n *\r\n * It contains radio items to allow users to select one option from the list of options.\r\n *\r\n * @part radio__item - The radio item element.\r\n * @part radio__container - The container that serves as a wrapper for the `input` and the `option` parts.\r\n * @part radio__input - The invisible input element that implements the interactions for the component. This part must be kept \"invisible\".\r\n * @part radio__option - The actual \"input\" that is rendered above the `input` part. This part has `position: absolute` and `pointer-events: none`.\r\n * @part radio__label - The label that is rendered when the `caption` property is not empty.\r\n *\r\n * @part checked - Present in the `radio__item`, `radio__option`, `radio__label` and `radio__container` parts when the control is checked (`checked` === `true`).\r\n * @part disabled - Present in the `radio__item`, `radio__option`, `radio__label` and `radio__container` parts when the control is disabled (`disabled` === `true`).\r\n * @part unchecked - Present in the `radio__item`, `radio__option`, `radio__label` and `radio__container` parts when the control is not checked (`checked` !== `true`).\r\n */\r\n@Component({\r\n  formAssociated: true,\r\n  shadow: { delegatesFocus: true },\r\n  styleUrl: \"radio-group-render.scss\",\r\n  tag: \"ch-radio-group-render\"\r\n})\r\nexport class ChRadioGroupRender {\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  /**\r\n   * Specifies the direction of the items.\r\n   */\r\n  @Prop() readonly direction: \"horizontal\" | \"vertical\" = \"horizontal\";\r\n\r\n  /**\r\n   * This attribute lets you specify if the radio-group is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This property lets you define the items of the ch-radio-group-render control.\r\n   */\r\n  @Prop() readonly model?: RadioGroupModel;\r\n\r\n  /**\r\n   * The value of the control.\r\n   */\r\n  @Prop({ mutable: true }) value: string;\r\n  @Watch(\"value\")\r\n  handleValueChange(newValue: string) {\r\n    // Update form value\r\n    this.internals.setFormValue(newValue);\r\n  }\r\n\r\n  /**\r\n   * Fired when the selected item change. It contains the information about the\r\n   * new selected value.\r\n   */\r\n  @Event() change: EventEmitter<string>;\r\n\r\n  #handleCheckedInputChange = (value: string) => (event: InputEvent) => {\r\n    event.stopPropagation();\r\n    this.value = value;\r\n\r\n    this.change.emit(value);\r\n  };\r\n\r\n  #itemRender = (item: RadioGroupItemModel, index: number) => {\r\n    const checked = this.value === item.value;\r\n    const disabled = item.disabled || this.disabled;\r\n\r\n    const additionalParts = PARTS(checked, disabled);\r\n\r\n    return (\r\n      <div\r\n        class=\"radio-item\"\r\n        part={`${RADIO_ITEM_PARTS_DICTIONARY.RADIO_ITEM} ${additionalParts}`}\r\n      >\r\n        <div\r\n          class={{\r\n            container: true,\r\n            \"container--checked\": checked\r\n          }}\r\n          part={`${RADIO_ITEM_PARTS_DICTIONARY.CONTAINER} ${additionalParts}`}\r\n        >\r\n          <input\r\n            id={item.caption ? `radio-item-${index}` : null}\r\n            name=\"radio-group\"\r\n            aria-label={!item.caption ? item.accessibleName : null}\r\n            class={{ input: true, \"input--enabled\": !disabled }}\r\n            part={RADIO_ITEM_PARTS_DICTIONARY.INPUT}\r\n            type=\"radio\"\r\n            checked={checked}\r\n            disabled={disabled}\r\n            value={item.value}\r\n            onInput={this.#handleCheckedInputChange(item.value)}\r\n          />\r\n          <div\r\n            class={{\r\n              option: true,\r\n              \"option--unchecked\": !checked\r\n            }}\r\n            part={`${RADIO_ITEM_PARTS_DICTIONARY.OPTION} ${additionalParts}`}\r\n            aria-hidden=\"true\"\r\n          ></div>\r\n        </div>\r\n\r\n        {item.caption && (\r\n          <label\r\n            class={{ label: true, \"label--enabled\": !disabled }}\r\n            part={`${RADIO_ITEM_PARTS_DICTIONARY.LABEL} ${additionalParts}`}\r\n            htmlFor={`radio-item-${index}`}\r\n          >\r\n            {item.caption}\r\n          </label>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  connectedCallback() {\r\n    // Set form value\r\n    this.internals.setFormValue(this.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        role=\"radiogroup\"\r\n        class={`ch-radio-group--direction-${this.direction}`}\r\n      >\r\n        {this.model?.map(this.#itemRender)}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"0jBAAA,IAAMA,EAAsB,s5CAC5B,IAAAC,EAAeD,ECYf,IAAME,EAAQ,SAACC,EAAkBC,GAC/B,IAAMC,EAAeF,EACjBG,EAA4BC,QAC5BD,EAA4BE,UAEhC,OAAOJ,EACH,GAAAK,OAAGH,EAA4BI,SAAQ,KAAAD,OAAIJ,GAC3CA,CACN,E,IAuBaM,EAAkBC,EAAA,yBAAAC,EAAA,W,yBAoC7BC,EAAAC,IAAAC,MAA4B,SAACC,GAAkB,gBAACC,GAC9CA,EAAMC,kBACNC,EAAKH,MAAQA,EAEbG,EAAKC,OAAOC,KAAKL,E,CAJ4B,IAO/CM,EAAAR,IAAAC,MAAc,SAACQ,EAA2BC,GACxC,IAAMtB,EAAUiB,EAAKH,QAAUO,EAAKP,MACpC,IAAMb,EAAWoB,EAAKpB,UAAYgB,EAAKhB,SAEvC,IAAMsB,EAAkBxB,EAAMC,EAASC,GAEvC,OACEuB,EAAA,OACEC,MAAM,aACNC,KAAM,GAAApB,OAAGH,EAA4BwB,WAAU,KAAArB,OAAIiB,IAEnDC,EAAA,OACEC,MAAO,CACLG,UAAW,KACX,qBAAsB5B,GAExB0B,KAAM,GAAApB,OAAGH,EAA4B0B,UAAS,KAAAvB,OAAIiB,IAElDC,EAAA,SACEM,GAAIT,EAAKU,QAAU,cAAAzB,OAAcgB,GAAU,KAC3CU,KAAK,cAAa,cACLX,EAAKU,QAAUV,EAAKY,eAAiB,KAClDR,MAAO,CAAES,MAAO,KAAM,kBAAmBjC,GACzCyB,KAAMvB,EAA4BgC,MAClCC,KAAK,QACLpC,QAASA,EACTC,SAAUA,EACVa,MAAOO,EAAKP,MACZuB,QAASC,uBAAArB,EAAIN,EAAA,KAA0B4B,KAA9BtB,EAA+BI,EAAKP,SAE/CU,EAAA,OACEC,MAAO,CACLe,OAAQ,KACR,qBAAsBxC,GAExB0B,KAAM,GAAApB,OAAGH,EAA4BsC,OAAM,KAAAnC,OAAIiB,GAAiB,cACpD,UAIfF,EAAKU,SACJP,EAAA,SACEC,MAAO,CAAEiB,MAAO,KAAM,kBAAmBzC,GACzCyB,KAAM,GAAApB,OAAGH,EAA4BwC,MAAK,KAAArC,OAAIiB,GAC9CqB,QAAS,cAAAtC,OAAcgB,IAEtBD,EAAKU,S,4NAnFwC,a,cAOnB,M,0CAYrCc,EAAAC,UAAAC,kBAAA,SAAkBC,GAEhBnC,KAAKoC,UAAUC,aAAaF,E,EAqE9BH,EAAAC,UAAAK,kBAAA,WAEEtC,KAAKoC,UAAUC,aAAarC,KAAKC,M,EAGnC+B,EAAAC,UAAAM,OAAA,W,MACE,OACE5B,EAAC6B,EAAI,CAAAC,IAAA,2CACHC,KAAK,aACL9B,MAAO,6BAAAnB,OAA6BO,KAAK2C,aAExCC,EAAA5C,KAAK6C,SAAK,MAAAD,SAAA,SAAAA,EAAEE,IAAIrB,uBAAAzB,KAAIO,EAAA,M,8VA3GE,G"}