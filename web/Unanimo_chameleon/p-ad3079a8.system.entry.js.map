{"version":3,"names":["filterWithCase","stringToFilter","filter","matchCase","includes","toLowerCase","filterWithString","filterOptions","regularExpression","match","filterCaption","item","filterInfo","_b","caption","value","options","computeFilter","hideMatchesAndShowNonMatches","filterSubModel","displayedValues","aSubItemIsRendered","itemSubGroup","items","index","length","itemLeaf","itemSatisfiesFilter","satisfiesFilter","add","INDEX_SEPARATOR","getComboBoxElementIndex","parentIndex","insideAGroup","concat","getComboBoxItemUIModel","model","indexes","split","itemFirstLevel","Number","getComboBoxItemImageStyle","images","undefined","start","end","__assign","styles","_c","customComboBoxItemRender","parentDisabled","checkToDisplayValue","activeDescendantValue","itemImages","has","startImgSrc","endImgSrc","get","hasStartImg","hasEndImg","startImgClasses","_j","startImgType","classes","endImgClasses","_k","endImgType","isDisabled","disabled","itemGroup","isActiveDescendant","itemIndex","h","key","expandable","expanded","toString","role","class","part","tokenMap","COMBO_BOX_PARTS_DICTIONARY","GROUP","DISABLED","id","group__header","GROUP_HEADER","EXPANDABLE","EXPANDED","COLLAPSED","style","type","_d","GROUP_HEADER_CAPTION","_l","_e","_f","_m","group__content","GROUP_CONTENT","map","tabindex","_g","leaf","selected","_h","ITEM","NESTED","SELECTED","_o","nativeItemRender","selectedValue","label","findComboBoxLargestValue","largestValue","largestValueLength","forEach","subItems","mapValuesToItemInfo","valueToItemInfo","captionToItemInfo","clear","firstLevelIndex","firstLevelItemInfo","set","subItem","secondLevelIndex","secondLevelItemInfo","popoverWasClicked","event","composedPath","element","elementName","tagName","getComboBoxItemFromMouseEvent","stopPropagation","elementTarget","target","parentElement","activeDescendant","checkIfSecondLevelModelContainsActiveDescendant","secondIndex","secondLevelItem","comboBoxActiveDescendantIsRendered","firstIndex","firstLevelItem","SELECTED_VALUE_DOES_NOT_EXISTS","isValidIndex","array","findSelectedIndex","findNextSelectedIndex","currentIndex","increment","hasFilters","firstLevelItemItems","nextFirstLevelIndex","nestedLevel","computeComboBoxItemImage","itemUIModel","iconDirection","getImagePathCallback","img","updateDirectionInImageCustomVar","setComboBoxImagesForMap","computedImageModel","computedImage","getComboBoxImages","Map","comboBoxCss","ChComboBoxRenderStyle0","SELECTED_ITEM_SELECTOR","mobileDevice","isMobileDevice","DEFAULT_GET_IMAGE_PATH_CALLBACK","base","ChComboBoxRender","exports","_a","_accessibleNameFromExternalLabel","this","_largestValue","_lastConfirmedValue","_valueToItemInfo","_captionToItemInfo","_itemImages","_applyFilters","_queuedInputValueUpdate","_displayedValues","_selectNextIndex","currentSelectedIndex","preventDefault","nextSelectedIndex","_this","newSelectedValue","_keyEventsNoFiltersDictionary","ArrowUp","__classPrivateFieldGet","call","suggest","_isModelAlreadyFiltered","ArrowDown","Home","End","Enter","el","focus","Space","Tab","_keyEventsWithFiltersDictionary","_checkAndEmitValueChangeWithFilters","_inputRef","_selectRef","_findLargestValue","__classPrivateFieldSet","_getActualImagePathCallback","getControlRegisterProperty","_setComboBoxIcons","_scheduleFilterProcessing","_filterModel","suggestOptions","_updateFilters","modelIsAlreadyFiltered","Set","_getCurrentValueMapping","_checkAndEmitValueChangeWithNoFilter","clearTimeout","input","emit","_emitChangeEvent","strict","inputValueMatches","_handleSelectChange","_handleExpandedChangeWithKeyBoard","keyboardHandler","code","_handlePopoverClose","focusComposedPath","change","_handleInputFilterChange","suggestDebounce","setTimeout","_displayPopover","clickWasPerformedInALabel","detail","_handlePopoverClick","forceUpdate","_handleMouseOverItem","alreadyProcessed","_shouldRenderActiveItemIcon","renderActiveItemIconOnExpand","_setValueInForm","_syncActiveDescendant","internals","setFormValue","clientSideFilters","_nativeRender","accessibleName","onChange","ref","placeholder","class_1","prototype","handleExpandedChange","newExpandedValue","modelChanged","newModel","suggestChanged","suggestDebounceChanged","suggestOptionsChanged","valueChanged","newValue","connectedCallback","labels","getElementInternalsLabel","analyzeLabelExistence","componentWillRender","componentDidRender","selectedElement_1","shadowRoot","querySelector","requestAnimationFrame","render","filtersAreApplied","disableTextSelection","comboBoxIsInteractive","readonly","currentItemInInput","currentValueMapping","inputValue","Host","COMBO_BOX_HOST_PARTS","PLACEHOLDER","hostParts","onKeyDown","onClickCapture","autocomplete","readOnly","onInputCapture","actionById","actionElement","blockAlign","inlineAlign","popoverInlineAlign","closeOnClickOutside","show","popover","resizable","inlineSizeMatch","overflowBehavior","positionTry","onClick","onMouseOver","onPopoverClosed"],"sources":["src/components/combo-box/helpers.ts","src/components/combo-box/renders.tsx","src/components/combo-box/utils.ts","src/components/combo-box/navigation.ts","src/components/combo-box/item-images.ts","src/components/combo-box/combo-box.scss?tag=ch-combo-box-render&encapsulation=shadow","src/components/combo-box/combo-box.tsx"],"sourcesContent":["import {\r\n  ComboBoxSuggestInfo,\r\n  ComboBoxSuggestOptions,\r\n  ComboBoxItemGroup,\r\n  ComboBoxItemModel\r\n} from \"./types\";\r\n\r\nconst filterWithCase = (\r\n  stringToFilter: string,\r\n  filter: string,\r\n  matchCase?: boolean\r\n) =>\r\n  matchCase\r\n    ? stringToFilter.includes(filter)\r\n    : stringToFilter.toLowerCase().includes(filter.toLowerCase());\r\n\r\nconst filterWithString = (\r\n  stringToFilter: string,\r\n  filter: string,\r\n  filterOptions: ComboBoxSuggestOptions\r\n) =>\r\n  filterOptions?.regularExpression\r\n    ? stringToFilter.match(filter) !== null\r\n    : filterWithCase(stringToFilter, filter, filterOptions?.matchCase);\r\n\r\nconst filterCaption = (\r\n  item: ComboBoxItemModel,\r\n  filterInfo: ComboBoxSuggestInfo\r\n) =>\r\n  !filterInfo.filter ||\r\n  filterWithString(\r\n    item.caption ?? item.value,\r\n    filterInfo.filter,\r\n    filterInfo.options\r\n  );\r\n\r\nconst computeFilter = (\r\n  item: ComboBoxItemModel,\r\n  filterInfo: ComboBoxSuggestInfo\r\n): boolean =>\r\n  filterInfo.options?.hideMatchesAndShowNonMatches === true\r\n    ? !filterCaption(item, filterInfo)\r\n    : filterCaption(item, filterInfo);\r\n\r\nexport const filterSubModel = (\r\n  item: ComboBoxItemModel,\r\n  filterInfo: ComboBoxSuggestInfo,\r\n  displayedValues: Set<ComboBoxItemModel>\r\n): boolean => {\r\n  // Check if a subitem is rendered\r\n  let aSubItemIsRendered = false;\r\n  const itemSubGroup = (item as ComboBoxItemGroup).items;\r\n\r\n  if (itemSubGroup != null) {\r\n    for (let index = 0; index < itemSubGroup.length; index++) {\r\n      const itemLeaf = itemSubGroup[index];\r\n      const itemSatisfiesFilter = filterSubModel(\r\n        itemLeaf,\r\n        filterInfo,\r\n        displayedValues\r\n      );\r\n\r\n      aSubItemIsRendered ||= itemSatisfiesFilter;\r\n    }\r\n  }\r\n\r\n  // The current item is rendered if it satisfies the filter condition or a\r\n  // subitem exists that needs to be rendered\r\n  const satisfiesFilter = aSubItemIsRendered || computeFilter(item, filterInfo);\r\n\r\n  // Update selected and checkbox items\r\n  if (satisfiesFilter) {\r\n    displayedValues.add(item);\r\n  }\r\n\r\n  return satisfiesFilter;\r\n};\r\n","import { h } from \"@stencil/core\";\r\nimport {\r\n  ComboBoxItemGroup,\r\n  ComboBoxItemImagesModel,\r\n  ComboBoxItemModel,\r\n  ComboBoxModel\r\n} from \"./types\";\r\nimport { tokenMap } from \"../../common/utils\";\r\nimport { COMBO_BOX_PARTS_DICTIONARY } from \"../../common/reserved-names\";\r\n\r\nconst INDEX_SEPARATOR = \"__\";\r\n\r\nconst getComboBoxElementIndex = (\r\n  parentIndex: string,\r\n  index: number,\r\n  insideAGroup: boolean\r\n) => (insideAGroup ? `${parentIndex}${INDEX_SEPARATOR}${index}` : `${index}`);\r\n\r\nexport const getComboBoxItemUIModel = (\r\n  index: string,\r\n  model: ComboBoxModel\r\n): ComboBoxItemModel => {\r\n  const indexes = index.split(INDEX_SEPARATOR);\r\n  const itemFirstLevel = model[Number(indexes[0])];\r\n\r\n  if (\r\n    indexes.length === 2 &&\r\n    (itemFirstLevel as ComboBoxItemGroup).items != null\r\n  ) {\r\n    return (itemFirstLevel as ComboBoxItemGroup).items[Number(indexes[1])];\r\n  }\r\n  return itemFirstLevel;\r\n};\r\n\r\n// TODO: Add a unit test for these cases\r\nexport const getComboBoxItemImageStyle = (\r\n  images: ComboBoxItemImagesModel | undefined\r\n) => {\r\n  if (!images) {\r\n    return undefined;\r\n  }\r\n\r\n  if (images.start && images.end) {\r\n    return {\r\n      ...images.start.styles,\r\n      ...images.end.styles\r\n    };\r\n  }\r\n\r\n  return images.start?.styles ?? images.end.styles;\r\n};\r\n\r\nexport const customComboBoxItemRender =\r\n  (\r\n    insideAGroup: boolean,\r\n    parentDisabled: boolean,\r\n    checkToDisplayValue: boolean,\r\n    activeDescendantValue: ComboBoxItemModel | undefined,\r\n    displayedValues: Set<ComboBoxItemModel> | undefined,\r\n    itemImages: Map<string, ComboBoxItemImagesModel>,\r\n    parentIndex: string\r\n  ) =>\r\n  (item: ComboBoxItemModel, index: number) => {\r\n    if (\r\n      checkToDisplayValue &&\r\n      // !this.#isModelAlreadyFiltered() &&\r\n      !displayedValues.has(item)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const images: ComboBoxItemImagesModel | undefined =\r\n      !!item.startImgSrc || !!item.endImgSrc\r\n        ? itemImages.get(item.value)\r\n        : undefined;\r\n    const hasStartImg = !!images?.start;\r\n    const hasEndImg = !!images?.end;\r\n\r\n    const startImgClasses = hasStartImg\r\n      ? `img--start start-img-type--${item.startImgType ?? \"background\"} ${\r\n          images.start.classes\r\n        }`\r\n      : undefined;\r\n    const endImgClasses = hasEndImg\r\n      ? `img--end end-img-type--${item.endImgType ?? \"background\"} ${\r\n          images.end.classes\r\n        }`\r\n      : undefined;\r\n\r\n    // This variable inherits the disabled state from group parents. Useful\r\n    // to propagate the disabled state in the child buttons\r\n    const isDisabled = parentDisabled || item.disabled;\r\n    const itemGroup = item as ComboBoxItemGroup;\r\n    const isActiveDescendant = item.value === activeDescendantValue?.value;\r\n\r\n    const itemIndex = getComboBoxElementIndex(parentIndex, index, insideAGroup);\r\n\r\n    return itemGroup.items != null ? (\r\n      <div\r\n        key={`__group__${item.value}`}\r\n        // TODO: This should be placed in the button\r\n        aria-controls={itemGroup.expandable ? `${index}__content` : null}\r\n        aria-expanded={\r\n          itemGroup.expandable ? (!!itemGroup.expanded).toString() : null\r\n        }\r\n        aria-labelledby={index.toString()}\r\n        role=\"group\"\r\n        class=\"group\"\r\n        part={tokenMap({\r\n          [item.value]: true,\r\n          [COMBO_BOX_PARTS_DICTIONARY.GROUP]: true,\r\n          [COMBO_BOX_PARTS_DICTIONARY.DISABLED]: isDisabled\r\n        })}\r\n      >\r\n        {itemGroup.expandable ? (\r\n          <button\r\n            id={itemIndex}\r\n            class={{\r\n              // eslint-disable-next-line camelcase\r\n              group__header: true,\r\n              \"group--expandable\": true,\r\n              \"group--collapsed\": !itemGroup.expanded,\r\n              disabled: isDisabled\r\n            }}\r\n            part={tokenMap({\r\n              [item.value]: true,\r\n              [COMBO_BOX_PARTS_DICTIONARY.GROUP_HEADER]: true,\r\n              [COMBO_BOX_PARTS_DICTIONARY.EXPANDABLE]: true,\r\n              [COMBO_BOX_PARTS_DICTIONARY.DISABLED]: isDisabled,\r\n              [COMBO_BOX_PARTS_DICTIONARY.EXPANDED]: itemGroup.expanded,\r\n              [COMBO_BOX_PARTS_DICTIONARY.COLLAPSED]: !itemGroup.expanded\r\n            })}\r\n            style={getComboBoxItemImageStyle(images)}\r\n            disabled={isDisabled}\r\n            type=\"button\"\r\n          >\r\n            <span\r\n              class={{\r\n                \"group__header-caption\": true,\r\n                [startImgClasses]: hasStartImg,\r\n                [endImgClasses]: hasEndImg\r\n              }}\r\n              part={`${COMBO_BOX_PARTS_DICTIONARY.GROUP_HEADER_CAPTION} ${item.value}`}\r\n            >\r\n              {item.caption ?? item.value}\r\n            </span>\r\n          </button>\r\n        ) : (\r\n          <span\r\n            id={index.toString()}\r\n            class={{\r\n              // eslint-disable-next-line camelcase\r\n              group__header: true,\r\n              disabled: isDisabled,\r\n\r\n              [startImgClasses]: hasStartImg,\r\n              [endImgClasses]: hasEndImg\r\n            }}\r\n            part={tokenMap({\r\n              [item.value]: true,\r\n              [COMBO_BOX_PARTS_DICTIONARY.GROUP_HEADER]: true,\r\n              [COMBO_BOX_PARTS_DICTIONARY.DISABLED]: isDisabled\r\n            })}\r\n            style={getComboBoxItemImageStyle(images)}\r\n          >\r\n            {item.caption ?? item.value}\r\n          </span>\r\n        )}\r\n\r\n        <div\r\n          key={`__content__${item.value}`}\r\n          id={itemGroup.expandable ? `${index}__content` : null}\r\n          class={{\r\n            // eslint-disable-next-line camelcase\r\n            group__content: true,\r\n            \"group__content--collapsed\":\r\n              itemGroup.expandable && !itemGroup.expanded\r\n          }}\r\n          part={`${COMBO_BOX_PARTS_DICTIONARY.GROUP_CONTENT} ${item.value}`}\r\n        >\r\n          {(!itemGroup.expandable || itemGroup.expanded) &&\r\n            itemGroup.items.map(\r\n              customComboBoxItemRender(\r\n                true,\r\n                isDisabled,\r\n                checkToDisplayValue,\r\n                activeDescendantValue,\r\n                displayedValues,\r\n                itemImages,\r\n                itemIndex\r\n              )\r\n            )}\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <button\r\n        key={item.value}\r\n        id={itemIndex}\r\n        role=\"option\"\r\n        // TODO: This should be a string\r\n        aria-selected={isActiveDescendant}\r\n        tabindex=\"-1\"\r\n        class={{\r\n          leaf: true,\r\n          disabled: isDisabled,\r\n          selected: isActiveDescendant,\r\n\r\n          [startImgClasses]: hasStartImg,\r\n          [endImgClasses]: hasEndImg\r\n        }}\r\n        part={tokenMap({\r\n          [item.value]: true,\r\n          [COMBO_BOX_PARTS_DICTIONARY.ITEM]: true,\r\n          [COMBO_BOX_PARTS_DICTIONARY.NESTED]: insideAGroup,\r\n          [COMBO_BOX_PARTS_DICTIONARY.DISABLED]: isDisabled,\r\n          [COMBO_BOX_PARTS_DICTIONARY.SELECTED]: isActiveDescendant\r\n        })}\r\n        style={getComboBoxItemImageStyle(images)}\r\n        disabled={isDisabled}\r\n        type=\"button\"\r\n      >\r\n        {\r\n          // TODO: Add unit test for this case\r\n          item.caption ?? item.value\r\n        }\r\n      </button>\r\n    );\r\n  };\r\n\r\nexport const nativeItemRender = (\r\n  item: ComboBoxItemModel,\r\n  selectedValue: string\r\n) =>\r\n  (item as ComboBoxItemGroup).items != null ? (\r\n    <optgroup label={item.caption ?? item.value}>\r\n      {(item as ComboBoxItemGroup).items.map(item =>\r\n        nativeItemRender(item, selectedValue)\r\n      )}\r\n    </optgroup>\r\n  ) : (\r\n    <option\r\n      key={item.value}\r\n      value={item.value}\r\n      disabled={item.disabled}\r\n      selected={item.value === selectedValue}\r\n    >\r\n      {item.caption ?? item.value}\r\n    </option>\r\n  );\r\n","import { ChameleonControlsTagName } from \"../../common/types\";\r\nimport { getComboBoxItemUIModel } from \"./renders\";\r\nimport {\r\n  ComboBoxItemGroup,\r\n  ComboBoxItemModel,\r\n  ComboBoxItemModelExtended,\r\n  ComboBoxModel\r\n} from \"./types\";\r\n\r\nexport const findComboBoxLargestValue = (model: ComboBoxModel): string => {\r\n  let largestValue = \"\";\r\n  let largestValueLength = 0;\r\n\r\n  model.forEach((itemGroup: ComboBoxItemGroup) => {\r\n    const subItems = itemGroup.items;\r\n\r\n    if (itemGroup.caption.length > largestValueLength) {\r\n      largestValue = itemGroup.caption;\r\n      largestValueLength = itemGroup.caption.length;\r\n    }\r\n\r\n    if (subItems != null) {\r\n      subItems.forEach(leaf => {\r\n        if (leaf.caption.length > largestValueLength) {\r\n          largestValue = leaf.caption;\r\n          largestValueLength = leaf.caption.length;\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  return largestValue;\r\n};\r\n\r\nexport const mapValuesToItemInfo = (\r\n  model: ComboBoxModel,\r\n  valueToItemInfo: Map<string, ComboBoxItemModelExtended>,\r\n  captionToItemInfo: Map<string, ComboBoxItemModelExtended>\r\n) => {\r\n  valueToItemInfo.clear();\r\n  captionToItemInfo.clear();\r\n\r\n  if (model == null) {\r\n    return;\r\n  }\r\n\r\n  model.forEach((item: ComboBoxItemGroup, firstLevelIndex: number) => {\r\n    const firstLevelItemInfo: ComboBoxItemModelExtended = {\r\n      item: item,\r\n      index: {\r\n        type: \"first-level\",\r\n        firstLevelIndex: firstLevelIndex\r\n      }\r\n    };\r\n\r\n    // First level item\r\n    valueToItemInfo.set(item.value, firstLevelItemInfo);\r\n    if (item.caption) {\r\n      captionToItemInfo.set(item.caption, firstLevelItemInfo);\r\n    }\r\n\r\n    // Second level items\r\n    item.items?.forEach((subItem, secondLevelIndex) => {\r\n      const secondLevelItemInfo: ComboBoxItemModelExtended = {\r\n        item: subItem,\r\n        index: {\r\n          type: \"nested\",\r\n          firstLevelIndex: firstLevelIndex,\r\n          secondLevelIndex: secondLevelIndex\r\n        }\r\n      };\r\n\r\n      valueToItemInfo.set(subItem.value, secondLevelItemInfo);\r\n\r\n      if (subItem.caption) {\r\n        captionToItemInfo.set(subItem.caption, secondLevelItemInfo);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport const popoverWasClicked = (event: Event) => {\r\n  const composedPath = event.composedPath();\r\n\r\n  for (let index = 0; index < composedPath.length; index++) {\r\n    const element = composedPath[index] as HTMLElement;\r\n    const elementName = element.tagName?.toLowerCase();\r\n\r\n    if (elementName === (\"ch-popover\" satisfies ChameleonControlsTagName)) {\r\n      return true;\r\n    }\r\n    // The ch-popover tag does not exists in the path. There is no need to\r\n    // check the rest of the path\r\n    if (\r\n      elementName === (\"ch-combo-box-render\" satisfies ChameleonControlsTagName)\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const getComboBoxItemFromMouseEvent = (\r\n  event: MouseEvent,\r\n  model: ComboBoxModel\r\n): ComboBoxItemModel | undefined => {\r\n  event.stopPropagation();\r\n\r\n  let elementTarget = event.target as HTMLButtonElement;\r\n\r\n  // Expandable button case\r\n  if (elementTarget.tagName?.toLowerCase() === \"span\") {\r\n    elementTarget = elementTarget.parentElement as HTMLButtonElement;\r\n  }\r\n\r\n  if (elementTarget.tagName?.toLowerCase() !== \"button\") {\r\n    return undefined;\r\n  }\r\n  const itemIndex = elementTarget.id;\r\n  return getComboBoxItemUIModel(itemIndex, model);\r\n};\r\n\r\n// TODO: Add a unit test for this check\r\nconst isActiveDescendant = (\r\n  item: ComboBoxItemModel | undefined,\r\n  activeDescendant: ComboBoxItemModel\r\n) =>\r\n  item &&\r\n  (item.value === activeDescendant.value ||\r\n    (item.caption && item.caption === activeDescendant.caption));\r\n\r\nconst checkIfSecondLevelModelContainsActiveDescendant = (\r\n  activeDescendant: ComboBoxItemModel | undefined,\r\n  model: ComboBoxModel\r\n) => {\r\n  for (let secondIndex = 0; secondIndex < model.length; secondIndex++) {\r\n    const secondLevelItem = model[secondIndex];\r\n\r\n    if (isActiveDescendant(secondLevelItem, activeDescendant)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const comboBoxActiveDescendantIsRendered = (\r\n  activeDescendant: ComboBoxItemModel | undefined,\r\n  model: ComboBoxModel | undefined\r\n) => {\r\n  if (!activeDescendant || !model) {\r\n    return false;\r\n  }\r\n\r\n  for (let firstIndex = 0; firstIndex < model.length; firstIndex++) {\r\n    const firstLevelItem = model[firstIndex] as ComboBoxItemGroup;\r\n\r\n    if (isActiveDescendant(firstLevelItem, activeDescendant)) {\r\n      return true;\r\n    }\r\n    if (\r\n      firstLevelItem.items != null &&\r\n      checkIfSecondLevelModelContainsActiveDescendant(\r\n        activeDescendant,\r\n        firstLevelItem.items\r\n      )\r\n    ) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n","import {\r\n  ComboBoxItemGroup,\r\n  ComboBoxItemModel,\r\n  ComboBoxItemModelExtended,\r\n  ComboBoxModel,\r\n  ComboBoxSelectedIndex\r\n} from \"./types\";\r\n\r\nconst SELECTED_VALUE_DOES_NOT_EXISTS: ComboBoxSelectedIndex = {\r\n  type: \"not-exists\"\r\n} as const;\r\n\r\nconst isValidIndex = (array: any, index: number) =>\r\n  0 <= index && index < array.length;\r\n\r\nexport const findSelectedIndex = (\r\n  valueToItemInfo: Map<string, ComboBoxItemModelExtended>,\r\n  activeDescendant: ComboBoxItemModel | undefined\r\n): ComboBoxSelectedIndex => {\r\n  if (!activeDescendant) {\r\n    return SELECTED_VALUE_DOES_NOT_EXISTS;\r\n  }\r\n\r\n  return (\r\n    valueToItemInfo.get(activeDescendant.value)?.index ??\r\n    SELECTED_VALUE_DOES_NOT_EXISTS\r\n  );\r\n};\r\n\r\nexport const findNextSelectedIndex = (\r\n  model: ComboBoxModel,\r\n  currentIndex: ComboBoxSelectedIndex,\r\n  increment: 1 | -1,\r\n  hasFilters: boolean,\r\n  displayedValues: Set<ComboBoxItemModel>\r\n): ComboBoxSelectedIndex => {\r\n  if (currentIndex.type === \"not-exists\") {\r\n    return SELECTED_VALUE_DOES_NOT_EXISTS;\r\n  }\r\n  const firstLevelIndex = currentIndex.firstLevelIndex;\r\n\r\n  if (currentIndex.type === \"nested\") {\r\n    let secondLevelIndex = currentIndex.secondLevelIndex + increment; // Start from the first valid index\r\n    const firstLevelItemItems = (model[firstLevelIndex] as ComboBoxItemGroup)\r\n      .items;\r\n\r\n    // Search in the nested level skipping disabled and not rendered items\r\n    while (\r\n      isValidIndex(firstLevelItemItems, secondLevelIndex) &&\r\n      (firstLevelItemItems[secondLevelIndex].disabled ||\r\n        (hasFilters &&\r\n          !displayedValues.has(firstLevelItemItems[secondLevelIndex])))\r\n    ) {\r\n      secondLevelIndex += increment;\r\n    }\r\n\r\n    // If the index is not after the end of the array, the new selected value\r\n    // was found\r\n    if (isValidIndex(firstLevelItemItems, secondLevelIndex)) {\r\n      return {\r\n        type: \"nested\",\r\n        firstLevelIndex: firstLevelIndex,\r\n        secondLevelIndex: secondLevelIndex\r\n      };\r\n    }\r\n  }\r\n\r\n  // At this point, either all items in the nested level were disabled or the\r\n  // \"currentIndex\" was not nested. In any case, we must check the next item\r\n  // in the first level\r\n  let nextFirstLevelIndex = firstLevelIndex + increment;\r\n\r\n  // Search for the next first level item that is not disabled and is not filtered\r\n  while (\r\n    isValidIndex(model, nextFirstLevelIndex) &&\r\n    (model[nextFirstLevelIndex].disabled ||\r\n      (hasFilters && !displayedValues.has(model[nextFirstLevelIndex])))\r\n  ) {\r\n    nextFirstLevelIndex += increment;\r\n  }\r\n\r\n  // With this flag, we also say that we are at the end of the combo-box\r\n  // and there isn't any new \"next value\" to select\r\n  if (!isValidIndex(model, nextFirstLevelIndex)) {\r\n    return SELECTED_VALUE_DOES_NOT_EXISTS;\r\n  }\r\n\r\n  const nestedLevel = (model[nextFirstLevelIndex] as ComboBoxItemGroup).items;\r\n\r\n  if (nestedLevel != null) {\r\n    return findNextSelectedIndex(\r\n      model,\r\n      {\r\n        type: \"nested\",\r\n        firstLevelIndex: nextFirstLevelIndex,\r\n        secondLevelIndex: increment === 1 ? -1 : nestedLevel.length // The algorithm will sum 1 (or -1) to the start index\r\n      },\r\n      increment,\r\n      hasFilters,\r\n      displayedValues\r\n    );\r\n  }\r\n\r\n  return {\r\n    type: \"first-level\",\r\n    firstLevelIndex: nextFirstLevelIndex\r\n  };\r\n};\r\n","import {\r\n  GxImageMultiStateEnd,\r\n  GxImageMultiStateStart\r\n} from \"../../common/types\";\r\nimport { updateDirectionInImageCustomVar } from \"../../common/utils\";\r\nimport {\r\n  ComboBoxImagePathCallback,\r\n  ComboBoxItemGroup,\r\n  ComboBoxItemImagesModel,\r\n  ComboBoxItemModel,\r\n  ComboBoxModel\r\n} from \"./types\";\r\n\r\nexport const computeComboBoxItemImage = (\r\n  itemUIModel: ComboBoxItemModel,\r\n  iconDirection: \"start\" | \"end\",\r\n  getImagePathCallback: ComboBoxImagePathCallback\r\n) => {\r\n  const img = getImagePathCallback(itemUIModel, iconDirection);\r\n  return img\r\n    ? (updateDirectionInImageCustomVar(img, iconDirection) as\r\n        | GxImageMultiStateStart\r\n        | GxImageMultiStateEnd)\r\n    : undefined;\r\n};\r\n\r\nconst setComboBoxImagesForMap = (\r\n  model: ComboBoxModel | undefined,\r\n  getImagePathCallback: ComboBoxImagePathCallback | undefined,\r\n  itemImages: Map<string, ComboBoxItemImagesModel> | undefined\r\n) => {\r\n  for (let index = 0; index < model.length; index++) {\r\n    const itemUIModel = model[index] as ComboBoxItemGroup;\r\n    let computedImageModel: ComboBoxItemImagesModel | undefined;\r\n\r\n    // startImgSrc\r\n    if (itemUIModel.startImgSrc) {\r\n      const computedImage = computeComboBoxItemImage(\r\n        itemUIModel,\r\n        \"start\",\r\n        getImagePathCallback\r\n      ) as GxImageMultiStateStart;\r\n\r\n      computedImageModel = { start: computedImage };\r\n    }\r\n\r\n    // endImgSrc\r\n    if (itemUIModel.endImgSrc) {\r\n      const computedImage = computeComboBoxItemImage(\r\n        itemUIModel,\r\n        \"end\",\r\n        getImagePathCallback\r\n      ) as GxImageMultiStateEnd;\r\n\r\n      if (computedImageModel) {\r\n        computedImageModel.end = computedImage;\r\n      } else {\r\n        computedImageModel = { end: computedImage };\r\n      }\r\n    }\r\n\r\n    if (computedImageModel) {\r\n      itemImages.set(itemUIModel.value, computedImageModel);\r\n    }\r\n\r\n    // Recursive phase\r\n    if (itemUIModel.items != null) {\r\n      setComboBoxImagesForMap(\r\n        itemUIModel.items,\r\n        getImagePathCallback,\r\n        itemImages\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport const getComboBoxImages = (\r\n  model: ComboBoxModel | undefined,\r\n  getImagePathCallback: ComboBoxImagePathCallback | undefined\r\n): Map<string, ComboBoxItemImagesModel> | undefined => {\r\n  if (!model) {\r\n    return undefined;\r\n  }\r\n  const itemImages: Map<string, ComboBoxItemImagesModel> = new Map();\r\n  setComboBoxImagesForMap(model, getImagePathCallback, itemImages);\r\n\r\n  return itemImages;\r\n};\r\n","@import \"../../common/base\";\r\n@import \"../../common/icons\";\r\n\r\n@include input-reset();\r\n@include button-reset(); // Should be placed before the box-sizing reset\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-combo-box-group__expandable-button-size:\r\n   * Specifies the expandable button size in the group items.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-combo-box-group__expandable-button-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-combo-box-group__expandable-button-image-size:\r\n   * Specifies the image size of the expandable button size in the group items. \r\n   * @default 100%\r\n   */\r\n  --ch-combo-box-group__expandable-button-image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-combo-box-item__image-size:\r\n   * Specifies the box size that contains an image in the items. For example,\r\n   * the box for the startImgSrc and endImgSrc\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-combo-box-item__image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-combo-box-item__background-image-size:\r\n   * Specifies the image size of the items. For example, the image size for the\r\n   * startImgSrc and endImgSrc\r\n   * @default 100%\r\n   */\r\n  --ch-combo-box-item__background-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-combo-box__picker:\r\n   * Specifies the image of the combo-box's picker.\r\n   * @default url('data:image/svg+xml,<svg width=\"8\" height=\"12\" viewBox=\"0 0 8 12\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.16669 0.666626L7.66669 4.66663H0.666687L4.16669 0.666626ZM4.16669 11.3333L0.666687 7.33329H7.66669L4.16669 11.3333Z\"/></svg>')\r\n   */\r\n  --ch-combo-box__picker: url('data:image/svg+xml,<svg width=\"8\" height=\"12\" viewBox=\"0 0 8 12\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.16669 0.666626L7.66669 4.66663H0.666687L4.16669 0.666626ZM4.16669 11.3333L0.666687 7.33329H7.66669L4.16669 11.3333Z\"/></svg>');\r\n\r\n  /**\r\n   * @prop --ch-combo-box__picker-color:\r\n   * Specifies the color of the combo-box's picker.\r\n   * @default currentColor\r\n   */\r\n  --ch-combo-box__picker-color: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-combo-box__picker-size:\r\n   * Specifies the box size that contains the combo-box's picker.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-combo-box__picker-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-combo-box__picker-mask-size:\r\n   * Specifies the image size of the combo-box's picker.\r\n   * @default 100%\r\n   */\r\n  --ch-combo-box__picker-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-combo-box-item-gap:\r\n   * Specifies the spacing between the images, text and the expandable button\r\n   * on items.\r\n   * @default 0px\r\n   */\r\n  --ch-combo-box-item-gap: 0px;\r\n\r\n  /**\r\n   * @prop --ch-combo-box-separation:\r\n   * Specifies the separation between the combo-box and the displayed popover.\r\n   * @default 0px\r\n   */\r\n  --ch-combo-box-separation: 0px;\r\n\r\n  /**\r\n   * @prop --ch-combo-box-separation-x:\r\n   * Specifies the separation between the combo-box and the popover displayed\r\n   * on the x-axis.\r\n   * @default var(--ch-combo-box-separation)\r\n   */\r\n  --ch-combo-box-separation-x: var(--ch-combo-box-separation);\r\n\r\n  /**\r\n   * @prop --ch-combo-box-separation-y:\r\n   * Specifies the separation between the combo-box and the popover displayed\r\n   * on the y-axis.\r\n   * @default var(--ch-combo-box-separation)\r\n   */\r\n  --ch-combo-box-separation-y: var(--ch-combo-box-separation);\r\n\r\n  display: inline-grid;\r\n  grid-template-columns: 1fr max-content;\r\n  grid-template-rows: max-content 1fr;\r\n  align-items: center;\r\n\r\n  &::after {\r\n    grid-row: 1 / 3;\r\n    grid-column: 2;\r\n    inline-size: var(--ch-combo-box__picker-size);\r\n    block-size: var(--ch-combo-box__picker-size);\r\n    -webkit-mask: var(--ch-combo-box__picker) 50% 50% /\r\n      var(--ch-combo-box__picker-image-size)\r\n      var(--ch-combo-box__picker-image-size) no-repeat;\r\n    margin-inline-start: var(--ch-combo-box-item-gap);\r\n    background-color: var(--ch-combo-box__picker-color);\r\n    pointer-events: none;\r\n  }\r\n}\r\n\r\n:host(.ch-combo-box--normal) {\r\n  cursor: pointer;\r\n  // Remove text selection on double click\r\n  user-select: none;\r\n\r\n  &::after {\r\n    content: \"\";\r\n  }\r\n}\r\n\r\n:host(.ch-combo-box--suggest) {\r\n  --ch-combo-box__picker-size: 0px;\r\n  cursor: text;\r\n}\r\n\r\n:host(.ch-disabled) {\r\n  pointer-events: none;\r\n}\r\n\r\n.input-container {\r\n  grid-row: 2 / 3;\r\n\r\n  // Remove outline of the focus state.\r\n  outline: unset;\r\n}\r\n\r\n.invisible-text {\r\n  visibility: hidden;\r\n  pointer-events: none;\r\n  block-size: 0;\r\n\r\n  // TODO: Add a unit test to verify that the input does not overflows the\r\n  // combo-box when it has a reduced width (for example, 120px)\r\n  overflow: hidden;\r\n}\r\n\r\nselect {\r\n  all: unset;\r\n  display: grid;\r\n  overflow: hidden;\r\n  grid-row: 2 / 3;\r\n}\r\n\r\n.value {\r\n  display: inline-grid;\r\n  align-items: center;\r\n\r\n  // TODO: Add a unit test to verify that the input does not overflows the\r\n  // combo-box when it has a reduced width (for example, 120px)\r\n  inline-size: 100%;\r\n\r\n  &--readonly {\r\n    pointer-events: none;\r\n    text-overflow: ellipsis;\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//           Separation\r\n// - - - - - - - - - - - - - - - -\r\nch-popover {\r\n  --ch-popover-separation-x: var(--ch-combo-box-separation-x);\r\n  --ch-popover-separation-y: var(--ch-combo-box-separation-y);\r\n\r\n  // We must reset the cursor to avoid the inheriting \"cursor: pointer\" from\r\n  // the Host\r\n  cursor: auto;\r\n\r\n  // --ch-popover-min-inline-size: var(--ch-popover-action-width);\r\n\r\n  &:not(.hydrated) {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//         Leaf and Group\r\n// - - - - - - - - - - - - - - - -\r\n.leaf,\r\n.group__header,\r\n.group__header-caption,\r\n.input-container {\r\n  display: flex;\r\n  gap: var(--ch-combo-box-item-gap);\r\n  align-items: center;\r\n  flex: 1; // Necessary to properly align the end image in expandable groups\r\n}\r\n\r\n.group {\r\n  display: grid;\r\n  grid-template-rows: max-content 1fr;\r\n\r\n  &--expandable {\r\n    &::before {\r\n      content: \"\";\r\n      inline-size: var(--ch-combo-box-group__expandable-button-size);\r\n      block-size: var(--ch-combo-box-group__expandable-button-size);\r\n      background-color: currentColor;\r\n      -webkit-mask: $expandable-icon 50% 50% /\r\n        var(--ch-combo-box-group__expandable-button-image-size)\r\n        var(--ch-combo-box-group__expandable-button-image-size) no-repeat;\r\n    }\r\n  }\r\n\r\n  &--collapsed::before {\r\n    transform: rotate(-90deg); // TODO: Add RTL support\r\n  }\r\n\r\n  &__content {\r\n    display: grid;\r\n    grid-auto-rows: max-content;\r\n\r\n    &--collapsed {\r\n      display: none;\r\n    }\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//             Images\r\n// - - - - - - - - - - - - - - - -\r\n.img--start::before,\r\n.img--end::after {\r\n  content: \"\";\r\n  display: block;\r\n  inline-size: var(--ch-combo-box-item__image-size);\r\n  block-size: var(--ch-combo-box-item__image-size);\r\n  min-inline-size: var(--ch-combo-box-item__image-size);\r\n  pointer-events: none; // TODO: Add a unit test for this\r\n}\r\n\r\n.img--start {\r\n  --ch-combo-box-item-start-img: var(--ch-start-img--base);\r\n\r\n  // Leafs (role=\"option\") only supports selected and disabled state.\r\n  &.selected.start-img--selected {\r\n    --ch-combo-box-item-start-img: var(--ch-start-img--selected);\r\n  }\r\n\r\n  // Group header\r\n  .group__header:hover > &.start-img--hover {\r\n    --ch-combo-box-item-start-img: var(--ch-start-img--hover);\r\n  }\r\n\r\n  .group__header:active > &.start-img--active {\r\n    --ch-combo-box-item-start-img: var(--ch-start-img--active);\r\n  }\r\n\r\n  // Icon on the Host\r\n  :host(:focus) &.input-container.start-img--focus {\r\n    --ch-combo-box-item-start-img: var(--ch-start-img--focus);\r\n  }\r\n\r\n  :host(:not(.ch-disabled):hover) &.input-container.start-img--hover {\r\n    --ch-combo-box-item-start-img: var(--ch-start-img--hover);\r\n  }\r\n\r\n  // Disabled\r\n  &.disabled.start-img--disabled,\r\n  .disabled > &.start-img--disabled,\r\n  :host(.ch-disabled) &.start-img--disabled {\r\n    --ch-combo-box-item-start-img: var(--ch-start-img--disabled);\r\n  }\r\n}\r\n\r\n.img--end {\r\n  --ch-combo-box-item-end-img: var(--ch-end-img--base);\r\n\r\n  &::after {\r\n    margin-inline-start: auto;\r\n  }\r\n\r\n  // Leafs (role=\"option\") only supports selected and disabled state.\r\n  &.selected.end-img--selected {\r\n    --ch-combo-box-item-end-img: var(--ch-end-img--selected);\r\n  }\r\n\r\n  .group__header:hover > &.end-img--hover {\r\n    --ch-combo-box-item-end-img: var(--ch-end-img--hover);\r\n  }\r\n\r\n  .group__header:active > &.end-img--active {\r\n    --ch-combo-box-item-end-img: var(--ch-end-img--active);\r\n  }\r\n\r\n  &.disabled.end-img--disabled,\r\n  .disabled > &.end-img--disabled {\r\n    --ch-combo-box-item-end-img: var(--ch-end-img--disabled);\r\n  }\r\n}\r\n\r\n.start-img-type--background::before {\r\n  background: no-repeat center / var(--ch-combo-box-item__background-image-size)\r\n    var(--ch-combo-box-item-start-img);\r\n}\r\n\r\n.end-img-type--background::after {\r\n  background: no-repeat center / var(--ch-combo-box-item__background-image-size)\r\n    var(--ch-combo-box-item-end-img);\r\n}\r\n\r\n.start-img-type--mask::before {\r\n  -webkit-mask: no-repeat center /\r\n    var(--ch-combo-box-item__background-image-size)\r\n    var(--ch-combo-box-item-start-img);\r\n  background-color: currentColor;\r\n}\r\n\r\n.end-img-type--mask::after {\r\n  -webkit-mask: no-repeat center /\r\n    var(--ch-combo-box-item__background-image-size)\r\n    var(--ch-combo-box-item-end-img);\r\n  background-color: currentColor;\r\n}\r\n","import {\r\n  AttachInternals,\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n  forceUpdate,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  AccessibleNameComponent,\r\n  DisableableComponent\r\n} from \"../../common/interfaces\";\r\nimport {\r\n  ComboBoxSuggestOptions,\r\n  ComboBoxItemModel,\r\n  ComboBoxItemGroup,\r\n  ComboBoxSuggestInfo,\r\n  ComboBoxModel,\r\n  ComboBoxSelectedIndex,\r\n  ComboBoxItemModelExtended,\r\n  ComboBoxItemImagesModel,\r\n  ComboBoxImagePathCallback\r\n} from \"./types\";\r\nimport { focusComposedPath } from \"../common/helpers\";\r\nimport {\r\n  COMBO_BOX_HOST_PARTS,\r\n  COMBO_BOX_PARTS_DICTIONARY,\r\n  KEY_CODES\r\n} from \"../../common/reserved-names\";\r\nimport { isMobileDevice, tokenMap } from \"../../common/utils\";\r\nimport { ChPopoverAlign } from \"../popover/types\";\r\nimport { ChPopoverCustomEvent, GxImageMultiState } from \"../../components\";\r\nimport { filterSubModel } from \"./helpers\";\r\nimport {\r\n  comboBoxActiveDescendantIsRendered,\r\n  findComboBoxLargestValue,\r\n  getComboBoxItemFromMouseEvent,\r\n  mapValuesToItemInfo,\r\n  popoverWasClicked\r\n} from \"./utils\";\r\nimport { findNextSelectedIndex, findSelectedIndex } from \"./navigation\";\r\nimport { customComboBoxItemRender, nativeItemRender } from \"./renders\";\r\nimport { computeComboBoxItemImage, getComboBoxImages } from \"./item-images\";\r\nimport { getControlRegisterProperty } from \"../../common/registry-properties\";\r\nimport { GxImageMultiStateStart } from \"../../common/types\";\r\nimport {\r\n  analyzeLabelExistence,\r\n  getElementInternalsLabel\r\n} from \"../../common/analysis/accessibility\";\r\n\r\nconst SELECTED_ITEM_SELECTOR = `button[part*='${COMBO_BOX_PARTS_DICTIONARY.SELECTED}']`;\r\nconst mobileDevice = isMobileDevice();\r\n\r\nconst DEFAULT_GET_IMAGE_PATH_CALLBACK = (\r\n  itemUIModel: ComboBoxItemModel,\r\n  iconDirection: \"start\" | \"end\"\r\n): GxImageMultiState => ({\r\n  base:\r\n    iconDirection === \"start\" ? itemUIModel.startImgSrc : itemUIModel.endImgSrc\r\n});\r\n\r\n// Keys\r\ntype KeyDownNoFiltersEvents =\r\n  | typeof KEY_CODES.ARROW_UP\r\n  | typeof KEY_CODES.ARROW_DOWN\r\n  | typeof KEY_CODES.HOME\r\n  | typeof KEY_CODES.END\r\n  | typeof KEY_CODES.ENTER\r\n  | typeof KEY_CODES.SPACE\r\n  | typeof KEY_CODES.TAB;\r\n\r\ntype KeyDownWithFiltersEvents =\r\n  | typeof KEY_CODES.ARROW_UP\r\n  | typeof KEY_CODES.ARROW_DOWN\r\n  | typeof KEY_CODES.ENTER\r\n  | typeof KEY_CODES.TAB;\r\n\r\n/**\r\n * @status experimental\r\n *\r\n * The ch-combo-box-render is an input widget that has an associated popup. The\r\n * popup enables users to choose a value for the input from a collection.\r\n *  - Items are only rendered when the popup is displayed.\r\n *\r\n * @part ... - ...\r\n */\r\n@Component({\r\n  formAssociated: true,\r\n  shadow: { delegatesFocus: true },\r\n  styleUrl: \"combo-box.scss\",\r\n  tag: \"ch-combo-box-render\"\r\n})\r\nexport class ChComboBoxRender\r\n  implements AccessibleNameComponent, DisableableComponent\r\n{\r\n  #accessibleNameFromExternalLabel: string | undefined;\r\n\r\n  /**\r\n   * This variable is used to emulate the behavior of the native select. The\r\n   * native select decides its min size based on the size of the largest option.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #largestValue: string;\r\n\r\n  /**\r\n   * Last value that was set correctly in the control. Useful to revert the\r\n   * value when applying strict filters.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #lastConfirmedValue: string;\r\n\r\n  #valueToItemInfo: Map<string, ComboBoxItemModelExtended> = new Map();\r\n  #captionToItemInfo: Map<string, ComboBoxItemModelExtended> = new Map();\r\n  #itemImages: Map<string, ComboBoxItemImagesModel> | undefined;\r\n\r\n  // Filters info\r\n  #applyFilters = false;\r\n  #queuedInputValueUpdate: NodeJS.Timeout;\r\n\r\n  /**\r\n   * Collection of displayed values. If a filter is applied and the value\r\n   * belongs to this Set, the item is displayed.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #displayedValues: Set<ComboBoxItemModel> | undefined; // Don't allocate memory until needed\r\n\r\n  #selectNextIndex = (\r\n    event: KeyboardEvent,\r\n    currentSelectedIndex: ComboBoxSelectedIndex,\r\n    increment: 1 | -1,\r\n    hasFilters: boolean,\r\n    displayedValues: Set<ComboBoxItemModel>\r\n  ) => {\r\n    event.preventDefault(); // Stop ArrowDown key from scrolling\r\n\r\n    const nextSelectedIndex =\r\n      currentSelectedIndex.type === \"not-exists\"\r\n        ? findNextSelectedIndex(\r\n            this.model,\r\n            {\r\n              type: \"first-level\",\r\n              firstLevelIndex: increment === 1 ? -1 : this.model.length\r\n            },\r\n            increment,\r\n            hasFilters,\r\n            displayedValues\r\n          )\r\n        : findNextSelectedIndex(\r\n            this.model,\r\n            currentSelectedIndex,\r\n            increment,\r\n            hasFilters,\r\n            displayedValues\r\n          );\r\n\r\n    if (nextSelectedIndex.type === \"not-exists\") {\r\n      return;\r\n    }\r\n\r\n    // The new selected value is either in the first level or in the group\r\n    const newSelectedValue =\r\n      nextSelectedIndex.type === \"first-level\"\r\n        ? this.model[nextSelectedIndex.firstLevelIndex]\r\n        : (this.model[nextSelectedIndex.firstLevelIndex] as ComboBoxItemGroup)\r\n            .items[nextSelectedIndex.secondLevelIndex];\r\n\r\n    if (this.activeDescendant !== newSelectedValue) {\r\n      this.activeDescendant = newSelectedValue;\r\n    }\r\n  };\r\n\r\n  // Keyboard events when the control has no filters\r\n  #keyEventsNoFiltersDictionary: {\r\n    [key in KeyDownNoFiltersEvents]: (event: KeyboardEvent) => void;\r\n  } = {\r\n    ArrowUp: (event: KeyboardEvent) =>\r\n      this.#selectNextIndex(\r\n        event,\r\n        findSelectedIndex(this.#valueToItemInfo, this.activeDescendant),\r\n        -1,\r\n        this.suggest && !this.#isModelAlreadyFiltered(),\r\n        this.#displayedValues\r\n      ),\r\n\r\n    ArrowDown: (event: KeyboardEvent) =>\r\n      this.#selectNextIndex(\r\n        event,\r\n        findSelectedIndex(this.#valueToItemInfo, this.activeDescendant),\r\n        1,\r\n        this.suggest && !this.#isModelAlreadyFiltered(),\r\n        this.#displayedValues\r\n      ),\r\n\r\n    Home: (event: KeyboardEvent) =>\r\n      this.#selectNextIndex(\r\n        event,\r\n        {\r\n          type: \"first-level\",\r\n          firstLevelIndex: -1\r\n        }, // The algorithm will sum 1 to the start index\r\n        1,\r\n        this.suggest && !this.#isModelAlreadyFiltered(),\r\n        this.#displayedValues\r\n      ),\r\n\r\n    End: (event: KeyboardEvent) =>\r\n      this.#selectNextIndex(\r\n        event,\r\n        {\r\n          type: \"first-level\",\r\n          firstLevelIndex: this.model.length\r\n        }, // The algorithm will sum -1 to the start index\r\n        -1,\r\n        this.suggest && !this.#isModelAlreadyFiltered(),\r\n        this.#displayedValues\r\n      ),\r\n\r\n    Enter: () => {\r\n      // The focus must return to the Host when closing the popover\r\n      if (this.expanded) {\r\n        this.el.focus();\r\n      }\r\n\r\n      this.expanded = !this.expanded;\r\n    },\r\n\r\n    Space: event => {\r\n      event.preventDefault(); // Stop space key from scrolling\r\n\r\n      // Only expands the ComboBox\r\n      this.expanded ||= true;\r\n    },\r\n\r\n    Tab: event => {\r\n      // The focus must return to the Host when tabbing with the popover\r\n      // expanded\r\n      if (this.expanded) {\r\n        event.preventDefault();\r\n\r\n        this.el.focus();\r\n        this.expanded = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Keyboard events when the control has filters\r\n  #keyEventsWithFiltersDictionary: {\r\n    [key in KeyDownWithFiltersEvents]: (event: KeyboardEvent) => void;\r\n  } = {\r\n    ArrowUp: (event: KeyboardEvent) => {\r\n      if (this.expanded) {\r\n        this.#keyEventsNoFiltersDictionary.ArrowUp(event);\r\n      } else {\r\n        this.expanded = true;\r\n      }\r\n    },\r\n\r\n    ArrowDown: (event: KeyboardEvent) => {\r\n      if (this.expanded) {\r\n        this.#keyEventsNoFiltersDictionary.ArrowDown(event);\r\n      } else {\r\n        this.expanded = true;\r\n      }\r\n    },\r\n\r\n    Enter: (event: KeyboardEvent) =>\r\n      this.#checkAndEmitValueChangeWithFilters(event),\r\n\r\n    Tab: (event: KeyboardEvent) =>\r\n      this.#checkAndEmitValueChangeWithFilters(event)\r\n  };\r\n\r\n  // Refs\r\n  // #maskRef: HTMLDivElement;\r\n  #inputRef: HTMLInputElement;\r\n  #selectRef: HTMLSelectElement | undefined;\r\n\r\n  /**\r\n   * When the combo-box is expanded, the visually selected value must change,\r\n   * but in the interface the `value` property must only change when the\r\n   * popover is closed.\r\n   * This state help us to render the visually selected value, without updating\r\n   * the `value` property in the interface.\r\n   */\r\n  @State() activeDescendant: ComboBoxItemModel | undefined;\r\n\r\n  @State() expanded = false;\r\n  @Watch(\"expanded\")\r\n  handleExpandedChange(newExpandedValue: boolean) {\r\n    if (newExpandedValue && !mobileDevice) {\r\n      this.#setComboBoxIcons();\r\n\r\n      // Sync the active descendant when expanding the combo-box\r\n      this.#syncActiveDescendant();\r\n\r\n      // TODO: Add a unit test for this case\r\n      // When the control is expanded and has filters applied, we should\r\n      // refresh the rendered items without any debounce\r\n      if (this.suggest) {\r\n        this.#scheduleFilterProcessing();\r\n      }\r\n    }\r\n    // Free the memory, since the combo-box does not won't render any images\r\n    else {\r\n      this.#itemImages = undefined;\r\n    }\r\n  }\r\n\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  @Element() el: HTMLChComboBoxRenderElement;\r\n\r\n  /**\r\n   * Specifies a short string, typically 1 to 3 words, that authors associate\r\n   * with an element to provide users of assistive technologies with a label\r\n   * for the element.\r\n   */\r\n  @Prop() readonly accessibleName?: string;\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * imgSrc needs to be resolved.\r\n   */\r\n  @Prop() readonly getImagePathCallback?: ComboBoxImagePathCallback;\r\n\r\n  /**\r\n   * Specifies a set of parts to use in the Host element (`ch-combo-box-render`).\r\n   */\r\n  @Prop() readonly hostParts?: string;\r\n\r\n  /**\r\n   * Specifies the items of the control\r\n   */\r\n  @Prop() readonly model: ComboBoxModel = [];\r\n  @Watch(\"model\")\r\n  modelChanged(newModel: ComboBoxModel) {\r\n    this.#findLargestValue(this.model);\r\n    mapValuesToItemInfo(\r\n      newModel,\r\n      this.#valueToItemInfo,\r\n      this.#captionToItemInfo\r\n    );\r\n\r\n    // TODO: Add a unit test for this\r\n    // The model can change when the combo-box is expanded by having server\r\n    // filters. In this case, we need to re-compute the icons\r\n    if (this.expanded) {\r\n      this.#setComboBoxIcons();\r\n    }\r\n\r\n    // this.#checkIfCurrentSelectedValueIsNoLongerValid();\r\n\r\n    // This must be the last operation, since it needs to wait for the UI Model\r\n    // Map to be updated (#valueToItemInfo)\r\n    this.#setValueInForm(this.value);\r\n  }\r\n\r\n  /**\r\n   * This attribute indicates that multiple options can be selected in the list.\r\n   * If it is not specified, then only one option can be selected at a time.\r\n   * When multiple is specified, the control will show a scrolling list box\r\n   * instead of a single line dropdown.\r\n   */\r\n  @Prop() readonly multiple: boolean = false;\r\n\r\n  /**\r\n   * This property specifies the `name` of the control when used in a form.\r\n   */\r\n  @Prop({ reflect: true }) readonly name?: string;\r\n\r\n  /**\r\n   * A hint to the user of what can be entered in the control. Same as\r\n   * [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly placeholder: string;\r\n\r\n  /**\r\n   * Specifies the inline alignment of the popover.\r\n   */\r\n  @Prop() readonly popoverInlineAlign: ChPopoverAlign = \"inside-start\";\r\n\r\n  /**\r\n   * This attribute indicates that the user cannot modify the value of the control.\r\n   * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly readonly: boolean = false;\r\n\r\n  /**\r\n   * Specifies whether the control can be resized. If `true` the control can be\r\n   * resized at runtime by dragging the edges or corners.\r\n   */\r\n  @Prop() readonly resizable: boolean = false;\r\n\r\n  /**\r\n   * This property lets you specify if the control behaves like a suggest.\r\n   * If `true` the combo-box value will be editable an displayed items will be\r\n   * filtered according to the input's value.\r\n   */\r\n  @Prop() readonly suggest: boolean = false;\r\n  @Watch(\"suggest\")\r\n  suggestChanged() {\r\n    this.#scheduleFilterProcessing();\r\n  }\r\n\r\n  /**\r\n   * This property lets you determine the debounce time (in ms) that the\r\n   * control waits until it processes the changes to the filter property.\r\n   * Consecutive changes to the `value` property between this range, reset the\r\n   * timeout to process the value.\r\n   * Only works if `suggest === true`.\r\n   */\r\n  @Prop() readonly suggestDebounce: number = 250;\r\n  @Watch(\"suggestDebounce\")\r\n  suggestDebounceChanged() {\r\n    if (this.suggest) {\r\n      this.#scheduleFilterProcessing();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This property lets you determine the options that will be applied to the\r\n   * suggest.\r\n   */\r\n  @Prop() readonly suggestOptions: ComboBoxSuggestOptions = {};\r\n  @Watch(\"suggestOptions\")\r\n  suggestOptionsChanged() {\r\n    this.#scheduleFilterProcessing();\r\n  }\r\n\r\n  /**\r\n   * Specifies the value (selected item) of the control.\r\n   */\r\n  @Prop({ mutable: true }) value?: string;\r\n  @Watch(\"value\")\r\n  valueChanged(newValue: string) {\r\n    this.#setValueInForm(newValue);\r\n\r\n    if (this.suggest) {\r\n      this.#scheduleFilterProcessing();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The `input` event is emitted when a change to the element's value is\r\n   * committed by the user.\r\n   *\r\n   * If `suggest = true`, this event is debounced by the `suggestDebounce` value.\r\n   */\r\n  @Event() input: EventEmitter<string>;\r\n\r\n  /**\r\n   * The `change` event is emitted when a change to the element's value is\r\n   * committed by the user.\r\n   *  - In normal mode (suggest = false), it is emitted after each input event.\r\n   *\r\n   *  - In suggest mode (suggest = true), it is emitted after the popover is closed\r\n   * and a new value is committed by the user.\r\n   *\r\n   * This event is NOT debounced by the `suggestDebounce` value.\r\n   */\r\n  @Event() change: EventEmitter<string>;\r\n\r\n  #findLargestValue = (model: ComboBoxModel) => {\r\n    this.#largestValue = findComboBoxLargestValue(model);\r\n  };\r\n\r\n  #getActualImagePathCallback = () =>\r\n    this.getImagePathCallback ??\r\n    getControlRegisterProperty(\"getImagePathCallback\", \"ch-combo-box-render\") ??\r\n    DEFAULT_GET_IMAGE_PATH_CALLBACK;\r\n\r\n  #setComboBoxIcons = () => {\r\n    this.#itemImages = getComboBoxImages(\r\n      this.model,\r\n      this.#getActualImagePathCallback()\r\n    );\r\n  };\r\n\r\n  #scheduleFilterProcessing = () => {\r\n    this.#applyFilters = true;\r\n  };\r\n\r\n  #filterModel = () => {\r\n    // New filter value\r\n    this.#displayedValues.clear();\r\n\r\n    const filterOptions: ComboBoxSuggestInfo = {\r\n      filter: this.value,\r\n      options: this.suggestOptions\r\n    };\r\n\r\n    for (let index = 0; index < this.model.length; index++) {\r\n      const item = this.model[index];\r\n      filterSubModel(item, filterOptions, this.#displayedValues);\r\n    }\r\n\r\n    // Remove the active descendant if it is no longer rendered\r\n    if (!this.#displayedValues.has(this.activeDescendant)) {\r\n      this.activeDescendant = undefined;\r\n    }\r\n  };\r\n\r\n  #updateFilters = () => {\r\n    if (!this.suggest) {\r\n      this.#displayedValues = undefined;\r\n      return;\r\n    }\r\n\r\n    const modelIsAlreadyFiltered = this.#isModelAlreadyFiltered();\r\n\r\n    // Check if the model already contains the filtered items\r\n    if (!modelIsAlreadyFiltered) {\r\n      this.#displayedValues ??= new Set();\r\n      this.#filterModel();\r\n    }\r\n  };\r\n\r\n  #getCurrentValueMapping = (): ComboBoxItemModelExtended | undefined =>\r\n    this.#captionToItemInfo.get(this.value) ??\r\n    this.#valueToItemInfo.get(this.value);\r\n\r\n  #checkAndEmitValueChangeWithNoFilter = () => {\r\n    const activeDescendant = this.activeDescendant;\r\n\r\n    // TODO: Should we debounce this event?\r\n    if (activeDescendant?.value !== this.value) {\r\n      // Clear last debounce\r\n      clearTimeout(this.#queuedInputValueUpdate);\r\n\r\n      this.value = this.suggest\r\n        ? activeDescendant.caption ?? activeDescendant.value\r\n        : activeDescendant.value;\r\n\r\n      // Emit event\r\n      this.input.emit(this.value);\r\n\r\n      // Emit change event\r\n      // TODO: Add a unit test for this\r\n      this.#emitChangeEvent();\r\n    }\r\n  };\r\n\r\n  #checkAndEmitValueChangeWithFilters = (event: KeyboardEvent) => {\r\n    if (!this.expanded) {\r\n      return;\r\n    }\r\n    this.expanded = false;\r\n\r\n    // The focus must return to the Host when tabbing with the popover\r\n    // expanded\r\n    this.el.focus();\r\n    event.preventDefault();\r\n\r\n    // \"Traditional selection\". A value was selected pressing the enter key\r\n    if (this.activeDescendant) {\r\n      this.#checkAndEmitValueChangeWithNoFilter();\r\n      return;\r\n    }\r\n\r\n    // No item was selected and the suggest is not strict\r\n    if (!this.suggestOptions?.strict) {\r\n      // TODO: Add a unit test: filters, no strict, value confirmation with\r\n      // Enter or Tab. Expected: The value update should not be debounced\r\n      // TODO: Avoid emitting duplicated input events if the value did not\r\n      // changed\r\n\r\n      // Clear last debounce and update the value right away, because the value\r\n      // selection was confirmed\r\n      clearTimeout(this.#queuedInputValueUpdate);\r\n      this.value = this.#inputRef.value;\r\n      this.input.emit(this.value);\r\n\r\n      // TODO: Add a unit test for this\r\n      this.#emitChangeEvent();\r\n      return;\r\n    }\r\n\r\n    // Strict selection\r\n    const inputValueMatches = this.#getCurrentValueMapping();\r\n\r\n    if (inputValueMatches) {\r\n      // TODO: Do we have to emit the change event?\r\n\r\n      // TODO: Add a unit test for this\r\n      this.#emitChangeEvent();\r\n    }\r\n    // Revert change because the input value does not match any item value\r\n    else {\r\n      // Clear last debounce\r\n      clearTimeout(this.#queuedInputValueUpdate);\r\n\r\n      this.value = this.#lastConfirmedValue;\r\n\r\n      // Emit filter change event to recover the previous state.\r\n      // TODO: Should we debounce this event?\r\n      this.input.emit(this.value);\r\n\r\n      // TODO: Add a unit test for this\r\n      this.#emitChangeEvent();\r\n    }\r\n  };\r\n\r\n  #handleSelectChange = (event: Event) => {\r\n    event.preventDefault();\r\n\r\n    this.value = this.#selectRef.value;\r\n    this.activeDescendant = this.#valueToItemInfo.get(\r\n      this.activeDescendant.value\r\n    )?.item;\r\n\r\n    // Emit event\r\n    this.input.emit(this.value);\r\n\r\n    // TODO: Prevent change event in the native select\r\n  };\r\n\r\n  #handleExpandedChangeWithKeyBoard = (event: KeyboardEvent) => {\r\n    if (!this.suggest) {\r\n      const keyboardHandler = this.#keyEventsNoFiltersDictionary[event.code];\r\n\r\n      if (!keyboardHandler) {\r\n        return;\r\n      }\r\n      keyboardHandler(event);\r\n\r\n      if (!this.expanded) {\r\n        this.#checkAndEmitValueChangeWithNoFilter();\r\n      }\r\n    }\r\n    // Keyboard implementation for filters\r\n    else {\r\n      const keyboardHandler = this.#keyEventsWithFiltersDictionary[event.code];\r\n\r\n      if (keyboardHandler) {\r\n        keyboardHandler(event);\r\n      }\r\n    }\r\n  };\r\n\r\n  #handlePopoverClose = (event: ChPopoverCustomEvent<any>) => {\r\n    event.stopPropagation();\r\n\r\n    // The focus must return to the Host when the popover is closed using the\r\n    // Escape key\r\n    this.expanded = false;\r\n\r\n    // TODO: When destroyItemsOnClose === true, StencilJS would throw 'The\r\n    // \"popoverClosed\" event was emitted, but the dispatcher node is no longer\r\n    // connected to the dom.', because the popoverOnClose event is emitted twice\r\n    // in the ch-popover\r\n\r\n    // Return the focus to the control if the popover was closed with the\r\n    // escape key or by clicking again the combo-box\r\n    if (focusComposedPath().includes(this.el)) {\r\n      this.el.focus();\r\n    }\r\n\r\n    if (this.suggest) {\r\n      // Strict selection. Closing the popover should never confirm the current\r\n      // value. In other words, it cancels the selection\r\n      if (this.suggestOptions.strict) {\r\n        // Clear last debounce\r\n        clearTimeout(this.#queuedInputValueUpdate);\r\n\r\n        // Revert change because the input value does not match any item value\r\n        this.value = this.#lastConfirmedValue;\r\n\r\n        // Emit filter change event to recover the previous state.\r\n        // TODO: Should we debounce this event?\r\n        this.input.emit(this.value);\r\n      }\r\n\r\n      // TODO: Add a unit test for this\r\n      this.#emitChangeEvent();\r\n    } else {\r\n      this.#checkAndEmitValueChangeWithNoFilter();\r\n    }\r\n  };\r\n\r\n  #emitChangeEvent = () =>\r\n    // TODO: Add a unit test for this\r\n    // TODO: Don't emit the event if the value didn't change\r\n    this.change.emit(this.value);\r\n\r\n  #handleInputFilterChange = (event: InputEvent) => {\r\n    event.stopPropagation();\r\n    this.expanded = true;\r\n\r\n    // Clear last debounce\r\n    clearTimeout(this.#queuedInputValueUpdate);\r\n\r\n    // TODO: Add unit tests for this case\r\n    if (this.suggestDebounce > 0) {\r\n      this.#queuedInputValueUpdate = setTimeout(() => {\r\n        this.value = this.#inputRef.value;\r\n        this.input.emit(this.value);\r\n      }, this.suggestDebounce);\r\n    } else {\r\n      this.value = this.#inputRef.value;\r\n      this.input.emit(this.value);\r\n    }\r\n  };\r\n\r\n  #displayPopover = (event: MouseEvent) => {\r\n    const clickWasPerformedInALabel = event.detail === 0;\r\n\r\n    // TODO: Add a unit test for this case (clicking on the popover should not\r\n    // close the popover)\r\n    if (\r\n      clickWasPerformedInALabel ||\r\n      (this.expanded && popoverWasClicked(event))\r\n    ) {\r\n      return;\r\n    }\r\n    event.stopPropagation();\r\n    this.expanded = !this.expanded;\r\n  };\r\n\r\n  #handlePopoverClick = (event: MouseEvent) => {\r\n    const itemUIModel = getComboBoxItemFromMouseEvent(event, this.model);\r\n\r\n    if (!itemUIModel) {\r\n      return;\r\n    }\r\n    const itemGroup = itemUIModel as ComboBoxItemGroup;\r\n\r\n    // Clicked in a group header\r\n    if (itemGroup.items != null) {\r\n      if (!itemGroup.expandable) {\r\n        return;\r\n      }\r\n      // Toggle expanded\r\n      itemGroup.expanded = !itemGroup.expanded;\r\n    }\r\n    // Clicked in a leaf\r\n    else {\r\n      this.activeDescendant = itemUIModel;\r\n      this.expanded = false;\r\n\r\n      this.#checkAndEmitValueChangeWithNoFilter();\r\n    }\r\n\r\n    forceUpdate(this);\r\n  };\r\n\r\n  #handleMouseOverItem = (event: MouseEvent) => {\r\n    const itemUIModel = getComboBoxItemFromMouseEvent(event, this.model) as\r\n      | ComboBoxItemGroup\r\n      | undefined;\r\n\r\n    if (itemUIModel && itemUIModel.items == null) {\r\n      this.activeDescendant = itemUIModel;\r\n      forceUpdate(this);\r\n    }\r\n  };\r\n\r\n  #isModelAlreadyFiltered = () => this.suggestOptions.alreadyProcessed === true;\r\n  #shouldRenderActiveItemIcon = () =>\r\n    !this.suggest ||\r\n    !this.expanded ||\r\n    this.suggestOptions.renderActiveItemIconOnExpand;\r\n\r\n  #setValueInForm = (value: string) => {\r\n    // TODO: Add a unit test for this case\r\n    if (!this.expanded) {\r\n      this.#lastConfirmedValue = value;\r\n    }\r\n\r\n    this.#syncActiveDescendant();\r\n\r\n    // Update form value\r\n    this.internals.setFormValue(value);\r\n  };\r\n\r\n  #syncActiveDescendant = () => {\r\n    // TODO: Should we set the activeDescendant at the end of this function?\r\n\r\n    // If the active descendant is not set, try to set it using the value\r\n    // TODO: Do we have to use the caption when using suggest?\r\n    if (!this.activeDescendant || !this.expanded) {\r\n      this.activeDescendant = this.#getCurrentValueMapping()?.item;\r\n    }\r\n\r\n    // If the value does not belong to a rendered item, remove the active\r\n    // descendant\r\n    const clientSideFilters = this.suggest && !this.#isModelAlreadyFiltered();\r\n    if (\r\n      !clientSideFilters &&\r\n      !comboBoxActiveDescendantIsRendered(this.activeDescendant, this.model)\r\n    ) {\r\n      this.activeDescendant = undefined;\r\n    }\r\n  };\r\n\r\n  #nativeRender = () => (\r\n    <select\r\n      aria-label={this.#accessibleNameFromExternalLabel ?? this.accessibleName}\r\n      disabled={this.disabled}\r\n      onChange={!this.disabled && this.#handleSelectChange}\r\n      ref={el => (this.#selectRef = el)}\r\n    >\r\n      {!this.activeDescendant && (\r\n        <option disabled selected value=\"\">\r\n          {this.placeholder}\r\n        </option>\r\n      )}\r\n      {this.model.map(item => nativeItemRender(item, this.value))}\r\n    </select>\r\n  );\r\n\r\n  connectedCallback() {\r\n    this.#findLargestValue(this.model);\r\n    mapValuesToItemInfo(\r\n      this.model,\r\n      this.#valueToItemInfo,\r\n      this.#captionToItemInfo\r\n    );\r\n\r\n    // Accessibility\r\n    this.#setValueInForm(this.value);\r\n    const labels = this.internals.labels;\r\n    this.#accessibleNameFromExternalLabel = getElementInternalsLabel(labels);\r\n\r\n    // Report any accessibility issue\r\n    analyzeLabelExistence(\r\n      this.el,\r\n      \"ch-combo-box-render\",\r\n      labels,\r\n      this.#accessibleNameFromExternalLabel,\r\n      this.accessibleName\r\n    );\r\n  }\r\n\r\n  componentWillRender() {\r\n    if (this.#applyFilters) {\r\n      this.#updateFilters(); // TODO: THERE IS A BUG IF THE COMBO-BOX STARTS WITH FILTERS APPLIED\r\n      this.#applyFilters = false;\r\n    }\r\n  }\r\n\r\n  componentDidRender() {\r\n    if (this.expanded) {\r\n      const selectedElement = this.el.shadowRoot.querySelector(\r\n        SELECTED_ITEM_SELECTOR\r\n      ) as HTMLElement | undefined;\r\n\r\n      // Focus the selected element to force the scroll into view\r\n      if (selectedElement) {\r\n        // Wait until the JS has been executed to avoid race conditions when\r\n        // rendering elements in the top layer and trying to focus them\r\n        requestAnimationFrame(() => {\r\n          selectedElement.focus();\r\n          this.#inputRef.focus();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const filtersAreApplied = this.suggest;\r\n    const disableTextSelection = !this.disabled && !filtersAreApplied;\r\n    const comboBoxIsInteractive = !this.readonly && !this.disabled;\r\n\r\n    const currentItemInInput: ComboBoxItemModel | undefined = filtersAreApplied\r\n      ? this.#getCurrentValueMapping()?.item\r\n      : this.activeDescendant;\r\n\r\n    const computedImage =\r\n      currentItemInInput?.startImgSrc && this.#shouldRenderActiveItemIcon()\r\n        ? (computeComboBoxItemImage(\r\n            currentItemInInput,\r\n            \"start\",\r\n            this.#getActualImagePathCallback()\r\n          ) as GxImageMultiStateStart | undefined)\r\n        : undefined;\r\n\r\n    const startImgClasses = computedImage\r\n      ? `img--start start-img-type--${\r\n          currentItemInInput.startImgType ?? \"background\"\r\n        } ${computedImage.classes}`\r\n      : undefined;\r\n\r\n    // TODO: UNIT TESTS.\r\n    // - Clicking the combo-box with JS should not open the popover\r\n    // - User click must open the combo-box\r\n    // - Clicking the combo-box's label should not open the popover\r\n\r\n    // TODO: Add unit tests for this feature.\r\n    const currentValueMapping = this.#getCurrentValueMapping()?.item.value;\r\n    const inputValue = filtersAreApplied\r\n      ? this.value\r\n      : this.activeDescendant?.caption;\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          \"ch-disabled\": this.disabled,\r\n          \"ch-combo-box--normal\": !filtersAreApplied,\r\n          \"ch-combo-box--suggest\": filtersAreApplied\r\n        }}\r\n        // TODO: Add unit tests for this feature, since it breaks custom parts\r\n        // rendered outside of the ch-combo-box-render render() method\r\n        part={tokenMap({\r\n          [currentValueMapping]: !!currentValueMapping,\r\n          [COMBO_BOX_HOST_PARTS.PLACEHOLDER]: !inputValue,\r\n          [this.hostParts]: !!this.hostParts\r\n        })}\r\n        onKeyDown={\r\n          !mobileDevice &&\r\n          comboBoxIsInteractive &&\r\n          this.#handleExpandedChangeWithKeyBoard\r\n        }\r\n        onClickCapture={\r\n          comboBoxIsInteractive &&\r\n          (!filtersAreApplied || !this.expanded) &&\r\n          this.#displayPopover\r\n        }\r\n      >\r\n        {mobileDevice\r\n          ? this.#nativeRender()\r\n          : [\r\n              <span class=\"invisible-text\">\r\n                {this.#largestValue || this.placeholder}\r\n              </span>,\r\n\r\n              <div\r\n                key=\"combobox\"\r\n                role=\"combobox\"\r\n                aria-label={\r\n                  this.#accessibleNameFromExternalLabel ?? this.accessibleName\r\n                }\r\n                tabindex={disableTextSelection ? \"0\" : null}\r\n                class={{\r\n                  \"input-container\": true,\r\n\r\n                  // TODO: Fix disabled styling when the group parent is disabled, but the option leaf isn't.\r\n                  // Class for disabled images. Used when the combo-box or selected item are disabled\r\n                  disabled: this.disabled || currentItemInInput?.disabled,\r\n                  [startImgClasses]: !!startImgClasses\r\n                }}\r\n                style={computedImage?.styles}\r\n              >\r\n                <input\r\n                  aria-controls=\"popover\"\r\n                  // This reset is necessary, since we use \"disabled\" to\r\n                  // disallow the focus and text selection in the input when\r\n                  // the combo-box has no filters\r\n                  aria-disabled={disableTextSelection ? \"false\" : null}\r\n                  aria-expanded={this.expanded.toString()}\r\n                  aria-haspopup=\"true\"\r\n                  autocomplete=\"off\"\r\n                  class={{\r\n                    value: true,\r\n                    \"value--readonly\": !filtersAreApplied\r\n                  }}\r\n                  disabled={this.disabled || !filtersAreApplied}\r\n                  placeholder={this.placeholder}\r\n                  readOnly={this.readonly || !filtersAreApplied}\r\n                  value={inputValue}\r\n                  onInputCapture={\r\n                    filtersAreApplied &&\r\n                    comboBoxIsInteractive &&\r\n                    this.#handleInputFilterChange\r\n                  }\r\n                  ref={el => (this.#inputRef = el)}\r\n                ></input>\r\n              </div>,\r\n\r\n              this.expanded && comboBoxIsInteractive && (\r\n                <ch-popover\r\n                  key=\"popover\"\r\n                  id=\"popover\"\r\n                  role=\"listbox\"\r\n                  aria-hidden=\"false\" // TODO: Remove this and add a unit test\r\n                  part=\"window\"\r\n                  actionById\r\n                  actionElement={this.el as unknown as HTMLButtonElement} // This is a WA. We should remove it\r\n                  blockAlign=\"outside-end\"\r\n                  inlineAlign={this.popoverInlineAlign}\r\n                  closeOnClickOutside\r\n                  show\r\n                  popover=\"manual\"\r\n                  resizable={this.resizable}\r\n                  inlineSizeMatch=\"action-element-as-minimum\"\r\n                  overflowBehavior=\"add-scroll\"\r\n                  positionTry=\"flip-block\"\r\n                  onClick={this.#handlePopoverClick}\r\n                  onMouseOver={this.#handleMouseOverItem}\r\n                  onPopoverClosed={this.#handlePopoverClose}\r\n                >\r\n                  {this.model.map(\r\n                    customComboBoxItemRender(\r\n                      false,\r\n                      this.disabled,\r\n                      filtersAreApplied && !this.#isModelAlreadyFiltered(),\r\n                      this.activeDescendant,\r\n                      this.#displayedValues,\r\n                      this.#itemImages,\r\n                      \"\"\r\n                    )\r\n                  )}\r\n                </ch-popover>\r\n              )\r\n            ]}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}