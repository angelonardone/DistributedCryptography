{"version":3,"names":["textblockCss","ChTextblockStyle0","AVAILABLE_SIZE_CUSTOM_VAR","DISPLAYED_LINES_CUSTOM_VAR","LINE_HEIGHT_CUSTOM_VAR","ChTextBlock","currentAvailableHeight","availableHeight","contentHeight","lineHeight","totalLines","displayedLines","resizeObserver","syncWithRAF","contentRef","htmlContentRef","lineMeasuringRef","contentOverflowsChanged","newValue","this","overflowingContentChange","emit","autoGrowChanged","newAutoGrow","disconnectResizeObserver","formatChanged","getContentRef","format","calculateDisplayedLines","currentContentHeight","scrollHeight","currentLineHeight","getBoundingClientRect","height","contentOverflows","currentDisplayedLines","Math","max","trunc","currentTotalLines","style","setProperty","setResizeObserverIfNecessary","SyncWithRAF","ResizeObserver","entries","textBlockEntry","find","el","target","contentBoxSize","blockSize","perform","observe","box","disconnect","undefined","cancel","autoGrowRender","caption","h","noAutoGrowRender","class","ref","characterToMeasureLineHeight","componentDidRender","autoGrow","showTooltipOnOverflow","disconnectedCallback","render","Host","title"],"sources":["src/components/textblock/textblock.scss?tag=ch-textblock&encapsulation=shadow","src/components/textblock/textblock.tsx"],"sourcesContent":["@import \"../../common/_base\";\r\n\r\n@include box-sizing();\r\n@include typography-reset();\r\n\r\n:host {\r\n  --ch-textblock-displayed-lines: 1;\r\n  --ch-textblock-line-height: 1px;\r\n\r\n  display: inline-grid;\r\n  grid-auto-rows: max-content;\r\n  position: relative;\r\n  text-align: start; // Default alignment which supports RTL\r\n\r\n  // Enter support\r\n  white-space: break-spaces;\r\n}\r\n\r\n:host(.ch-textblock--no-auto-grow) {\r\n  contain: size;\r\n}\r\n\r\n// Used to measure the line height, in order to make the lines clampable\r\n.line-measure {\r\n  position: absolute;\r\n  pointer-events: none;\r\n  visibility: hidden;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//           Auto Grow disabled\r\n// - - - - - - - - - - - - - - - - - - - -\r\n.content,\r\n.html-content {\r\n  display: -webkit-box;\r\n  -webkit-box-orient: vertical;\r\n  -webkit-line-clamp: var(--ch-textblock-displayed-lines);\r\n  overflow: hidden;\r\n  max-block-size: calc(\r\n    var(--ch-textblock-displayed-lines) * var(--ch-textblock-line-height)\r\n  );\r\n}\r\n\r\n.html-content {\r\n  max-block-size: var(--ch-textblock-available-size);\r\n}\r\n","import {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\n\r\nimport { SyncWithRAF } from \"../../common/sync-with-frames\";\r\n\r\nconst AVAILABLE_SIZE_CUSTOM_VAR = \"--ch-textblock-available-size\";\r\nconst DISPLAYED_LINES_CUSTOM_VAR = \"--ch-textblock-displayed-lines\";\r\nconst LINE_HEIGHT_CUSTOM_VAR = \"--ch-textblock-line-height\";\r\n\r\n/**\r\n * @status developer-preview\r\n *\r\n * @slot - The slot for the HTML content.\r\n */\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"textblock.scss\",\r\n  tag: \"ch-textblock\"\r\n})\r\nexport class ChTextBlock implements ComponentInterface {\r\n  #currentAvailableHeight: number = -1;\r\n  #availableHeight: number = -1;\r\n  #contentHeight: number = -1;\r\n  #lineHeight: number = -1;\r\n\r\n  #totalLines: number = -1;\r\n  #displayedLines: number = -1;\r\n\r\n  #resizeObserver: ResizeObserver | undefined;\r\n  #syncWithRAF: SyncWithRAF | undefined; // Allocated at runtime to save resources\r\n\r\n  // Refs\r\n  #contentRef: HTMLElement | undefined;\r\n  #htmlContentRef: HTMLElement | undefined;\r\n  #lineMeasuringRef: HTMLElement | undefined;\r\n\r\n  @State() contentOverflows = false;\r\n  @Watch(\"contentOverflows\")\r\n  contentOverflowsChanged(newValue: boolean) {\r\n    this.overflowingContentChange.emit(newValue);\r\n  }\r\n\r\n  @Element() el: HTMLChTextblockElement;\r\n\r\n  /**\r\n   * This property defines if the control size will grow automatically, to\r\n   * adjust to its content size.\r\n   *\r\n   * If `false` the overflowing content will be displayed with an ellipsis.\r\n   * This ellipsis takes into account multiple lines.\r\n   */\r\n  @Prop() readonly autoGrow: boolean = false;\r\n  @Watch(\"autoGrow\")\r\n  autoGrowChanged(newAutoGrow: boolean) {\r\n    if (newAutoGrow) {\r\n      this.#disconnectResizeObserver();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Specifies the content to be displayed when the control has `format = text`.\r\n   */\r\n  @Prop() readonly caption: string;\r\n\r\n  /**\r\n   * Specifies the character used to measure the line height\r\n   */\r\n  @Prop() readonly characterToMeasureLineHeight: string = \"A\";\r\n\r\n  /**\r\n   * It specifies the format that will have the textblock control.\r\n   *\r\n   *  - If `format` = `HTML`, the textblock control works as an HTML div and\r\n   *    the innerHTML will be taken from the default slot.\r\n   *\r\n   *  - If `format` = `text`, the control works as a normal textblock control\r\n   *    and it is affected by most of the defined properties.\r\n   */\r\n  @Prop() readonly format: \"text\" | \"HTML\" = \"text\";\r\n  @Watch(\"format\")\r\n  formatChanged() {\r\n    // Avoid memory leaks, since the containerRef variable will be destroyed\r\n    this.#disconnectResizeObserver();\r\n  }\r\n\r\n  /**\r\n   * `true` to display a tooltip when the caption overflows the size of the\r\n   * container.\r\n   *\r\n   * Only works if `format = text` and `autoGrow = false`.\r\n   */\r\n  @Prop() readonly showTooltipOnOverflow: boolean = false;\r\n\r\n  /**\r\n   * Fired when the displayed lines overflows the control's content.\r\n   * If `true`, the current content overflows the control.\r\n   */\r\n  @Event() overflowingContentChange: EventEmitter<boolean>;\r\n\r\n  #getContentRef = () =>\r\n    this.format === \"HTML\" ? this.#htmlContentRef : this.#contentRef;\r\n\r\n  #calculateDisplayedLines = () => {\r\n    // - - - - - - - - - - - - - DOM read operations - - - - - - - - - - - - -\r\n    if (this.#currentAvailableHeight === 0) {\r\n      return;\r\n    }\r\n\r\n    const contentRef = this.#getContentRef();\r\n\r\n    const currentContentHeight = contentRef.scrollHeight;\r\n    const currentLineHeight =\r\n      this.#lineMeasuringRef.getBoundingClientRect().height;\r\n\r\n    // Nothing has change\r\n    if (\r\n      this.#availableHeight === this.#currentAvailableHeight &&\r\n      this.#contentHeight === currentContentHeight &&\r\n      this.#lineHeight === currentLineHeight\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Store new values\r\n    this.#availableHeight = this.#currentAvailableHeight;\r\n    this.#contentHeight = currentContentHeight;\r\n    this.#lineHeight = currentLineHeight;\r\n\r\n    this.contentOverflows = this.#currentAvailableHeight < currentContentHeight;\r\n\r\n    // - - - - - - - - - - - - - DOM write operations - - - - - - - - - - - - -\r\n    // Calculate how many lines can display the control without overflowing\r\n    // the content\r\n    const currentDisplayedLines = Math.max(\r\n      Math.trunc(this.#currentAvailableHeight / currentLineHeight),\r\n      1\r\n    );\r\n\r\n    // Calculate the total lines displayed by the control, even if they\r\n    // overflow the content\r\n    const currentTotalLines = Math.max(\r\n      Math.trunc(currentContentHeight / currentLineHeight),\r\n      1\r\n    );\r\n\r\n    // Update the line-height value even if the displayed lines didn't change\r\n    contentRef.style.setProperty(\r\n      LINE_HEIGHT_CUSTOM_VAR,\r\n      `${currentLineHeight}px`\r\n    );\r\n\r\n    if (this.format === \"HTML\") {\r\n      contentRef.style.setProperty(\r\n        AVAILABLE_SIZE_CUSTOM_VAR,\r\n        `${this.#availableHeight}px`\r\n      );\r\n    }\r\n\r\n    // Nothing has change\r\n    if (\r\n      this.#displayedLines === currentDisplayedLines &&\r\n      this.#totalLines === currentTotalLines\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Store new values\r\n    this.#displayedLines = currentDisplayedLines;\r\n    this.#totalLines = currentTotalLines;\r\n\r\n    contentRef.style.setProperty(\r\n      DISPLAYED_LINES_CUSTOM_VAR,\r\n      `${currentDisplayedLines}`\r\n    );\r\n  };\r\n\r\n  #setResizeObserverIfNecessary = () => {\r\n    if (this.#resizeObserver) {\r\n      return;\r\n    }\r\n\r\n    this.#syncWithRAF = new SyncWithRAF();\r\n\r\n    this.#resizeObserver = new ResizeObserver(entries => {\r\n      const textBlockEntry = entries.find(el => el.target === this.el);\r\n\r\n      if (textBlockEntry) {\r\n        this.#currentAvailableHeight =\r\n          textBlockEntry.contentBoxSize[0].blockSize;\r\n      }\r\n\r\n      this.#syncWithRAF.perform(this.#calculateDisplayedLines);\r\n    });\r\n\r\n    const contentRef = this.#getContentRef();\r\n\r\n    this.#resizeObserver.observe(contentRef);\r\n    this.#resizeObserver.observe(this.#lineMeasuringRef);\r\n    this.#resizeObserver.observe(this.el, { box: \"content-box\" });\r\n  };\r\n\r\n  #disconnectResizeObserver = () => {\r\n    this.#resizeObserver?.disconnect();\r\n    this.#resizeObserver = undefined;\r\n\r\n    this.#syncWithRAF?.cancel();\r\n    this.#syncWithRAF = undefined;\r\n\r\n    // Reset values. Necessary when alternating between autoGrow values\r\n    this.#currentAvailableHeight = -1;\r\n    this.#availableHeight = -1;\r\n    this.#contentHeight = -1;\r\n    this.#lineHeight = -1;\r\n    this.#totalLines = -1;\r\n    this.#displayedLines = -1;\r\n  };\r\n\r\n  #autoGrowRender = () => (this.format === \"text\" ? this.caption : <slot />);\r\n\r\n  #noAutoGrowRender = () => [\r\n    <div class=\"line-measure\" ref={el => (this.#lineMeasuringRef = el)}>\r\n      {this.characterToMeasureLineHeight}\r\n    </div>,\r\n\r\n    this.format === \"text\" ? (\r\n      <p class=\"content\" ref={el => (this.#contentRef = el)}>\r\n        {this.caption}\r\n      </p>\r\n    ) : (\r\n      <div class=\"html-content\" ref={el => (this.#htmlContentRef = el)}>\r\n        <slot />\r\n      </div>\r\n    )\r\n  ];\r\n\r\n  componentDidRender() {\r\n    if (!this.autoGrow) {\r\n      this.#setResizeObserverIfNecessary();\r\n\r\n      if (this.showTooltipOnOverflow && this.format === \"text\") {\r\n        this.#syncWithRAF.perform(this.#calculateDisplayedLines);\r\n      }\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.#disconnectResizeObserver();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        // role={this.format === \"Text\" && !this.lineClamp ? \"paragraph\" : null}\r\n        class={!this.autoGrow ? \"ch-textblock--no-auto-grow\" : undefined}\r\n        title={\r\n          this.showTooltipOnOverflow &&\r\n          this.format === \"text\" &&\r\n          !this.autoGrow &&\r\n          this.contentOverflows\r\n            ? this.caption\r\n            : undefined\r\n        }\r\n      >\r\n        {this.autoGrow ? this.#autoGrowRender() : this.#noAutoGrowRender()}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}