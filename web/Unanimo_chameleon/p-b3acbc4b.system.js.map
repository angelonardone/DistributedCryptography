{"version":3,"names":["window","_a","chameleonControlsLibrary","getImagePathCallback","_b","_c","registryProperty","exports","propertyName","value","Error","registryControlProperty","controlName","getControlRegisterProperty","DEFAULT_GET_IMAGE_PATH_CALLBACK","additionalItem","base","imgSrc"],"sources":["src/common/registry-properties.ts"],"sourcesContent":["import type { ActionListImagePathCallback } from \"../components/action-list/types\";\r\nimport type {\r\n  ChameleonImagePathCallbackControls,\r\n  ChameleonImagePathCallbackControlsTagName\r\n} from \"./types\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n    chameleonControlsLibrary: {\r\n      getImagePathCallback?: Partial<RegistryGetImagePathCallback>;\r\n      reports?: {\r\n        accessibility: boolean;\r\n      };\r\n    };\r\n  }\r\n}\r\n\r\nexport type RegistryGetImagePathCallback = {\r\n  [key in ChameleonImagePathCallbackControlsTagName]: ChameleonImagePathCallbackControls[key][\"getImagePathCallback\"];\r\n};\r\n\r\nexport type RegisterPropertyName = \"getImagePathCallback\";\r\n\r\nexport type RegisterProperty = {\r\n  getImagePathCallback: Partial<RegistryGetImagePathCallback>;\r\n};\r\n\r\nif (typeof window !== \"undefined\") {\r\n  window.chameleonControlsLibrary ??= { getImagePathCallback: {} };\r\n  window.chameleonControlsLibrary.getImagePathCallback ??= {};\r\n}\r\n\r\nexport const registryProperty = <\r\n  Prop extends RegisterPropertyName,\r\n  T extends RegisterProperty[Prop]\r\n>(\r\n  propertyName: Prop,\r\n  value: T\r\n) => {\r\n  if (\r\n    (propertyName as string) === \"__proto__\" ||\r\n    (propertyName as string) === \"constructor\" ||\r\n    (propertyName as string) === \"prototype\"\r\n  ) {\r\n    throw new Error(\"Invalid property name\");\r\n  }\r\n\r\n  window.chameleonControlsLibrary[propertyName] = value;\r\n};\r\n\r\nexport const registryControlProperty = <\r\n  PropName extends RegisterPropertyName,\r\n  Control extends keyof RegisterProperty[PropName],\r\n  T extends RegisterProperty[PropName][Control]\r\n>(\r\n  propertyName: PropName,\r\n  controlName: Control,\r\n  value: T\r\n) => {\r\n  if (\r\n    (propertyName as string) === \"__proto__\" ||\r\n    (propertyName as string) === \"constructor\" ||\r\n    (propertyName as string) === \"prototype\"\r\n  ) {\r\n    throw new Error(\"Invalid property name\");\r\n  }\r\n\r\n  if (\r\n    (controlName as string) === \"__proto__\" ||\r\n    (controlName as string) === \"constructor\" ||\r\n    (controlName as string) === \"prototype\"\r\n  ) {\r\n    throw new Error(\"Invalid control name\");\r\n  }\r\n\r\n  window.chameleonControlsLibrary[propertyName][controlName] = value;\r\n};\r\n\r\nexport const getControlRegisterProperty = <\r\n  PropName extends RegisterPropertyName,\r\n  Control extends keyof RegisterProperty[PropName]\r\n>(\r\n  propertyName: PropName,\r\n  controlName: Control\r\n): RegisterProperty[PropName][Control] | undefined =>\r\n  window.chameleonControlsLibrary[propertyName][controlName];\r\n\r\nexport const DEFAULT_GET_IMAGE_PATH_CALLBACK: ActionListImagePathCallback =\r\n  additionalItem => ({\r\n    base: additionalItem.imgSrc\r\n  });\r\n"],"mappings":"qFA2BA,UAAWA,SAAW,YAAa,EACjCC,EAAAD,OAAOE,4BAAwB,MAAAD,SAAA,EAAAA,EAA/BD,OAAOE,yBAA6B,CAAEC,qBAAsB,KAC5DC,GAAAC,EAAAL,OAAOE,0BAAyBC,wBAAoB,MAAAC,SAAA,EAAAA,EAAAC,EAApBF,qBAAyB,EAC3D,C,IAEaG,EAAgBC,EAAA,KAAG,SAI9BC,EACAC,GAEA,GACGD,IAA4B,aAC5BA,IAA4B,eAC5BA,IAA4B,YAC7B,CACA,MAAM,IAAIE,MAAM,wB,CAGlBV,OAAOE,yBAAyBM,GAAgBC,CAClD,I,IAEaE,EAAuBJ,EAAA,KAAG,SAKrCC,EACAI,EACAH,GAEA,GACGD,IAA4B,aAC5BA,IAA4B,eAC5BA,IAA4B,YAC7B,CACA,MAAM,IAAIE,MAAM,wB,CAGlB,GACGE,IAA2B,aAC3BA,IAA2B,eAC3BA,IAA2B,YAC5B,CACA,MAAM,IAAIF,MAAM,uB,CAGlBV,OAAOE,yBAAyBM,GAAcI,GAAeH,CAC/D,I,IAEaI,EAA0BN,EAAA,KAAG,SAIxCC,EACAI,GAEA,OAAAZ,OAAOE,yBAAyBM,GAAcI,EAA9C,I,IAEWE,EAA+BP,EAAA,KAC1C,SAAAQ,GAAc,OACZC,KAAMD,EAAeE,OADT,G"}