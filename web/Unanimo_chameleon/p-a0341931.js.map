{"version":3,"names":["checkIfIsLastNestedChild","element","lastNestedChild","codeToJSXDictionary","lastNestedChildClass","className","properties","addLastNestedChildClass","highlightJSClasses","join","undefined","h","class","renderCodeChildren","text","value","children","map","child","type","findLastNestedChild","elementWithChildren","lastChild","at","length","parseCodeToJSX","async","code","language","shouldFindLastNestedChild","actualLanguage","getActualLanguageWithoutAlias","registerLanguage","tree","parseCodeToHAST","renderedCode","lastNestedChildIsRoot","codeCss","ChCodeStyle0","ChCode","getLanguageOrDefault","this","showIndicator","connectedCallback","adoptCommonThemes","el","shadowRoot","adoptedStyleSheets","componentWillRender","renderResult","JSXCodeBlock","render","addLastNestedChildClassInHost","Host","key","SCROLLABLE_CLASS","part","linkDefinitions","Map","linkDefinitionPromises","getLinkDefinition","id","linkDefinition","get","definitionRequest","promise","resolver","definitionPromise","Promise","resolve","set","setLinkDefinition","url","pendingPromise","clearLinkDefinitions","clear","HEADING_ID_REGEX","LAST_NESTED_CHILD_CLASS","HTMLToJSX","isLastNestedChildClass","checkAndGetLastNestedChildClass","depthToHeading","content","classes","tableAlignmentDictionary","left","center","right","tableRender","table","metadata","tableHeadRow","tableBodyRows","slice","columnCount","headCellPromises","tableCell","mdASTtoJSX","bodyCellPromises","forEach","tableHead","push","tableHeadContent","allSettled","tableBodyContent","headCells","jsx","bodyCells","alignments","align","alignment","index","rowIndex","cellIndex","renderDictionary","blockquote","break","codeRender","lang","plainText","definition","identifier","delete","emphasis","footnoteDefinition","footnoteReference","heading","headingId","match","replace","depth","html","rawHTML","import","rawHTMLToJSX","allowDangerousHtml","image","src","alt","title","loading","imageReference","inlineCode","link","includes","href","linkReference","referenceType","label","list","ordered","start","listItem","paragraph","strong","thematicBreak","yaml","root","childrenLength","asyncJSX","Array","renderedContent","markdownToJSX","markdown","mdAST","markdownToMdAST","JSX","defaultCodeRender","options","markdownViewerCss","ChMarkdownViewerStyle0","ChMarkdownViewer","JSXTree","renderCode","rawHtml","theme","avoidFlashOfUnstyledContent","model"],"sources":["src/components/code/internal/code-highlight.tsx","src/components/code/code.scss?tag=ch-code&encapsulation=shadow","src/components/code/code.tsx","src/components/markdown-viewer/parsers/link-resolver.ts","src/components/markdown-viewer/parsers/markdown-to-jsx.tsx","src/components/markdown-viewer/parsers/code-render.tsx","src/components/markdown-viewer/markdown-viewer.scss?tag=ch-markdown-viewer&encapsulation=shadow","src/components/markdown-viewer/markdown-viewer.tsx"],"sourcesContent":["import { h } from \"@stencil/core\";\r\nimport { Element as HElement, Text as HText, Root as HRoot } from \"hast\";\r\n\r\nimport {\r\n  getActualLanguageWithoutAlias,\r\n  parseCodeToHAST,\r\n  registerLanguage\r\n} from \"@genexus/markdown-parser/dist/parse-code.js\";\r\nimport { CodeToJSX } from \"./types\";\r\n\r\ntype LastNestedChild = HRoot | HElement | undefined;\r\n\r\nconst checkIfIsLastNestedChild = (\r\n  element: HElement,\r\n  lastNestedChild: LastNestedChild\r\n): boolean => element === lastNestedChild;\r\n\r\nconst codeToJSXDictionary = {\r\n  element: (\r\n    element: HElement,\r\n    lastNestedChildClass: string,\r\n    lastNestedChild: LastNestedChild\r\n  ) => {\r\n    const className = element.properties.className as string[];\r\n\r\n    const addLastNestedChildClass = checkIfIsLastNestedChild(\r\n      element,\r\n      lastNestedChild\r\n    );\r\n    const highlightJSClasses = className ? className.join(\" \") : undefined;\r\n\r\n    return (\r\n      <span\r\n        class={{\r\n          [highlightJSClasses]: !!highlightJSClasses,\r\n          [lastNestedChildClass]: addLastNestedChildClass\r\n        }}\r\n      >\r\n        {renderCodeChildren(element, lastNestedChildClass, lastNestedChild)}\r\n      </span>\r\n    );\r\n  },\r\n\r\n  text: (element: HText) => element.value\r\n};\r\n\r\nfunction renderCodeChildren(\r\n  element: HRoot | HElement,\r\n  lastNestedChildClass: string,\r\n  lastNestedChild: LastNestedChild\r\n) {\r\n  return element.children.map(child =>\r\n    codeToJSXDictionary[child.type](\r\n      child,\r\n      lastNestedChildClass,\r\n      lastNestedChild\r\n    )\r\n  );\r\n}\r\n\r\nconst findLastNestedChild = (elementWithChildren: HRoot | HElement) => {\r\n  const lastChild = elementWithChildren.children.at(-1);\r\n\r\n  // The last element have children. We must check its sub children\r\n  if ((lastChild as HElement).children?.length > 0) {\r\n    return findLastNestedChild(lastChild as HElement);\r\n  }\r\n\r\n  return elementWithChildren;\r\n};\r\n\r\nexport const parseCodeToJSX: CodeToJSX = async (\r\n  code: string,\r\n  language: string,\r\n  shouldFindLastNestedChild: boolean,\r\n  lastNestedChildClass: string\r\n): Promise<{ renderedCode: any; lastNestedChildIsRoot: boolean }> => {\r\n  const actualLanguage = getActualLanguageWithoutAlias(language);\r\n\r\n  // Register the language\r\n  await registerLanguage(actualLanguage);\r\n\r\n  const tree: HRoot = parseCodeToHAST(actualLanguage, code);\r\n\r\n  // Find last nested child\r\n  const lastNestedChild: LastNestedChild = shouldFindLastNestedChild\r\n    ? findLastNestedChild(tree)\r\n    : undefined;\r\n\r\n  return {\r\n    renderedCode: renderCodeChildren(\r\n      tree,\r\n      lastNestedChildClass,\r\n      lastNestedChild\r\n    ),\r\n    lastNestedChildIsRoot: tree === lastNestedChild\r\n  };\r\n};\r\n",":host {\r\n  /**\r\n   * @prop --ch-code__addition:\r\n   * Specifies the color for the addition tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__addition: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__attr:\r\n   * Specifies the color for the attr tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__attr: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__attribute:\r\n   * Specifies the color for the attribute tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__attribute: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__built-in:\r\n   * Specifies the color for the built-in tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__built-in: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__bullet:\r\n   * Specifies the color for the bullet tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__bullet: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__class:\r\n   * Specifies the color for the class tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__class: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__code:\r\n   * Specifies the color for the code tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__code: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__comment:\r\n   * Specifies the color for the comment tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__comment: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__deletion:\r\n   * Specifies the color for the deletion tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__deletion: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__doctag:\r\n   * Specifies the color for the doctag tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__doctag: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__formula:\r\n   * Specifies the color for the formula tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__formula: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__function:\r\n   * Specifies the color for the function tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__function: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__function-variable:\r\n   * Specifies the color for the function variable tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__function-variable: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__keyword:\r\n   * Specifies the color for the keyword tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__keyword: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__link:\r\n   * Specifies the color for the link tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__link: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__literal:\r\n   * Specifies the color for the literal tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__literal: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__meta:\r\n   * Specifies the color for the meta tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__meta: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__meta__keyword:\r\n   * Specifies the color for the keyword tokens inside the meta token.\r\n   * @default currentColor\r\n   */\r\n  --ch-code__meta__keyword: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__meta__string:\r\n   * Specifies the color for the string tokens inside the meta token.\r\n   * @default currentColor\r\n   */\r\n  --ch-code__meta__string: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__name:\r\n   * Specifies the color for the name tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__name: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__number:\r\n   * Specifies the color for the number tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__number: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__operator:\r\n   * Specifies the color for the operator tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__operator: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__regexp:\r\n   * Specifies the color for the regexp tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__regexp: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__quote:\r\n   * Specifies the color for the quote tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__quote: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__selector-attr:\r\n   * Specifies the color for the selector-attr tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__selector-attr: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__selector-class:\r\n   * Specifies the color for the selector-class tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__selector-class: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__selector-id:\r\n   * Specifies the color for the selector-id tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__selector-id: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__selector-pseudo:\r\n   * Specifies the color for the selector-pseudo tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__selector-pseudo: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__selector-tag:\r\n   * Specifies the color for the selector-tag tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__selector-tag: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__string:\r\n   * Specifies the color for the string tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__string: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__subst:\r\n   * Specifies the color for the substitution tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__subst: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__symbol:\r\n   * Specifies the color for the symbol tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__symbol: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__tag:\r\n   * Specifies the color for the tag tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__tag: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__template-tag:\r\n   * Specifies the color for the template-tag tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__template-tag: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__template-variable:\r\n   * Specifies the color for the template-variable tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__template-variable: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__title:\r\n   * Specifies the color for the title tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__title: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__title-class:\r\n   * Specifies the color for the title-class tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__title-class: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__title-class-inherited:\r\n   * Specifies the color for the title-class-inherited tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__title-class-inherited: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__title-function:\r\n   * Specifies the color for the title-function tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__title-function: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__type:\r\n   * Specifies the color for the type tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__type: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__variable:\r\n   * Specifies the color for the variable tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__variable: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-code__variable-language:\r\n   * Specifies the color for the variable-language tokens\r\n   * @default currentColor\r\n   */\r\n  --ch-code__variable-language: currentColor;\r\n\r\n  --ch-code-indicator-color: currentColor;\r\n  --ch-code-inline-size: 1.125ch;\r\n  --ch-code-block-size: 1em;\r\n\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: 1fr;\r\n  font-family: monospace;\r\n  white-space: pre;\r\n  overflow: auto;\r\n}\r\n\r\ncode {\r\n  font: inherit;\r\n  contain: inline-size;\r\n}\r\n\r\n.hljs {\r\n  &-addition {\r\n    color: var(--ch-code__addition);\r\n  }\r\n\r\n  &-attr {\r\n    color: var(--ch-code__attr);\r\n  }\r\n\r\n  &-attribute {\r\n    color: var(--ch-code__attribute);\r\n  }\r\n\r\n  // Must be placed before the \"built_in\" selector\r\n  &-subst {\r\n    color: var(--ch-code__subst);\r\n  }\r\n\r\n  &-built_in {\r\n    color: var(--ch-code__built-in);\r\n  }\r\n\r\n  &-bullet {\r\n    color: var(--ch-code__bullet);\r\n  }\r\n\r\n  &-class {\r\n    color: var(--ch-code__class);\r\n  }\r\n\r\n  &-code {\r\n    color: var(--ch-code__code);\r\n  }\r\n\r\n  &-comment {\r\n    color: var(--ch-code__comment);\r\n  }\r\n\r\n  &-deletion {\r\n    color: var(--ch-code__deletion);\r\n  }\r\n\r\n  &-doctag {\r\n    color: var(--ch-code__doctag);\r\n  }\r\n\r\n  &-formula {\r\n    color: var(--ch-code__formula);\r\n  }\r\n\r\n  &-function {\r\n    color: var(--ch-code__function);\r\n  }\r\n\r\n  &-function.variable_ {\r\n    color: var(--ch-code__function-variable);\r\n  }\r\n\r\n  &-keyword {\r\n    color: var(--ch-code__keyword);\r\n  }\r\n\r\n  &-link {\r\n    color: var(--ch-code__link);\r\n  }\r\n\r\n  &-literal {\r\n    color: var(--ch-code__literal);\r\n  }\r\n\r\n  &-meta {\r\n    color: var(--ch-code__meta);\r\n  }\r\n\r\n  &-meta &-keyword {\r\n    color: var(--ch-code__meta__keyword);\r\n  }\r\n\r\n  &-meta &-string {\r\n    color: var(--ch-code__meta__string);\r\n  }\r\n\r\n  &-name {\r\n    color: var(--ch-code__name);\r\n  }\r\n\r\n  &-number {\r\n    color: var(--ch-code__number);\r\n  }\r\n\r\n  &-operator {\r\n    color: var(--ch-code__operator);\r\n  }\r\n\r\n  &-regexp {\r\n    color: var(--ch-code__regexp);\r\n  }\r\n\r\n  &-quote {\r\n    color: var(--ch-code__quote);\r\n  }\r\n\r\n  &-selector-attr {\r\n    color: var(--ch-code__selector-attr);\r\n  }\r\n\r\n  &-selector-class {\r\n    color: var(--ch-code__selector-class);\r\n  }\r\n\r\n  &-selector-id {\r\n    color: var(--ch-code__selector-id);\r\n  }\r\n\r\n  &-selector-pseudo {\r\n    color: var(--ch-code__selector-pseudo);\r\n  }\r\n\r\n  &-selector-tag {\r\n    color: var(--ch-code__selector-tag);\r\n  }\r\n\r\n  &-string {\r\n    color: var(--ch-code__string);\r\n  }\r\n\r\n  &-symbol {\r\n    color: var(--ch-code__symbol);\r\n  }\r\n\r\n  &-tag {\r\n    color: var(--ch-code__tag);\r\n  }\r\n\r\n  &-template-tag {\r\n    color: var(--ch-code__template-tag);\r\n  }\r\n\r\n  &-template-variable {\r\n    color: var(--ch-code__template-variable);\r\n  }\r\n\r\n  &-title {\r\n    color: var(--ch-code__title);\r\n\r\n    &.class_ {\r\n      color: var(--ch-code__title-class);\r\n\r\n      &.inherited__ {\r\n        color: var(--ch-code__title-class-inherited);\r\n      }\r\n    }\r\n\r\n    &.function_ {\r\n      color: var(--ch-code__title-function);\r\n    }\r\n  }\r\n\r\n  &-type {\r\n    color: var(--ch-code__type);\r\n  }\r\n\r\n  &-variable {\r\n    color: var(--ch-code__variable);\r\n  }\r\n\r\n  &-variable.language_ {\r\n    color: var(--ch-code__variable-language);\r\n  }\r\n}\r\n\r\n// TODO: Simplify this animation\r\n:host(.ch-code-show-indicator) .last-nested-child::after,\r\n:host(.ch-code-show-indicator):empty::after {\r\n  content: \"\";\r\n  display: inline-flex;\r\n  inline-size: var(--ch-code-inline-size);\r\n  block-size: var(--ch-code-block-size);\r\n  background-color: var(--ch-code-indicator-color);\r\n  transform: translateY(0.125em);\r\n  animation: twinkle 0.75s linear infinite;\r\n}\r\n\r\n@keyframes twinkle {\r\n  60% {\r\n    opacity: 1;\r\n  }\r\n\r\n  75% {\r\n    opacity: 0;\r\n  }\r\n}\r\n","import { Component, Element, Host, Prop, State, h } from \"@stencil/core\";\r\nimport { adoptCommonThemes } from \"../../common/theme\";\r\nimport { SCROLLABLE_CLASS } from \"../../common/reserved-names\";\r\nimport { parseCodeToJSX } from \"./internal/code-highlight\";\r\n\r\n/**\r\n * A control to highlight code blocks.\r\n * - It supports code highlight by parsing the incoming code string to [hast](https://github.com/micromark/micromark-extension-gfm) using [lowlight](lowlight). After that, it implements a reactivity layer by implementing its own render for the hast.\r\n *\r\n * - It also supports all programming languages from [highlight.js](https://github.com/highlightjs/highlight.js).\r\n *\r\n * - When the code highlighting is needed at runtime, the control will load on demand the code parser and the programming language needed to parse the code.\r\n */\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"code.scss\",\r\n  tag: \"ch-code\"\r\n})\r\nexport class ChCode {\r\n  #lastNestedChildIsRoot: boolean = true;\r\n\r\n  @Element() el: HTMLChCodeElement;\r\n\r\n  @State() JSXCodeBlock: any;\r\n\r\n  /**\r\n   * Specifies the code language to highlight.\r\n   */\r\n  @Prop() readonly language?: string | undefined;\r\n\r\n  /**\r\n   *\r\n   */\r\n  @Prop() readonly lastNestedChildClass: string = \"last-nested-child\";\r\n\r\n  /**\r\n   * Specifies if an indicator is displayed in the last element rendered.\r\n   * Useful for streaming scenarios where a loading indicator is needed.\r\n   */\r\n  @Prop() readonly showIndicator: boolean = false;\r\n\r\n  /**\r\n   * Specifies the code string to highlight.\r\n   */\r\n  @Prop() readonly value?: string | undefined;\r\n\r\n  #getLanguageOrDefault = () => this.language || \"plaintext\";\r\n\r\n  #parseCodeToJSX = () =>\r\n    parseCodeToJSX(\r\n      this.value,\r\n      this.#getLanguageOrDefault(),\r\n      this.showIndicator,\r\n      this.lastNestedChildClass\r\n    );\r\n\r\n  connectedCallback() {\r\n    adoptCommonThemes(this.el.shadowRoot.adoptedStyleSheets);\r\n  }\r\n\r\n  async componentWillRender() {\r\n    if (this.value) {\r\n      const renderResult = await this.#parseCodeToJSX();\r\n\r\n      this.JSXCodeBlock = renderResult.renderedCode;\r\n      this.#lastNestedChildIsRoot = renderResult.lastNestedChildIsRoot;\r\n    } else {\r\n      this.JSXCodeBlock = \"\";\r\n      this.#lastNestedChildIsRoot = true;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const addLastNestedChildClassInHost =\r\n      this.showIndicator && this.#lastNestedChildIsRoot;\r\n\r\n    const language = this.#getLanguageOrDefault();\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          \"ch-code-show-indicator\": this.showIndicator,\r\n          [SCROLLABLE_CLASS]: true\r\n        }}\r\n      >\r\n        <code\r\n          class={{\r\n            [`hljs language-${language}`]: true,\r\n            [this.lastNestedChildClass]: addLastNestedChildClassInHost\r\n          }}\r\n          part={`code language-${language}`}\r\n        >\r\n          {this.JSXCodeBlock}\r\n        </code>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","const linkDefinitions = new Map<string, string>();\r\n\r\nconst linkDefinitionPromises = new Map<\r\n  string,\r\n  { promise: Promise<string>; resolver: (url: string) => void }\r\n>();\r\n\r\nexport const getLinkDefinition = (id: string): Promise<string> | string => {\r\n  // See if we already have the definition\r\n  const linkDefinition = linkDefinitions.get(id);\r\n\r\n  if (linkDefinition !== undefined) {\r\n    return linkDefinition;\r\n  }\r\n\r\n  // See if we already have a Promise for this definition\r\n  const definitionRequest = linkDefinitionPromises.get(id);\r\n\r\n  if (definitionRequest !== undefined) {\r\n    return definitionRequest.promise;\r\n  }\r\n\r\n  let resolver: (value: string | PromiseLike<string>) => void;\r\n\r\n  // Create the promise and store the resolver to resolve the promise when the\r\n  // definition is encounter in the parser\r\n  const definitionPromise = new Promise<string>(resolve => {\r\n    resolver = resolve;\r\n\r\n    // TODO: Should resolve after 10s or so to avoid dead lock?\r\n  });\r\n\r\n  linkDefinitionPromises.set(id, {\r\n    promise: definitionPromise,\r\n    resolver: resolver\r\n  });\r\n\r\n  return definitionPromise;\r\n};\r\n\r\nexport const setLinkDefinition = (id: string, url: string) => {\r\n  // Store the url\r\n  linkDefinitions.set(id, url);\r\n\r\n  // See if are pending Promises to be resolved\r\n  const pendingPromise = linkDefinitionPromises.get(id);\r\n\r\n  if (pendingPromise !== undefined) {\r\n    pendingPromise.resolver(url);\r\n  }\r\n};\r\n\r\nexport const clearLinkDefinitions = () => {\r\n  linkDefinitions.clear();\r\n  linkDefinitionPromises.clear();\r\n};\r\n","import { h } from \"@stencil/core\";\r\nimport { AlignType, Code, Html, Root, Table } from \"mdast\";\r\nimport { markdownToMdAST } from \"@genexus/markdown-parser\";\r\n\r\nimport {\r\n  ElementsWithChildren,\r\n  ElementsWithoutCustomRender,\r\n  MarkdownViewerToJSXCommonMetadata\r\n} from \"./types\";\r\nimport { rawHTMLToJSX } from \"./raw-html-to-jsx\";\r\nimport {\r\n  clearLinkDefinitions,\r\n  getLinkDefinition,\r\n  setLinkDefinition\r\n} from \"./link-resolver\";\r\n\r\n/**\r\n * Regex to match the id of the heading.\r\n *\r\n * @input `\"# Hello, world {#something} \"`\r\n * @output `something`\r\n */\r\nconst HEADING_ID_REGEX = /\\{#(.*?)\\}/;\r\n\r\nexport const LAST_NESTED_CHILD_CLASS = \"last-nested-child\";\r\n\r\n// Lazy load the code parser implementation\r\nlet HTMLToJSX: typeof rawHTMLToJSX;\r\nlet lastNestedChild: Root | ElementsWithChildren | Code | Html;\r\n\r\nconst isLastNestedChildClass = (element: ElementsWithChildren | Code | Html) =>\r\n  element === lastNestedChild;\r\n\r\nconst checkAndGetLastNestedChildClass = (\r\n  element: ElementsWithChildren\r\n): typeof LAST_NESTED_CHILD_CLASS | undefined =>\r\n  isLastNestedChildClass(element) ? LAST_NESTED_CHILD_CLASS : undefined;\r\n\r\nconst depthToHeading = {\r\n  1: (content: any, classes: string | null, id?: string) => (\r\n    <h1 class={classes} id={id}>\r\n      {content}\r\n    </h1>\r\n  ),\r\n  2: (content: any, classes: string | null, id?: string) => (\r\n    <h2 class={classes} id={id}>\r\n      {content}\r\n    </h2>\r\n  ),\r\n  3: (content: any, classes: string | null, id?: string) => (\r\n    <h3 class={classes} id={id}>\r\n      {content}\r\n    </h3>\r\n  ),\r\n  4: (content: any, classes: string | null, id?: string) => (\r\n    <h4 class={classes} id={id}>\r\n      {content}\r\n    </h4>\r\n  ),\r\n  5: (content: any, classes: string | null, id?: string) => (\r\n    <h5 class={classes} id={id}>\r\n      {content}\r\n    </h5>\r\n  ),\r\n  6: (content: any, classes: string | null, id?: string) => (\r\n    <h6 class={classes} id={id}>\r\n      {content}\r\n    </h6>\r\n  )\r\n} as const;\r\n\r\nconst tableAlignmentDictionary: { [key in AlignType]: string } = {\r\n  left: \"ch-markdown-table-column-start\",\r\n  center: \"ch-markdown-table-column-center\",\r\n  right: \"ch-markdown-table-column-end\"\r\n};\r\n\r\nconst tableRender = async (\r\n  table: Table,\r\n  metadata: MarkdownViewerToJSXCommonMetadata\r\n) => {\r\n  const tableHeadRow = table.children[0];\r\n  const tableBodyRows = table.children.slice(1);\r\n  const columnCount = tableHeadRow.children.length;\r\n\r\n  // Head cell promises\r\n  const headCellPromises = tableHeadRow.children.map(tableCell =>\r\n    mdASTtoJSX(tableCell, metadata)\r\n  );\r\n\r\n  const bodyCellPromises = [];\r\n\r\n  // Body cell promises\r\n  tableBodyRows.forEach(tableHead => {\r\n    tableHead.children.forEach(tableCell => {\r\n      bodyCellPromises.push(mdASTtoJSX(tableCell, metadata));\r\n    });\r\n  });\r\n\r\n  // Wait for all results to be completed in parallel\r\n  const tableHeadContent = await Promise.allSettled(headCellPromises);\r\n  const tableBodyContent = await Promise.allSettled(bodyCellPromises);\r\n\r\n  // Return the JSX array\r\n  const headCells = tableHeadContent.map(\r\n    jsx => (jsx as PromiseFulfilledResult<any>).value\r\n  );\r\n  const bodyCells = tableBodyContent.map(\r\n    jsx => (jsx as PromiseFulfilledResult<any>).value\r\n  );\r\n\r\n  const alignments = table.align.map(\r\n    alignment => tableAlignmentDictionary[alignment]\r\n  );\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          {tableHeadRow.children.map((tableCell, index) => (\r\n            <th\r\n              class={{\r\n                [alignments[index]]: !!alignments[index],\r\n                [LAST_NESTED_CHILD_CLASS]: tableCell === lastNestedChild\r\n              }}\r\n            >\r\n              {headCells[index]}\r\n            </th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {tableBodyRows.map((tableHead, rowIndex) => (\r\n          <tr>\r\n            {tableHead.children.map((tableCell, cellIndex) => (\r\n              <td\r\n                class={{\r\n                  [alignments[cellIndex]]: !!alignments[cellIndex],\r\n                  [LAST_NESTED_CHILD_CLASS]: tableCell === lastNestedChild\r\n                }}\r\n              >\r\n                {bodyCells[columnCount * rowIndex + cellIndex]}\r\n              </td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport const renderDictionary: {\r\n  [key in keyof ElementsWithoutCustomRender]: (\r\n    element: ElementsWithoutCustomRender[key],\r\n    metadata: MarkdownViewerToJSXCommonMetadata\r\n  ) => Promise<any> | any;\r\n} = {\r\n  blockquote: async (element, metadata) => {\r\n    const content = await mdASTtoJSX(element, metadata);\r\n\r\n    return (\r\n      <blockquote class={checkAndGetLastNestedChildClass(element)}>\r\n        {content}\r\n      </blockquote>\r\n    );\r\n  }, // TODO: Check if code can be inside this tag\r\n\r\n  break: () => <br />,\r\n\r\n  code: (element, metadata) =>\r\n    metadata.codeRender({\r\n      lastNestedChildClass: metadata.lastNestedChildClass,\r\n      language: element.lang,\r\n      plainText: element.value,\r\n      showIndicator: metadata.showIndicator && isLastNestedChildClass(element)\r\n    }),\r\n\r\n  definition: element => setLinkDefinition(element.identifier, element.url),\r\n\r\n  delete: async (element, metadata) => {\r\n    const content = await mdASTtoJSX(element, metadata);\r\n\r\n    return (\r\n      <del class={checkAndGetLastNestedChildClass(element)}>{content}</del>\r\n    );\r\n  }, // TODO: Check if code can be inside this tag\r\n\r\n  emphasis: async (element, metadata) => {\r\n    const content = await mdASTtoJSX(element, metadata);\r\n\r\n    return <em class={checkAndGetLastNestedChildClass(element)}>{content}</em>;\r\n  }, // TODO: Check if code can be inside this tag\r\n\r\n  footnoteDefinition: () => \"\",\r\n\r\n  footnoteReference: () => \"\",\r\n\r\n  heading: async (element, metadata) => {\r\n    // Check if the heading has an id\r\n    const lastChild = element.children.at(-1);\r\n    let headingId: string;\r\n\r\n    if (lastChild?.type === \"text\") {\r\n      const match = lastChild.value.match(HEADING_ID_REGEX);\r\n\r\n      if (match && match.length > 1) {\r\n        headingId = match[1];\r\n\r\n        // Remove markdown id from the header text\r\n        lastChild.value = lastChild.value.replace(`{#${headingId}}`, \"\");\r\n      }\r\n    }\r\n\r\n    // Render the content after the heading id processing\r\n    const content = await mdASTtoJSX(element, metadata);\r\n    const classes = checkAndGetLastNestedChildClass(element);\r\n\r\n    return depthToHeading[element.depth](content, classes, headingId); // TODO: Add anchor icon at the start of the heading\r\n  },\r\n\r\n  html: async (element, metadata) => {\r\n    if (metadata.rawHTML && !HTMLToJSX) {\r\n      // Load the parser implementation\r\n      HTMLToJSX = (await import(\"./raw-html-to-jsx\")).rawHTMLToJSX;\r\n    }\r\n\r\n    return metadata.rawHTML\r\n      ? HTMLToJSX(\r\n          element.value,\r\n          metadata.allowDangerousHtml,\r\n          // TODO: Add unit tests for these cases\r\n          metadata.showIndicator && isLastNestedChildClass(element)\r\n        )\r\n      : element.value;\r\n  },\r\n\r\n  image: element => (\r\n    <img\r\n      src={element.url}\r\n      alt={element.alt}\r\n      title={element.title}\r\n      loading=\"lazy\"\r\n    />\r\n  ),\r\n\r\n  imageReference: () => \"\",\r\n\r\n  inlineCode: element => <code class=\"hljs\">{element.value}</code>,\r\n\r\n  link: async (element, metadata) => {\r\n    // Sanitize scripts\r\n    if (element.url.includes(\"javascript:\")) {\r\n      return;\r\n    }\r\n\r\n    const content = await mdASTtoJSX(element, metadata);\r\n\r\n    return (\r\n      <a\r\n        aria-label={element.title || null}\r\n        title={element.title || null}\r\n        class={checkAndGetLastNestedChildClass(element)}\r\n        href={element.url}\r\n      >\r\n        {content}\r\n      </a>\r\n    );\r\n  }, // TODO: Sanitize href?\r\n\r\n  linkReference: async (element, metadata) => {\r\n    const content = await mdASTtoJSX(element, metadata);\r\n    let url = \"\";\r\n\r\n    // TODO: Implement the rest of alternatives for \"referenceType\"\r\n    if (element.referenceType === \"shortcut\") {\r\n      url = await getLinkDefinition(element.identifier);\r\n    }\r\n\r\n    // TODO: It's unnecessary to set aria-label when referenceType === \"shortcut\"\r\n    // TODO: The title is not supported well. See \"An Example Putting the Parts Together\" section in markdown.html\r\n\r\n    // Sanitize scripts\r\n    if (url.includes(\"javascript:\")) {\r\n      return;\r\n    }\r\n\r\n    return (\r\n      <a\r\n        aria-label={element.label || null}\r\n        class={checkAndGetLastNestedChildClass(element)}\r\n        href={url}\r\n      >\r\n        {content}\r\n      </a>\r\n    );\r\n  },\r\n\r\n  list: async (element, metadata) => {\r\n    const content = await mdASTtoJSX(element, metadata);\r\n\r\n    return element.ordered ? (\r\n      <ol\r\n        class={checkAndGetLastNestedChildClass(element)}\r\n        start={element.start}\r\n      >\r\n        {content}\r\n      </ol> // TODO: Implement spread  // TODO: Check if code can be inside this tag\r\n    ) : (\r\n      <ul class={checkAndGetLastNestedChildClass(element)}>{content}</ul> // TODO: Implement spread  // TODO: Check if code can be inside this tag\r\n    );\r\n  },\r\n\r\n  listItem: async (element, metadata) => {\r\n    const content = await mdASTtoJSX(element, metadata);\r\n\r\n    return <li class={checkAndGetLastNestedChildClass(element)}>{content}</li>;\r\n  }, // TODO: Implement spread  // TODO: Check if code can be inside this tag\r\n\r\n  paragraph: async (element, metadata) => {\r\n    const content = await mdASTtoJSX(element, metadata);\r\n\r\n    return <p class={checkAndGetLastNestedChildClass(element)}>{content}</p>;\r\n  }, // TODO: Check if code can be inside this tag\r\n\r\n  strong: async (element, metadata) => {\r\n    const content = await mdASTtoJSX(element, metadata);\r\n\r\n    return (\r\n      <strong class={checkAndGetLastNestedChildClass(element)}>\r\n        {content}\r\n      </strong>\r\n    );\r\n  }, // TODO: Check if code can be inside this tag\r\n\r\n  table: tableRender, // TODO: Check if code can be inside this tag\r\n\r\n  text: element => element.value,\r\n\r\n  thematicBreak: () => <hr />,\r\n\r\n  yaml: () => \"\"\r\n} as const;\r\n\r\nconst findLastNestedChild = (\r\n  elementWithChildren: ElementsWithChildren | Root\r\n) => {\r\n  const lastChild = elementWithChildren.children.at(-1);\r\n\r\n  // The last element have children. We must check its sub children\r\n  if ((lastChild as ElementsWithChildren).children?.length > 0) {\r\n    return findLastNestedChild(lastChild as ElementsWithChildren);\r\n  }\r\n\r\n  if (lastChild.type === \"code\" || lastChild.type === \"html\") {\r\n    return lastChild;\r\n  }\r\n\r\n  return elementWithChildren;\r\n};\r\n\r\n/**\r\n * Converts markdown abstract syntax tree (mdast) into JSX.\r\n */\r\nasync function mdASTtoJSX(\r\n  root: ElementsWithChildren | Root,\r\n  metadata: MarkdownViewerToJSXCommonMetadata\r\n) {\r\n  const childrenLength = root.children.length;\r\n  const asyncJSX = new Array(childrenLength);\r\n\r\n  // Get the async JSX\r\n  for (let index = 0; index < childrenLength; index++) {\r\n    const child = root.children[index];\r\n\r\n    asyncJSX.push(renderDictionary[child.type](child, metadata));\r\n  }\r\n\r\n  // Wait for all results to be completed in parallel\r\n  const renderedContent = await Promise.allSettled(asyncJSX);\r\n\r\n  // Return the JSX array\r\n  return renderedContent.map(jsx => (jsx as PromiseFulfilledResult<any>).value);\r\n}\r\n\r\nexport const markdownToJSX = async (\r\n  markdown: string,\r\n  metadata: MarkdownViewerToJSXCommonMetadata\r\n) => {\r\n  const mdAST: Root = markdownToMdAST(markdown);\r\n\r\n  // First, find the last nested child. Useful to set a marker in the element\r\n  // that accomplish this condition\r\n  lastNestedChild = findLastNestedChild(mdAST);\r\n\r\n  // Render the markdown as JSX\r\n  const JSX = await mdASTtoJSX(mdAST, metadata);\r\n\r\n  // Clear all definitions used to render the current markdown, so the next\r\n  // render does not have old information\r\n  clearLinkDefinitions();\r\n\r\n  return JSX;\r\n};\r\n","import { h } from \"@stencil/core\";\r\nimport { MarkdownViewerCodeRender } from \"./types\";\r\n\r\nexport const defaultCodeRender: MarkdownViewerCodeRender = options => (\r\n  <ch-code\r\n    language={options.language}\r\n    lastNestedChildClass={options.lastNestedChildClass}\r\n    showIndicator={options.showIndicator}\r\n    value={options.plainText}\r\n  ></ch-code>\r\n);\r\n","@import \"../../common/base\";\r\n\r\n@include button-reset();\r\n@include box-sizing();\r\n@include typography-reset();\r\n\r\n:host {\r\n  --ch-markdown-viewer-indicator-color: currentColor;\r\n  --ch-markdown-viewer-inline-size: 1.125ch;\r\n  --ch-markdown-viewer-block-size: 1em;\r\n\r\n  display: grid;\r\n  grid-auto-rows: max-content;\r\n}\r\n\r\n// TODO: Simplify this animation\r\n:host(.ch-markdown-viewer-show-indicator) .last-nested-child::after,\r\n:host(.ch-markdown-viewer-show-indicator):empty::after {\r\n  content: \"\";\r\n  display: inline-flex;\r\n  inline-size: var(--ch-markdown-viewer-inline-size);\r\n  block-size: var(--ch-markdown-viewer-block-size);\r\n  background-color: var(--ch-markdown-viewer-indicator-color);\r\n  transform: translateY(0.125em);\r\n  animation: twinkle 0.75s linear infinite;\r\n}\r\n\r\n.ch-markdown-table-column-start {\r\n  text-align: start;\r\n}\r\n\r\n.ch-markdown-table-column-center {\r\n  text-align: center;\r\n}\r\n\r\n.ch-markdown-table-column-end {\r\n  text-align: end;\r\n}\r\n\r\nblockquote {\r\n  margin-inline: 0;\r\n}\r\n\r\nhr {\r\n  block-size: 1px;\r\n  margin: unset;\r\n  padding: unset;\r\n  border: unset;\r\n  background-color: currentColor;\r\n}\r\n\r\ntable {\r\n  display: block;\r\n  overflow: auto;\r\n  word-break: normal;\r\n  border-spacing: 0px;\r\n  border-collapse: collapse;\r\n}\r\n\r\nch-code {\r\n  --ch-code-indicator-color: var(--ch-markdown-viewer-indicator-color);\r\n  --ch-code-inline-size: var(--ch-markdown-viewer-inline-size);\r\n  --ch-code-block-size: var(--ch-markdown-viewer-block-size);\r\n}\r\n\r\n@keyframes twinkle {\r\n  60% {\r\n    opacity: 1;\r\n  }\r\n\r\n  75% {\r\n    opacity: 0;\r\n  }\r\n}\r\n","import { Component, Element, Host, Prop, h } from \"@stencil/core\";\r\nimport {\r\n  LAST_NESTED_CHILD_CLASS,\r\n  markdownToJSX\r\n} from \"./parsers/markdown-to-jsx\";\r\nimport { MarkdownViewerCodeRender } from \"./parsers/types\";\r\nimport { defaultCodeRender } from \"./parsers/code-render\";\r\n\r\n/**\r\n * A control to render markdown syntax. It supports GitHub Flavored Markdown\r\n * (GFM) and code highlighting.\r\n *  - It parses the incoming markdown to [mdast](https://github.com/syntax-tree/mdast) using [micromark](https://github.com/micromark/micromark) via [mdast-util-from-markdown](https://github.com/syntax-tree/mdast-util-from-markdown).\r\n *\r\n * - After that, it implements a reactivity layer by implementing its own render for the mdast. With this, changes to the input markdown only update the portion of the DOM that changes.\r\n *\r\n * - It supports Github Flavored Markdown (GFM) by using [mdast-util-gfm](https://github.com/syntax-tree/mdast-util-gfm) and [micromark-extension-gfm](https://github.com/micromark/micromark-extension-gfm).\r\n *\r\n * - It supports code highlight by parsing the incomming code of the markdown to [hast](https://github.com/micromark/micromark-extension-gfm) using [lowlight](lowlight). After that, it implements a reactivity layer by implementing its own render for the hast.\r\n *\r\n * - It also supports all programming languages from [highlight.js](https://github.com/highlightjs/highlight.js).\r\n *\r\n * - When the code highlighting is needed at runtime, the control will load on demand the code parser and the programming language needed to parse the code.\r\n */\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"markdown-viewer.scss\",\r\n  tag: \"ch-markdown-viewer\"\r\n})\r\nexport class ChMarkdownViewer {\r\n  #JSXTree: any;\r\n\r\n  @Element() el: HTMLChMarkdownViewerElement;\r\n\r\n  // /**\r\n  //  * `true` to render potentially dangerous user content when rendering HTML\r\n  //  * with the option `rawHtml === true`\r\n  //  */\r\n  // @Prop() readonly allowDangerousHtml: boolean = false;\r\n\r\n  /**\r\n   * `true` to visually hide the contents of the root node while the control's\r\n   * style is not loaded. Only works if the `theme` property is set.\r\n   */\r\n  @Prop() readonly avoidFlashOfUnstyledContent: boolean = false;\r\n\r\n  /**\r\n   * `true` to render raw HTML with sanitization.\r\n   */\r\n  @Prop() readonly rawHtml: boolean = false;\r\n\r\n  /**\r\n   * This property allows us to implement custom rendering for the code blocks.\r\n   */\r\n  @Prop() readonly renderCode?: MarkdownViewerCodeRender | undefined;\r\n\r\n  /**\r\n   * Specifies if an indicator is displayed in the last element rendered.\r\n   * Useful for streaming scenarios where a loading indicator is needed.\r\n   */\r\n  @Prop() readonly showIndicator: boolean = false;\r\n\r\n  /**\r\n   * Specifies the theme to be used for rendering the control.\r\n   * If `undefined`, no theme will be applied.\r\n   */\r\n  @Prop() readonly theme: string | undefined = \"ch-markdown-viewer\";\r\n\r\n  /**\r\n   * Specifies the markdown string to parse.\r\n   */\r\n  @Prop() readonly value?: string | undefined;\r\n\r\n  async componentWillRender() {\r\n    if (!this.value) {\r\n      return;\r\n    }\r\n\r\n    this.#JSXTree = await markdownToJSX(this.value, {\r\n      allowDangerousHtml: true, // Allow dangerous in this version\r\n      codeRender: this.renderCode ?? defaultCodeRender,\r\n      lastNestedChildClass: LAST_NESTED_CHILD_CLASS,\r\n      rawHTML: this.rawHtml,\r\n      showIndicator: this.showIndicator\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (!this.value) {\r\n      return \"\";\r\n    }\r\n\r\n    return (\r\n      <Host\r\n        class={\r\n          this.showIndicator ? \"ch-markdown-viewer-show-indicator\" : undefined\r\n        }\r\n      >\r\n        {this.theme && (\r\n          <ch-theme\r\n            key=\"theme\"\r\n            avoidFlashOfUnstyledContent={this.avoidFlashOfUnstyledContent}\r\n            model={this.theme}\r\n          ></ch-theme>\r\n        )}\r\n        {this.#JSXTree}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}