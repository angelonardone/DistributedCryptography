{"version":3,"names":["actionListGroupCss","ChActionListGroupStyle0","EXPANDABLE_ID","ChActionListGroup","buttonRef","loadLazyContent","setFocus","this","expandable","focus","getExpandedValue","expanded","connectedCallback","el","setAttribute","ACTION_LIST_PARTS_DICTIONARY","GROUP","ACTION_LIST_GROUP_EXPORT_PARTS","render","hasContent","lazyLoad","h","Host","key","toString","class","action","disabled","part","tokenMap","ACTION_LIST_GROUP_PARTS_DICTIONARY","ACTION","SELECTED","selected","NOT_SELECTED","DISABLED","type","ref","caption","CAPTION","downloading","EXPANDABLE","EXPANDED","COLLAPSED","LAZY_LOADED","id","renderImg","cssClass","parts","src","imageType","alt","loading","SPACES_REGEX","addPartForAdditionalItems","additionalItems","index","length","additionalItem","add","trim","replaceAll","addPartForAdditionalModel","additionalModel","start","center","end","computeExportParts","additionalInfo","Set","BLOCKS_TO_CHECK","containsActionTypeActions","some","isActionTypeBlock","section","undefined","editingBlockInfo","align","push","computeActionTypeBlocks","editingBlocks","forEach","block","editingBlock","actionListItemCss","ChActionListItemStyle0","ACTION_TYPE_PARTS","fix","ACTION_LIST_ITEM_PARTS_DICTIONARY","ACTION_FIX","modify","ACTION_MODIFY","remove","ACTION_REMOVE","custom","ACTION_CUSTOM","ChActionListItem","additionalItemListenerDictionary","fixedChange","emit","itemId","value","fixed","editing","deleting","callback","confirmActionsDictionary","translations","confirmModify","confirmDelete","cancelActionsDictionary","cancelModify","cancelDelete","editingSections","deletingSections","headerRef","inputRef","additionalInfoChanged","setExportParts","setActionTypeBlocks","captionChange","itemDragEnd","removeEditMode","shouldFocusHeader","commitEdition","newCaption","checkIfShouldRemoveEditMode","event","stopPropagation","code","KEY_CODES","ENTER","ESCAPE","preventDefault","renderAdditionalItems","map","item","jsx","renderAdditionalItem","additionalAction","hasImage","imgSrc","hasPseudoImage","imgType","pseudoImageStartClass","startPseudoImageTypeDictionary","computedPseudoImage","getComputedImage","imageTag","ADDITIONAL_ITEM","ADDITIONAL_IMAGE","actionTypeIsFix","actionTypeIsCustom","accessibleName","classes","showOnHover","ADDITIONAL_ACTION","selectable","FIXED","NOT_FIXED","style","styles","onClick","handleAdditionalItemClick","ADDITIONAL_TEXT","imageTypeDictionary","exportParts","size","ACTION_LIST_ITEM_EXPORT_PARTS","Array","from","join","renderAdditionalInfo","zoneName","stretch","zoneNameWithPrefix","actionTypeSection","actionTypeAligns","editingSection","find","deletingSection","includes","renderConfirmCancelButtons","title","ADDITIONAL_ITEM_CONFIRM","ACTION_ACCEPT","acceptAction","ACTION_CANCEL","cancelAction","getImagePathCallback","getControlRegisterProperty","DEFAULT_GET_IMAGE_PATH_CALLBACK","img","updateDirectionInImageCustomVar","ITEM","hasAdditionalInfo","stretchStart","blockStart","inlineCaption","blockEnd","stretchEnd","hasParts","NESTED","nested","NESTED_EXPANDABLE","nestedExpandable","SELECTABLE","NOT_SELECTABLE","EDITING","NOT_EDITING","autoFocus","EDIT_CAPTION","onKeyDown","ACTION_LIST_ITEM_TAG","ACTION_LIST_GROUP_TAG","ACTION_LIST_ITEM_SELECTOR","ACTION_LIST_GROUP_SELECTOR","getActionListOrGroupItemFromEvent","composedPath","tagName","toLowerCase","getActionListOrGroupItemIndex","items","findIndex","getParentArray","itemUIModel","root","parentItem","getActionListItemOrGroupInfo","flattenedModel","get","EDIT_KEY","F2","ACTION_LIST_ITEM_TAG_NAME","isActionListItem","element","getFocusedActionListItem","focusComposedPath","focusItemById","itemInfo","actionListRef","itemRef","shadowRoot","querySelector","ctrlKeyIsPressed","mouseEventModifierKey","click","getAndCheckItem","eventTarget","groupIsCollapsed","group","focusNextItemFirstLevel","startIndex","currentFocusedId","increment","firstLevelIndex","firstLevelSibling","anItemWasFocused","focusNextItemSecondLevel","keyboardDictionary","ARROW_UP","itemIndex","secondLevelIndex","ARROW_DOWN","_","actionListItem","editable","editableItems","actionListKeyboardNavigation","keyboardEventHandler","updateItemProperty","propertiesToUpdate","flattenedTreeModel","newSelectedItems","propertyName","propertyValue","delete","actionListDefaultTranslations","Object","freeze","setActionListSelectedItems","model","selectedItems","selectedItemsDiffer","currentSelectedItems","has","removeAllSelectedItemsExceptForTheLast","selectedItemsArray","values","lastItemIndex","clear","selectedItemsChangeShouldBeEmitted","selection","flattenSubUIModel","sortModel","set","flattenActionListUIModel","actionListRenderCss","ChActionListRenderStyle0","DEFAULT_EDITABLE_ITEMS_VALUE","renderMapping","actionable","itemModel","actionListRenderState","additionalInformation","checkbox","checked","metadata","renderItem","separator","role","defaultRenderItem","FIRST_ITEM_GREATER_THAN_SECOND","SECOND_ITEM_GREATER_THAN_FIRST","defaultSortItemsCallback","subModel","sort","a","b","order","ChActionListRender","Map","shouldUpdateModelAndSelection","modelChanged","selectionChanged","selectedItemsChange","itemClick","addItem","groupParentId","parentGroup","forceUpdate","getItemsInfo","itemsId","removeItem","actionListItemsInfo","updateItemProperties","properties","parentArray","emitSelectedItemsChange","onCaptionChange","modifyItemCaptionCallback","detail","oldCaption","then","catch","onFixedChange","fixItemCallback","updateItemFix","acceptChange","newFixedValue","onRemove","removeItemCallback","acceptRemove","getItemOrGroupInfo","updateAndEmitSelectedItems","removeAllSelectedItems","selectedItemId","selectedItemInfo","handleItemClick","actionListItemOrGroup","checkIfMustExpandCollapseGroup","handleItemSelection","itemWasSelected","singleSelectionMode","previousSelectedItemId","keys","previousSelectedItemInfo","selectedItemsInfo","itemToRemoveId","itemToRemoveIndex","removeElement","sortItemsCallback","flattenUIModel","adoptCommonThemes","adoptedStyleSheets","componentWillRender","SCROLLABLE_CLASS"],"sources":["src/components/action-list/internal/action-list-group/action-list-group.scss?tag=ch-action-list-group&encapsulation=shadow","src/components/action-list/internal/action-list-group/action-list-group.tsx","src/common/renders.tsx","src/components/action-list/internal/action-list-item/compute-exportparts.ts","src/components/action-list/internal/action-list-item/compute-editing-sections.ts","src/components/action-list/internal/action-list-item/action-list-item.scss?tag=ch-action-list-item&encapsulation=shadow","src/components/action-list/internal/action-list-item/action-list-item.tsx","src/components/action-list/utils.ts","src/components/action-list/keyboard-navigation.ts","src/components/action-list/update-item-property.ts","src/components/action-list/translations.ts","src/components/action-list/selections.ts","src/components/action-list/flatten-model.ts","src/components/action-list/action-list-render.scss?tag=ch-action-list-render&encapsulation=shadow","src/components/action-list/action-list-render.tsx"],"sourcesContent":["@import \"../../../../common/base\";\r\n@import \"../../../../common/icons\";\r\n\r\n@include button-reset();\r\n@include box-sizing();\r\n\r\n:host,\r\n.group {\r\n  display: grid;\r\n  grid-template-rows: min-content;\r\n}\r\n\r\n.action {\r\n  &::before {\r\n    content: \"\";\r\n    inline-size: var(--ch-action-list-group__expandable-button-size);\r\n    block-size: var(--ch-action-list-group__expandable-button-size);\r\n    background-color: currentColor;\r\n    -webkit-mask: no-repeat center /\r\n      var(--ch-action-list-group__expandable-button-image-size) $expandable-icon;\r\n  }\r\n\r\n  &--collapsed::before {\r\n    transform: rotate(-90deg); // TODO: Add RTL support\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//       Expandable content\r\n// - - - - - - - - - - - - - - - -\r\n.expandable {\r\n  display: grid;\r\n  grid-auto-rows: min-content;\r\n  position: relative;\r\n  padding: 0;\r\n  margin: 0;\r\n\r\n  &--lazy-loaded {\r\n    content-visibility: auto;\r\n    contain-intrinsic-size: auto 100px;\r\n  }\r\n}\r\n\r\n.expandable--collapsed {\r\n  display: none;\r\n  overflow: hidden;\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  h\r\n} from \"@stencil/core\";\r\nimport { tokenMap } from \"../../../../common/utils\";\r\nimport {\r\n  ACTION_LIST_GROUP_EXPORT_PARTS,\r\n  ACTION_LIST_GROUP_PARTS_DICTIONARY,\r\n  ACTION_LIST_PARTS_DICTIONARY\r\n} from \"../../../../common/reserved-names\";\r\n\r\nconst EXPANDABLE_ID = \"expandable\";\r\n\r\n@Component({\r\n  tag: \"ch-action-list-group\",\r\n  styleUrl: \"action-list-group.scss\",\r\n  shadow: { delegatesFocus: true }\r\n})\r\nexport class ChActionListGroup {\r\n  #buttonRef: HTMLButtonElement;\r\n\r\n  @Element() el: HTMLChActionListGroupElement;\r\n\r\n  /**\r\n   * This attributes specifies the caption of the control\r\n   */\r\n  @Prop() readonly caption: string;\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This attribute lets you specify when items are being lazy loaded in the\r\n   * control.\r\n   */\r\n  @Prop({ mutable: true }) downloading = false;\r\n\r\n  /**\r\n   * If the item has a sub-tree, this attribute determines if the subtree is\r\n   * displayed.\r\n   */\r\n  @Prop() readonly expandable?: boolean;\r\n\r\n  /**\r\n   * If the item has a sub-tree, this attribute determines if the subtree is\r\n   * displayed.\r\n   */\r\n  @Prop() readonly expanded?: boolean;\r\n  // @Watch(\"expanded\")\r\n  // expandedChanged(isExpanded: boolean) {\r\n  //   // Wait until all properties are updated before lazy loading. Otherwise, the\r\n  //   // lazyLoad property could be updated just after the executing of the function\r\n  //   setTimeout(() => {\r\n  //     this.#lazyLoadItems(isExpanded);\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Determine if the items are lazy loaded when opening the first time the\r\n   * control.\r\n   */\r\n  @Prop({ mutable: true }) lazyLoad = false;\r\n\r\n  /**\r\n   * This attribute represents additional info for the control that is included\r\n   * when dragging the item.\r\n   */\r\n  @Prop() readonly metadata: string;\r\n\r\n  /**\r\n   * Specifies a set of parts to use in every DOM element of the control.\r\n   */\r\n  @Prop() readonly parts?: string;\r\n  // @Watch(\"parts\")\r\n  // partsChanged(newParts: string) {\r\n  //   this.#setExportParts(newParts);\r\n  // }\r\n\r\n  /**\r\n   * This attribute lets you specify if the item is selected\r\n   */\r\n  @Prop() readonly selected: boolean = false;\r\n\r\n  /**\r\n   * `true` to show the downloading spinner when lazy loading the sub items of\r\n   * the control.\r\n   */\r\n  @Prop() readonly showDownloadingSpinner: boolean = true;\r\n\r\n  // /**\r\n  //  * Fired when the item is being dragged.\r\n  //  */\r\n  // @Event() itemDragStart: EventEmitter<TreeViewItemDragStartInfo>;\r\n\r\n  /**\r\n   * Fired when the lazy control is expanded an its content must be loaded.\r\n   */\r\n  @Event() loadLazyContent: EventEmitter<string>;\r\n\r\n  /**\r\n   * Set the focus in the control if `expandable === true`.\r\n   */\r\n  @Method()\r\n  async setFocus() {\r\n    if (this.expandable && this.#buttonRef) {\r\n      this.#buttonRef.focus();\r\n    }\r\n  }\r\n\r\n  #getExpandedValue = (): boolean =>\r\n    this.expandable ? this.expanded ?? false : true;\r\n\r\n  connectedCallback() {\r\n    this.el.setAttribute(\"role\", \"listitem\");\r\n    this.el.setAttribute(\"part\", ACTION_LIST_PARTS_DICTIONARY.GROUP);\r\n    this.el.setAttribute(\"exportparts\", ACTION_LIST_GROUP_EXPORT_PARTS);\r\n  }\r\n\r\n  render() {\r\n    const hasContent = !this.lazyLoad;\r\n    const expanded = hasContent && this.#getExpandedValue();\r\n\r\n    return (\r\n      <Host>\r\n        {this.expandable ? (\r\n          <button\r\n            aria-controls={hasContent ? EXPANDABLE_ID : null}\r\n            aria-expanded={hasContent ? expanded.toString() : null}\r\n            class={{ action: true, \"action--collapsed\": !expanded }}\r\n            disabled={this.disabled}\r\n            part={tokenMap({\r\n              [ACTION_LIST_GROUP_PARTS_DICTIONARY.ACTION]: true,\r\n              [ACTION_LIST_GROUP_PARTS_DICTIONARY.SELECTED]: this.selected,\r\n              [ACTION_LIST_GROUP_PARTS_DICTIONARY.NOT_SELECTED]: !this.selected,\r\n              [ACTION_LIST_GROUP_PARTS_DICTIONARY.DISABLED]: this.disabled\r\n            })}\r\n            type=\"button\"\r\n            ref={el => (this.#buttonRef = el)}\r\n          >\r\n            {this.caption}\r\n          </button>\r\n        ) : (\r\n          <span\r\n            // TODO: Test this case (accessibility)\r\n            // aria-controls={hasContent ? EXPANDABLE_ID : null}\r\n            // aria-expanded={hasContent ? expanded.toString() : null}\r\n            class=\"action\"\r\n            part={tokenMap({\r\n              [ACTION_LIST_GROUP_PARTS_DICTIONARY.CAPTION]: true,\r\n              [ACTION_LIST_GROUP_PARTS_DICTIONARY.DISABLED]: this.disabled\r\n            })}\r\n          >\r\n            {this.caption}\r\n          </span>\r\n        )}\r\n\r\n        {hasContent && (\r\n          <ul\r\n            aria-busy={(!!this.downloading).toString()}\r\n            aria-live={this.downloading ? \"polite\" : null}\r\n            class={{\r\n              expandable: true,\r\n              \"expandable--collapsed\": !expanded,\r\n              \"expandable--lazy-loaded\": !this.downloading\r\n            }}\r\n            part={tokenMap({\r\n              [ACTION_LIST_GROUP_PARTS_DICTIONARY.EXPANDABLE]: true,\r\n              [ACTION_LIST_GROUP_PARTS_DICTIONARY.EXPANDED]: expanded,\r\n              [ACTION_LIST_GROUP_PARTS_DICTIONARY.COLLAPSED]: !expanded,\r\n              [ACTION_LIST_GROUP_PARTS_DICTIONARY.LAZY_LOADED]:\r\n                !this.downloading\r\n            })}\r\n            id={EXPANDABLE_ID}\r\n          >\r\n            <slot />\r\n          </ul>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","import { h } from \"@stencil/core\";\r\nimport { ImageRender } from \"./types\";\r\n\r\nexport const renderImg = (\r\n  cssClass: string,\r\n  parts: string,\r\n  src: string,\r\n  imageType: ImageRender\r\n) =>\r\n  imageType === \"img\" &&\r\n  src && (\r\n    <img\r\n      aria-hidden=\"true\"\r\n      class={cssClass}\r\n      part={parts}\r\n      alt=\"\"\r\n      src={src}\r\n      loading=\"lazy\"\r\n    />\r\n  );\r\n","import {\r\n  ActionListItemAdditionalBase,\r\n  ActionListItemAdditionalCustom,\r\n  ActionListItemAdditionalInformation,\r\n  ActionListItemAdditionalItem,\r\n  ActionListItemAdditionalModel\r\n} from \"../../types\";\r\n\r\nconst SPACES_REGEX = /\\s+/g;\r\n\r\nconst addPartForAdditionalItems = (\r\n  additionalItems: ActionListItemAdditionalItem[],\r\n  parts: Set<string>\r\n) => {\r\n  if (additionalItems == null) {\r\n    return;\r\n  }\r\n\r\n  // For let index = ... is the fastest for loop\r\n  for (let index = 0; index < additionalItems.length; index++) {\r\n    // Slots does not have parts\r\n    const additionalItem = additionalItems[index] as\r\n      | ActionListItemAdditionalBase\r\n      | ActionListItemAdditionalCustom;\r\n\r\n    if (additionalItem.part) {\r\n      // TODO: Add a test for this case\r\n      parts.add(additionalItem.part.trim().replaceAll(SPACES_REGEX, \",\"));\r\n    }\r\n  }\r\n};\r\n\r\nconst addPartForAdditionalModel = (\r\n  additionalModel: ActionListItemAdditionalModel | undefined,\r\n  parts: Set<string>\r\n) => {\r\n  if (additionalModel != null) {\r\n    addPartForAdditionalItems(additionalModel.start, parts);\r\n    addPartForAdditionalItems(additionalModel.center, parts);\r\n    addPartForAdditionalItems(additionalModel.end, parts);\r\n  }\r\n};\r\n\r\nexport const computeExportParts = (\r\n  additionalInfo: ActionListItemAdditionalInformation\r\n) => {\r\n  const parts: Set<string> = new Set();\r\n\r\n  addPartForAdditionalModel(additionalInfo[\"block-start\"], parts);\r\n  addPartForAdditionalModel(additionalInfo[\"block-end\"], parts);\r\n  addPartForAdditionalModel(additionalInfo[\"inline-caption\"], parts);\r\n  addPartForAdditionalModel(additionalInfo[\"stretch-start\"], parts);\r\n  addPartForAdditionalModel(additionalInfo[\"stretch-end\"], parts);\r\n\r\n  return parts;\r\n};\r\n","import {\r\n  ActionListItemAdditionalAction,\r\n  ActionListItemAdditionalInformation,\r\n  ActionListItemAdditionalInformationSection,\r\n  ActionListItemAdditionalItem,\r\n  ActionListItemAdditionalItemActionType,\r\n  ActionListItemAdditionalModel\r\n} from \"../../types\";\r\nimport { ActionListItemActionTypeBlockInfo } from \"./types\";\r\n\r\nconst BLOCKS_TO_CHECK: (keyof ActionListItemAdditionalInformation)[] = [\r\n  \"block-start\",\r\n  \"block-end\",\r\n  \"inline-caption\",\r\n  \"stretch-start\",\r\n  \"stretch-end\"\r\n];\r\n\r\nconst containsActionTypeActions = (\r\n  action: ActionListItemAdditionalItemActionType[\"type\"],\r\n  additionalItems?: ActionListItemAdditionalItem[]\r\n): boolean => {\r\n  if (additionalItems == null) {\r\n    return false;\r\n  }\r\n\r\n  return additionalItems.some(\r\n    additionalItem =>\r\n      (additionalItem as ActionListItemAdditionalAction).action &&\r\n      (additionalItem as ActionListItemAdditionalAction).action.type === action\r\n  );\r\n};\r\n\r\nconst isActionTypeBlock = (\r\n  action: ActionListItemAdditionalItemActionType[\"type\"],\r\n  section: ActionListItemAdditionalInformationSection,\r\n  additionalModel?: ActionListItemAdditionalModel\r\n): ActionListItemActionTypeBlockInfo | undefined => {\r\n  if (additionalModel == null) {\r\n    return undefined;\r\n  }\r\n\r\n  let editingBlockInfo: ActionListItemActionTypeBlockInfo | undefined;\r\n\r\n  if (containsActionTypeActions(action, additionalModel.start)) {\r\n    editingBlockInfo = { section: section, align: [\"start\"] };\r\n  }\r\n\r\n  if (containsActionTypeActions(action, additionalModel.center)) {\r\n    if (editingBlockInfo) {\r\n      editingBlockInfo.align.push(\"center\");\r\n    } else {\r\n      editingBlockInfo = { section: section, align: [\"center\"] };\r\n    }\r\n  }\r\n\r\n  if (containsActionTypeActions(action, additionalModel.end)) {\r\n    if (editingBlockInfo) {\r\n      editingBlockInfo.align.push(\"end\");\r\n    } else {\r\n      editingBlockInfo = { section: section, align: [\"end\"] };\r\n    }\r\n  }\r\n\r\n  return editingBlockInfo;\r\n};\r\n\r\nexport const computeActionTypeBlocks = (\r\n  action: ActionListItemAdditionalItemActionType[\"type\"],\r\n  additionalInfo?: ActionListItemAdditionalInformation\r\n): ActionListItemActionTypeBlockInfo[] | undefined => {\r\n  if (additionalInfo == null) {\r\n    return undefined;\r\n  }\r\n\r\n  let editingBlocks: ActionListItemActionTypeBlockInfo[] | undefined =\r\n    undefined;\r\n\r\n  BLOCKS_TO_CHECK.forEach(block => {\r\n    const editingBlock = isActionTypeBlock(\r\n      action,\r\n      block,\r\n      additionalInfo[block]\r\n    );\r\n\r\n    if (editingBlock) {\r\n      editingBlocks ??= [];\r\n      editingBlocks.push(editingBlock);\r\n    }\r\n  });\r\n\r\n  return editingBlocks;\r\n};\r\n","@import \"../../../../common/base\";\r\n@import \"../../../../common/icons\";\r\n\r\n@include button-reset();\r\n@include box-sizing();\r\n\r\n:host {\r\n  display: grid;\r\n  grid-template-rows: min-content;\r\n}\r\n\r\n.action {\r\n  display: grid;\r\n  grid-template:\r\n    \"stretch-start block-start stretch-end\" max-content\r\n    \"stretch-start inline-caption stretch-end\" max-content\r\n    \"stretch-start block-end stretch-end\" max-content / max-content 1fr max-content;\r\n}\r\n\r\n// TODO: Fix \"inline-caption: start\" items support\r\n.align-container {\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  // Don't add (grid-auto-columns: max-content), because it will break the align-end\r\n  white-space: break-spaces; // Support for line breaks, like \\n\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//         First level containers\r\n// - - - - - - - - - - - - - - - - - - - -\r\n.stretch-start {\r\n  grid-area: stretch-start;\r\n}\r\n\r\n.block-start {\r\n  grid-area: block-start;\r\n}\r\n\r\n.inline-caption {\r\n  grid-area: inline-caption;\r\n  align-items: center;\r\n  min-block-size: var(--ch-action-list-item__image-size);\r\n}\r\n\r\n.block-end {\r\n  grid-area: block-end;\r\n}\r\n\r\n.stretch-end {\r\n  grid-area: stretch-end;\r\n}\r\n\r\n.stretch-start,\r\n.stretch-end {\r\n  align-self: stretch;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//         Second level containers\r\n// - - - - - - - - - - - - - - - - - - - -\r\n.align-start {\r\n  display: flex;\r\n  justify-self: flex-start;\r\n}\r\n\r\n.align-center {\r\n  display: flex;\r\n  justify-self: center;\r\n}\r\n\r\n.align-end {\r\n  display: flex;\r\n  justify-self: flex-end;\r\n}\r\n\r\n.valign-start {\r\n  display: flex;\r\n  align-self: self-start;\r\n}\r\n\r\n.valign-center {\r\n  display: flex;\r\n  align-self: center;\r\n}\r\n\r\n.valign-end {\r\n  display: flex;\r\n  align-self: self-end;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//            Additional items\r\n// - - - - - - - - - - - - - - - - - - - -\r\n:host(:not(:hover):not(:focus-within)) .show-on-mouse-hover {\r\n  display: none;\r\n}\r\n\r\n.additional-item {\r\n  display: inline-grid;\r\n  grid-auto-columns: max-content;\r\n  grid-auto-flow: column;\r\n  align-items: center;\r\n}\r\n\r\n.fix,\r\n.modify,\r\n.remove,\r\n.confirm-action,\r\n.cancel-action {\r\n  &::before {\r\n    content: \"\";\r\n    display: inline-block;\r\n    inline-size: var(--ch-action-list-item__image-size);\r\n    block-size: var(--ch-action-list-item__image-size);\r\n    content-visibility: auto;\r\n    contain-intrinsic-size: auto var(--ch-action-list-item__image-size);\r\n    -webkit-mask: no-repeat center /\r\n      var(--ch-action-list-item__background-image-size) var(--ch-start-start);\r\n    background-color: var(--ch-action-list-item__action-color);\r\n  }\r\n}\r\n\r\n.fixed {\r\n  --ch-start-start: var(--ch-action-list-item__additional-item-fixed-image);\r\n}\r\n\r\n.not-fixed {\r\n  --ch-start-start: var(--ch-action-list-item__additional-item-not-fixed-image);\r\n}\r\n\r\n.modify {\r\n  --ch-start-start: var(--ch-action-list-item__additional-item-modify-image);\r\n}\r\n\r\n.remove {\r\n  --ch-start-start: var(--ch-action-list-item__additional-item-remove-image);\r\n}\r\n\r\n.confirm-action {\r\n  --ch-start-start: var(--ch-action-list-item__additional-item-confirm-image);\r\n}\r\n\r\n.cancel-action {\r\n  --ch-start-start: var(--ch-action-list-item__additional-item-cancel-image);\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//                 Images\r\n// - - - - - - - - - - - - - - - - - - - -\r\n@include images-without-pseudo-elements(\r\n  $image-path-custom-var: var(--ch-start-start),\r\n  $image-size-custom-var: var(--ch-action-list-item__image-size),\r\n  $background-image-size-custom-var:\r\n    var(--ch-action-list-item__background-image-size)\r\n);\r\n\r\n@include images-with-pseudo-elements(\r\n  $start-image-path-custom-var: var(--ch-start-start),\r\n  $end-image-path-custom-var: var(--ch-end-img),\r\n  $image-size-custom-var: var(--ch-action-list-item__image-size),\r\n  $background-image-size-custom-var:\r\n    var(--ch-action-list-item__background-image-size)\r\n);\r\n\r\n.additional-item.not-actionable {\r\n  --ch-start-start: var(--ch-start-img--base);\r\n\r\n  .action:active &.start-img--active {\r\n    --ch-start-start: var(--ch-start-img--active);\r\n  }\r\n\r\n  .action:focus &.start-img--focus {\r\n    --ch-start-start: var(--ch-start-img--focus);\r\n  }\r\n\r\n  .action:hover &.start-img--hover {\r\n    --ch-start-start: var(--ch-start-img--hover);\r\n  }\r\n\r\n  .action:disabled &.start-img--disabled {\r\n    --ch-start-start: var(--ch-start-img--disabled);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  ActionListImagePathCallback,\r\n  ActionListItemAdditionalAction,\r\n  ActionListItemAdditionalBase,\r\n  ActionListItemAdditionalCustom,\r\n  ActionListItemAdditionalInformation,\r\n  ActionListItemAdditionalInformationSection,\r\n  ActionListItemAdditionalItem,\r\n  ActionListItemAdditionalItemActionType,\r\n  ActionListItemAdditionalModel\r\n} from \"../../types\";\r\nimport { renderImg } from \"../../../../common/renders\";\r\nimport {\r\n  ACTION_LIST_ITEM_EXPORT_PARTS,\r\n  ACTION_LIST_ITEM_PARTS_DICTIONARY,\r\n  ACTION_LIST_PARTS_DICTIONARY,\r\n  imageTypeDictionary,\r\n  KEY_CODES,\r\n  startPseudoImageTypeDictionary\r\n} from \"../../../../common/reserved-names\";\r\nimport {\r\n  ActionListCaptionChangeEventDetail,\r\n  ActionListFixedChangeEventDetail,\r\n  ActionListItemActionTypeBlockInfo\r\n} from \"./types\";\r\nimport {\r\n  tokenMap,\r\n  updateDirectionInImageCustomVar\r\n} from \"../../../../common/utils\";\r\nimport { computeExportParts } from \"./compute-exportparts\";\r\nimport { computeActionTypeBlocks } from \"./compute-editing-sections\";\r\nimport { ActionListTranslations } from \"../../translations\";\r\nimport {\r\n  GxImageMultiState,\r\n  GxImageMultiStateStart\r\n} from \"../../../../common/types\";\r\nimport {\r\n  DEFAULT_GET_IMAGE_PATH_CALLBACK,\r\n  getControlRegisterProperty\r\n} from \"../../../../common/registry-properties\";\r\n\r\nconst ACTION_TYPE_PARTS = {\r\n  fix: ACTION_LIST_ITEM_PARTS_DICTIONARY.ACTION_FIX,\r\n  modify: ACTION_LIST_ITEM_PARTS_DICTIONARY.ACTION_MODIFY,\r\n  remove: ACTION_LIST_ITEM_PARTS_DICTIONARY.ACTION_REMOVE,\r\n  custom: ACTION_LIST_ITEM_PARTS_DICTIONARY.ACTION_CUSTOM\r\n} as const;\r\n\r\n@Component({\r\n  tag: \"ch-action-list-item\",\r\n  styleUrl: \"action-list-item.scss\",\r\n  shadow: { delegatesFocus: true }\r\n})\r\nexport class ChActionListItem {\r\n  #additionalItemListenerDictionary = {\r\n    fix: () =>\r\n      this.fixedChange.emit({ itemId: this.el.id, value: !this.fixed }),\r\n    remove: () => {\r\n      if (!this.editing) {\r\n        this.deleting = true;\r\n      }\r\n    },\r\n    custom: callback => callback(),\r\n    modify: () => {\r\n      if (!this.deleting) {\r\n        this.editing = true;\r\n      }\r\n    }\r\n  } satisfies {\r\n    [key in ActionListItemAdditionalItemActionType[\"type\"]]: (...args) => any;\r\n  };\r\n\r\n  #confirmActionsDictionary = {\r\n    // custom: () => this.translations.confirm,\r\n    modify: () => this.translations.confirmModify,\r\n    remove: () => this.translations.confirmDelete\r\n  } satisfies {\r\n    [key in Exclude<\r\n      ActionListItemAdditionalItemActionType[\"type\"],\r\n      \"fix\" | \"custom\"\r\n    >]: () => string;\r\n  };\r\n\r\n  #cancelActionsDictionary = {\r\n    // custom: () => this.translations.cancel,\r\n    modify: () => this.translations.cancelModify,\r\n    remove: () => this.translations.cancelDelete\r\n  } satisfies {\r\n    [key in Exclude<\r\n      ActionListItemAdditionalItemActionType[\"type\"],\r\n      \"fix\" | \"custom\"\r\n    >]: () => string;\r\n  };\r\n\r\n  #editingSections: ActionListItemActionTypeBlockInfo[] | undefined;\r\n  #deletingSections: ActionListItemActionTypeBlockInfo[] | undefined;\r\n\r\n  // Refs\r\n  #headerRef!: HTMLButtonElement;\r\n  #inputRef: HTMLChEditElement | undefined;\r\n\r\n  @Element() el: HTMLChActionListItemElement;\r\n\r\n  /**\r\n   *\r\n   */\r\n  @Prop() readonly additionalInfo?: ActionListItemAdditionalInformation;\r\n  @Watch(\"additionalInfo\")\r\n  additionalInfoChanged() {\r\n    this.#setExportParts();\r\n    this.#setActionTypeBlocks();\r\n  }\r\n\r\n  /**\r\n   * This attributes specifies the caption of the control.\r\n   */\r\n  @Prop() readonly caption: string;\r\n\r\n  /**\r\n   * Set this attribute if you want display a checkbox in the control.\r\n   */\r\n  @Prop() readonly checkbox: boolean = false;\r\n\r\n  /**\r\n   * Set this attribute if you want the checkbox to be checked by default.\r\n   * Only works if `checkbox = true`\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) checked = false;\r\n\r\n  /**\r\n   * Set this attribute if you want to set a custom render for the control, by\r\n   * passing a slot.\r\n   */\r\n  @Prop() readonly customRender: boolean = false;\r\n\r\n  /**\r\n   * Set this property when the control is in delete mode.\r\n   */\r\n  @Prop({ mutable: true }) deleting = false;\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This attribute lets you specify when items are being lazy loaded in the\r\n   * control.\r\n   */\r\n  @Prop({ mutable: true }) downloading = false;\r\n\r\n  /**\r\n   * This property lets you specify if the edit operation is enabled in the\r\n   * control. If `true`, the control can edit its caption in place.\r\n   */\r\n  @Prop() readonly editable: boolean;\r\n\r\n  /**\r\n   * Set this property when the control is in edit mode.\r\n   */\r\n  @Prop({ mutable: true }) editing = false;\r\n\r\n  /**\r\n   *\r\n   */\r\n  @Prop() readonly fixed?: boolean = false;\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * imgSrc needs to be resolved.\r\n   */\r\n  @Prop() readonly getImagePathCallback?: (\r\n    item: ActionListItemAdditionalBase\r\n  ) => GxImageMultiState | undefined;\r\n\r\n  /**\r\n   * `true` if the checkbox's value is indeterminate.\r\n   */\r\n  @Prop({ mutable: true }) indeterminate = false;\r\n\r\n  /**\r\n   * This attribute represents additional info for the control that is included\r\n   * when dragging the item.\r\n   */\r\n  @Prop() readonly metadata: string;\r\n\r\n  /**\r\n   * Specifies if the item is inside of a ch-action-list-group control.\r\n   */\r\n  @Prop() readonly nested: boolean = false;\r\n\r\n  /**\r\n   * Specifies if the item is inside of a ch-action-list-group control that\r\n   * is expandable.\r\n   */\r\n  @Prop() readonly nestedExpandable: boolean = false;\r\n\r\n  /**\r\n   * Specifies a set of parts to use in every DOM element of the control.\r\n   */\r\n  @Prop() readonly parts?: string;\r\n  // @Watch(\"parts\")\r\n  // partsChanged(newParts: string) {\r\n  //   this.#setExportParts(newParts);\r\n  // }\r\n\r\n  /**\r\n   * Specifies if the item can be selected.\r\n   */\r\n  @Prop() readonly selectable: boolean = false;\r\n\r\n  /**\r\n   * This attribute lets you specify if the item is selected\r\n   */\r\n  @Prop() readonly selected: boolean = false;\r\n\r\n  /**\r\n   * `true` to show the downloading spinner when lazy loading the sub items of\r\n   * the control.\r\n   */\r\n  @Prop() readonly showDownloadingSpinner: boolean = true;\r\n\r\n  /**\r\n   * Specifies the literals required for the control.\r\n   */\r\n  @Prop() readonly translations!: ActionListTranslations;\r\n\r\n  // /**\r\n  //  * Fired when the checkbox value of the control is changed.\r\n  //  */\r\n  // @Event() checkboxChange: EventEmitter<TreeViewItemCheckedInfo>;\r\n\r\n  // /**\r\n  //  * Fired when the item is being dragged.\r\n  //  */\r\n  // @Event() itemDragStart: EventEmitter<TreeViewItemDragStartInfo>;\r\n\r\n  /**\r\n   * Fired when the fixed value of the control is changed.\r\n   */\r\n  @Event({ composed: true })\r\n  captionChange: EventEmitter<ActionListCaptionChangeEventDetail>;\r\n\r\n  /**\r\n   * Fired when the control is asking to modify its caption\r\n   */\r\n  // TODO: Unify terms (modifyCaption in the Tree View)\r\n  @Event({ composed: true })\r\n  fixedChange: EventEmitter<ActionListFixedChangeEventDetail>;\r\n\r\n  /**\r\n   * Fired when the remove button was clicked in the control.\r\n   */\r\n  @Event({ composed: true }) remove: EventEmitter<string>;\r\n\r\n  /**\r\n   * Fired when the item is no longer being dragged.\r\n   */\r\n  @Event() itemDragEnd: EventEmitter;\r\n\r\n  #removeEditMode =\r\n    (shouldFocusHeader: boolean, commitEdition = false) =>\r\n    () => {\r\n      // When pressing the enter key in the input, the removeEditMode event is\r\n      // triggered twice (due to the headerRef.focus() triggering the onBlur\r\n      // event in the input), so we need to check if the edit mode was disabled\r\n      if (!this.editing) {\r\n        return;\r\n      }\r\n      this.editing = false;\r\n\r\n      const newCaption = this.#inputRef.value;\r\n\r\n      if (\r\n        commitEdition &&\r\n        newCaption.trim() !== \"\" &&\r\n        this.caption !== newCaption\r\n      ) {\r\n        this.captionChange.emit({\r\n          itemId: this.el.id,\r\n          newCaption: newCaption\r\n        });\r\n      }\r\n\r\n      if (shouldFocusHeader) {\r\n        this.#headerRef.focus();\r\n      }\r\n    };\r\n\r\n  #checkIfShouldRemoveEditMode = (event: KeyboardEvent) => {\r\n    event.stopPropagation();\r\n\r\n    if (event.code !== KEY_CODES.ENTER && event.code !== KEY_CODES.ESCAPE) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    const commitEdition = event.code === KEY_CODES.ENTER;\r\n    this.#removeEditMode(true, commitEdition)();\r\n  };\r\n\r\n  #renderAdditionalItems = (additionalItems: ActionListItemAdditionalItem[]) =>\r\n    additionalItems.map(item =>\r\n      (item as ActionListItemAdditionalCustom).jsx\r\n        ? (item as ActionListItemAdditionalCustom).jsx()\r\n        : this.#renderAdditionalItem(\r\n            item as\r\n              | ActionListItemAdditionalBase\r\n              | ActionListItemAdditionalAction\r\n          )\r\n    );\r\n\r\n  #renderAdditionalItem = (\r\n    item: ActionListItemAdditionalBase | ActionListItemAdditionalAction\r\n  ) => {\r\n    const additionalAction = item as ActionListItemAdditionalAction;\r\n    const hasImage = !!item.imgSrc;\r\n    const hasPseudoImage = hasImage && item.imgType !== \"img\";\r\n    const pseudoImageStartClass = hasPseudoImage\r\n      ? startPseudoImageTypeDictionary[item.imgType ?? \"background\"]\r\n      : null;\r\n    const computedPseudoImage = hasPseudoImage\r\n      ? this.#getComputedImage(additionalAction)\r\n      : null;\r\n\r\n    const imageTag =\r\n      hasImage &&\r\n      renderImg(\r\n        \"img\",\r\n        item.part\r\n          ? `${ACTION_LIST_ITEM_PARTS_DICTIONARY.ADDITIONAL_ITEM} ${ACTION_LIST_ITEM_PARTS_DICTIONARY.ADDITIONAL_IMAGE} ${item.part}`\r\n          : `${ACTION_LIST_ITEM_PARTS_DICTIONARY.ADDITIONAL_ITEM} ${ACTION_LIST_ITEM_PARTS_DICTIONARY.ADDITIONAL_IMAGE}`,\r\n        item.imgSrc,\r\n        item.imgType\r\n      );\r\n\r\n    const action = additionalAction.action;\r\n\r\n    // Button\r\n    if (action) {\r\n      const actionTypeIsFix = action.type === \"fix\";\r\n      const actionTypeIsCustom = action.type === \"custom\";\r\n\r\n      return (\r\n        <button\r\n          key={additionalAction.id}\r\n          aria-label={additionalAction.accessibleName}\r\n          class={{\r\n            \"additional-item\": true,\r\n            [pseudoImageStartClass]: hasPseudoImage && actionTypeIsCustom,\r\n\r\n            // TODO: Add support for these classes\r\n            [computedPseudoImage?.classes]:\r\n              hasPseudoImage && actionTypeIsCustom && !!computedPseudoImage,\r\n            \"show-on-mouse-hover\":\r\n              (actionTypeIsFix && !this.fixed) ||\r\n              (!actionTypeIsFix && action.showOnHover),\r\n            [action.type]: true,\r\n            fixed: actionTypeIsFix && this.fixed,\r\n            \"not-fixed\": actionTypeIsFix && !this.fixed\r\n          }}\r\n          part={tokenMap({\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.ADDITIONAL_ITEM]: true,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.ADDITIONAL_ACTION]: true,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.SELECTED]:\r\n              this.selectable && this.selected,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.NOT_SELECTED]:\r\n              this.selectable && !this.selected,\r\n\r\n            [ACTION_TYPE_PARTS[action.type] satisfies string]: true,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.FIXED]:\r\n              actionTypeIsFix && this.fixed,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.NOT_FIXED]:\r\n              actionTypeIsFix && !this.fixed,\r\n\r\n            [item.part]: !!item.part\r\n          })}\r\n          style={\r\n            hasPseudoImage && actionTypeIsCustom\r\n              ? computedPseudoImage?.styles\r\n              : null\r\n          }\r\n          disabled={this.disabled}\r\n          type=\"button\"\r\n          onClick={\r\n            !this.disabled\r\n              ? this.#handleAdditionalItemClick(\r\n                  action.type,\r\n                  actionTypeIsCustom ? action.callback : undefined\r\n                )\r\n              : undefined\r\n          }\r\n        >\r\n          {actionTypeIsCustom && imageTag}\r\n          {item.caption && item.caption}\r\n        </button>\r\n      );\r\n    }\r\n\r\n    // Span\r\n    if (item.caption) {\r\n      return (\r\n        <span\r\n          key={additionalAction.id ?? null}\r\n          class={{\r\n            \"additional-item not-actionable\": true,\r\n            [pseudoImageStartClass]: !!pseudoImageStartClass,\r\n            [computedPseudoImage?.classes]: !!computedPseudoImage\r\n          }}\r\n          part={tokenMap({\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.ADDITIONAL_ITEM]: true,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.ADDITIONAL_TEXT]: true,\r\n\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.SELECTED]:\r\n              this.selectable && this.selected,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.NOT_SELECTED]:\r\n              this.selectable && !this.selected,\r\n\r\n            [item.part]: !!item.part\r\n          })}\r\n          style={hasPseudoImage && computedPseudoImage?.styles}\r\n        >\r\n          {imageTag}\r\n          {item.caption}\r\n        </span>\r\n      );\r\n    }\r\n\r\n    // Div with background or mask\r\n    if (hasPseudoImage) {\r\n      return (\r\n        <div\r\n          aria-hidden=\"true\"\r\n          class={{\r\n            \"additional-item not-actionable\": true,\r\n            [imageTypeDictionary[item.imgType ?? \"background\"]]: true,\r\n            [computedPseudoImage?.classes]: !!computedPseudoImage\r\n          }}\r\n          part={tokenMap({\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.ADDITIONAL_ITEM]: true,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.ADDITIONAL_IMAGE]: true,\r\n\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.SELECTED]:\r\n              this.selectable && this.selected,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.NOT_SELECTED]:\r\n              this.selectable && !this.selected,\r\n\r\n            [item.part]: !!item.part\r\n          })}\r\n          style={hasPseudoImage && computedPseudoImage?.styles}\r\n        ></div>\r\n      );\r\n    }\r\n\r\n    // Img\r\n    if (hasImage) {\r\n      return imageTag; // TODO: Add the \"additional-item\" class\r\n    }\r\n\r\n    return undefined;\r\n  };\r\n\r\n  #handleAdditionalItemClick =\r\n    (\r\n      type: ActionListItemAdditionalItemActionType[\"type\"],\r\n      callback?: (id: string) => void\r\n    ) =>\r\n    (event: MouseEvent) => {\r\n      event.stopPropagation();\r\n\r\n      if (callback) {\r\n        callback(this.el.id);\r\n      } else {\r\n        this.#additionalItemListenerDictionary[\r\n          // Only \"custom\" type has callbacks\r\n          type as Exclude<\r\n            ActionListItemAdditionalItemActionType[\"type\"],\r\n            \"custom\"\r\n          >\r\n        ]();\r\n      }\r\n    };\r\n\r\n  #setExportParts = () => {\r\n    let exportParts: string | undefined = undefined;\r\n\r\n    if (this.additionalInfo) {\r\n      const parts = computeExportParts(this.additionalInfo);\r\n\r\n      // Additional parts\r\n      if (parts.size > 0) {\r\n        exportParts = `${ACTION_LIST_ITEM_EXPORT_PARTS},${Array.from(\r\n          parts\r\n        ).join(\",\")}`;\r\n      }\r\n    }\r\n\r\n    this.el.setAttribute(\r\n      \"exportparts\",\r\n      exportParts ?? ACTION_LIST_ITEM_EXPORT_PARTS\r\n    );\r\n  };\r\n\r\n  #setActionTypeBlocks = () => {\r\n    this.#deletingSections = computeActionTypeBlocks(\r\n      \"remove\",\r\n      this.additionalInfo\r\n    );\r\n    this.#editingSections = computeActionTypeBlocks(\r\n      \"modify\",\r\n      this.additionalInfo\r\n    );\r\n  };\r\n\r\n  #renderAdditionalInfo = (\r\n    additionalModel: ActionListItemAdditionalModel,\r\n    zoneName: ActionListItemAdditionalInformationSection,\r\n    stretch = false\r\n  ) => {\r\n    if (!additionalModel) {\r\n      return;\r\n    }\r\n\r\n    const zoneNameWithPrefix = `item__${zoneName}` as const;\r\n\r\n    let actionTypeSection:\r\n      | Exclude<\r\n          ActionListItemAdditionalItemActionType[\"type\"],\r\n          \"fix\" | \"custom\"\r\n        >\r\n      | undefined;\r\n    let actionTypeAligns = undefined;\r\n\r\n    // Editing\r\n    if (\r\n      this.editing &&\r\n      this.#editingSections !== undefined &&\r\n      this.#editingSections.some(\r\n        editingSection => editingSection.section === zoneName\r\n      )\r\n    ) {\r\n      actionTypeSection = \"modify\";\r\n      actionTypeAligns = this.#editingSections.find(\r\n        editingSection => editingSection.section === zoneName\r\n      ).align;\r\n    }\r\n    // Deleting\r\n    else if (\r\n      this.deleting &&\r\n      this.#deletingSections !== undefined &&\r\n      this.#deletingSections.some(\r\n        deletingSection => deletingSection.section === zoneName\r\n      )\r\n    ) {\r\n      actionTypeSection = \"remove\";\r\n      actionTypeAligns = this.#deletingSections.find(\r\n        deletingSection => deletingSection.section === zoneName\r\n      ).align;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        key={zoneNameWithPrefix}\r\n        class={`align-container ${zoneName}`}\r\n        part={zoneNameWithPrefix}\r\n      >\r\n        {additionalModel.start && (\r\n          <div\r\n            key={`${zoneNameWithPrefix}-start`}\r\n            class={stretch ? \"align-start valign-start\" : \"align-start\"}\r\n            part={`${zoneNameWithPrefix} start`}\r\n          >\r\n            {actionTypeSection && actionTypeAligns.includes(\"start\")\r\n              ? this.#renderConfirmCancelButtons(actionTypeSection)\r\n              : this.#renderAdditionalItems(additionalModel.start)}\r\n          </div>\r\n        )}\r\n        {additionalModel.center && (\r\n          <div\r\n            key={`${zoneNameWithPrefix}-center`}\r\n            class={stretch ? \"align-center valign-center\" : \"align-center\"}\r\n            part={`${zoneNameWithPrefix} center`}\r\n          >\r\n            {actionTypeSection && actionTypeAligns.includes(\"center\")\r\n              ? this.#renderConfirmCancelButtons(actionTypeSection)\r\n              : this.#renderAdditionalItems(additionalModel.center)}\r\n          </div>\r\n        )}\r\n        {additionalModel.end && (\r\n          <div\r\n            key={`${zoneNameWithPrefix}-end`}\r\n            class={stretch ? \"align-end valign-end\" : \"align-end\"}\r\n            part={`${zoneNameWithPrefix} end`}\r\n          >\r\n            {actionTypeSection && actionTypeAligns.includes(\"end\")\r\n              ? this.#renderConfirmCancelButtons(actionTypeSection)\r\n              : this.#renderAdditionalItems(additionalModel.end)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  #renderConfirmCancelButtons = (\r\n    action: Exclude<\r\n      ActionListItemAdditionalItemActionType[\"type\"],\r\n      \"fix\" | \"custom\"\r\n    >\r\n  ) => [\r\n    <button\r\n      aria-label={this.#confirmActionsDictionary[action]()}\r\n      title={this.#confirmActionsDictionary[action]()}\r\n      class=\"confirm-action\"\r\n      part={tokenMap({\r\n        [ACTION_LIST_ITEM_PARTS_DICTIONARY.ADDITIONAL_ITEM_CONFIRM]: true,\r\n        [ACTION_LIST_ITEM_PARTS_DICTIONARY.ACTION_ACCEPT]: true,\r\n        [ACTION_LIST_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n\r\n        [ACTION_LIST_ITEM_PARTS_DICTIONARY.SELECTED]:\r\n          this.selectable && this.selected,\r\n        [ACTION_LIST_ITEM_PARTS_DICTIONARY.NOT_SELECTED]:\r\n          this.selectable && !this.selected\r\n      })}\r\n      disabled={this.disabled}\r\n      type=\"button\"\r\n      onClick={!this.disabled ? this.#acceptAction(action) : undefined}\r\n    ></button>,\r\n\r\n    <button\r\n      aria-label={this.#cancelActionsDictionary[action]()}\r\n      title={this.#cancelActionsDictionary[action]()}\r\n      class=\"cancel-action\"\r\n      part={tokenMap({\r\n        [ACTION_LIST_ITEM_PARTS_DICTIONARY.ADDITIONAL_ITEM_CONFIRM]: true,\r\n        [ACTION_LIST_ITEM_PARTS_DICTIONARY.ACTION_CANCEL]: true,\r\n        [ACTION_LIST_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n\r\n        [ACTION_LIST_ITEM_PARTS_DICTIONARY.SELECTED]:\r\n          this.selectable && this.selected,\r\n        [ACTION_LIST_ITEM_PARTS_DICTIONARY.NOT_SELECTED]:\r\n          this.selectable && !this.selected\r\n      })}\r\n      disabled={this.disabled}\r\n      type=\"button\"\r\n      onClick={!this.disabled ? this.#cancelAction : undefined}\r\n    ></button>\r\n  ];\r\n\r\n  #acceptAction =\r\n    (action: ActionListItemAdditionalItemActionType[\"type\"]) =>\r\n    (event: PointerEvent) => {\r\n      event.stopPropagation();\r\n\r\n      if (action === \"modify\") {\r\n        this.#removeEditMode(true, true)();\r\n      } else if (action === \"remove\") {\r\n        this.remove.emit(this.el.id);\r\n      }\r\n    };\r\n\r\n  #cancelAction = (event: PointerEvent) => {\r\n    event.stopPropagation();\r\n\r\n    this.editing = false;\r\n    this.deleting = false;\r\n  };\r\n\r\n  #getComputedImage = (\r\n    additionalItem: ActionListItemAdditionalBase\r\n  ): GxImageMultiStateStart | null => {\r\n    if (!additionalItem.imgSrc) {\r\n      return null;\r\n    }\r\n\r\n    // TODO: If we migrate this component to Lit, we should improve the\r\n    // efficiency of this lookup\r\n    const getImagePathCallback: ActionListImagePathCallback =\r\n      this.getImagePathCallback ??\r\n      getControlRegisterProperty(\r\n        \"getImagePathCallback\",\r\n        \"ch-action-list-render\"\r\n      ) ??\r\n      DEFAULT_GET_IMAGE_PATH_CALLBACK;\r\n\r\n    const img = getImagePathCallback(additionalItem);\r\n\r\n    return img\r\n      ? (updateDirectionInImageCustomVar(\r\n          img,\r\n          \"start\"\r\n        ) as GxImageMultiStateStart)\r\n      : null;\r\n  };\r\n\r\n  connectedCallback() {\r\n    this.el.setAttribute(\"role\", \"listitem\");\r\n    this.el.setAttribute(\"part\", ACTION_LIST_PARTS_DICTIONARY.ITEM);\r\n    this.#setExportParts();\r\n    this.#setActionTypeBlocks();\r\n  }\r\n\r\n  render() {\r\n    const additionalInfo = this.additionalInfo;\r\n    const hasAdditionalInfo = !!this.additionalInfo;\r\n\r\n    const stretchStart = hasAdditionalInfo && additionalInfo[\"stretch-start\"];\r\n    const blockStart = hasAdditionalInfo && additionalInfo[\"block-start\"];\r\n    const inlineCaption = hasAdditionalInfo && additionalInfo[\"inline-caption\"];\r\n    const blockEnd = hasAdditionalInfo && additionalInfo[\"block-end\"];\r\n    const stretchEnd = hasAdditionalInfo && additionalInfo[\"stretch-end\"];\r\n\r\n    const hasParts = !!this.parts;\r\n\r\n    return (\r\n      <Host aria-selected={this.selectable && this.selected ? \"true\" : null}>\r\n        <button\r\n          class=\"action\"\r\n          disabled={this.disabled}\r\n          part={tokenMap({\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.ACTION]: true,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.NESTED]: this.nested,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.NESTED_EXPANDABLE]:\r\n              this.nestedExpandable,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.SELECTABLE]: this.selectable,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.NOT_SELECTABLE]:\r\n              !this.selectable,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.SELECTED]:\r\n              this.selectable && this.selected,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.NOT_SELECTED]:\r\n              this.selectable && !this.selected,\r\n            [ACTION_LIST_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled\r\n          })}\r\n          type=\"button\"\r\n          ref={el => (this.#headerRef = el)}\r\n        >\r\n          {this.#renderAdditionalInfo(stretchStart, \"stretch-start\", true)}\r\n          {this.#renderAdditionalInfo(blockStart, \"block-start\")}\r\n\r\n          <div\r\n            key=\"item__inline-caption\"\r\n            class=\"align-container inline-caption\"\r\n            part={tokenMap({\r\n              \"item__inline-caption\": true,\r\n\r\n              [ACTION_LIST_ITEM_PARTS_DICTIONARY.EDITING]: this.editing,\r\n              [ACTION_LIST_ITEM_PARTS_DICTIONARY.NOT_EDITING]: !this.editing\r\n            })}\r\n          >\r\n            {this.editing ? (\r\n              <ch-edit\r\n                autoFocus\r\n                part={\r\n                  hasParts\r\n                    ? `${ACTION_LIST_ITEM_PARTS_DICTIONARY.EDIT_CAPTION} ${this.parts}`\r\n                    : ACTION_LIST_ITEM_PARTS_DICTIONARY.EDIT_CAPTION\r\n                }\r\n                disabled={this.disabled}\r\n                value={this.caption}\r\n                onKeyDown={\r\n                  !this.disabled ? this.#checkIfShouldRemoveEditMode : undefined\r\n                }\r\n                ref={el => (this.#inputRef = el)}\r\n              ></ch-edit>\r\n            ) : (\r\n              this.caption && (\r\n                <span part={ACTION_LIST_ITEM_PARTS_DICTIONARY.CAPTION}>\r\n                  {this.caption}\r\n                </span>\r\n              )\r\n            )}\r\n\r\n            {inlineCaption && [\r\n              inlineCaption.start && (\r\n                <div\r\n                  key=\"item__inline-caption-start\"\r\n                  class=\"align-start\"\r\n                  part=\"item__inline-caption start\"\r\n                >\r\n                  {this.#renderAdditionalItems(inlineCaption.start)}\r\n                </div>\r\n              ),\r\n              inlineCaption.end && (\r\n                <div\r\n                  key=\"item__inline-caption-end\"\r\n                  class=\"align-end\"\r\n                  part=\"item__inline-caption end\"\r\n                >\r\n                  {this.#renderAdditionalItems(inlineCaption.end)}\r\n                </div>\r\n              )\r\n            ]}\r\n          </div>\r\n\r\n          {this.#renderAdditionalInfo(blockEnd, \"block-end\")}\r\n          {this.#renderAdditionalInfo(stretchEnd, \"stretch-end\")}\r\n        </button>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","import {\r\n  ActionListItemActionable,\r\n  ActionListItemGroup,\r\n  ActionListItemModelExtended,\r\n  ActionListItemModelExtendedGroup,\r\n  ActionListItemModelExtendedRoot,\r\n  ActionListModel\r\n} from \"./types\";\r\n\r\n// Tags\r\nexport const ACTION_LIST_ITEM_TAG = \"ch-action-list-item\";\r\nexport const ACTION_LIST_GROUP_TAG = \"ch-action-list-group\";\r\n\r\n// Selectors\r\nexport const ACTION_LIST_ITEM_SELECTOR = (id: string) =>\r\n  `${ACTION_LIST_ITEM_TAG}[id=\"${id}\"]`;\r\n\r\nexport const ACTION_LIST_GROUP_SELECTOR = (id: string) =>\r\n  `${ACTION_LIST_GROUP_TAG}[id=\"${id}\"]`;\r\n\r\nexport const getActionListOrGroupItemFromEvent = (\r\n  event: KeyboardEvent | PointerEvent\r\n): HTMLChActionListItemElement | HTMLChActionListGroupElement | undefined => {\r\n  event.stopPropagation();\r\n\r\n  return event.composedPath().find(el => {\r\n    const tagName = (el as HTMLElement).tagName?.toLowerCase();\r\n\r\n    return (\r\n      tagName === ACTION_LIST_ITEM_TAG || tagName === ACTION_LIST_GROUP_TAG\r\n    );\r\n  }) as HTMLChActionListItemElement | HTMLChActionListGroupElement | undefined;\r\n};\r\n\r\nexport const getActionListOrGroupItemIndex = (\r\n  item: ActionListItemActionable | ActionListItemGroup,\r\n  items: ActionListModel\r\n) =>\r\n  items.findIndex(\r\n    (el: ActionListItemActionable | ActionListItemGroup) =>\r\n      el.id && el.id === item.id\r\n  );\r\n\r\nexport const getParentArray = (itemUIModel: ActionListItemModelExtended) =>\r\n  (itemUIModel as ActionListItemModelExtendedRoot).root ??\r\n  (itemUIModel as ActionListItemModelExtendedGroup).parentItem.items;\r\n\r\nexport const getActionListItemOrGroupInfo = (\r\n  itemId: string,\r\n  flattenedModel: Map<string, ActionListItemModelExtended>\r\n) =>\r\n  flattenedModel.get(itemId).item as\r\n    | ActionListItemActionable\r\n    | ActionListItemGroup;\r\n","import { KEY_CODES } from \"../../common/reserved-names\";\r\nimport { ChameleonControlsTagName } from \"../../common/types\";\r\nimport { focusComposedPath, mouseEventModifierKey } from \"../common/helpers\";\r\nimport {\r\n  ActionListItemActionable,\r\n  ActionListItemGroup,\r\n  ActionListItemModelExtended,\r\n  ActionListItemModelExtendedGroup,\r\n  ActionListItemModelExtendedRoot,\r\n  ActionListModel\r\n} from \"./types\";\r\nimport {\r\n  ACTION_LIST_GROUP_SELECTOR,\r\n  ACTION_LIST_ITEM_SELECTOR,\r\n  getActionListOrGroupItemFromEvent,\r\n  getActionListOrGroupItemIndex\r\n} from \"./utils\";\r\n\r\nconst EDIT_KEY = KEY_CODES.F2;\r\nconst ACTION_LIST_ITEM_TAG_NAME =\r\n  \"ch-action-list-item\" satisfies ChameleonControlsTagName;\r\n\r\nconst isActionListItem = (element: HTMLElement) =>\r\n  element.tagName.toLowerCase() === ACTION_LIST_ITEM_TAG_NAME;\r\n\r\nconst getFocusedActionListItem = (): HTMLChActionListItemElement | undefined =>\r\n  focusComposedPath().find(isActionListItem) as HTMLChActionListItemElement;\r\n\r\nconst focusItemById = (\r\n  itemInfo: ActionListItemActionable | ActionListItemGroup,\r\n  actionListRef: HTMLChActionListRenderElement,\r\n  event: KeyboardEvent\r\n) => {\r\n  const itemRef = actionListRef.shadowRoot.querySelector(\r\n    itemInfo.type === \"actionable\"\r\n      ? ACTION_LIST_ITEM_SELECTOR(itemInfo.id)\r\n      : ACTION_LIST_GROUP_SELECTOR(itemInfo.id)\r\n  ) as HTMLChActionListItemElement | HTMLChActionListGroupElement;\r\n\r\n  const ctrlKeyIsPressed = mouseEventModifierKey(event);\r\n\r\n  if (itemInfo.type === \"group\") {\r\n    (itemRef as HTMLChActionListGroupElement).setFocus();\r\n\r\n    // Trigger item selection when the ctrl key is not pressed\r\n    if (!ctrlKeyIsPressed) {\r\n      // TODO: Update item selection\r\n    }\r\n  } else {\r\n    itemRef.focus();\r\n\r\n    // Trigger item selection when the ctrl key is not pressed\r\n    if (!ctrlKeyIsPressed) {\r\n      itemRef.click();\r\n    }\r\n  }\r\n};\r\n\r\nconst getAndCheckItem = (\r\n  event: KeyboardEvent,\r\n  flattenedModel: Map<string, ActionListItemModelExtended>\r\n) => {\r\n  event.preventDefault();\r\n  const eventTarget = getActionListOrGroupItemFromEvent(event);\r\n\r\n  return eventTarget ? flattenedModel.get(eventTarget.id) : undefined;\r\n};\r\n\r\nconst groupIsCollapsed = (group: ActionListItemGroup) =>\r\n  group.expandable && group.expanded !== true;\r\n\r\nconst focusNextItemFirstLevel = (\r\n  startIndex: number,\r\n  items: ActionListModel,\r\n  currentFocusedId: string,\r\n  actionListRef: HTMLChActionListRenderElement,\r\n  event: KeyboardEvent,\r\n  increment: 1 | -1 // Determine the ARROW/focus direction\r\n) => {\r\n  for (\r\n    let firstLevelIndex = startIndex;\r\n    0 <= firstLevelIndex && firstLevelIndex <= items.length;\r\n    firstLevelIndex += increment\r\n  ) {\r\n    const firstLevelSibling = items[firstLevelIndex];\r\n\r\n    if (\r\n      (firstLevelSibling.type === \"actionable\" &&\r\n        !firstLevelSibling.disabled) ||\r\n      // Group\r\n      (firstLevelSibling.type === \"group\" &&\r\n        !firstLevelSibling.disabled &&\r\n        ((firstLevelSibling.expandable &&\r\n          firstLevelSibling.id !== currentFocusedId &&\r\n          increment === 1) ||\r\n          groupIsCollapsed(firstLevelSibling)))\r\n    ) {\r\n      focusItemById(firstLevelSibling, actionListRef, event);\r\n      return;\r\n    }\r\n    // The group is either expandable and it's expanded or it's always expanded (expandable !== true)\r\n    if (\r\n      firstLevelSibling.type === \"group\" &&\r\n      !firstLevelSibling.disabled &&\r\n      !groupIsCollapsed(firstLevelSibling)\r\n    ) {\r\n      const anItemWasFocused = focusNextItemSecondLevel(\r\n        // Depending on the increment, its starts at the beginning or the end of the array\r\n        increment === 1 ? 0 : firstLevelSibling.items.length - 1,\r\n        firstLevelSibling.items,\r\n        actionListRef,\r\n        event,\r\n        increment\r\n      );\r\n\r\n      if (anItemWasFocused) {\r\n        return;\r\n      }\r\n\r\n      // Focus the parent group if any element of the second level can be focused,\r\n      // the parent is expandable (it means its focusable) and the focus direction is up\r\n      if (firstLevelSibling.expandable && increment === -1) {\r\n        focusItemById(firstLevelSibling, actionListRef, event);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Try to focus an item of a group level (second level).\r\n * @returns if an item was focused\r\n */\r\nfunction focusNextItemSecondLevel(\r\n  startIndex: number,\r\n  items: ActionListItemActionable[],\r\n  actionListRef: HTMLChActionListRenderElement,\r\n  event: KeyboardEvent,\r\n  increment: 1 | -1\r\n): boolean {\r\n  for (\r\n    let firstLevelIndex = startIndex;\r\n    0 <= firstLevelIndex && firstLevelIndex <= items.length - 1;\r\n    firstLevelIndex += increment\r\n  ) {\r\n    const firstLevelSibling = items[firstLevelIndex];\r\n\r\n    if (!firstLevelSibling.disabled) {\r\n      focusItemById(firstLevelSibling, actionListRef, event);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nconst keyboardDictionary = {\r\n  [KEY_CODES.ARROW_UP]: (\r\n    actionListRef: HTMLChActionListRenderElement,\r\n    flattenedModel: Map<string, ActionListItemModelExtended>,\r\n    event: KeyboardEvent\r\n  ) => {\r\n    const itemUIModel = getAndCheckItem(event, flattenedModel);\r\n    if (!itemUIModel) {\r\n      return;\r\n    }\r\n    const itemInfo = itemUIModel.item as\r\n      | ActionListItemActionable\r\n      | ActionListItemGroup;\r\n\r\n    // First level (root level)\r\n    if ((itemUIModel as ActionListItemModelExtendedRoot).root) {\r\n      const root = (itemUIModel as ActionListItemModelExtendedRoot).root;\r\n      const itemIndex = getActionListOrGroupItemIndex(itemInfo, root);\r\n\r\n      focusNextItemFirstLevel(\r\n        itemIndex - 1,\r\n        root,\r\n        itemInfo.id,\r\n        actionListRef,\r\n        event,\r\n        -1\r\n      );\r\n    }\r\n    // Second level (group level)\r\n    else {\r\n      const parentItem = (itemUIModel as ActionListItemModelExtendedGroup)\r\n        .parentItem;\r\n      const root = (\r\n        flattenedModel.get(parentItem.id) as ActionListItemModelExtendedRoot\r\n      ).root;\r\n\r\n      const secondLevelIndex = getActionListOrGroupItemIndex(\r\n        itemInfo,\r\n        parentItem.items\r\n      );\r\n\r\n      const anItemWasFocused = focusNextItemSecondLevel(\r\n        secondLevelIndex - 1,\r\n        parentItem.items,\r\n        actionListRef,\r\n        event,\r\n        -1\r\n      );\r\n\r\n      if (anItemWasFocused) {\r\n        return;\r\n      }\r\n\r\n      // Focus the parent group if any element of the second level can be focused\r\n      // and the parent is expandable (it means its focusable)\r\n      if (parentItem.expandable) {\r\n        focusItemById(parentItem, actionListRef, event);\r\n        return;\r\n      }\r\n\r\n      const firstLevelIndex = getActionListOrGroupItemIndex(parentItem, root);\r\n      focusNextItemFirstLevel(\r\n        firstLevelIndex - 1,\r\n        root,\r\n        itemInfo.id,\r\n        actionListRef,\r\n        event,\r\n        -1\r\n      );\r\n    }\r\n  },\r\n\r\n  [KEY_CODES.ARROW_DOWN]: (\r\n    actionListRef: HTMLChActionListRenderElement,\r\n    flattenedModel: Map<string, ActionListItemModelExtended>,\r\n    event: KeyboardEvent\r\n  ) => {\r\n    const itemUIModel = getAndCheckItem(event, flattenedModel);\r\n    if (!itemUIModel) {\r\n      return;\r\n    }\r\n    const itemInfo = itemUIModel.item as\r\n      | ActionListItemActionable\r\n      | ActionListItemGroup;\r\n\r\n    // First level (root level)\r\n    if ((itemUIModel as ActionListItemModelExtendedRoot).root) {\r\n      const root = (itemUIModel as ActionListItemModelExtendedRoot).root;\r\n      const itemIndex = getActionListOrGroupItemIndex(itemInfo, root);\r\n\r\n      focusNextItemFirstLevel(\r\n        itemInfo.type === \"group\" && !groupIsCollapsed(itemInfo)\r\n          ? itemIndex\r\n          : itemIndex + 1,\r\n        root,\r\n        itemInfo.id,\r\n        actionListRef,\r\n        event,\r\n        1\r\n      );\r\n    }\r\n    // Second level (group level)\r\n    else {\r\n      const parentItem = (itemUIModel as ActionListItemModelExtendedGroup)\r\n        .parentItem;\r\n      const root = (\r\n        flattenedModel.get(parentItem.id) as ActionListItemModelExtendedRoot\r\n      ).root;\r\n\r\n      const secondLevelIndex = getActionListOrGroupItemIndex(\r\n        itemInfo,\r\n        parentItem.items\r\n      );\r\n\r\n      const anItemWasFocused = focusNextItemSecondLevel(\r\n        secondLevelIndex + 1,\r\n        parentItem.items,\r\n        actionListRef,\r\n        event,\r\n        1\r\n      );\r\n\r\n      if (anItemWasFocused) {\r\n        return;\r\n      }\r\n\r\n      const firstLevelIndex = getActionListOrGroupItemIndex(parentItem, root);\r\n      focusNextItemFirstLevel(\r\n        firstLevelIndex + 1,\r\n        root,\r\n        itemInfo.id,\r\n        actionListRef,\r\n        event,\r\n        1\r\n      );\r\n    }\r\n  },\r\n\r\n  [EDIT_KEY]: (actionListRef, _, event) => {\r\n    const actionListItem = getFocusedActionListItem();\r\n\r\n    // TODO: Add support to edit items even if editable === undefined. This case\r\n    // applies when an item has a \"modify\" type action\r\n    if (\r\n      !actionListItem ||\r\n      (!actionListItem.editable && !actionListRef.editableItems) ||\r\n      actionListItem.editing ||\r\n      actionListItem.deleting ||\r\n      actionListItem.disabled\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    actionListItem.editing = true;\r\n  }\r\n} satisfies {\r\n  [key: string]: (\r\n    actionListRef: HTMLChActionListRenderElement,\r\n    flattenedModel: Map<string, ActionListItemModelExtended>,\r\n    event: KeyboardEvent\r\n  ) => void;\r\n};\r\n\r\nexport const actionListKeyboardNavigation =\r\n  (\r\n    actionListRef: HTMLChActionListRenderElement,\r\n    flattenedModel: Map<string, ActionListItemModelExtended>\r\n  ) =>\r\n  (event: KeyboardEvent) => {\r\n    const keyboardEventHandler = keyboardDictionary[event.code];\r\n\r\n    if (keyboardEventHandler) {\r\n      keyboardEventHandler(actionListRef, flattenedModel, event);\r\n    }\r\n  };\r\n","import {\r\n  ActionListItemModel,\r\n  ActionListItemModelExtended,\r\n  ActionListItemType,\r\n  ActionListModel\r\n} from \"./types\";\r\nimport { getParentArray } from \"./utils\";\r\n\r\nexport const updateItemProperty = (\r\n  itemId: string,\r\n  propertiesToUpdate: Partial<ActionListItemModel> & {\r\n    type: ActionListItemType;\r\n  },\r\n  flattenedTreeModel: Map<string, ActionListItemModelExtended>,\r\n  newSelectedItems: Set<string>\r\n): ActionListModel | undefined => {\r\n  const itemUIModel = flattenedTreeModel.get(itemId);\r\n  if (!itemUIModel) {\r\n    return undefined;\r\n  }\r\n  const itemInfo = itemUIModel.item;\r\n\r\n  // Types doesn't match\r\n  if (propertiesToUpdate.type !== itemInfo.type) {\r\n    return undefined;\r\n  }\r\n\r\n  // Update properties\r\n  for (const propertyName in propertiesToUpdate) {\r\n    const propertyValue = propertiesToUpdate[propertyName];\r\n\r\n    if (propertyValue !== undefined) {\r\n      itemInfo[propertyName] = propertyValue;\r\n    }\r\n  }\r\n\r\n  if (propertiesToUpdate.type === \"separator\") {\r\n    return undefined;\r\n  }\r\n\r\n  // Accumulate selection/deselection\r\n  if (propertiesToUpdate.selected) {\r\n    newSelectedItems.add(itemId);\r\n  } else if (propertiesToUpdate.selected === false) {\r\n    newSelectedItems.delete(itemId);\r\n  }\r\n\r\n  return getParentArray(itemUIModel);\r\n};\r\n","export type ActionListTranslations = {\r\n  // confirm: string;\r\n  // cancel: string;\r\n  confirmDelete: string;\r\n  cancelDelete: string;\r\n  confirmModify: string;\r\n  cancelModify: string;\r\n\r\n  // pin: string;\r\n  // unpin: string;\r\n  // delete: string;\r\n  // modify: string;\r\n};\r\n\r\nexport const actionListDefaultTranslations = Object.freeze({\r\n  // confirm: \"Confirm\",\r\n  // cancel: \"Cancel\",\r\n\r\n  confirmDelete: \"Confirm delete\",\r\n  cancelDelete: \"Cancel delete\",\r\n  confirmModify: \"Confirm modification\",\r\n  cancelModify: \"Cancel modification\"\r\n\r\n  // pin: \"Pin\",\r\n  // unpin: \"Unpin\",\r\n  // delete: \"Delete\",\r\n  // modify: \"Modify\"\r\n}) satisfies Readonly<ActionListTranslations>;\r\n","import { ChActionListRender } from \"./action-list-render\";\r\nimport { ActionListItemModelExtended, ActionListModel } from \"./types\";\r\nimport { getActionListItemOrGroupInfo } from \"./utils\";\r\n\r\nexport const setActionListSelectedItems = (\r\n  model: ActionListModel,\r\n  selectedItems: Set<string>\r\n) => {\r\n  for (let index = 0; index < model.length; index++) {\r\n    const itemUIModel = model[index];\r\n\r\n    if (itemUIModel.type === \"actionable\" && itemUIModel.selected) {\r\n      selectedItems.add(itemUIModel.id);\r\n    } else if (itemUIModel.type === \"group\" && itemUIModel.items != null) {\r\n      setActionListSelectedItems(itemUIModel.items, selectedItems);\r\n    }\r\n  }\r\n};\r\n\r\nexport const selectedItemsDiffer = (\r\n  currentSelectedItems: Set<string>,\r\n  newSelectedItems: Set<string>\r\n): boolean => {\r\n  if (currentSelectedItems.size !== newSelectedItems.size) {\r\n    return true;\r\n  }\r\n\r\n  // Check if every item is on both Sets\r\n  for (const key of currentSelectedItems) {\r\n    if (!newSelectedItems.has(key)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst removeAllSelectedItemsExceptForTheLast = (\r\n  selectedItems: Set<string>,\r\n  flattenedModel: Map<string, ActionListItemModelExtended>\r\n) => {\r\n  const selectedItemsArray = [...selectedItems.values()];\r\n  const lastItemIndex = selectedItems.size - 1;\r\n\r\n  // Deselect all items except the last\r\n  for (let index = 0; index < lastItemIndex; index++) {\r\n    const itemId = selectedItemsArray[index];\r\n    getActionListItemOrGroupInfo(itemId, flattenedModel).selected = false;\r\n  }\r\n\r\n  // Create a new Set with only the last item\r\n  selectedItems.clear();\r\n  selectedItems.add(selectedItemsArray[lastItemIndex]);\r\n};\r\n\r\nexport const selectedItemsChangeShouldBeEmitted = (\r\n  currentSelectedItems: Set<string>,\r\n  newSelectedItems: Set<string>,\r\n  flattenedModel: Map<string, ActionListItemModelExtended>,\r\n  selection: ChActionListRender[\"selection\"]\r\n): boolean => {\r\n  if (selection === \"single\") {\r\n    if (newSelectedItems.size > 1) {\r\n      removeAllSelectedItemsExceptForTheLast(newSelectedItems, flattenedModel);\r\n      return true;\r\n    }\r\n    if (selectedItemsDiffer(currentSelectedItems, newSelectedItems)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  if (selectedItemsDiffer(currentSelectedItems, newSelectedItems)) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n","import {\r\n  ActionListItemActionable,\r\n  ActionListItemGroup,\r\n  ActionListItemModelExtended,\r\n  ActionListModel\r\n} from \"./types\";\r\n\r\nconst flattenSubUIModel = (\r\n  model: ActionListItemActionable[],\r\n  parentItem: ActionListItemGroup,\r\n  flattenedModel: Map<string, ActionListItemModelExtended>,\r\n  sortModel: (model: ActionListModel) => void\r\n) => {\r\n  if (!model) {\r\n    return;\r\n  }\r\n\r\n  // Traditional for loop is the faster \"for\"\r\n  for (let index = 0; index < model.length; index++) {\r\n    const itemInfo = model[index];\r\n    flattenedModel.set(itemInfo.id, {\r\n      item: itemInfo,\r\n      parentItem: parentItem\r\n    });\r\n  }\r\n\r\n  sortModel(model);\r\n};\r\n\r\nexport const flattenActionListUIModel = (\r\n  model: ActionListModel,\r\n  flattenedModel: Map<string, ActionListItemModelExtended>,\r\n  sortModel: (model: ActionListModel) => void\r\n) => {\r\n  flattenedModel.clear();\r\n\r\n  if (!model) {\r\n    return;\r\n  }\r\n\r\n  // Traditional for loop is the faster \"for\"\r\n  for (let index = 0; index < model.length; index++) {\r\n    const itemInfo = model[index];\r\n\r\n    // Group\r\n    if (itemInfo.type === \"group\") {\r\n      flattenedModel.set(itemInfo.id, { item: itemInfo, root: model });\r\n      flattenSubUIModel(itemInfo.items, itemInfo, flattenedModel, sortModel);\r\n    }\r\n    // Actionable\r\n    else if (itemInfo.type === \"actionable\") {\r\n      flattenedModel.set(itemInfo.id, { item: itemInfo, root: model });\r\n    }\r\n  }\r\n\r\n  sortModel(model);\r\n};\r\n","@import \"../../common/base\";\r\n@import \"../../common/icons\";\r\n\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-action-list-item__image-size:\r\n   * Specifies the box size that contains the images for the additional images.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-action-list-item__image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-action-list-item__background-image-size:\r\n   * Specifies the image size of the additional images.\r\n   * @default 100%\r\n   */\r\n  --ch-action-list-item__background-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-action-list-group__expandable-button-size:\r\n   * Specifies the box size that contains the expandable button image.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-action-list-group__expandable-button-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-action-list-group__expandable-button-image-size:\r\n   * Specifies the image size of the expandable button.\r\n   * @default 100%\r\n   */\r\n  --ch-action-list-group__expandable-button-image-size: 100%;\r\n\r\n  --ch-action-list-item__additional-item-fixed-image: #{$unpin-outlined};\r\n  --ch-action-list-item__additional-item-not-fixed-image: #{$pin-outlined};\r\n  --ch-action-list-item__additional-item-remove-image: #{$remove};\r\n  --ch-action-list-item__additional-item-modify-image: #{$edit};\r\n  --ch-action-list-item__additional-item-confirm-image: #{$confirm-icon};\r\n  --ch-action-list-item__additional-item-cancel-image: #{$close-icon};\r\n\r\n  --ch-action-list-item__action-color: currentColor;\r\n\r\n  display: grid;\r\n  grid-auto-rows: max-content;\r\n  block-size: 100%;\r\n  overflow: auto;\r\n  contain: size;\r\n}\r\n\r\n.separator {\r\n  display: grid;\r\n  block-size: 1px;\r\n  background-color: currentColor;\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Host,\r\n  h,\r\n  Prop,\r\n  State,\r\n  Listen,\r\n  Watch,\r\n  forceUpdate,\r\n  Event,\r\n  EventEmitter,\r\n  Method\r\n  // EventEmitter\r\n} from \"@stencil/core\";\r\nimport {\r\n  ActionListImagePathCallback,\r\n  ActionListItemActionable,\r\n  ActionListItemGroup,\r\n  ActionListItemModel,\r\n  ActionListItemModelExtended,\r\n  ActionListItemModelExtendedGroup,\r\n  ActionListItemModelExtendedRoot,\r\n  ActionListItemModelMap,\r\n  ActionListItemType,\r\n  ActionListModel\r\n} from \"./types\";\r\nimport {\r\n  ActionListTranslations,\r\n  ChActionListItemCustomEvent\r\n} from \"../../components\";\r\nimport {\r\n  ActionListCaptionChangeEventDetail,\r\n  ActionListFixedChangeEventDetail\r\n} from \"./internal/action-list-item/types\";\r\nimport { mouseEventModifierKey } from \"../common/helpers\";\r\nimport { removeElement } from \"../../common/array\";\r\nimport { SCROLLABLE_CLASS } from \"../../common/reserved-names\";\r\nimport { adoptCommonThemes } from \"../../common/theme\";\r\nimport { actionListKeyboardNavigation } from \"./keyboard-navigation\";\r\nimport {\r\n  ACTION_LIST_ITEM_TAG,\r\n  getActionListItemOrGroupInfo,\r\n  getActionListOrGroupItemFromEvent,\r\n  getParentArray\r\n} from \"./utils\";\r\nimport { updateItemProperty } from \"./update-item-property\";\r\nimport { actionListDefaultTranslations } from \"./translations\";\r\nimport {\r\n  selectedItemsChangeShouldBeEmitted,\r\n  setActionListSelectedItems\r\n} from \"./selections\";\r\nimport { flattenActionListUIModel } from \"./flatten-model\";\r\n\r\nconst DEFAULT_EDITABLE_ITEMS_VALUE = true;\r\n// const DEFAULT_ORDER_VALUE = 0;\r\n\r\n// const defaultGetImagePath: ActionListImagePathCallback = (imgSrc: string) =>\r\n//   imgSrc;\r\n\r\nconst renderMapping: {\r\n  [key in ActionListItemType]: (\r\n    itemModel: ActionListItemModelMap[key],\r\n    actionRenderState: ChActionListRender,\r\n    disabled?: boolean,\r\n    nested?: boolean,\r\n    nestedExpandable?: boolean\r\n  ) => any;\r\n} = {\r\n  actionable: (\r\n    itemModel,\r\n    actionListRenderState,\r\n    disabled: boolean,\r\n    nested = false,\r\n    nestedExpandable = false\r\n  ) => (\r\n    <ch-action-list-item\r\n      key={itemModel.id}\r\n      id={itemModel.id}\r\n      additionalInfo={itemModel.additionalInformation}\r\n      caption={itemModel.caption}\r\n      checkbox={itemModel.checkbox ?? actionListRenderState.checkbox}\r\n      checked={itemModel.checked ?? actionListRenderState.checked}\r\n      disabled={\r\n        disabled === true\r\n          ? true\r\n          : itemModel.disabled ?? actionListRenderState.disabled\r\n      }\r\n      editable={itemModel.editable ?? actionListRenderState.editableItems}\r\n      fixed={itemModel.fixed}\r\n      getImagePathCallback={actionListRenderState.getImagePathCallback}\r\n      metadata={itemModel.metadata}\r\n      nested={nested}\r\n      nestedExpandable={nestedExpandable}\r\n      selectable={actionListRenderState.selection !== \"none\"}\r\n      selected={itemModel.selected}\r\n      translations={actionListRenderState.translations}\r\n    ></ch-action-list-item>\r\n  ),\r\n  group: (itemModel, actionListRenderState) => (\r\n    <ch-action-list-group\r\n      key={itemModel.id}\r\n      id={itemModel.id}\r\n      caption={itemModel.caption}\r\n      disabled={itemModel.disabled ?? actionListRenderState.disabled}\r\n      expandable={itemModel.expandable}\r\n      expanded={itemModel.expanded}\r\n      selected={itemModel.selected}\r\n    >\r\n      {itemModel.items?.map(item =>\r\n        actionListRenderState.renderItem(\r\n          item,\r\n          actionListRenderState,\r\n          itemModel.disabled,\r\n          true,\r\n          itemModel.expandable\r\n        )\r\n      )}\r\n    </ch-action-list-group>\r\n  ),\r\n  separator: () => (\r\n    <div\r\n      role=\"separator\"\r\n      aria-hidden=\"true\"\r\n      class=\"separator\"\r\n      part=\"separator\"\r\n    ></div>\r\n  )\r\n};\r\n\r\nconst defaultRenderItem = (\r\n  itemModel: ActionListItemModel,\r\n  actionListRenderState: ChActionListRender,\r\n  disabled?: boolean,\r\n  nested?: boolean,\r\n  nestedExpandable?: boolean\r\n) =>\r\n  itemModel.type === \"actionable\"\r\n    ? renderMapping.actionable(\r\n        itemModel as any, // THIS IS A WA\r\n        actionListRenderState,\r\n        disabled,\r\n        nested,\r\n        nestedExpandable\r\n      )\r\n    : renderMapping[itemModel.type](\r\n        itemModel as any, // THIS IS A WA\r\n        actionListRenderState\r\n      );\r\n\r\nconst FIRST_ITEM_GREATER_THAN_SECOND = -1;\r\nconst SECOND_ITEM_GREATER_THAN_FIRST = 0;\r\n\r\nconst defaultSortItemsCallback = (subModel: ActionListItemModel[]): void => {\r\n  subModel.sort((a, b) => {\r\n    // Rules:\r\n    //   - Checks fixed value.\r\n    //   - If can't decide, checks \"order\" value.\r\n    //   - If can't decide, checks \"caption\" value.\r\n\r\n    // Both, \"a\" and \"b\" are fixed\r\n    if (a.type === \"actionable\" && b.type === \"actionable\") {\r\n      if (a.fixed && !b.fixed) {\r\n        return FIRST_ITEM_GREATER_THAN_SECOND;\r\n      }\r\n\r\n      if (!a.fixed && b.fixed) {\r\n        return SECOND_ITEM_GREATER_THAN_FIRST;\r\n      }\r\n    }\r\n    // Only \"a\" is fixed\r\n    else if (a.type === \"actionable\" && a.fixed) {\r\n      return FIRST_ITEM_GREATER_THAN_SECOND;\r\n    }\r\n    // Only \"b\" is fixed\r\n    else if (b.type === \"actionable\" && b.fixed) {\r\n      return SECOND_ITEM_GREATER_THAN_FIRST;\r\n    }\r\n\r\n    if (a.order < b.order) {\r\n      return FIRST_ITEM_GREATER_THAN_SECOND;\r\n    }\r\n\r\n    if (a.order > b.order) {\r\n      return SECOND_ITEM_GREATER_THAN_FIRST;\r\n    }\r\n\r\n    return a.type === \"actionable\" &&\r\n      b.type === \"actionable\" &&\r\n      a.caption <= b.caption\r\n      ? FIRST_ITEM_GREATER_THAN_SECOND\r\n      : SECOND_ITEM_GREATER_THAN_FIRST;\r\n  });\r\n};\r\n\r\n@Component({\r\n  tag: \"ch-action-list-render\",\r\n  styleUrl: \"action-list-render.scss\",\r\n  shadow: true\r\n})\r\nexport class ChActionListRender {\r\n  #flattenedModel: Map<string, ActionListItemModelExtended> = new Map();\r\n  // #additionalItemsParts: Set<string> | undefined;\r\n  #selectedItems: Set<string> | undefined = undefined;\r\n\r\n  #shouldUpdateModelAndSelection = false;\r\n\r\n  @Element() el: HTMLChActionListRenderElement;\r\n\r\n  @State() expanded: boolean = true;\r\n\r\n  /**\r\n   * This property lets you specify if the tree is waiting to process the drop\r\n   * of items.\r\n   */\r\n  @State() waitDropProcessing = false;\r\n\r\n  /**\r\n   * Set this attribute if you want display a checkbox in all items by default.\r\n   */\r\n  @Prop() readonly checkbox: boolean = false;\r\n\r\n  /**\r\n   * Set this attribute if you want the checkbox to be checked in all items by\r\n   * default.\r\n   * Only works if `checkbox = true`\r\n   */\r\n  @Prop() readonly checked: boolean = false;\r\n\r\n  /**\r\n   * This attribute lets you specify if all items are disabled.\r\n   * If disabled, action list items will not fire any user interaction related\r\n   * event (for example, `selectedItemsChange` event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This attribute lets you specify if the edit operation is enabled in all\r\n   * items by default. If `true`, the items can edit its caption in place.\r\n   */\r\n  @Prop() readonly editableItems: boolean = DEFAULT_EDITABLE_ITEMS_VALUE;\r\n\r\n  /**\r\n   * Callback that is executed when and item requests to be fixed/unfixed.\r\n   * If the callback is not defined, the item will be fixed/unfixed without\r\n   * further confirmation.\r\n   */\r\n  @Prop() readonly fixItemCallback?: (\r\n    itemInfo: ActionListItemActionable,\r\n    newFixedValue: boolean\r\n  ) => Promise<boolean>;\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * imgSrc needs to be resolved.\r\n   */\r\n  @Prop() readonly getImagePathCallback?: ActionListImagePathCallback;\r\n\r\n  /**\r\n   * This property lets you define the model of the control.\r\n   */\r\n  @Prop() readonly model: ActionListModel = [];\r\n  @Watch(\"model\")\r\n  modelChanged() {\r\n    this.#shouldUpdateModelAndSelection = true;\r\n  }\r\n\r\n  // /**\r\n  //  * This property lets you determine the expression that will be applied to the\r\n  //  * filter.\r\n  //  * Only works if `filterType = \"caption\" | \"metadata\"`.\r\n  //  */\r\n  // @Prop() readonly filter: string;\r\n  // @Watch(\"filter\")\r\n  // filterChanged() {\r\n  //   if (this.filterType === \"caption\" || this.filterType === \"metadata\") {\r\n  //     this.#scheduleFilterProcessing();\r\n  //   }\r\n  // }\r\n\r\n  // /**\r\n  //  * This property lets you determine the debounce time (in ms) that the\r\n  //  * control waits until it processes the changes to the filter property.\r\n  //  * Consecutive changes to the `filter` property between this range, reset the\r\n  //  * timeout to process the filter.\r\n  //  * Only works if `filterType = \"caption\" | \"metadata\"`.\r\n  //  */\r\n  // @Prop() readonly filterDebounce: number = 250;\r\n  // @Watch(\"filterDebounce\")\r\n  // filterDebounceChanged() {\r\n  //   if (this.filterType === \"caption\" || this.filterType === \"metadata\") {\r\n  //     this.#scheduleFilterProcessing();\r\n  //   }\r\n  // }\r\n\r\n  // /**\r\n  //  * This property lets you determine the list of items that will be filtered.\r\n  //  * Only works if `filterType = \"list\"`.\r\n  //  */\r\n  // @Prop() readonly filterList: string[] = [];\r\n  // @Watch(\"filterList\")\r\n  // filterListChanged() {\r\n  //   // Use a Set to efficiently check for ids\r\n  //   this.#filterListAsSet = new Set(this.filterList);\r\n\r\n  //   if (this.filterType === \"list\") {\r\n  //     this.#scheduleFilterProcessing();\r\n  //   }\r\n  // }\r\n\r\n  // /**\r\n  //  * This property lets you determine the options that will be applied to the\r\n  //  * filter.\r\n  //  */\r\n  // @Prop() readonly filterOptions: TreeViewFilterOptions = {};\r\n  // @Watch(\"filterOptions\")\r\n  // filterOptionsChanged() {\r\n  //   this.#scheduleFilterProcessing();\r\n  // }\r\n\r\n  // /**\r\n  //  * This attribute lets you define what kind of filter is applied to items.\r\n  //  * Only items that satisfy the filter predicate will be displayed.\r\n  //  *\r\n  //  * | Value       | Details                                                                                        |\r\n  //  * | ----------- | ---------------------------------------------------------------------------------------------- |\r\n  //  * | `checked`   | Show only the items that have a checkbox and are checked.                                      |\r\n  //  * | `unchecked` | Show only the items that have a checkbox and are not checked.                                  |\r\n  //  * | `caption`   | Show only the items whose `caption` satisfies the regex determinate by the `filter` property.  |\r\n  //  * | `metadata`  | Show only the items whose `metadata` satisfies the regex determinate by the `filter` property. |\r\n  //  * | `list`      | Show only the items that are contained in the array determinate by the `filterList` property.  |\r\n  //  * | `none`      | Show all items.                                                                                |\r\n  //  */\r\n  // @Prop() readonly filterType: TreeViewFilterType = \"none\";\r\n  // @Watch(\"filterType\")\r\n  // filterTypeChanged() {\r\n  //   this.#scheduleFilterProcessing();\r\n  // }\r\n\r\n  // /**\r\n  //  * This property specifies a callback that is executed when the path for an\r\n  //  * item image needs to be resolved. With this callback, there is no need to\r\n  //  * re-implement item rendering (`renderItem` property) just to change the\r\n  //  * path used for the images.\r\n  //  */\r\n  // @Prop() readonly getImagePathCallback: TreeViewImagePathCallback =\r\n  //   defaultGetImagePath;\r\n\r\n  /**\r\n   * Callback that is executed when a item request to modify its caption.\r\n   */\r\n  @Prop() readonly modifyItemCaptionCallback: (\r\n    actionListItemId: string,\r\n    newCaption: string\r\n  ) => Promise<void>;\r\n\r\n  /**\r\n   * This property allows us to implement custom rendering of tree items.\r\n   */\r\n  @Prop() readonly renderItem: (\r\n    itemModel: ActionListItemModel,\r\n    actionListRenderState: ChActionListRender,\r\n    disabled?: boolean,\r\n    nested?: boolean,\r\n    nestedExpandable?: boolean\r\n  ) => any = defaultRenderItem;\r\n\r\n  /**\r\n   * Callback that is executed when and item requests to be removed.\r\n   * If the callback is not defined, the item will be removed without further\r\n   * confirmation.\r\n   */\r\n  @Prop() readonly removeItemCallback?: (\r\n    itemInfo: ActionListItemActionable\r\n  ) => Promise<boolean>;\r\n\r\n  /**\r\n   * Specifies the type of selection implemented by the control.\r\n   */\r\n  @Prop() readonly selection: \"single\" | \"multiple\" | \"none\" = \"none\";\r\n  @Watch(\"selection\")\r\n  selectionChanged() {\r\n    this.#shouldUpdateModelAndSelection = true;\r\n  }\r\n\r\n  /**\r\n   * Callback that is executed when the treeModel is changed to order its items.\r\n   */\r\n  @Prop() readonly sortItemsCallback: (subModel: ActionListModel) => void =\r\n    defaultSortItemsCallback;\r\n\r\n  // /**\r\n  //  * Fired when the checked items change.\r\n  //  * This event does take into account the currently filtered items.\r\n  //  */\r\n  // @Event() checkedItemsChange: EventEmitter<\r\n  //   Map<string, TreeViewItemModelExtended>\r\n  // >;\r\n\r\n  /**\r\n   * Specifies the literals required for the control.\r\n   */\r\n  @Prop() readonly translations: ActionListTranslations =\r\n    actionListDefaultTranslations;\r\n\r\n  /**\r\n   * Fired when the selected items change and `selection !== \"none\"`\r\n   */\r\n  @Event() selectedItemsChange: EventEmitter<ActionListItemModelExtended[]>;\r\n\r\n  /**\r\n   * Fired when an item is clicked and `selection === \"none\"`.\r\n   * Applies for items that have `type === \"actionable\"` or\r\n   * (`type === \"group\"` and `expandable === true`)\r\n   */\r\n  @Event() itemClick: EventEmitter<ActionListItemModelExtended>;\r\n\r\n  /**\r\n   * Adds an item in the control.\r\n   *\r\n   * If the item already exists, the operation is canceled.\r\n   *\r\n   * If the `groupParentId` property is specified the item is added in the\r\n   * group determined by `groupParentId`. It only works if the item to add\r\n   * has `type === \"actionable\"`\r\n   */\r\n  @Method()\r\n  async addItem(\r\n    itemInfo: ActionListItemModel,\r\n    groupParentId?: string\r\n  ): Promise<void> {\r\n    // Already exists\r\n    if (this.#flattenedModel.get(itemInfo.id)) {\r\n      return;\r\n    }\r\n\r\n    if (groupParentId) {\r\n      const parentGroup = this.#flattenedModel.get(groupParentId);\r\n\r\n      // The parent group does not exists or it isn't a group\r\n      if (\r\n        !parentGroup ||\r\n        parentGroup.item.type !== \"group\" ||\r\n        itemInfo.type !== \"actionable\"\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      parentGroup.item.items.push(itemInfo);\r\n      this.#flattenedModel.set(itemInfo.id, {\r\n        item: itemInfo,\r\n        parentItem: parentGroup.item\r\n      });\r\n\r\n      // Sort items in parent model\r\n      this.#sortModel(parentGroup.item.items);\r\n    }\r\n    // Item is placed at the root\r\n    else {\r\n      this.model.push(itemInfo);\r\n      this.#flattenedModel.set(itemInfo.id, {\r\n        item: itemInfo,\r\n        root: this.model\r\n      });\r\n\r\n      // Sort items in parent model\r\n      this.#sortModel(this.model);\r\n    }\r\n\r\n    forceUpdate(this);\r\n  }\r\n\r\n  /**\r\n   * Given a list of ids, it returns an array of the items that exists in the\r\n   * given list.\r\n   */\r\n  @Method()\r\n  async getItemsInfo(\r\n    itemsId: string[]\r\n  ): Promise<ActionListItemModelExtended[]> {\r\n    return this.#getItemsInfo(itemsId);\r\n  }\r\n\r\n  /**\r\n   * Remove the item and all its descendants from the control.\r\n   */\r\n  @Method()\r\n  async removeItem(itemId: string) {\r\n    const itemUIModel = this.#flattenedModel.get(itemId);\r\n\r\n    if (!itemUIModel) {\r\n      return;\r\n    }\r\n\r\n    // Remove all descendants\r\n    if (itemUIModel.item.type === \"group\") {\r\n      const items = itemUIModel.item.items;\r\n\r\n      items.forEach(item => {\r\n        this.#flattenedModel.delete(item.id);\r\n      });\r\n    }\r\n\r\n    this.#removeItem(itemUIModel);\r\n  }\r\n\r\n  #getItemsInfo = (itemsId: string[]): ActionListItemModelExtended[] => {\r\n    const actionListItemsInfo: ActionListItemModelExtended[] = [];\r\n\r\n    itemsId.forEach(itemId => {\r\n      const itemUIModel = this.#flattenedModel.get(itemId);\r\n\r\n      if (itemUIModel) {\r\n        actionListItemsInfo.push(itemUIModel);\r\n      }\r\n    });\r\n\r\n    return actionListItemsInfo;\r\n  };\r\n\r\n  /**\r\n   * Given an itemId and the properties to update, it updates the properties\r\n   * of the items in the list.\r\n   */\r\n  @Method()\r\n  async updateItemProperties(\r\n    itemId: string,\r\n    properties: Partial<ActionListItemModel> & { type: ActionListItemType }\r\n  ) {\r\n    // Set to check if there are new selected items\r\n    const newSelectedItems = new Set(this.#selectedItems);\r\n\r\n    const parentArray = updateItemProperty(\r\n      itemId,\r\n      properties,\r\n      this.#flattenedModel,\r\n      newSelectedItems\r\n    );\r\n\r\n    if (parentArray !== undefined) {\r\n      this.#sortModel(parentArray);\r\n    }\r\n\r\n    if (\r\n      selectedItemsChangeShouldBeEmitted(\r\n        this.#selectedItems,\r\n        newSelectedItems,\r\n        this.#flattenedModel,\r\n        this.selection\r\n      )\r\n    ) {\r\n      this.#selectedItems = newSelectedItems;\r\n      this.#emitSelectedItemsChange();\r\n    }\r\n\r\n    forceUpdate(this);\r\n  }\r\n\r\n  @Listen(\"captionChange\")\r\n  onCaptionChange(\r\n    event: ChActionListItemCustomEvent<ActionListCaptionChangeEventDetail>\r\n  ) {\r\n    if (!this.modifyItemCaptionCallback) {\r\n      return;\r\n    }\r\n    event.stopPropagation();\r\n\r\n    const itemRef = event\r\n      .composedPath()\r\n      .find(\r\n        el =>\r\n          (el as HTMLElement).tagName &&\r\n          (el as HTMLElement).tagName?.toLowerCase() === ACTION_LIST_ITEM_TAG\r\n      ) as HTMLChActionListItemElement;\r\n    if (!itemRef) {\r\n      return;\r\n    }\r\n\r\n    const itemId = event.detail.itemId;\r\n    const itemUIModel = this.#flattenedModel.get(itemId);\r\n    const itemInfo = itemUIModel.item as ActionListItemActionable;\r\n    const newCaption = event.detail.newCaption;\r\n    const oldCaption = itemInfo.caption;\r\n\r\n    // Optimistic UI: Update the caption in the UI Model before the change is\r\n    // completed in the server\r\n    itemInfo.caption = newCaption;\r\n    itemRef.caption = newCaption;\r\n\r\n    this.modifyItemCaptionCallback(itemId, newCaption)\r\n      .then(() => {\r\n        // Sort items in parent model\r\n        this.#sortModel(getParentArray(itemUIModel));\r\n\r\n        // Update filters\r\n        // this.#scheduleFilterProcessing();\r\n\r\n        // Force re-render\r\n        forceUpdate(this);\r\n      })\r\n      .catch(() => {\r\n        // TODO: Should we do something with the error message?\r\n        itemRef.caption = oldCaption;\r\n        itemInfo.caption = oldCaption;\r\n      });\r\n  }\r\n\r\n  @Listen(\"fixedChange\")\r\n  onFixedChange(\r\n    event: ChActionListItemCustomEvent<ActionListFixedChangeEventDetail>\r\n  ) {\r\n    const detail = event.detail;\r\n\r\n    const itemUIModel = this.#flattenedModel.get(detail.itemId);\r\n    const itemInfo = itemUIModel.item as ActionListItemActionable;\r\n\r\n    if (!this.fixItemCallback) {\r\n      this.#updateItemFix(itemUIModel, itemInfo, detail.value);\r\n      return;\r\n    }\r\n\r\n    this.fixItemCallback(itemInfo, detail.value).then(acceptChange => {\r\n      if (acceptChange) {\r\n        this.#updateItemFix(itemUIModel, itemInfo, detail.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  #updateItemFix = (\r\n    itemUIModel: ActionListItemModelExtended,\r\n    itemInfo: ActionListItemActionable,\r\n    newFixedValue: boolean\r\n  ) => {\r\n    itemInfo.fixed = newFixedValue;\r\n\r\n    // Sort items in parent model\r\n    this.#sortModel(getParentArray(itemUIModel));\r\n\r\n    // Queue a re-render to update the fixed binding and the order of the items\r\n    forceUpdate(this);\r\n  };\r\n\r\n  @Listen(\"remove\")\r\n  onRemove(event: ChActionListItemCustomEvent<string>) {\r\n    const itemUIModel = this.#flattenedModel.get(event.detail);\r\n\r\n    if (!this.removeItemCallback) {\r\n      this.#removeItem(itemUIModel);\r\n\r\n      return;\r\n    }\r\n\r\n    this.removeItemCallback(itemUIModel.item as ActionListItemActionable).then(\r\n      acceptRemove => {\r\n        if (acceptRemove) {\r\n          this.#removeItem(itemUIModel);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  #getItemOrGroupInfo = (itemId: string) =>\r\n    getActionListItemOrGroupInfo(itemId, this.#flattenedModel);\r\n\r\n  #updateAndEmitSelectedItems = (selection: \"single\" | \"multiple\" | \"none\") => {\r\n    if (selection === \"none\") {\r\n      this.#removeAllSelectedItems();\r\n      this.#selectedItems = undefined;\r\n    }\r\n    // Create the set to allocate the selected items, if necessary\r\n    else {\r\n      // First render. Do not check to emit selectedItemsChange event.\r\n      if (!this.#selectedItems) {\r\n        this.#selectedItems = new Set();\r\n\r\n        // TODO: Add a unit test for \"?? []\"\r\n        setActionListSelectedItems(this.model ?? [], this.#selectedItems);\r\n        return;\r\n      }\r\n\r\n      const newSelectedItems = new Set<string>();\r\n      setActionListSelectedItems(this.model ?? [], newSelectedItems);\r\n\r\n      if (\r\n        selectedItemsChangeShouldBeEmitted(\r\n          this.#selectedItems,\r\n          newSelectedItems,\r\n          this.#flattenedModel,\r\n          this.selection\r\n        )\r\n      ) {\r\n        this.#selectedItems = newSelectedItems;\r\n        forceUpdate(this);\r\n        this.#emitSelectedItemsChange();\r\n      }\r\n    }\r\n  };\r\n\r\n  #removeAllSelectedItems = () => {\r\n    if (this.#selectedItems) {\r\n      this.#selectedItems.forEach(selectedItemId => {\r\n        const selectedItemInfo = this.#getItemOrGroupInfo(selectedItemId);\r\n        selectedItemInfo.selected = false;\r\n      });\r\n\r\n      this.#selectedItems.clear();\r\n    }\r\n  };\r\n\r\n  #handleItemClick = (event: PointerEvent) => {\r\n    const actionListItemOrGroup = getActionListOrGroupItemFromEvent(event);\r\n\r\n    if (\r\n      !actionListItemOrGroup ||\r\n      (actionListItemOrGroup as HTMLChActionListItemElement).editing\r\n    ) {\r\n      return;\r\n    }\r\n    const itemInfo = this.#getItemOrGroupInfo(actionListItemOrGroup.id);\r\n    this.#checkIfMustExpandCollapseGroup(itemInfo);\r\n\r\n    if (itemInfo.type === \"group\" && !itemInfo.expandable) {\r\n      return;\r\n    }\r\n    this.itemClick.emit(this.#flattenedModel.get(itemInfo.id));\r\n  };\r\n\r\n  #checkIfMustExpandCollapseGroup = (\r\n    itemInfo: ActionListItemActionable | ActionListItemGroup\r\n  ) => {\r\n    // Toggle the expanded/collapsed in the group on click\r\n    if (\r\n      itemInfo.type === \"group\" &&\r\n      itemInfo.expandable &&\r\n      !itemInfo.disabled\r\n    ) {\r\n      itemInfo.expanded = !itemInfo.expanded;\r\n      forceUpdate(this);\r\n    }\r\n  };\r\n\r\n  #handleItemSelection = (event: PointerEvent) => {\r\n    const actionListItemOrGroup = getActionListOrGroupItemFromEvent(event);\r\n\r\n    if (\r\n      !actionListItemOrGroup ||\r\n      (actionListItemOrGroup as HTMLChActionListItemElement).editing\r\n    ) {\r\n      return;\r\n    }\r\n    const itemId = actionListItemOrGroup.id;\r\n    const itemInfo = this.#getItemOrGroupInfo(itemId);\r\n\r\n    const ctrlKeyIsPressed = mouseEventModifierKey(event);\r\n    const itemWasSelected = this.#selectedItems.has(itemId);\r\n    const singleSelectionMode = this.selection === \"single\";\r\n\r\n    // - - - - - - - - - - Single selection - - - - - - - - - -\r\n    if (singleSelectionMode) {\r\n      if (!ctrlKeyIsPressed) {\r\n        this.#checkIfMustExpandCollapseGroup(itemInfo);\r\n      }\r\n\r\n      // Nothing to update in the UI\r\n      if (itemWasSelected && !ctrlKeyIsPressed) {\r\n        return;\r\n      }\r\n      const previousSelectedItemId: string | undefined = [\r\n        ...this.#selectedItems.keys()\r\n      ][0];\r\n\r\n      // Remove the previous selected item\r\n      if (previousSelectedItemId) {\r\n        this.#selectedItems.clear();\r\n\r\n        const previousSelectedItemInfo = this.#getItemOrGroupInfo(\r\n          previousSelectedItemId\r\n        );\r\n        previousSelectedItemInfo.selected = false;\r\n      }\r\n\r\n      // If the item was not selected, add it to the Set. If the item was\r\n      // selected, the previous if removes the item\r\n      if (!itemWasSelected) {\r\n        this.#selectedItems.add(itemId);\r\n      }\r\n\r\n      itemInfo.selected = !itemWasSelected;\r\n      this.#emitSelectedItemsChange();\r\n      forceUpdate(this);\r\n      return;\r\n    }\r\n\r\n    // - - - - - - - - - - Multiple selection - - - - - - - - - -\r\n    if (ctrlKeyIsPressed) {\r\n      // The item was selected, deselect the item\r\n      if (itemWasSelected) {\r\n        this.#selectedItems.delete(itemId);\r\n      }\r\n      // Otherwise, select the item\r\n      else {\r\n        this.#selectedItems.add(itemId);\r\n      }\r\n\r\n      itemInfo.selected = !itemWasSelected;\r\n    } else {\r\n      this.#checkIfMustExpandCollapseGroup(itemInfo);\r\n\r\n      // Remove the selection from all items\r\n      this.#removeAllSelectedItems();\r\n\r\n      this.#selectedItems.add(itemId);\r\n      itemInfo.selected = true;\r\n    }\r\n\r\n    this.#emitSelectedItemsChange();\r\n    forceUpdate(this);\r\n  };\r\n\r\n  #emitSelectedItemsChange = () => {\r\n    const selectedItemsInfo = this.#getItemsInfo([\r\n      ...this.#selectedItems.keys()\r\n    ]);\r\n    this.selectedItemsChange.emit(selectedItemsInfo);\r\n  };\r\n\r\n  #removeItem = (itemUIModel: ActionListItemModelExtended) => {\r\n    const parentArray =\r\n      (itemUIModel as ActionListItemModelExtendedRoot).root ??\r\n      (itemUIModel as ActionListItemModelExtendedGroup).parentItem.items;\r\n    const itemToRemoveId = itemUIModel.item.id;\r\n\r\n    const itemToRemoveIndex = parentArray.findIndex(\r\n      el => el.id === itemToRemoveId\r\n    );\r\n\r\n    // In some situations, the user could remove the item before the\r\n    // \"removeItemCallback\" promise is resolved\r\n    if (itemToRemoveIndex > -1) {\r\n      // Remove the UI model from the previous parent. The equality function\r\n      // must be by index, not by object reference\r\n      removeElement(parentArray, itemToRemoveIndex);\r\n    }\r\n\r\n    this.#flattenedModel.delete(itemToRemoveId);\r\n\r\n    // Queue a re-render\r\n    forceUpdate(this);\r\n  };\r\n\r\n  #sortModel = (model: ActionListModel) => {\r\n    if (this.sortItemsCallback) {\r\n      this.sortItemsCallback(model);\r\n    }\r\n  };\r\n\r\n  #flattenUIModel = (model: ActionListModel) =>\r\n    flattenActionListUIModel(model, this.#flattenedModel, this.#sortModel);\r\n\r\n  // #processAdditionalItemParts = () => {\r\n  //   this.#additionalItemsParts = undefined;\r\n\r\n  //   this.#additionalItemsParts ??= new Set();\r\n  // }\r\n\r\n  connectedCallback() {\r\n    adoptCommonThemes(this.el.shadowRoot.adoptedStyleSheets);\r\n    this.#flattenUIModel(this.model);\r\n\r\n    this.#updateAndEmitSelectedItems(this.selection);\r\n    this.el.setAttribute(\"role\", \"list\");\r\n  }\r\n\r\n  // Don't turn it into the componentWillUpdate lifecycle method.\r\n  // For some reason, the componentWillUpdate lifecycle method is not\r\n  // dispatched when an Angular page (with SSR) is served from the server, but\r\n  // when navigating in the SPA, the componentWillUpdate method works\r\n  componentWillRender() {\r\n    if (this.#shouldUpdateModelAndSelection) {\r\n      this.#shouldUpdateModelAndSelection = false;\r\n\r\n      this.#flattenUIModel(this.model);\r\n      this.#updateAndEmitSelectedItems(this.selection);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        aria-multiselectable={this.selection === \"multiple\" ? \"true\" : null}\r\n        class={SCROLLABLE_CLASS}\r\n        onClick={\r\n          this.selection === \"none\"\r\n            ? this.#handleItemClick\r\n            : this.#handleItemSelection\r\n        }\r\n        onKeyDown={actionListKeyboardNavigation(this.el, this.#flattenedModel)}\r\n      >\r\n        {this.model?.map(item =>\r\n          this.renderItem(item, this, false, false, false)\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}