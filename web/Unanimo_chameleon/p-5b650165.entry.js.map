{"version":3,"names":["codeDiffEditorCss","ChCodeDiffEditorStyle0","autoId","ChCodeDiffEditor","automaticLayout","mouseWheelScrollSensitivity","mouseWheelZoom","enableSplitViewResizing","renderSideBySide","monacoDiffEditorInstance","resizeObserver","editorId","monacoRef","absoluteContentRef","languageChanged","newLanguage","this","setModel","original","monaco","editor","createModel","value","modified","modifiedValue","modifiedValueChange","newModifiedValue","getModel","setValue","optionsChanged","options","updateOptions","readonlyChanged","newReadonly","originalEditable","readOnly","themeChanged","newTheme","theme","valueChange","newValue","yamlSchemaUriChange","newUri","language","configureMonacoYaml","enableSchemaRequest","format","schemas","getYamlSchemas","Uri","parse","connectedCallback","componentDidLoad","configureYaml","setupDiffEditor","ResizeObserver","entries","absoluteContentEntry","contentRect","layout","width","height","observe","disconnectedCallback","disconnect","fileMatch","uri","yamlSchemaUri","createDiffEditor","readonly","render","h","Host","key","class","ref","el"],"sources":["src/components/code-diff-editor/code-diff-editor.scss?tag=ch-code-diff-editor","src/components/code-diff-editor/code-diff-editor.tsx"],"sourcesContent":["// This is a WA to import required styles for the editor in production build\r\n@import \"../../common/monaco/monaco-styles-after-build.scss\";\r\n\r\nch-code-diff-editor {\r\n  display: grid;\r\n  position: relative;\r\n}\r\n\r\n.ch-code-diff-editor-absolute-content {\r\n  display: grid;\r\n  position: absolute;\r\n  inset: 0;\r\n}\r\n","import { Component, Host, Method, Prop, Watch, h } from \"@stencil/core\";\r\nimport monaco, {\r\n  configureMonacoYaml\r\n} from \"../../common/monaco/output/monaco.js\";\r\nimport { CodeDiffEditorOptions } from \"./code-diff-editor-types.js\";\r\n\r\nlet autoId = 0;\r\n\r\n@Component({\r\n  shadow: false,\r\n  styleUrl: \"code-diff-editor.scss\",\r\n  tag: \"ch-code-diff-editor\"\r\n})\r\nexport class ChCodeDiffEditor {\r\n  #monacoDiffEditorInstance!: monaco.editor.IStandaloneDiffEditor;\r\n  #resizeObserver: ResizeObserver | undefined;\r\n\r\n  #editorId: string = \"\";\r\n\r\n  // Refs\r\n  #monacoRef: HTMLDivElement;\r\n  #absoluteContentRef: HTMLDivElement;\r\n\r\n  /**\r\n   * Specifies the language of the auto created model in the editor.\r\n   */\r\n  @Prop() readonly language!: string;\r\n  @Watch(\"language\")\r\n  languageChanged(newLanguage: string) {\r\n    this.#monacoDiffEditorInstance?.setModel({\r\n      original: monaco.editor.createModel(this.value, newLanguage),\r\n      modified: monaco.editor.createModel(this.modifiedValue, newLanguage)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Specifies the modified value of the diff editor.\r\n   */\r\n  @Prop({ attribute: \"modified-value\" }) readonly modifiedValue: string;\r\n  @Watch(\"modifiedValue\")\r\n  modifiedValueChange(newModifiedValue: string) {\r\n    this.#monacoDiffEditorInstance\r\n      ?.getModel()!\r\n      .modified.setValue(newModifiedValue);\r\n  }\r\n\r\n  /**\r\n   * Specifies the editor options.\r\n   */\r\n  @Prop() readonly options: CodeDiffEditorOptions = {\r\n    automaticLayout: true,\r\n    mouseWheelScrollSensitivity: 4,\r\n    mouseWheelZoom: true,\r\n    enableSplitViewResizing: true,\r\n    renderSideBySide: true\r\n  };\r\n  @Watch(\"options\")\r\n  optionsChanged(options: CodeDiffEditorOptions) {\r\n    this.#monacoDiffEditorInstance?.updateOptions({\r\n      options\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Specifies if the editor should be readonly.\r\n   * If the `readOnly` or `originalEditable` property is specified in the `options` property,\r\n   * this property has no effect.\r\n   */\r\n  @Prop({ attribute: \"readonly\" }) readonly readonly: boolean = true;\r\n  @Watch(\"readonly\")\r\n  readonlyChanged(newReadonly: boolean) {\r\n    this.#monacoDiffEditorInstance?.updateOptions({\r\n      originalEditable: this.options.originalEditable ?? !newReadonly,\r\n      readOnly: this.options.readOnly ?? newReadonly\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Specifies the theme to be used for rendering.\r\n   */\r\n  @Prop() readonly theme: string = \"vs\";\r\n  @Watch(\"theme\")\r\n  themeChanged(newTheme: string) {\r\n    this.#monacoDiffEditorInstance?.updateOptions({\r\n      theme: newTheme\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Specifies the original value of the diff editor.\r\n   */\r\n  @Prop() readonly value: string;\r\n  @Watch(\"value\")\r\n  valueChange(newValue: string) {\r\n    this.#monacoDiffEditorInstance?.getModel()!.original.setValue(newValue);\r\n  }\r\n\r\n  /**\r\n   * Specifies the schema URI for the YAML language.\r\n   */\r\n  @Prop() readonly yamlSchemaUri: string = \"\";\r\n  @Watch(\"yamlSchemaUri\")\r\n  yamlSchemaUriChange(newUri: string) {\r\n    if (this.language !== \"yaml\") {\r\n      return;\r\n    }\r\n\r\n    // Necessary to not combine the current scheme with the new scheme\r\n    this.#editorId = `ch-diff-editor-${autoId++}`;\r\n\r\n    if (newUri) {\r\n      configureMonacoYaml(monaco, {\r\n        enableSchemaRequest: true,\r\n        format: true,\r\n        schemas: this.#getYamlSchemas()\r\n      });\r\n    } else {\r\n      configureMonacoYaml(monaco, {\r\n        enableSchemaRequest: true,\r\n        format: true,\r\n        schemas: []\r\n      });\r\n    }\r\n\r\n    this.#monacoDiffEditorInstance.setModel({\r\n      original: monaco.editor.createModel(\r\n        this.value,\r\n        this.language,\r\n        monaco.Uri.parse(`file:///${this.#editorId}.txt`)\r\n      ),\r\n      modified: monaco.editor.createModel(\r\n        this.modifiedValue,\r\n        this.language,\r\n        monaco.Uri.parse(`file:///${this.#editorId}-modified.txt`)\r\n      )\r\n    });\r\n  }\r\n\r\n  connectedCallback(): void {\r\n    this.#editorId = `ch-diff-editor-${autoId++}`;\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.#configureYaml();\r\n    this.#setupDiffEditor();\r\n\r\n    this.#resizeObserver = new ResizeObserver(entries => {\r\n      const absoluteContentEntry = entries[0].contentRect;\r\n\r\n      this.#monacoDiffEditorInstance.layout({\r\n        width: absoluteContentEntry.width,\r\n        height: absoluteContentEntry.height\r\n      });\r\n    });\r\n\r\n    this.#resizeObserver.observe(this.#absoluteContentRef);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.#resizeObserver?.disconnect();\r\n    this.#resizeObserver = null;\r\n  }\r\n\r\n  /**\r\n   * Update the editor's options after the editor has been created.\r\n   * @param options Set of options to be updated\r\n   */\r\n  @Method()\r\n  async updateOptions(options: CodeDiffEditorOptions) {\r\n    this.#monacoDiffEditorInstance?.updateOptions(options);\r\n  }\r\n\r\n  #getYamlSchemas = () => [\r\n    {\r\n      // If YAML file is opened matching this glob\r\n      fileMatch: [`**/${this.#editorId}.*`],\r\n      // Then this schema will be downloaded from the internet and used.\r\n      uri: this.yamlSchemaUri\r\n    },\r\n    {\r\n      // If YAML file is opened matching this glob\r\n      fileMatch: [`**/${this.#editorId}-modified.*`],\r\n      // Then this schema will be downloaded from the internet and used.\r\n      uri: this.yamlSchemaUri\r\n    }\r\n  ];\r\n\r\n  #setupDiffEditor() {\r\n    this.#monacoDiffEditorInstance = monaco.editor.createDiffEditor(\r\n      this.#monacoRef,\r\n      {\r\n        ...this.options,\r\n        theme: this.options.theme ?? this.theme,\r\n        originalEditable: this.options.originalEditable ?? !this.readonly,\r\n        readOnly: this.options.readOnly ?? this.readonly\r\n      }\r\n    );\r\n\r\n    this.#monacoDiffEditorInstance.setModel({\r\n      original: monaco.editor.createModel(\r\n        this.value,\r\n        this.language,\r\n        monaco.Uri.parse(`file:///${this.#editorId}.txt`)\r\n      ),\r\n      modified: monaco.editor.createModel(\r\n        this.modifiedValue,\r\n        this.language,\r\n        monaco.Uri.parse(`file:///${this.#editorId}-modified.txt`)\r\n      )\r\n    });\r\n  }\r\n\r\n  #configureYaml() {\r\n    if (this.language === \"yaml\" && !!this.yamlSchemaUri) {\r\n      configureMonacoYaml(monaco, {\r\n        enableSchemaRequest: true,\r\n        format: true,\r\n        schemas: this.#getYamlSchemas()\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div\r\n          class=\"ch-code-diff-editor-absolute-content\"\r\n          ref={el => (this.#absoluteContentRef = el)}\r\n        >\r\n          <div ref={el => (this.#monacoRef = el)}></div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}