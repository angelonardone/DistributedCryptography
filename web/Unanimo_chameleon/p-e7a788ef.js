const t=new Map;const e=new Map;const n=/(url\((?!\s*["']?(?:\/|https?:|data:))\s*["']?)([^'")]+)/g;const r=(t,e)=>(new CSSStyleSheet).replace(y(t,e));async function o(e,n){const r=t.get(e.name)??t.set(e.name,c(e,n)).get(e.name);if(e.url){h(e)}return r}async function c(t,e){if(t.styleSheet){return Promise.resolve({name:t.name,styleSheet:await r(t.themeBaseUrl,t.styleSheet)})}return a(t.name,e)}function a(t,n){return new Promise(((r,o)=>{e.set(t,{name:t,resolve:r,reject:o,timeout:setTimeout((()=>u(t)),n),isLoading:false})}))}function i(t,e){f(t);t.resolve(e)}function s(t,e){f(t);t.reject(e)}function u(t){const n=e.get(t);if(n){s(n,new Error(`Theme load timeout: ${t}`))}}function f(t){clearTimeout(t.timeout);e.delete(t.name)}async function h(t){const n=e.get(t.name);if(n&&!n.isLoading){n.isLoading=true;try{const e=await w(t.url,t.themeBaseUrl);i(n,{name:t.name,styleSheet:e})}catch(t){s(n,t)}}}async function w(t,e){try{return r(e,await l(t))}catch(t){throw new Error(`Failed to load theme stylesheet: ${t}`)}}async function l(t){try{const e=await fetch(t);if(!e.ok){throw new Error(`HTTP error! status: ${e.status}`)}return await e.text()}catch(t){throw new Error(`Failed to fetch stylesheet: ${t.message}`)}}function y(t,e){if(t){return e.replace(n,`$1${t}$2`)}return e}export{o as g};
//# sourceMappingURL=p-e7a788ef.js.map