{"version":3,"names":["getNavigationListItemLevelPart","evenLevel","NAVIGATION_LIST_ITEM_PARTS_DICTIONARY","EVEN_LEVEL","ODD_LEVEL","NAVIGATION_LIST_INITIAL_LEVEL","navigationListItemCss","ChNavigationListItemStyle0","GET_IMAGE_PATH_CALLBACK_REGISTRY","ChNavigationListItem","startImage","actionRef","getImagePathCallbackChanged","this","computeImage","startImgSrc","undefined","getImagePathCallback","img","model","updateDirectionInImageCustomVar","renderCaption","navigationListCollapsed","levelPart","showCaptionOnCollapse","h","key","actionElement","actionElementAccessibleName","caption","blockAlign","inlineAlign","delay","tooltipDelay","exportparts","tokenMapExportParts","CAPTION","NAVIGATION_LIST_COLLAPSED","TOOLTIP","DISABLED","disabled","SELECTED","selected","NOT_SELECTED","class","part","tokenMap","renderContent","evenLevelParts","hasExpandableButton","expandableButtonPosition","navigationListExpanded","startImageClasses","classes","action","DISABLED_CLASS","startImgType","expanded","link","role","style","styles","ACTION","LINK","EXPAND_BUTTON","START","END","href","url","ref","el","BUTTON","type","connectedCallback","getControlRegisterProperty","setAttribute","NAVIGATION_LIST_ITEM_EXPORT_PARTS","setProperty","level","render","expandable","expandableButton","Host","selectedLinkIndicator","INDICATOR","GROUP","navigationListRenderCss","ChNavigationListRenderStyle0","registerDefaultGetImagePathCallback","navigationListState","registryControlProperty","item","base","formatImagePath","useGxRender","fromGxImageToURL","gxSettings","gxImageConstructor","isSelectedLink","selectedLink","id","defaultRender","index","items","map","subItemIndex","renderItem","autoId","NAVIGATION_LIST_ITEM","ChNavigationListRender","navigationListId","modelChanged","expandSelectedLink","expandNewSelectedLink","selectedLinkChanged","buttonClick","hyperlinkClick","length","itemUIModel","selectedLinkIsChild","handleItemClick","event","composedPath","itemActionIndex","findIndex","tagName","toLowerCase","navigationListItem","canExpandSubItems","eventInfo","emit","defaultPrevented","preventDefault","forceUpdate","adoptCommonThemes","shadowRoot","adoptedStyleSheets","subscribe","getSubscriberRef","observerCallback","syncStateWithObservableAncestors","disconnectedCallback","removeSubscription","SCROLLABLE_CLASS","autoGrow","onClick"],"sources":["src/components/navigation-list/internal/navigation-list-item/utils.ts","src/components/navigation-list/utils.ts","src/components/navigation-list/internal/navigation-list-item/navigation-list-item.scss?tag=ch-navigation-list-item&encapsulation=shadow","src/components/navigation-list/internal/navigation-list-item/navigation-list-item.tsx","src/components/navigation-list/navigation-list-render.scss?tag=ch-navigation-list-render&encapsulation=shadow","src/components/navigation-list/navigation-list-render.tsx"],"sourcesContent":["import { NAVIGATION_LIST_ITEM_PARTS_DICTIONARY } from \"../../../../common/reserved-names\";\r\n\r\nexport const getNavigationListItemLevelPart = (evenLevel: boolean) =>\r\n  evenLevel\r\n    ? NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.EVEN_LEVEL\r\n    : NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.ODD_LEVEL;\r\n\r\nexport const getNavigationListItemExpandedPart = (expanded: boolean) =>\r\n  expanded\r\n    ? NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.EXPANDED\r\n    : NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.COLLAPSED;\r\n","export const NAVIGATION_LIST_INITIAL_LEVEL = 0;\r\n","@import \"../../../../common/base\";\r\n@import \"../../../../common/icons\";\r\n\r\n@include button-reset();\r\n@include box-sizing();\r\n\r\n:host {\r\n  display: grid;\r\n  position: relative;\r\n}\r\n\r\n:host(.expandable) {\r\n  grid-template-rows: max-content 0fr;\r\n  transition: grid-template-rows\r\n    var(--ch-navigation-list-item-expand-collapse-duration)\r\n    var(--ch-navigation-list-item-expand-collapse-timing-function);\r\n}\r\n\r\n:host(.expandable--expanded) {\r\n  grid-template-rows: max-content 1fr;\r\n}\r\n\r\n.indicator {\r\n  position: absolute;\r\n  inset-block: 0;\r\n  inset-inline-start: 0;\r\n  inline-size: 2px;\r\n  background-color: currentColor;\r\n  pointer-events: none;\r\n}\r\n\r\n.ch-disabled {\r\n  pointer-events: none;\r\n}\r\n\r\n.caption {\r\n  display: flex;\r\n  align-items: center;\r\n  flex: 1;\r\n}\r\n\r\n.expandable {\r\n  display: grid;\r\n  overflow: hidden;\r\n\r\n  // Delays the visibility application based on the value of var(--ch-navigation-list-item-expand-collapse-duration)\r\n  transition: visibility var(--ch-navigation-list-item-expand-collapse-duration)\r\n    allow-discrete;\r\n\r\n  &--collapsed {\r\n    visibility: hidden;\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//        Expandable button\r\n// - - - - - - - - - - - - - - - -\r\n.expandable-button {\r\n  &::before {\r\n    content: \"\";\r\n    display: grid;\r\n    place-items: center;\r\n    inline-size: var(--ch-navigation-list-item__expandable-button-size);\r\n    block-size: var(--ch-navigation-list-item__expandable-button-size);\r\n    pointer-events: none;\r\n    order: -2;\r\n    z-index: 1;\r\n    background-color: currentColor;\r\n    -webkit-mask: no-repeat center /\r\n      var(--ch-navigation-list-item__expandable-button-image-size)\r\n      $expandable-icon;\r\n\r\n    transition: transform\r\n      var(--ch-navigation-list-item-expand-collapse-duration)\r\n      var(--ch-navigation-list-item-expand-collapse-timing-function);\r\n  }\r\n\r\n  &--end::before {\r\n    order: 1;\r\n  }\r\n\r\n  // - - - - - - - Start - - - - - - -\r\n  &--collapsed-start::before {\r\n    transform: rotate(-90deg); // TODO: Add RTL support\r\n  }\r\n\r\n  // - - - - - - - End - - - - - - -\r\n  &--expanded-end::before {\r\n    transform: rotate(-180deg); // TODO: Add RTL support\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//                 Images\r\n// - - - - - - - - - - - - - - - - - - - -\r\n.action {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: var(--ch-navigation-list-item-gap);\r\n\r\n  // Defined in the navigation-list-render.scss file\r\n  padding-inline-start: var(--ch-navigation-list-item-indentation);\r\n\r\n  &--navigation-list-collapsed {\r\n    flex-direction: column;\r\n    text-align: center;\r\n  }\r\n\r\n  --ch-navigation-list-item-start-img: var(--ch-start-img--base);\r\n\r\n  &.start-img--hover:hover {\r\n    --ch-navigation-list-item-start-img: var(--ch-start-img--hover);\r\n  }\r\n\r\n  &.start-img--active:active {\r\n    --ch-navigation-list-item-start-img: var(--ch-start-img--active);\r\n  }\r\n\r\n  &.start-img--focus:focus {\r\n    --ch-navigation-list-item-start-img: var(--ch-start-img--focus);\r\n  }\r\n\r\n  &.start-img--disabled.ch-disabled {\r\n    --ch-navigation-list-item-start-img: var(--ch-start-img--disabled);\r\n  }\r\n}\r\n\r\n.pseudo-img--start::after {\r\n  order: -1;\r\n  content: \"\";\r\n  display: block;\r\n  inline-size: var(--ch-navigation-list-item__image-size);\r\n  block-size: var(--ch-navigation-list-item__image-size);\r\n  content-visibility: auto;\r\n  contain-intrinsic-size: auto var(--ch-navigation-list-item__image-size);\r\n}\r\n\r\n// Background\r\n.start-img-type--background::after {\r\n  background: no-repeat center /\r\n    var(--ch-navigation-list-item__background-image-size)\r\n    var(--ch-navigation-list-item-start-img);\r\n}\r\n\r\n// Mask\r\n.start-img-type--mask::after {\r\n  -webkit-mask: no-repeat center /\r\n    var(--ch-navigation-list-item__background-image-size)\r\n    var(--ch-navigation-list-item-start-img);\r\n  background-color: currentColor;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//                 Tooltip\r\n// - - - - - - - - - - - - - - - - - - - -\r\nch-tooltip {\r\n  --ch-tooltip-separation: var(--ch-navigation-list-item__tooltip-separation);\r\n  --ch-tooltip-separation-x: var(\r\n    --ch-navigation-list-item__tooltip-separation-x\r\n  );\r\n  --ch-tooltip-separation-y: var(\r\n    --ch-navigation-list-item__tooltip-separation-y\r\n  );\r\n}\r\n","import {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\n\r\nimport {\r\n  GxImageMultiState,\r\n  GxImageMultiStateStart,\r\n  ImageRender,\r\n  ItemLink\r\n} from \"../../../../common/types\";\r\nimport {\r\n  tokenMap,\r\n  tokenMapExportParts,\r\n  updateDirectionInImageCustomVar\r\n} from \"../../../../common/utils\";\r\nimport { NavigationListItemModel } from \"../../types\";\r\nimport { getNavigationListItemLevelPart } from \"./utils\";\r\nimport {\r\n  DISABLED_CLASS,\r\n  NAVIGATION_LIST_ITEM_EXPORT_PARTS,\r\n  NAVIGATION_LIST_ITEM_PARTS_DICTIONARY\r\n} from \"../../../../common/reserved-names\";\r\nimport { NAVIGATION_LIST_INITIAL_LEVEL } from \"../../utils\";\r\nimport { getControlRegisterProperty } from \"../../../../common/registry-properties\";\r\n\r\nlet GET_IMAGE_PATH_CALLBACK_REGISTRY: (\r\n  item: NavigationListItemModel\r\n) => GxImageMultiState | undefined;\r\n\r\n/**\r\n * @status experimental\r\n */\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"navigation-list-item.scss\",\r\n  tag: \"ch-navigation-list-item\"\r\n})\r\nexport class ChNavigationListItem implements ComponentInterface {\r\n  #startImage: GxImageMultiStateStart | undefined;\r\n\r\n  // Refs\r\n  #actionRef: HTMLButtonElement | HTMLAnchorElement;\r\n\r\n  @Element() el!: HTMLChNavigationListItemElement;\r\n\r\n  /**\r\n   * Specifies the caption of the control\r\n   */\r\n  @Prop() readonly caption!: string;\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * Specifies if the control contains sub items.\r\n   */\r\n  @Prop() readonly expandable: boolean = true;\r\n\r\n  /**\r\n   * Specifies what kind of expandable button is displayed in the items by\r\n   * default.\r\n   *  - `\"decorative\"`: Only a decorative icon is rendered to display the state\r\n   *     of the item.\r\n   */\r\n  @Prop() readonly expandableButton: \"decorative\" | \"no\" = \"decorative\";\r\n\r\n  /**\r\n   * Specifies the position of the expandable button in reference of the action\r\n   * element of the items\r\n   *  - `\"start\"`: Expandable button is placed before the action element.\r\n   *  - `\"end\"`: Expandable button is placed after the action element.\r\n   */\r\n  @Prop() readonly expandableButtonPosition: \"start\" | \"end\" = \"start\";\r\n\r\n  /**\r\n   * Specifies if the control is expanded or collapsed.\r\n   */\r\n  @Prop() readonly expanded?: boolean;\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * startImgSrc needs to be resolved.\r\n   */\r\n  @Prop() readonly getImagePathCallback?: (\r\n    imageSrc: NavigationListItemModel\r\n  ) => GxImageMultiState | undefined;\r\n  @Watch(\"getImagePathCallback\")\r\n  getImagePathCallbackChanged() {\r\n    this.#startImage = this.#computeImage();\r\n  }\r\n\r\n  /**\r\n   * Specifies at which level of the navigation list is rendered the control.\r\n   */\r\n  @Prop() readonly level!: number;\r\n\r\n  /**\r\n   *\r\n   */\r\n  @Prop() readonly link?: ItemLink | undefined;\r\n\r\n  /**\r\n   * Specifies the UI model of the control\r\n   */\r\n  @Prop() readonly model!: NavigationListItemModel;\r\n\r\n  /**\r\n   * Specifies if the navigation-list parent is expanded or collapsed.\r\n   */\r\n  @Prop() readonly navigationListExpanded: boolean = true;\r\n\r\n  /**\r\n   * Specifies if the hyperlink is selected. Only applies when the `link`\r\n   * property is defined.\r\n   */\r\n  @Prop() readonly selected?: boolean = false;\r\n\r\n  /**\r\n   * Specifies if the selected item indicator is displayed when the item is\r\n   * selected. Only applies when the `link` property is defined.\r\n   */\r\n  @Prop() readonly selectedLinkIndicator: boolean = false;\r\n\r\n  /**\r\n   * Specifies how the caption will be displayed when the navigation-list\r\n   * parent is collapsed\r\n   */\r\n  @Prop() readonly showCaptionOnCollapse?: \"inline\" | \"tooltip\" = \"inline\";\r\n\r\n  /**\r\n   * Specifies the src of the start image.\r\n   */\r\n  @Prop() readonly startImgSrc?: string | undefined;\r\n\r\n  /**\r\n   * Specifies how the start image will be rendered.\r\n   */\r\n  @Prop() readonly startImgType: Exclude<ImageRender, \"img\"> = \"background\";\r\n\r\n  /**\r\n   * Specifies the delay (in ms) for the tooltip to be displayed.\r\n   */\r\n  @Prop() readonly tooltipDelay?: number = 100;\r\n\r\n  #computeImage = (): GxImageMultiStateStart | undefined => {\r\n    if (!this.startImgSrc) {\r\n      return undefined;\r\n    }\r\n\r\n    const getImagePathCallback =\r\n      this.getImagePathCallback ?? GET_IMAGE_PATH_CALLBACK_REGISTRY;\r\n\r\n    if (!getImagePathCallback) {\r\n      return undefined;\r\n    }\r\n    const img = getImagePathCallback(this.model);\r\n\r\n    return img\r\n      ? (updateDirectionInImageCustomVar(\r\n          img,\r\n          \"start\"\r\n        ) as GxImageMultiStateStart)\r\n      : undefined;\r\n  };\r\n\r\n  #renderCaption = (\r\n    navigationListCollapsed: boolean,\r\n    levelPart: `level-${number}`\r\n  ) => {\r\n    return navigationListCollapsed &&\r\n      this.showCaptionOnCollapse === \"tooltip\" ? (\r\n      <ch-tooltip\r\n        key=\"tooltip\"\r\n        // We can't use this.el because in not a focusable element. Non\r\n        // focusable elements generate issue with the \"mouseleave\" and\r\n        // \"focusout\" events\r\n        actionElement={(this.#actionRef as HTMLButtonElement) ?? null}\r\n        actionElementAccessibleName={this.caption}\r\n        blockAlign=\"center\"\r\n        inlineAlign=\"outside-end\"\r\n        delay={this.tooltipDelay}\r\n        exportparts={tokenMapExportParts(\r\n          {\r\n            [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.CAPTION]: true,\r\n            [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.NAVIGATION_LIST_COLLAPSED]:\r\n              true,\r\n            [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.TOOLTIP]: true,\r\n\r\n            [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n\r\n            [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.SELECTED]: this.selected,\r\n            [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.NOT_SELECTED]:\r\n              !this.selected,\r\n\r\n            [levelPart]: true\r\n          },\r\n          \"window\"\r\n        )}\r\n      >\r\n        {this.caption}\r\n      </ch-tooltip>\r\n    ) : (\r\n      <span\r\n        key=\"caption\"\r\n        class=\"caption\"\r\n        part={tokenMap({\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.CAPTION]: true,\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.NAVIGATION_LIST_COLLAPSED]:\r\n            navigationListCollapsed,\r\n\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.SELECTED]: this.selected,\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.NOT_SELECTED]: !this.selected,\r\n\r\n          [levelPart]: true\r\n        })}\r\n      >\r\n        {this.caption}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  #renderContent = (\r\n    evenLevelParts: \"even-level\" | \"odd-level\",\r\n    levelPart: `level-${number}`,\r\n    hasExpandableButton: boolean,\r\n    expandableButtonPosition: \"start\" | \"end\"\r\n  ) => {\r\n    const navigationListCollapsed = !this.navigationListExpanded;\r\n\r\n    // Classes\r\n    const startImageClasses = this.#startImage?.classes;\r\n    const classes = {\r\n      action: true,\r\n      \"action--navigation-list-collapsed\": navigationListCollapsed,\r\n\r\n      [DISABLED_CLASS]: this.disabled,\r\n\r\n      [`start-img-type--${\r\n        this.startImgType ?? \"background\"\r\n      } pseudo-img--start`]: !!this.#startImage,\r\n      [startImageClasses]: !!startImageClasses,\r\n\r\n      \"expandable-button\": hasExpandableButton,\r\n\r\n      [`expandable-button--expanded-${this.expandableButtonPosition}`]:\r\n        hasExpandableButton && this.expanded,\r\n      [`expandable-button--collapsed-${this.expandableButtonPosition}`]:\r\n        hasExpandableButton && !this.expanded,\r\n\r\n      \"expandable-button--end\":\r\n        hasExpandableButton && expandableButtonPosition === \"end\"\r\n    };\r\n\r\n    return this.link ? (\r\n      <a\r\n        key=\"hyperlink\"\r\n        role={this.disabled ? \"link\" : undefined}\r\n        aria-current={this.selected ? \"page\" : undefined}\r\n        aria-disabled={this.disabled ? \"true\" : undefined}\r\n        class={classes}\r\n        style={this.#startImage?.styles ?? undefined}\r\n        part={tokenMap({\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.ACTION]: true,\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.LINK]: true,\r\n\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.SELECTED]: this.selected,\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.NOT_SELECTED]: !this.selected,\r\n\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.EXPAND_BUTTON]:\r\n            hasExpandableButton,\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.START]:\r\n            hasExpandableButton && expandableButtonPosition === \"start\",\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.END]:\r\n            hasExpandableButton && expandableButtonPosition === \"end\",\r\n\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.NAVIGATION_LIST_COLLAPSED]:\r\n            navigationListCollapsed,\r\n\r\n          [evenLevelParts]: true,\r\n          [levelPart]: true\r\n        })}\r\n        href={!this.disabled ? this.link.url : undefined}\r\n        ref={el => (this.#actionRef = el)}\r\n      >\r\n        {this.#renderCaption(navigationListCollapsed, levelPart)}\r\n      </a>\r\n    ) : (\r\n      <button\r\n        key=\"button\"\r\n        class={classes}\r\n        style={this.#startImage?.styles ?? undefined}\r\n        part={tokenMap({\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.ACTION]: true,\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.BUTTON]: true,\r\n\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.EXPAND_BUTTON]:\r\n            hasExpandableButton,\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.START]:\r\n            hasExpandableButton && expandableButtonPosition === \"start\",\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.END]:\r\n            hasExpandableButton && expandableButtonPosition === \"end\",\r\n\r\n          [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.NAVIGATION_LIST_COLLAPSED]:\r\n            navigationListCollapsed,\r\n\r\n          [evenLevelParts]: true,\r\n          [levelPart]: true\r\n        })}\r\n        disabled={this.disabled}\r\n        type=\"button\"\r\n        ref={el => (this.#actionRef = el)}\r\n      >\r\n        {this.#renderCaption(navigationListCollapsed, levelPart)}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  connectedCallback(): void {\r\n    // Initialize default getImagePathCallback\r\n    GET_IMAGE_PATH_CALLBACK_REGISTRY ??= getControlRegisterProperty(\r\n      \"getImagePathCallback\",\r\n      \"ch-navigation-list-render\"\r\n    );\r\n\r\n    this.#startImage = this.#computeImage();\r\n\r\n    // Static attributes that we including in the Host functional component to\r\n    // eliminate additional overhead\r\n    this.el.setAttribute(\"role\", \"listitem\");\r\n    this.el.setAttribute(\"exportparts\", NAVIGATION_LIST_ITEM_EXPORT_PARTS);\r\n    this.el.style.setProperty(\"--level\", `${this.level}`);\r\n  }\r\n\r\n  render() {\r\n    const levelPart = `level-${this.level}` as const;\r\n    const evenLevel = this.level % 2 === 0;\r\n    const evenLevelParts = getNavigationListItemLevelPart(evenLevel);\r\n\r\n    const hasExpandableButton =\r\n      this.expandable &&\r\n      this.navigationListExpanded &&\r\n      this.expandableButton === \"decorative\";\r\n\r\n    const expandableButtonPosition = this.expandableButtonPosition;\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          expandable: this.expandable,\r\n          \"expandable--expanded\": this.expanded,\r\n          selected: this.selected && this.selectedLinkIndicator\r\n        }}\r\n      >\r\n        {this.#renderContent(\r\n          evenLevelParts,\r\n          levelPart,\r\n          hasExpandableButton,\r\n          expandableButtonPosition\r\n        )}\r\n\r\n        {this.selected && this.selectedLinkIndicator && (\r\n          <div\r\n            class=\"indicator\"\r\n            part={tokenMap({\r\n              [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.INDICATOR]: true,\r\n              [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled\r\n            })}\r\n          ></div>\r\n        )}\r\n\r\n        {this.expandable && (\r\n          <div\r\n            role=\"list\"\r\n            class={{\r\n              expandable: true,\r\n              \"expandable--collapsed\": !this.expanded\r\n            }}\r\n            part={tokenMap({\r\n              [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.GROUP]: true,\r\n              [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.DISABLED]: this.disabled,\r\n              [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.SELECTED]: this.selected,\r\n              [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.NOT_SELECTED]:\r\n                !this.selected,\r\n\r\n              [evenLevelParts]: this.level !== NAVIGATION_LIST_INITIAL_LEVEL,\r\n\r\n              [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.START]:\r\n                hasExpandableButton && expandableButtonPosition === \"start\",\r\n              [NAVIGATION_LIST_ITEM_PARTS_DICTIONARY.END]:\r\n                hasExpandableButton && expandableButtonPosition === \"end\",\r\n\r\n              [levelPart]: true\r\n            })}\r\n          >\r\n            <slot />\r\n          </div>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","@import \"../../common/base\";\r\n@import \"../../common/icons\";\r\n\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-navigation-list-collapsed-size:\r\n   * Specifies the inline-size when the navigation list is collapsed\r\n   * @default var(--ch-sidebar-inline-size--collapsed, auto)\r\n   */\r\n  --ch-navigation-list-collapsed-size: var(\r\n    --ch-sidebar-inline-size--collapsed,\r\n    auto\r\n  );\r\n\r\n  /**\r\n   * @prop --ch-navigation-list-item-custom-padding-inline-start:\r\n   * Specifies an additional value for the padding-inline-start of the items\r\n   * without breaking the indentation of the items.\r\n   * @default 0px\r\n   */\r\n  --ch-navigation-list-item-custom-padding-inline-start: 0px;\r\n\r\n  /**\r\n   * @prop --ch-navigation-list-item-expand-collapse-duration\r\n   * Specifies duration of the expand and collapse animation\r\n   * @default 0ms\r\n   */\r\n  --ch-navigation-list-item-expand-collapse-duration: 0ms;\r\n\r\n  /**\r\n    * @prop --ch-navigation-list-item-expand-collapse-timing-function\r\n    * Specifies timing function of the expand and collapse animation\r\n    * @default linear\r\n    */\r\n  --ch-navigation-list-item-expand-collapse-timing-function: linear;\r\n\r\n  /**\r\n   * @prop --ch-navigation-list-item-gap:\r\n   * Specifies the spacing between the images, text and the expandable button\r\n   * of the items.\r\n   * @default 0px\r\n   */\r\n  --ch-navigation-list-item-gap: 0px;\r\n\r\n  /**\r\n   * @prop --ch-navigation-list-item__expandable-button-size:\r\n   * Specifies the expandable button size of the items.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-navigation-list-item__expandable-button-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-navigation-list-item__expandable-button-image-size:\r\n   * Specifies the image size of the expandable button.\r\n   * @default 100%\r\n   */\r\n  --ch-navigation-list-item__expandable-button-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-navigation-list-item__image-size:\r\n   * Specifies the box size that contains the start image of the items.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-navigation-list-item__image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-navigation-list-item__image-size:\r\n   * Specifies the size of the start image of the items.\r\n   * @default 100%\r\n   */\r\n  --ch-navigation-list-item__background-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-navigation-list-item__tooltip-separation:\r\n   * Specifies the separation between the action and the displayed tooltip.\r\n   * @default 0px\r\n   */\r\n  --ch-navigation-list-item__tooltip-separation: 0px;\r\n\r\n  /**\r\n   * @prop --ch-navigation-list-item__tooltip-separation-x:\r\n   * Specifies the separation between the action and the tooltip displayed\r\n   * on the x-axis.\r\n   * @default var(--ch-navigation-list-item__tooltip-separation)\r\n   */\r\n  --ch-navigation-list-item__tooltip-separation-x: var(\r\n    --ch-navigation-list-item__tooltip-separation\r\n  );\r\n\r\n  /**\r\n   * @prop --ch-navigation-list-item__tooltip-separation-y:\r\n   * Specifies the separation between the action and the tooltip displayed\r\n   * on the y-axis.\r\n   * @default var(--ch-navigation-list-item__tooltip-separation)\r\n   */\r\n  --ch-navigation-list-item__tooltip-separation-y: var(\r\n    --ch-navigation-list-item__tooltip-separation\r\n  );\r\n\r\n  --ch-navigation-list-tab-size: calc(\r\n    var(--ch-navigation-list-item__image-size) +\r\n      var(--ch-navigation-list-item__expandable-button-size) +\r\n      (var(--ch-navigation-list-item-gap) * 2)\r\n  );\r\n\r\n  display: grid;\r\n  grid-auto-rows: max-content;\r\n  overflow: auto;\r\n}\r\n\r\n:host(.ch-navigation-list--contain) {\r\n  contain: strict;\r\n}\r\n\r\n:host(.ch-navigation-list--collapsed) {\r\n  inline-size: var(--ch-navigation-list-collapsed-size);\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//        Item indentation\r\n// - - - - - - - - - - - - - - - -\r\n::part(item__action) {\r\n  --own-offset: 0px;\r\n\r\n  --ch-navigation-list-item-indentation: calc(\r\n    var(--ch-navigation-list-tab-size) * var(--level) - var(--own-offset) -\r\n      var(--parent-offset, 0px) +\r\n      var(--ch-navigation-list-item-custom-padding-inline-start)\r\n  );\r\n}\r\n\r\n::part(item__action expand-button start) {\r\n  --own-offset: calc(\r\n    var(--ch-navigation-list-item__expandable-button-size) +\r\n      var(--ch-navigation-list-item-gap)\r\n  );\r\n}\r\n\r\n::part(item__action expand-button start level-0) {\r\n  --own-offset: 0px;\r\n}\r\n\r\n// Even level\r\n::part(item__action even-level) {\r\n  --parent-offset: var(--parent-offset-odd);\r\n}\r\n\r\n// Odd level\r\n::part(item__action odd-level) {\r\n  --parent-offset: var(--parent-offset-even);\r\n}\r\n\r\n::part(item__group level-0 end) {\r\n  --parent-offset-even: calc(\r\n    var(--ch-navigation-list-item-gap) +\r\n      var(--ch-navigation-list-item__expandable-button-size)\r\n  );\r\n}\r\n\r\n// ::part(item__group even-level before) {\r\n//   --parent-offset-even: calc(\r\n//     var(--ch-navigation-list-item-gap) + var(--parent-offset-odd, 0px)\r\n//   );\r\n// }\r\n\r\n::part(item__group even-level) {\r\n  --parent-offset-even: calc(\r\n    var(--ch-navigation-list-item__expandable-button-size) +\r\n      var(--ch-navigation-list-item-gap) + var(--parent-offset-odd, 0px)\r\n  );\r\n}\r\n\r\n// ::part(item__group odd-level before) {\r\n//   --parent-offset-odd: calc(\r\n//     var(--ch-navigation-list-item-gap) + var(--parent-offset-even, 0px)\r\n//   );\r\n// }\r\n\r\n::part(item__group odd-level) {\r\n  --parent-offset-odd: calc(\r\n    var(--ch-navigation-list-item__expandable-button-size) +\r\n      var(--ch-navigation-list-item-gap) + var(--parent-offset-even, 0px)\r\n  );\r\n}\r\n","import {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  forceUpdate,\r\n  h\r\n} from \"@stencil/core\";\r\n\r\nimport { GxImageMultiState, ItemLink } from \"../../common/types\";\r\nimport {\r\n  NavigationListHyperlinkClickEvent,\r\n  NavigationListItemModel,\r\n  NavigationListModel\r\n} from \"./types\";\r\n\r\nimport { adoptCommonThemes } from \"../../common/theme\";\r\nimport {\r\n  getControlRegisterProperty,\r\n  registryControlProperty\r\n} from \"../../common/registry-properties\";\r\nimport { NAVIGATION_LIST_INITIAL_LEVEL } from \"./utils\";\r\nimport { fromGxImageToURL } from \"../tree-view/genexus-implementation\";\r\nimport { SCROLLABLE_CLASS } from \"../../common/reserved-names\";\r\nimport {\r\n  removeSubscription,\r\n  subscribe,\r\n  syncStateWithObservableAncestors\r\n} from \"../sidebar/expanded-change-obervables\";\r\nimport { formatImagePath } from \"../../common/utils\";\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//                Registry\r\n// - - - - - - - - - - - - - - - - - - - -\r\n// This callback will be registered by default. If it is used in GeneXus, all\r\n// tree views will have the same state, so the parameters used of the treeState\r\n// are \"shared\" across all tree view instances\r\n\r\n// TODO: For some reason, this module import is different when an external\r\n// library imports the registryControlProperty function. We should de-dup this\r\n// to fix issues related with double initialization of the registry\r\nconst registerDefaultGetImagePathCallback = (\r\n  navigationListState: ChNavigationListRender\r\n) =>\r\n  registryControlProperty(\r\n    \"getImagePathCallback\",\r\n    \"ch-navigation-list-render\",\r\n    (item: NavigationListItemModel) => ({\r\n      base: formatImagePath(\r\n        navigationListState.useGxRender\r\n          ? fromGxImageToURL(\r\n              item.startImgSrc,\r\n              navigationListState.gxSettings,\r\n              navigationListState.gxImageConstructor\r\n            )\r\n          : item.startImgSrc,\r\n        item.startImgType\r\n      )\r\n    })\r\n  );\r\n\r\nconst isSelectedLink = (\r\n  item: NavigationListItemModel,\r\n  navigationListState: ChNavigationListRender\r\n) =>\r\n  !!item.link &&\r\n  !!navigationListState.selectedLink?.link?.url &&\r\n  navigationListState.selectedLink.link.url === item.link.url &&\r\n  navigationListState.selectedLink.id === item.id;\r\n\r\n// items != null comparison is based on the following benchmark\r\n// https://www.measurethat.net/Benchmarks/Show/6389/0/compare-comparison-with-null-or-undefined\r\nconst defaultRender = (\r\n  item: NavigationListItemModel,\r\n  navigationListState: ChNavigationListRender,\r\n  level: number,\r\n  index: number\r\n) => (\r\n  <ch-navigation-list-item\r\n    key={item.id ?? `${level}-${index}`}\r\n    id={item.id}\r\n    caption={item.caption}\r\n    disabled={item.disabled}\r\n    expandable={item.items != null}\r\n    expandableButton={navigationListState.expandableButton}\r\n    expandableButtonPosition={navigationListState.expandableButtonPosition}\r\n    expanded={item.expanded}\r\n    level={level}\r\n    link={item.link}\r\n    model={item}\r\n    navigationListExpanded={navigationListState.expanded}\r\n    selected={isSelectedLink(item, navigationListState)}\r\n    selectedLinkIndicator={navigationListState.selectedLinkIndicator}\r\n    showCaptionOnCollapse={navigationListState.showCaptionOnCollapse}\r\n    startImgSrc={item.startImgSrc}\r\n    startImgType={item.startImgType}\r\n    tooltipDelay={navigationListState.tooltipDelay}\r\n  >\r\n    {navigationListState.expanded &&\r\n      item.items != null &&\r\n      item.items.map((item, subItemIndex) =>\r\n        navigationListState.renderItem(\r\n          item,\r\n          navigationListState,\r\n          level + 1,\r\n          subItemIndex\r\n        )\r\n      )}\r\n  </ch-navigation-list-item>\r\n);\r\n\r\nlet autoId = 0;\r\nconst NAVIGATION_LIST_ITEM = \"ch-navigation-list-item\";\r\n\r\n/**\r\n * @status experimental\r\n */\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"navigation-list-render.scss\",\r\n  tag: \"ch-navigation-list-render\"\r\n})\r\nexport class ChNavigationListRender implements ComponentInterface {\r\n  /**\r\n   * This ID is used to identify the Navigation List. Necessary to subscribe\r\n   * for expand/collapse changes in the ancestor nodes.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #navigationListId: string;\r\n\r\n  @Element() el!: HTMLChNavigationListRenderElement;\r\n\r\n  /**\r\n   * If `false` the overflowing content of the control will be clipped to the\r\n   * borders of its container.\r\n   */\r\n  @Prop() readonly autoGrow: boolean = false;\r\n\r\n  /**\r\n   * Specifies what kind of expandable button is displayed in the items by\r\n   * default.\r\n   *  - `\"decorative\"`: Only a decorative icon is rendered to display the state\r\n   *     of the item.\r\n   */\r\n  @Prop() readonly expandableButton: \"decorative\" | \"no\" = \"decorative\";\r\n\r\n  /**\r\n   * Specifies the position of the expandable button in reference of the action\r\n   * element of the items\r\n   *  - `\"start\"`: Expandable button is placed before the action element.\r\n   *  - `\"end\"`: Expandable button is placed after the action element.\r\n   */\r\n  @Prop() readonly expandableButtonPosition: \"start\" | \"end\" = \"start\";\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * startImgSrc needs to be resolved.\r\n   */\r\n  @Prop() readonly getImagePathCallback?: (\r\n    item: NavigationListItemModel\r\n  ) => GxImageMultiState | undefined;\r\n\r\n  /**\r\n   * Specifies if the control is expanded or collapsed.\r\n   */\r\n  @Prop({ mutable: true }) expanded: boolean = true;\r\n\r\n  /**\r\n   * `true` to expand the path to the selected link when the `selectedLink`\r\n   * property is updated.\r\n   */\r\n  @Prop() readonly expandSelectedLink: boolean = false;\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly gxImageConstructor: (name: string) => any;\r\n\r\n  /**\r\n   * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.\r\n   */\r\n  @Prop() readonly gxSettings: any;\r\n\r\n  /**\r\n   * Specifies the items of the control.\r\n   */\r\n  @Prop() readonly model?: NavigationListModel | undefined;\r\n  @Watch(\"model\")\r\n  modelChanged() {\r\n    if (this.model && this.expandSelectedLink) {\r\n      this.#expandNewSelectedLink(this.model);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Specifies the items of the control.\r\n   */\r\n  @Prop() readonly renderItem?: (\r\n    item: NavigationListItemModel,\r\n    navigationListState: ChNavigationListRender,\r\n    level: number,\r\n    index: number\r\n  ) => any = defaultRender;\r\n\r\n  /**\r\n   * Specifies the current selected hyperlink.\r\n   */\r\n  @Prop({ mutable: true }) selectedLink?: { id?: string; link: ItemLink } = {\r\n    link: { url: undefined }\r\n  };\r\n  @Watch(\"selectedLink\")\r\n  selectedLinkChanged() {\r\n    if (this.model && this.expandSelectedLink) {\r\n      this.#expandNewSelectedLink(this.model);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Specifies if the selected item indicator is displayed (only work for hyperlink)\r\n   */\r\n  @Prop() readonly selectedLinkIndicator: boolean = false;\r\n\r\n  /**\r\n   * Specifies how the caption of the items will be displayed when the control\r\n   * is collapsed\r\n   */\r\n  @Prop() readonly showCaptionOnCollapse?: \"inline\" | \"tooltip\" = \"inline\";\r\n\r\n  /**\r\n   * Specifies the delay (in ms) for the tooltip to be displayed.\r\n   */\r\n  @Prop() readonly tooltipDelay?: number = 100;\r\n\r\n  /**\r\n   * This property is a WA to implement the Navigation List as a UC 2.0 in\r\n   * GeneXus.\r\n   */\r\n  @Prop() readonly useGxRender: boolean = false;\r\n\r\n  /**\r\n   * Fired when an button is clicked.\r\n   * This event can be prevented.\r\n   */\r\n  @Event() buttonClick: EventEmitter<NavigationListItemModel>;\r\n\r\n  /**\r\n   * Fired when an hyperlink is clicked.\r\n   * This event can be prevented.\r\n   */\r\n  @Event() hyperlinkClick: EventEmitter<NavigationListHyperlinkClickEvent>;\r\n\r\n  #expandNewSelectedLink = (model: NavigationListModel) => {\r\n    // for let index ... is the fastest for\r\n    for (let index = 0; index < model.length; index++) {\r\n      const itemUIModel = model[index];\r\n\r\n      if (isSelectedLink(itemUIModel, this)) {\r\n        itemUIModel.expanded = true;\r\n        return true;\r\n      }\r\n\r\n      if (itemUIModel.items != null) {\r\n        const selectedLinkIsChild = this.#expandNewSelectedLink(\r\n          itemUIModel.items\r\n        );\r\n\r\n        if (selectedLinkIsChild) {\r\n          itemUIModel.expanded = true;\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  #handleItemClick = (event: PointerEvent) => {\r\n    const composedPath = event.composedPath();\r\n\r\n    const itemActionIndex = composedPath.findIndex(\r\n      el =>\r\n        (el as HTMLElement).tagName?.toLowerCase() === \"button\" ||\r\n        (el as HTMLElement).tagName?.toLowerCase() === \"a\"\r\n    );\r\n\r\n    if (itemActionIndex === -1) {\r\n      return;\r\n    }\r\n\r\n    const navigationListItem = composedPath[\r\n      itemActionIndex + 2\r\n    ] as HTMLChNavigationListItemElement;\r\n\r\n    // Get the navigation list item of the event\r\n    if (\r\n      !navigationListItem ||\r\n      navigationListItem.tagName?.toLowerCase() !== NAVIGATION_LIST_ITEM\r\n    ) {\r\n      return;\r\n    }\r\n    const itemUIModel = navigationListItem.model;\r\n    const canExpandSubItems = this.expanded;\r\n\r\n    if (itemUIModel.link) {\r\n      const eventInfo = this.hyperlinkClick.emit({ event, item: itemUIModel });\r\n\r\n      if (eventInfo.defaultPrevented) {\r\n        event.preventDefault();\r\n        return;\r\n      }\r\n\r\n      // Update the selected link\r\n      this.selectedLink = { id: itemUIModel.id, link: itemUIModel.link };\r\n    } else {\r\n      const eventInfo = this.buttonClick.emit(itemUIModel);\r\n\r\n      if (eventInfo.defaultPrevented) {\r\n        event.preventDefault();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // TODO: Add an unit test for this\r\n    if (canExpandSubItems && itemUIModel.items != null) {\r\n      itemUIModel.expanded = !itemUIModel.expanded;\r\n      forceUpdate(this);\r\n    }\r\n  };\r\n\r\n  connectedCallback(): void {\r\n    this.#navigationListId ??= `ch-navigation-list-render-${autoId++}`;\r\n\r\n    adoptCommonThemes(this.el.shadowRoot.adoptedStyleSheets);\r\n\r\n    // If the getImagePathCallback was not previously registered\r\n    if (\r\n      !getControlRegisterProperty(\r\n        \"getImagePathCallback\",\r\n        \"ch-navigation-list-render\"\r\n      )\r\n    ) {\r\n      registerDefaultGetImagePathCallback(this);\r\n    }\r\n\r\n    if (this.model && this.expandSelectedLink) {\r\n      this.#expandNewSelectedLink(this.model);\r\n    }\r\n\r\n    // Subscribe to expand/collapse changes in the ancestor nodes\r\n    subscribe(this.#navigationListId, {\r\n      getSubscriberRef: () => this.el,\r\n      observerCallback: expanded => {\r\n        this.expanded = expanded;\r\n      }\r\n    });\r\n\r\n    // Initialize the state\r\n    syncStateWithObservableAncestors(this.#navigationListId);\r\n\r\n    // Static attributes that we including in the Host functional component to\r\n    // eliminate additional overhead\r\n    this.el.setAttribute(\"role\", \"list\");\r\n  }\r\n\r\n  disconnectedCallback(): void {\r\n    removeSubscription(this.#navigationListId);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        class={{\r\n          [SCROLLABLE_CLASS]: true,\r\n          \"ch-navigation-list--collapsed\": !this.expanded,\r\n          \"ch-navigation-list--contain\": !this.autoGrow\r\n        }}\r\n        onClick={this.#handleItemClick}\r\n      >\r\n        {this.model?.map((item, index) =>\r\n          this.renderItem(item, this, NAVIGATION_LIST_INITIAL_LEVEL, index)\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}