{"version":3,"names":["codeEditorCss","ChCodeEditorStyle0","autoId","ChCodeEditor","exports","_a","_monacoEditorInstance","set","this","_resizeObserver","_editorId","_monacoRef","_absoluteContentRef","_getYamlSchemas","fileMatch","concat","__classPrivateFieldGet","_this","uri","yamlSchemaUri","automaticLayout","mouseWheelScrollSensitivity","mouseWheelZoom","tabSize","class_1","prototype","languageChanged","newLanguage","monaco","editor","setModelLanguage","getModel","optionsChanged","options","_b","updateOptions","readonlyChanged","newReadonly","readOnly","_c","themeChanged","newTheme","theme","valueChange","newValue","setValue","yamlSchemaUriChange","newUri","language","__classPrivateFieldSet","configureMonacoYaml","enableSchemaRequest","format","schemas","call","setModel","createModel","value","Uri","parse","connectedCallback","componentDidLoad","_instances","_configureYaml","_setupNormalEditor","ResizeObserver","entries","absoluteContentEntry","contentRect","layout","width","height","observe","disconnectedCallback","disconnect","render","h","Host","key","class","ref","el","editorModel","create","__assign","readonly","model"],"sources":["src/components/code-editor/code-editor.scss?tag=ch-code-editor","src/components/code-editor/code-editor.tsx"],"sourcesContent":["// This is a WA to import required styles for the editor in production build\r\n@import \"../../common/monaco/monaco-styles-after-build.scss\";\r\n\r\nch-code-editor {\r\n  display: grid;\r\n  position: relative;\r\n}\r\n\r\n.ch-code-editor-absolute-content {\r\n  display: grid;\r\n  position: absolute;\r\n  inset: 0;\r\n}\r\n","import { Component, Host, Method, Prop, Watch, h } from \"@stencil/core\";\r\nimport monaco, {\r\n  configureMonacoYaml\r\n} from \"../../common/monaco/output/monaco.js\";\r\nimport { CodeEditorOptions } from \"./code-editor-types.js\";\r\n\r\nlet autoId = 0;\r\n\r\n@Component({\r\n  shadow: false,\r\n  styleUrl: \"code-editor.scss\",\r\n  tag: \"ch-code-editor\"\r\n})\r\nexport class ChCodeEditor {\r\n  #monacoEditorInstance!: monaco.editor.IStandaloneCodeEditor;\r\n  #resizeObserver: ResizeObserver | undefined;\r\n\r\n  #editorId: string = \"\";\r\n\r\n  // Refs\r\n  #monacoRef: HTMLDivElement;\r\n  #absoluteContentRef: HTMLDivElement;\r\n\r\n  /**\r\n   * Specifies the language of the auto created model in the editor.\r\n   */\r\n  @Prop() readonly language!: string;\r\n  @Watch(\"language\")\r\n  languageChanged(newLanguage: string) {\r\n    monaco.editor.setModelLanguage(\r\n      this.#monacoEditorInstance.getModel()!,\r\n      newLanguage\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Specifies the editor options.\r\n   */\r\n  @Prop() readonly options: CodeEditorOptions = {\r\n    automaticLayout: true,\r\n    mouseWheelScrollSensitivity: 4,\r\n    mouseWheelZoom: true,\r\n    tabSize: 2\r\n  };\r\n  @Watch(\"options\")\r\n  optionsChanged(options: CodeEditorOptions) {\r\n    this.#monacoEditorInstance?.updateOptions({\r\n      options\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Specifies if the editor should be readonly.\r\n   * If the `readOnly` property is specified in the `options` property,\r\n   * this property has no effect.\r\n   */\r\n  @Prop({ attribute: \"readonly\" }) readonly readonly: boolean = false;\r\n  @Watch(\"readonly\")\r\n  readonlyChanged(newReadonly: boolean) {\r\n    this.#monacoEditorInstance?.updateOptions({\r\n      readOnly: this.options.readOnly ?? newReadonly\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Specifies the theme to be used for rendering.\r\n   */\r\n  @Prop() readonly theme: string = \"vs\";\r\n  @Watch(\"theme\")\r\n  themeChanged(newTheme: string) {\r\n    this.#monacoEditorInstance.updateOptions({ theme: newTheme });\r\n  }\r\n\r\n  /**\r\n   * Specifies the value of the editor.\r\n   */\r\n  @Prop() readonly value: string;\r\n  @Watch(\"value\")\r\n  valueChange(newValue: string) {\r\n    this.#monacoEditorInstance?.setValue(newValue);\r\n  }\r\n\r\n  /**\r\n   * Specifies the schema URI for the YAML language.\r\n   */\r\n  @Prop() readonly yamlSchemaUri: string = \"\";\r\n  @Watch(\"yamlSchemaUri\")\r\n  yamlSchemaUriChange(newUri: string) {\r\n    if (this.language !== \"yaml\") {\r\n      return;\r\n    }\r\n\r\n    // Necessary to not combine the current scheme with the new scheme\r\n    this.#editorId = `ch-editor-${autoId++}`;\r\n\r\n    if (newUri) {\r\n      configureMonacoYaml(monaco, {\r\n        enableSchemaRequest: true,\r\n        format: true,\r\n        schemas: this.#getYamlSchemas()\r\n      });\r\n    } else {\r\n      configureMonacoYaml(monaco, {\r\n        enableSchemaRequest: true,\r\n        format: true,\r\n        schemas: []\r\n      });\r\n    }\r\n\r\n    this.#monacoEditorInstance.setModel(\r\n      monaco.editor.createModel(\r\n        this.value,\r\n        this.language,\r\n        monaco.Uri.parse(`file:///${this.#editorId}.txt`)\r\n      )\r\n    );\r\n  }\r\n\r\n  connectedCallback(): void {\r\n    this.#editorId = `ch-editor-${autoId++}`;\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.#configureYaml();\r\n    this.#setupNormalEditor();\r\n\r\n    this.#resizeObserver = new ResizeObserver(entries => {\r\n      const absoluteContentEntry = entries[0].contentRect;\r\n\r\n      this.#monacoEditorInstance.layout({\r\n        width: absoluteContentEntry.width,\r\n        height: absoluteContentEntry.height\r\n      });\r\n    });\r\n\r\n    this.#resizeObserver.observe(this.#absoluteContentRef);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.#resizeObserver?.disconnect();\r\n    this.#resizeObserver = null;\r\n  }\r\n\r\n  /**\r\n   * Update the editor's options after the editor has been created.\r\n   * @param options Set of options to be updated\r\n   */\r\n  @Method()\r\n  async updateOptions(options: CodeEditorOptions) {\r\n    this.#monacoEditorInstance?.updateOptions(options);\r\n  }\r\n\r\n  #getYamlSchemas = () => [\r\n    {\r\n      // If YAML file is opened matching this glob\r\n      fileMatch: [`**/${this.#editorId}.*`],\r\n      // Then this schema will be downloaded from the internet and used.\r\n      uri: this.yamlSchemaUri\r\n    }\r\n  ];\r\n\r\n  #setupNormalEditor() {\r\n    const editorModel = monaco.editor.createModel(\r\n      this.value,\r\n      this.language,\r\n      monaco.Uri.parse(`file:///${this.#editorId}.txt`)\r\n    );\r\n\r\n    this.#monacoEditorInstance = monaco.editor.create(this.#monacoRef, {\r\n      ...this.options,\r\n      theme: this.options.theme ?? this.theme,\r\n      readOnly: this.options.readOnly ?? this.readonly,\r\n      model: editorModel\r\n    });\r\n  }\r\n\r\n  #configureYaml() {\r\n    if (this.language === \"yaml\" && !!this.yamlSchemaUri) {\r\n      configureMonacoYaml(monaco, {\r\n        enableSchemaRequest: true,\r\n        format: true,\r\n        schemas: this.#getYamlSchemas()\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div\r\n          class=\"ch-code-editor-absolute-content\"\r\n          ref={el => (this.#absoluteContentRef = el)}\r\n        >\r\n          <div ref={el => (this.#monacoRef = el)}></div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}