{"version":3,"names":["chGridColumnResizeCss","ChGridColumnResizeStyle0","ChGridColumnResize","startPageX","mousemoveFn","this","mousemoveHandler","bind","columnResizeStarted","columnResizing","columnResizeFinished","componentDidLoad","el","addEventListener","mousedownHandler","clickHandler","eventInfo","stopPropagation","dblclickHandler","mouseEventModifierKey","column","size","columnResizeStartedHandler","resizing","columnResizeFinishedHandler","preventDefault","pageX","document","passive","mouseupHandler","once","emit","columnId","deltaWidth","removeEventListener","render","h","key","class","hidden","chGridColumnSettingsCss","ChGridColumnSettingsStyle0","ChGridColumnSettings","windowClosedHandler","showSettings","columnSettingsChangedHandler","Host","modal","container","xAlign","yAlign","caption","columnName","closeText","closeOnOutsideClick","closeOnEscape","allowDrag","show","exportparts"],"sources":["src/deprecated-components/grid/grid-column/grid-column-resize/ch-grid-column-resize.scss?tag=ch-grid-column-resize&encapsulation=shadow","src/deprecated-components/grid/grid-column/grid-column-resize/ch-grid-column-resize.tsx","src/deprecated-components/grid/grid-column/grid-column-settings/ch-grid-column-settings.scss?tag=ch-grid-column-settings&encapsulation=shadow","src/deprecated-components/grid/grid-column/grid-column-settings/ch-grid-column-settings.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n  min-width: 1px;\r\n  height: 100%;\r\n  cursor: ew-resize;\r\n}\r\n\r\n.resize-mask {\r\n  position: fixed;\r\n  inset: 0;\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Listen,\r\n  Prop,\r\n  State,\r\n  h\r\n} from \"@stencil/core\";\r\nimport { ChGridColumnResizeEvent } from \"../ch-grid-column-types\";\r\nimport { mouseEventModifierKey } from \"../../../../components/common/helpers\";\r\n\r\n/**\r\n * The `ch-grid-column-resize` component responsible for resizing a column in a grid.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-column-resize` instead.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-column-resize\",\r\n  styleUrl: \"ch-grid-column-resize.scss\",\r\n  shadow: true\r\n})\r\nexport class ChGridColumnResize {\r\n  private startPageX: number;\r\n  private mousemoveFn = this.mousemoveHandler.bind(this);\r\n\r\n  @Element() el: HTMLChGridColumnResizeElement;\r\n\r\n  /**\r\n   * Whether the component is currently resizing the column.\r\n   */\r\n  @State() resizing = false;\r\n\r\n  /**\r\n   * The column element that is being resized.\r\n   */\r\n  @Prop() readonly column!: HTMLChGridColumnElement;\r\n\r\n  /**\r\n   * Event emitted when the user starts resizing the column.\r\n   */\r\n  @Event() columnResizeStarted: EventEmitter<ChGridColumnResizeEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user is resizing the column.\r\n   */\r\n  @Event() columnResizing: EventEmitter<ChGridColumnResizeEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user finishes resizing the column.\r\n   */\r\n  @Event() columnResizeFinished: EventEmitter<ChGridColumnResizeEvent>;\r\n\r\n  componentDidLoad() {\r\n    this.el.addEventListener(\"mousedown\", this.mousedownHandler.bind(this));\r\n  }\r\n\r\n  @Listen(\"click\", { passive: true })\r\n  clickHandler(eventInfo: MouseEvent) {\r\n    eventInfo.stopPropagation();\r\n  }\r\n\r\n  @Listen(\"dblclick\")\r\n  dblclickHandler(eventInfo: MouseEvent) {\r\n    eventInfo.stopPropagation();\r\n\r\n    if (mouseEventModifierKey(eventInfo)) {\r\n      this.column.size = \"auto\";\r\n    } else {\r\n      this.column.size = \"max-content\";\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnResizeStarted\")\r\n  columnResizeStartedHandler() {\r\n    this.resizing = true;\r\n  }\r\n\r\n  @Listen(\"columnResizeFinished\")\r\n  columnResizeFinishedHandler() {\r\n    this.resizing = false;\r\n  }\r\n\r\n  private mousedownHandler(eventInfo: MouseEvent) {\r\n    eventInfo.stopPropagation();\r\n    eventInfo.preventDefault();\r\n\r\n    this.startPageX = eventInfo.pageX;\r\n\r\n    document.addEventListener(\"mousemove\", this.mousemoveFn, { passive: true });\r\n    document.addEventListener(\"mouseup\", this.mouseupHandler.bind(this), {\r\n      once: true\r\n    });\r\n\r\n    this.columnResizeStarted.emit({ columnId: this.column.columnId });\r\n  }\r\n\r\n  private mousemoveHandler(eventInfo: MouseEvent) {\r\n    this.columnResizing.emit({\r\n      columnId: this.column.columnId,\r\n      deltaWidth: this.startPageX - eventInfo.pageX\r\n    });\r\n  }\r\n\r\n  private mouseupHandler() {\r\n    document.removeEventListener(\"mousemove\", this.mousemoveFn);\r\n    this.columnResizeFinished.emit({ columnId: this.column.columnId });\r\n  }\r\n\r\n  render() {\r\n    return <div class=\"resize-mask\" hidden={!this.resizing}></div>;\r\n  }\r\n}\r\n",":host {\r\n    display: contents;\r\n}","import { Component, h, Host, Listen, Prop } from \"@stencil/core\";\r\n\r\n/**\r\n * The `ch-grid-column-settings` component represents a settings window for a column.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-column-settings` instead.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-column-settings\",\r\n  styleUrl: \"ch-grid-column-settings.scss\",\r\n  shadow: true\r\n})\r\nexport class ChGridColumnSettings {\r\n  /**\r\n   * The `HTMLChGridColumnElement` that the settings window is associated with.\r\n   */\r\n  @Prop() readonly column!: HTMLChGridColumnElement;\r\n\r\n  /**\r\n   * Indicates whether the settings window is currently shown or not.\r\n   */\r\n  @Prop({ reflect: true }) readonly show: boolean = false;\r\n\r\n  @Listen(\"windowClosed\")\r\n  windowClosedHandler(eventInfo: Event) {\r\n    eventInfo.stopPropagation();\r\n    this.column.showSettings = false;\r\n  }\r\n\r\n  @Listen(\"columnSettingsChanged\")\r\n  columnSettingsChangedHandler() {\r\n    this.column.showSettings = false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <ch-window\r\n          modal={true}\r\n          container={this.column}\r\n          xAlign=\"inside-start\"\r\n          yAlign=\"outside-end\"\r\n          caption={this.column.columnName}\r\n          closeText=\"Close\"\r\n          closeOnOutsideClick={true}\r\n          closeOnEscape={true}\r\n          allowDrag=\"header\"\r\n          hidden={!this.show}\r\n          exportparts=\"mask,window,header,caption,close,main,footer\"\r\n        >\r\n          <slot></slot>\r\n        </ch-window>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"oGAAA,MAAMA,EAAwB,sGAC9B,MAAAC,EAAeD,E,MCqBFE,EAAkB,M,0MAST,M,sBARZC,WACAC,YAAcC,KAAKC,iBAAiBC,KAAKF,M,wBAiBxCG,oBAKAC,eAKAC,qBAET,gBAAAC,GACEN,KAAKO,GAAGC,iBAAiB,YAAaR,KAAKS,iBAAiBP,KAAKF,M,CAInE,YAAAU,CAAaC,GACXA,EAAUC,iB,CAIZ,eAAAC,CAAgBF,GACdA,EAAUC,kBAEV,GAAIE,EAAsBH,GAAY,CACpCX,KAAKe,OAAOC,KAAO,M,KACd,CACLhB,KAAKe,OAAOC,KAAO,a,EAKvB,0BAAAC,GACEjB,KAAKkB,SAAW,I,CAIlB,2BAAAC,GACEnB,KAAKkB,SAAW,K,CAGV,gBAAAT,CAAiBE,GACvBA,EAAUC,kBACVD,EAAUS,iBAEVpB,KAAKF,WAAaa,EAAUU,MAE5BC,SAASd,iBAAiB,YAAaR,KAAKD,YAAa,CAAEwB,QAAS,OACpED,SAASd,iBAAiB,UAAWR,KAAKwB,eAAetB,KAAKF,MAAO,CACnEyB,KAAM,OAGRzB,KAAKG,oBAAoBuB,KAAK,CAAEC,SAAU3B,KAAKe,OAAOY,U,CAGhD,gBAAA1B,CAAiBU,GACvBX,KAAKI,eAAesB,KAAK,CACvBC,SAAU3B,KAAKe,OAAOY,SACtBC,WAAY5B,KAAKF,WAAaa,EAAUU,O,CAIpC,cAAAG,GACNF,SAASO,oBAAoB,YAAa7B,KAAKD,aAC/CC,KAAKK,qBAAqBqB,KAAK,CAAEC,SAAU3B,KAAKe,OAAOY,U,CAGzD,MAAAG,GACE,OAAOC,EAAA,OAAAC,IAAA,2CAAKC,MAAM,cAAcC,QAASlC,KAAKkB,U,aC9GlD,MAAMiB,EAA0B,0BAChC,MAAAC,EAAeD,E,MCUFE,EAAoB,M,yDASmB,K,CAGlD,mBAAAC,CAAoB3B,GAClBA,EAAUC,kBACVZ,KAAKe,OAAOwB,aAAe,K,CAI7B,4BAAAC,GACExC,KAAKe,OAAOwB,aAAe,K,CAG7B,MAAAT,GACE,OACEC,EAACU,EAAI,CAAAT,IAAA,4CACHD,EAAA,aAAAC,IAAA,2CACEU,MAAO,KACPC,UAAW3C,KAAKe,OAChB6B,OAAO,eACPC,OAAO,cACPC,QAAS9C,KAAKe,OAAOgC,WACrBC,UAAU,QACVC,oBAAqB,KACrBC,cAAe,KACfC,UAAU,SACVjB,QAASlC,KAAKoD,KACdC,YAAY,gDAEZtB,EAAA,QAAAC,IAAA,8C"}