{"version":3,"names":["BLOCK_START","BLOCK_END","INLINE_START","INLINE_END","START_HALF_THRESHOLD","END_HALF_THRESHOLD","EDGE_SIZE","setProperty","element","property","value","style","concat","inlineStart","mainViewRect","rtl","left","width","inlineEnd","documentRect","right","droppableAreaMap","top","height","center","lastDroppableArea","lastViewId","handleWidgetDrag","draggableView","droppableAreaRef","event","stopPropagation","document","documentElement","getBoundingClientRect","mainView","positionX","clientX","positionY","clientY","distanceToTheLeftEdge","distanceToTheTopEdge","relativePositionX","relativePositionY","droppableArea","inBetween","viewId","droppableAreaSizes","removeDroppableAreaStyles","undefined","removeAttribute","getWidgetDropInfo","dropAreaTarget","viewIdTarget","createAndSetLeafInfo","flexibleLayoutLeaf","renderedWidgets","widgetsInfo","leafId","id","leafType","type","widget","add","set","parentLeafId","info","selectedWidgetId","widgets","forEach","wasRendered","length","selectedWidget","isBlockDirection","_c","tabListPosition","DEFAULT_TAB_LIST_POSITION","closeButton","disabled","dragOutside","showCaptions","_d","sortable","tabButtonHidden","_e","addCustomBehavior","item","layoutSplitterParts","dragBar","part","addNewLeafToInfo","leaf","parentItem","itemsInfo","flexibleLeafExtended","leafInfo","updateFlexibleSubModels","flexibleLayoutItems","flexibleItem","items","group","flexibleItemExtended","updateFlexibleModels","flexibleLayout","ROOT_VIEW","getLeafInfo","get","flexibleLayoutCss","ChFlexibleLayoutStyle0","LEAF_SELECTOR","ESCAPE_KEY","ChFlexibleLayout","exports","_a","_exportParts","this","_layoutSplitterExportParts","_leafs","_draggableViews","_dragInfo","_viewsOutOfDroppableZoneController","_draggedViewRef","_droppableAreaRef","_layoutSplitterRef","_getLeafInfo","_this","_getAllLeafs","views","itemView","push","_handleItemChange","target","getRootNode","el","shadowRoot","eventInfo","__assign","detail","selectedViewItemChange","emit","_handleDragStart","__awaiter","__classPrivateFieldSet","__spreadArray","querySelectorAll","index","Promise","allSettled","map","view","getDraggableViews","draggableViewsResult","sent","draggableViewResult","status","abortController","AbortController","extendedDraggableView","__classPrivateFieldGet","RTL","isRTL","addEventListener","capture","passive","signal","tabListView","pointerEvents","pageView","_handleWidgetDragEnd","_handleWidgetDragEndKeydown","showPopover","promoteDragPreviewToTopLayer","dragBarDisabled","code","preventDefault","call","endDragPreview","abort","removeEventListener","dropInfo","viewItemReorder","hidePopover","_computePartsToExport","exportPartsSet","Set","Object","values","TAB_PARTS_DICTIONARY","FLEXIBLE_LAYOUT_PARTS_DICTIONARY","DROPPABLE_AREA","LEAF","LAYOUT_SPLITTER_PARTS_DICTIONARY","BAR","keys","join","_renderTab","viewInfo","dragOutsideEnabled","sortableEnabled","_f","blockDirection","startDirection","isStartDirection","h","key","slot","contain","tokenMap","BLOCK","INLINE","START","END","exportparts","TAB_EXPORT_PARTS","_g","model","overflow","selectedId","onItemDragStart","onSelectedItemChange","name","_renderView","class_1","prototype","addSiblingView","parentGroup","siblingItem","placedInTheSibling","takeHalfTheSpaceOfTheSiblingItem","addSiblingLeaf","result","success","forceUpdate","refreshLeaf","leafRef","querySelector","removeView","itemId","removeItem","reconnectedSubtree","removeItemPageInView","viewId_1","itemId_1","forceRerender","viewRef","removePage","handleItemClose","composedPath","tagName","toLowerCase","eventDetail","viewItemClose","defaultPrevented","componentWillRender","render","layoutModel","Host","ref","class","popover","flexibleLayoutRenderCss","ChFlexibleLayoutRenderStyle0","GENERATE_GUID","currentDate","Date","getTime","replace","c","randomNumber","Math","random","floor","toString","ChFlexibleLayoutRender","_b","_renderedWidgets","_lastRenderedWidgets","_widgetsInfo","Map","_itemsInfo","_layoutSplitterParts","_flexibleLayoutRef","_updateFlexibleModels","layout","clear","newRenderedWidgets","has","_getLeafInfo_1","_handleLeafSelectedWidgetChange","selectedItemInfo","newSelectedItem","newSelectedIndex","_updateSelectedWidget","_handleLeafWidgetClose","itemCloseInfo","widgetClose","widgetId","widgetIndex","itemIndex","widgetInfo","_checkViewStateToRemoveWidget","viewWidgets","widgetsCount","_removeWidget","skipRenderRemoval","removeElement","_deleteRenderedWidget","conserveRenderState","delete","leafUIModel","_handleLeafWidgetReorder","reorderInfo","leafIdTarget","leafTargetInfo","widgetToMove","_handleViewItemReorderCreateView","viewTargetInfo","viewTargetUIModel","viewTargetParentInfo","newLeafToAddId","newLeafToAdd","size","viewTargetIsContainedInAGroupWithTheSameDirection","direction","_renderWidget","_widgetIsSlotted","renderId","widgetRender","renders","console","error","addWrapper","slottedWidgets","_checkToEmitRenderedWidgetsChange","shouldEmitRenderedWidgetsChange","rendered","slotted","renderedWidgetsChange","class_2","modelChanged","newModel","addWidget","leafId_1","widget_1","selectWidget","removeRenderedWidgets","itemInfo","leafInfoToRemove","nodeToRemoveUIModel","nodeToRemove","itemsOfNodeToRemove","nodeToReconnectUIModel_1","nodeToReconnect","itemToUpdateItsParent","nodeToReconnectUIModel","nodeToReconnectLeafInfo_1","widgetsToUpdateParentLeafId","widgetUIModel","removeWidget","findIndex","updateSelectedWidget","newSelectedWidgetId","parentLeafInfo","updateViewInfo","properties","viewUIModel","updateWidgetInfo","entries","componentWillLoad","componentDidRender","theme","onViewItemClose","onViewItemReorder","onSelectedViewItemChange"],"sources":["src/components/flexible-layout/internal/flexible-layout/utils.ts","src/components/flexible-layout/utils.ts","src/components/flexible-layout/internal/flexible-layout/flexible-layout.scss?tag=ch-flexible-layout&encapsulation=shadow","src/components/flexible-layout/internal/flexible-layout/flexible-layout.tsx","src/components/flexible-layout/flexible-layout-render.scss?tag=ch-flexible-layout-render&encapsulation=shadow","src/components/flexible-layout/flexible-layout-render.tsx"],"sourcesContent":["import { inBetween } from \"../../../../common/utils\";\r\nimport {\r\n  DraggableViewExtendedInfo,\r\n  DroppableArea,\r\n  WidgetDropInfo\r\n} from \"./types\";\r\n\r\n/**\r\n * [block-start, block-end, inline-start, inline-end]\r\n */\r\ntype DroppableAreaSizes = [number, number, number, number];\r\n\r\n// Custom vars\r\nconst BLOCK_START = \"--ch-flexible-layout-drop-area-block-start\";\r\nconst BLOCK_END = \"--ch-flexible-layout-drop-area-block-end\";\r\nconst INLINE_START = \"--ch-flexible-layout-drop-area-inline-start\";\r\nconst INLINE_END = \"--ch-flexible-layout-drop-area-inline-end\";\r\n\r\n/**\r\n * If the mouse position is in the interval [0%, 30%] the droppable area should\r\n * be displayed at the START position with half the size.\r\n */\r\nconst START_HALF_THRESHOLD = 30; // In percentage\r\n\r\n/**\r\n * If the mouse position is in the interval [70%, 100%] the droppable area\r\n * should be displayed at the END position with half the size.\r\n */\r\nconst END_HALF_THRESHOLD = 100 - START_HALF_THRESHOLD; // In percentage\r\n\r\nconst EDGE_SIZE = 0.5;\r\n\r\nconst setProperty = (element: HTMLElement, property: string, value: number) =>\r\n  element.style.setProperty(property, `${value}px`);\r\n\r\nconst inlineStart = (mainViewRect: DOMRect, rtl: boolean) =>\r\n  rtl ? mainViewRect.left + mainViewRect.width * EDGE_SIZE : mainViewRect.left;\r\n\r\nconst inlineEnd = (\r\n  documentRect: DOMRect,\r\n  mainViewRect: DOMRect,\r\n  rtl: boolean\r\n) =>\r\n  rtl\r\n    ? documentRect.width - mainViewRect.right\r\n    : documentRect.width - (mainViewRect.left + mainViewRect.width * EDGE_SIZE);\r\n\r\nconst droppableAreaMap: {\r\n  [key in DroppableArea]: (\r\n    documentRect: DOMRect,\r\n    mainViewRect: DOMRect,\r\n    rtl: boolean\r\n  ) => DroppableAreaSizes;\r\n} = {\r\n  \"block-start\": (documentRect, mainViewRect) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height * EDGE_SIZE),\r\n    mainViewRect.left,\r\n    documentRect.width - mainViewRect.right\r\n  ],\r\n\r\n  \"block-end\": (documentRect, mainViewRect) => [\r\n    mainViewRect.top + mainViewRect.height * EDGE_SIZE,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    mainViewRect.left,\r\n    documentRect.width - mainViewRect.right\r\n  ],\r\n\r\n  \"inline-start\": (documentRect, mainViewRect, rtl) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    inlineStart(mainViewRect, rtl),\r\n    inlineEnd(documentRect, mainViewRect, rtl)\r\n  ],\r\n\r\n  \"inline-end\": (documentRect, mainViewRect, rtl) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    inlineStart(mainViewRect, !rtl),\r\n    inlineEnd(documentRect, mainViewRect, !rtl)\r\n  ],\r\n\r\n  center: (documentRect, mainViewRect) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    mainViewRect.left,\r\n    documentRect.width - mainViewRect.right\r\n  ]\r\n};\r\n\r\nlet lastDroppableArea: DroppableArea;\r\nlet lastViewId: string;\r\n\r\nexport const handleWidgetDrag =\r\n  (\r\n    draggableView: DraggableViewExtendedInfo,\r\n    droppableAreaRef: HTMLElement,\r\n    rtl: boolean\r\n  ) =>\r\n  (event: MouseEvent) => {\r\n    event.stopPropagation(); // Prevents the remove of the droppable area\r\n\r\n    // - - - - - - - - - - - DOM read operations - - - - - - - - - - -\r\n    const documentRect = document.documentElement.getBoundingClientRect();\r\n    const mainViewRect = draggableView.mainView.getBoundingClientRect();\r\n    const positionX = event.clientX; // Mouse position X\r\n    const positionY = event.clientY; // Mouse position Y\r\n\r\n    const distanceToTheLeftEdge = rtl\r\n      ? mainViewRect.width - (positionX - mainViewRect.left)\r\n      : positionX - mainViewRect.left;\r\n    const distanceToTheTopEdge = positionY - mainViewRect.top;\r\n\r\n    const relativePositionX =\r\n      (distanceToTheLeftEdge / mainViewRect.width) * 100;\r\n    const relativePositionY =\r\n      (distanceToTheTopEdge / mainViewRect.height) * 100;\r\n\r\n    let droppableArea: DroppableArea;\r\n\r\n    // Block start (Most likely droppable area)\r\n    if (\r\n      relativePositionY <= START_HALF_THRESHOLD &&\r\n      inBetween(relativePositionY, relativePositionX, 100 - relativePositionY)\r\n    ) {\r\n      droppableArea = \"block-start\";\r\n    }\r\n\r\n    // Inline End (second most likely droppable area)\r\n    else if (\r\n      relativePositionX >= END_HALF_THRESHOLD &&\r\n      inBetween(100 - relativePositionX, relativePositionY, relativePositionX)\r\n    ) {\r\n      droppableArea = \"inline-end\";\r\n    }\r\n\r\n    // Inline Start\r\n    else if (\r\n      relativePositionX <= START_HALF_THRESHOLD &&\r\n      inBetween(relativePositionX, relativePositionY, 100 - relativePositionX)\r\n    ) {\r\n      droppableArea = \"inline-start\";\r\n    }\r\n\r\n    // Block end\r\n    else if (\r\n      relativePositionY >= END_HALF_THRESHOLD &&\r\n      inBetween(100 - relativePositionY, relativePositionX, relativePositionY)\r\n    ) {\r\n      droppableArea = \"block-end\";\r\n    }\r\n\r\n    // Center\r\n    else {\r\n      droppableArea = \"center\";\r\n    }\r\n\r\n    // If the droppable area did not change, there is no need to update the DOM\r\n    if (\r\n      lastViewId === draggableView.viewId &&\r\n      lastDroppableArea === droppableArea\r\n    ) {\r\n      return;\r\n    }\r\n    lastDroppableArea = droppableArea;\r\n    lastViewId = draggableView.viewId;\r\n\r\n    const droppableAreaSizes = droppableAreaMap[droppableArea](\r\n      documentRect,\r\n      mainViewRect,\r\n      rtl\r\n    );\r\n\r\n    // - - - - - - - - - - - DOM write operations - - - - - - - - - - -\r\n    setProperty(droppableAreaRef, BLOCK_START, droppableAreaSizes[0]);\r\n    setProperty(droppableAreaRef, BLOCK_END, droppableAreaSizes[1]);\r\n\r\n    setProperty(droppableAreaRef, INLINE_START, droppableAreaSizes[2]);\r\n    setProperty(droppableAreaRef, INLINE_END, droppableAreaSizes[3]);\r\n  };\r\n\r\nexport const removeDroppableAreaStyles = (droppableAreaRef: HTMLElement) => {\r\n  lastDroppableArea = undefined;\r\n  lastViewId = undefined;\r\n  droppableAreaRef.removeAttribute(\"style\");\r\n};\r\n\r\nexport const getWidgetDropInfo = (): WidgetDropInfo | undefined =>\r\n  lastDroppableArea === undefined\r\n    ? undefined\r\n    : { dropAreaTarget: lastDroppableArea, viewIdTarget: lastViewId };\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Build } from \"@stencil/core\";\r\nimport {\r\n  FlexibleLayoutModel,\r\n  FlexibleLayoutGroupModel,\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutItemExtended,\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafInfo,\r\n  FlexibleLayoutLeafType,\r\n  FlexibleLayoutWidgetExtended\r\n} from \"./internal/flexible-layout/types\";\r\nimport { ROOT_VIEW } from \"../../common/utils\";\r\nimport { DEFAULT_TAB_LIST_POSITION, isBlockDirection } from \"../tab/utils\";\r\n\r\n// Aliases\r\ntype ItemExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype LeafExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype GroupExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutGroupModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\nexport const createAndSetLeafInfo = (\r\n  flexibleLayoutLeaf: FlexibleLayoutLeafModel,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>\r\n): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> => {\r\n  const leafId = flexibleLayoutLeaf.id;\r\n  const leafType = flexibleLayoutLeaf.type;\r\n\r\n  if (leafType === \"single-content\") {\r\n    const widget = flexibleLayoutLeaf.widget;\r\n\r\n    // Mark the widget as rendered\r\n    renderedWidgets.add(widget.id);\r\n\r\n    // Store the widget info\r\n    widgetsInfo.set(leafId, { parentLeafId: leafId, info: widget });\r\n\r\n    return {\r\n      id: leafId,\r\n      type: leafType,\r\n      widget: widget\r\n    };\r\n  }\r\n\r\n  let selectedWidgetId = flexibleLayoutLeaf.selectedWidgetId;\r\n  const widgets = flexibleLayoutLeaf.widgets;\r\n\r\n  widgets.forEach(widget => {\r\n    if (widget.wasRendered || selectedWidgetId === widget.id) {\r\n      // Ensure proper initialization\r\n      widget.wasRendered = true;\r\n\r\n      renderedWidgets.add(widget.id);\r\n    }\r\n\r\n    // Store the widget info\r\n    widgetsInfo.set(widget.id, { parentLeafId: leafId, info: widget });\r\n  });\r\n\r\n  if (Build.isDev) {\r\n    if (widgets.length === 0) {\r\n      console.warn(`The view \"${leafId}\" does not have any widget.`);\r\n    }\r\n  }\r\n\r\n  // If there is no widget selected by default, select one\r\n  if (selectedWidgetId == null && widgets.length > 0) {\r\n    const selectedWidget =\r\n      widgets[\r\n        isBlockDirection(\r\n          flexibleLayoutLeaf.tabListPosition ?? DEFAULT_TAB_LIST_POSITION\r\n        )\r\n          ? widgets.length - 1\r\n          : 0\r\n      ];\r\n    selectedWidgetId = selectedWidget.id;\r\n    selectedWidget.wasRendered = true;\r\n\r\n    // Mark the widget as rendered\r\n    renderedWidgets.add(selectedWidgetId);\r\n  }\r\n\r\n  return {\r\n    id: leafId,\r\n    closeButton: flexibleLayoutLeaf.closeButton,\r\n    disabled: flexibleLayoutLeaf.disabled,\r\n    dragOutside: flexibleLayoutLeaf.dragOutside,\r\n    selectedWidgetId: selectedWidgetId,\r\n    showCaptions: flexibleLayoutLeaf.showCaptions ?? true,\r\n    sortable: flexibleLayoutLeaf.sortable,\r\n    tabListPosition: flexibleLayoutLeaf.tabListPosition,\r\n    tabButtonHidden: flexibleLayoutLeaf.tabButtonHidden ?? false,\r\n    type: leafType,\r\n    widgets: widgets\r\n  };\r\n};\r\n\r\nconst addCustomBehavior = (\r\n  item: FlexibleLayoutItemModel,\r\n  layoutSplitterParts: Set<string>\r\n) => {\r\n  if (item.dragBar?.part) {\r\n    layoutSplitterParts.add(item.dragBar?.part);\r\n  }\r\n};\r\n\r\nexport const addNewLeafToInfo = (\r\n  leaf: FlexibleLayoutLeafModel,\r\n  parentItem: FlexibleLayoutGroupModel,\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>\r\n) => {\r\n  const flexibleLeafExtended: LeafExtended = {\r\n    item: leaf,\r\n    parentItem: parentItem,\r\n    leafInfo: createAndSetLeafInfo(leaf, renderedWidgets, widgetsInfo)\r\n  };\r\n\r\n  itemsInfo.set(leaf.id, flexibleLeafExtended);\r\n};\r\n\r\nconst updateFlexibleSubModels = (\r\n  flexibleLayoutItems: FlexibleLayoutItemModel[],\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  layoutSplitterParts: Set<string>,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>,\r\n  parentItem: FlexibleLayoutGroupModel\r\n) => {\r\n  flexibleLayoutItems.forEach(flexibleItem => {\r\n    // Group\r\n    if ((flexibleItem as FlexibleLayoutGroupModel).items != null) {\r\n      const group = flexibleItem as FlexibleLayoutGroupModel;\r\n\r\n      const flexibleItemExtended: GroupExtended = {\r\n        item: group,\r\n        parentItem: parentItem\r\n      };\r\n      itemsInfo.set(group.id, flexibleItemExtended);\r\n\r\n      layoutSplitterParts.add(group.id);\r\n\r\n      updateFlexibleSubModels(\r\n        group.items, // Subitems\r\n        itemsInfo,\r\n        layoutSplitterParts,\r\n        renderedWidgets,\r\n        widgetsInfo,\r\n        group\r\n      );\r\n    }\r\n    // Leaf\r\n    else {\r\n      addNewLeafToInfo(\r\n        flexibleItem as FlexibleLayoutLeafModel,\r\n        parentItem,\r\n        itemsInfo,\r\n        renderedWidgets,\r\n        widgetsInfo\r\n      );\r\n    }\r\n\r\n    // Custom behaviors\r\n    addCustomBehavior(flexibleItem, layoutSplitterParts);\r\n  });\r\n};\r\n\r\nexport const updateFlexibleModels = (\r\n  flexibleLayout: FlexibleLayoutModel,\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  layoutSplitterParts: Set<string>,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>\r\n) =>\r\n  updateFlexibleSubModels(\r\n    flexibleLayout.items,\r\n    itemsInfo,\r\n    layoutSplitterParts,\r\n    renderedWidgets,\r\n    widgetsInfo,\r\n    ROOT_VIEW // Root item\r\n  );\r\n\r\nexport const getLeafInfo = (\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  leafId: string\r\n): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> =>\r\n  (itemsInfo.get(leafId) as LeafExtended).leafInfo;\r\n",":host {\r\n  display: contents;\r\n}\r\n\r\n.droppable-area {\r\n  // Reset popover's browser defaults\r\n  width: auto;\r\n  height: auto;\r\n  padding: 0;\r\n  margin: 0;\r\n  border: unset;\r\n  color: unset;\r\n\r\n  inset-block: var(--ch-flexible-layout-drop-area-block-start)\r\n    var(--ch-flexible-layout-drop-area-block-end);\r\n\r\n  left: var(--ch-flexible-layout-drop-area-inline-start);\r\n  right: var(--ch-flexible-layout-drop-area-inline-end);\r\n\r\n  background-color: color-mix(in srgb, currentColor 15%, transparent);\r\n\r\n  transition: inset 150ms ease-in-out;\r\n  pointer-events: none; // Avoid the capture of pointer events\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Listen,\r\n  Method,\r\n  Prop,\r\n  State,\r\n  forceUpdate,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  DraggableView,\r\n  DraggableViewExtendedInfo,\r\n  FlexibleLayoutModel,\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutItemExtended,\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafInfo,\r\n  FlexibleLayoutLeafType,\r\n  FlexibleLayoutViewRemoveResult,\r\n  ViewItemCloseInfo,\r\n  ViewSelectedItemInfo,\r\n  WidgetDragInfo,\r\n  WidgetReorderInfo\r\n} from \"./types\";\r\n\r\n// import { mouseEventModifierKey } from \"../../common/helpers\";\r\n\r\nimport { TabItemCloseInfo, TabSelectedItemInfo } from \"../../../tab/types\";\r\nimport { ChTabRenderCustomEvent } from \"../../../../components\";\r\nimport {\r\n  getWidgetDropInfo,\r\n  handleWidgetDrag,\r\n  removeDroppableAreaStyles\r\n} from \"./utils\";\r\nimport { getLeafInfo } from \"../../utils\";\r\nimport { isRTL, tokenMap } from \"../../../../common/utils\";\r\nimport {\r\n  CssContainProperty,\r\n  CssOverflowProperty\r\n} from \"../../../../common/types\";\r\nimport {\r\n  DEFAULT_TAB_LIST_POSITION,\r\n  isBlockDirection,\r\n  isStartDirection\r\n} from \"../../../tab/utils\";\r\nimport {\r\n  FLEXIBLE_LAYOUT_PARTS_DICTIONARY,\r\n  LAYOUT_SPLITTER_PARTS_DICTIONARY,\r\n  TAB_EXPORT_PARTS,\r\n  TAB_PARTS_DICTIONARY\r\n} from \"../../../../common/reserved-names\";\r\n\r\nconst LEAF_SELECTOR = (id: string) => `[id=\"${id}\"]`;\r\n\r\n// Keys\r\nconst ESCAPE_KEY = \"Escape\";\r\n// const KEY_B = \"KeyB\";\r\n\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"flexible-layout.scss\",\r\n  tag: \"ch-flexible-layout\"\r\n})\r\nexport class ChFlexibleLayout {\r\n  #exportParts: string;\r\n  #layoutSplitterExportParts: string;\r\n  #leafs: FlexibleLayoutLeafInfo<FlexibleLayoutLeafType>[] = [];\r\n\r\n  #draggableViews: DraggableViewExtendedInfo[];\r\n\r\n  #dragInfo: WidgetDragInfo;\r\n  #viewsOutOfDroppableZoneController: AbortController; // Allocated at runtime to reduce memory usage\r\n\r\n  // Refs\r\n  #draggedViewRef: DraggableView;\r\n  #droppableAreaRef: HTMLDivElement;\r\n  #layoutSplitterRef: HTMLChLayoutSplitterElement;\r\n\r\n  @Element() el: HTMLChFlexibleLayoutElement;\r\n\r\n  @State() dragBarDisabled = false;\r\n\r\n  /**\r\n   * `true` to display a close button for the `\"tabbed\"` type leafs.\r\n   */\r\n  @Prop() readonly closeButton: boolean = false;\r\n\r\n  /**\r\n   * Same as the contain CSS property. This property indicates that an widget\r\n   * and its contents are, as much as possible, independent from the rest of the\r\n   * document tree. Containment enables isolating a subsection of the DOM,\r\n   * providing performance benefits by limiting calculations of layout, style,\r\n   * paint, size, or any combination to a DOM subtree rather than the entire\r\n   * page.\r\n   * Containment can also be used to scope CSS counters and quotes.\r\n   */\r\n  @Prop() readonly contain: CssContainProperty = \"none\";\r\n\r\n  /**\r\n   * When the \"tabbed\" type leafs are sortable, the items can be dragged\r\n   * outside of its tab-list.\r\n   *\r\n   * This property lets you specify if this behavior is enabled.\r\n   */\r\n  @Prop() readonly dragOutside: boolean = false;\r\n\r\n  /**\r\n   * Specifies the information of each view displayed.\r\n   */\r\n  @Prop() readonly itemsInfo: Map<\r\n    string,\r\n    FlexibleLayoutItemExtended<FlexibleLayoutItemModel, FlexibleLayoutLeafType>\r\n  >;\r\n\r\n  /**\r\n   * Specifies additional parts to export.\r\n   */\r\n  @Prop() readonly layoutSplitterParts: Set<string>;\r\n\r\n  /**\r\n   * Specifies the distribution of the items in the flexible layout.\r\n   */\r\n  @Prop() readonly model: FlexibleLayoutModel;\r\n\r\n  /**\r\n   * Same as the overflow CSS property. This property sets the desired behavior\r\n   * when content does not fit in the widget's padding box (overflows) in the\r\n   * horizontal and/or vertical direction.\r\n   */\r\n  @Prop() readonly overflow:\r\n    | CssOverflowProperty\r\n    | `${CssOverflowProperty} ${CssOverflowProperty}` = \"visible\";\r\n\r\n  /**\r\n   * `true` to enable sorting the tab buttons in the `\"tabbed\"` type leafs by\r\n   * dragging them in the tab-list.\r\n   *\r\n   * If `false`, the tab buttons can not be dragged out either.\r\n   */\r\n  @Prop() readonly sortable: boolean = false;\r\n\r\n  /**\r\n   * Fired when a item of a view request to be closed.\r\n   */\r\n  @Event() viewItemClose: EventEmitter<ViewItemCloseInfo>;\r\n\r\n  /**\r\n   * Fired when the selected item change.\r\n   */\r\n  @Event() selectedViewItemChange: EventEmitter<ViewSelectedItemInfo>;\r\n\r\n  /**\r\n   * Fired when a widget is dragged and dropped into a view.\r\n   */\r\n  @Event() viewItemReorder: EventEmitter<WidgetReorderInfo>;\r\n\r\n  /**\r\n   *\r\n   */\r\n  @Method()\r\n  async addSiblingView(\r\n    parentGroup: string,\r\n    siblingItem: string,\r\n    placedInTheSibling: \"before\" | \"after\",\r\n    viewInfo: FlexibleLayoutLeafModel,\r\n    takeHalfTheSpaceOfTheSiblingItem: boolean\r\n  ): Promise<boolean> {\r\n    const result = await this.#layoutSplitterRef.addSiblingLeaf(\r\n      parentGroup,\r\n      siblingItem,\r\n      placedInTheSibling,\r\n      viewInfo,\r\n      takeHalfTheSpaceOfTheSiblingItem\r\n    );\r\n\r\n    if (result.success) {\r\n      // Queue re-renders\r\n      forceUpdate(this);\r\n    }\r\n\r\n    return result.success;\r\n  }\r\n\r\n  /**\r\n   * Schedules a new render for a leaf even if no state changed.\r\n   */\r\n  @Method()\r\n  async refreshLeaf(leafId: string) {\r\n    const leafRef = this.el.shadowRoot.querySelector(LEAF_SELECTOR(leafId));\r\n\r\n    if (!leafRef) {\r\n      return;\r\n    }\r\n\r\n    forceUpdate(leafRef);\r\n  }\r\n\r\n  /**\r\n   * Removes the view that is identified by the given ID.\r\n   * The layout is rearranged depending on the state of the removed view.\r\n   */\r\n  @Method()\r\n  async removeView(itemId: string): Promise<FlexibleLayoutViewRemoveResult> {\r\n    const result = await this.#layoutSplitterRef.removeItem(itemId);\r\n\r\n    if (result.success) {\r\n      // Queue re-renders\r\n      forceUpdate(this);\r\n    }\r\n\r\n    return {\r\n      success: result.success,\r\n      reconnectedSubtree: result.reconnectedSubtree\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Given the view ID and the item id, remove the page of the item from the view.\r\n   */\r\n  @Method()\r\n  async removeItemPageInView(\r\n    viewId: string,\r\n    itemId: string,\r\n    forceRerender = true\r\n  ) {\r\n    const viewInfo = this.#getLeafInfo(viewId);\r\n    if (!viewInfo) {\r\n      return;\r\n    }\r\n\r\n    const viewRef = this.el.shadowRoot.querySelector(\r\n      LEAF_SELECTOR(viewInfo.id)\r\n    ) as HTMLChTabRenderElement;\r\n    await viewRef.removePage(itemId, forceRerender);\r\n  }\r\n\r\n  @Listen(\"itemClose\")\r\n  handleItemClose(event: ChTabRenderCustomEvent<TabItemCloseInfo>) {\r\n    const viewRef = event.composedPath()[0] as HTMLChTabRenderElement;\r\n\r\n    if (\r\n      viewRef.tagName.toLowerCase() !== \"ch-tab-render\" ||\r\n      viewRef.getRootNode() !== this.el.shadowRoot\r\n    ) {\r\n      return;\r\n    }\r\n    event.stopPropagation();\r\n\r\n    // Add the view id to properly update the render\r\n    const eventDetail: ViewItemCloseInfo = {\r\n      ...event.detail,\r\n      viewId: viewRef.id\r\n    };\r\n\r\n    const eventInfo = this.viewItemClose.emit(eventDetail);\r\n\r\n    // Prevent the tab closing\r\n    if (eventInfo.defaultPrevented) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  #getLeafInfo = (\r\n    leafId: string\r\n  ): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> =>\r\n    getLeafInfo(this.itemsInfo, leafId);\r\n\r\n  #getAllLeafs = (): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType>[] => {\r\n    const views: FlexibleLayoutLeafInfo<FlexibleLayoutLeafType>[] = [];\r\n\r\n    this.itemsInfo.forEach(item => {\r\n      const itemView = (\r\n        item as FlexibleLayoutItemExtended<\r\n          FlexibleLayoutLeafModel,\r\n          FlexibleLayoutLeafType\r\n        >\r\n      ).leafInfo;\r\n\r\n      if (itemView != null) {\r\n        views.push(itemView);\r\n      }\r\n    });\r\n\r\n    return views;\r\n  };\r\n\r\n  // @Listen(\"keydown\", { target: \"document\" })\r\n  // handleKeyDownEvent(event: KeyboardEvent) {\r\n  // if (\r\n  //   !mouseEventModifierKey(event) ||\r\n  //   event.code !== KEY_B ||\r\n  //   this.layout.inlineStart == null\r\n  // ) {\r\n  //   return;\r\n  // }\r\n  // event.stopPropagation();\r\n  // event.preventDefault();\r\n\r\n  // this.layout.inlineStart.expanded = !(\r\n  //   this.layout.inlineStart.expanded ?? true\r\n  // );\r\n  //   forceUpdate(this);\r\n  // }\r\n\r\n  // private handleMainGroupExpand = () => {\r\n  //   // if (this.layout.inlineStart) {\r\n  //   //   this.layout.inlineStart.expanded = false;\r\n  //   // }\r\n\r\n  //   // if (this.layout.inlineEnd) {\r\n  //   //   this.layout.inlineEnd.expanded = false;\r\n  //   // }\r\n\r\n  //   // if (this.layout.blockEnd) {\r\n  //   //   this.layout.blockEnd.expanded = false;\r\n  //   // }\r\n\r\n  //   forceUpdate(this);\r\n  // };\r\n\r\n  #handleItemChange =\r\n    (viewId: string) =>\r\n    (event: ChTabRenderCustomEvent<TabSelectedItemInfo>) => {\r\n      // Check if the selected item change event comes from a tab of the\r\n      // shadowroot, instead of a tab of the light DOM (case where a view has a\r\n      // \"nested\" ch-tab-render control)\r\n      if ((event.target as HTMLElement).getRootNode() !== this.el.shadowRoot) {\r\n        return;\r\n      }\r\n\r\n      event.stopPropagation();\r\n\r\n      // Add the view id to properly update the render\r\n      const eventInfo: ViewSelectedItemInfo = {\r\n        ...event.detail,\r\n        viewId: viewId\r\n      };\r\n\r\n      this.selectedViewItemChange.emit(eventInfo);\r\n    };\r\n\r\n  #handleDragStart =\r\n    (viewId: string) => async (event: ChTabRenderCustomEvent<number>) => {\r\n      event.stopPropagation();\r\n\r\n      // We MUST store the reference before the Promise.allSettle, otherwise\r\n      // the event target will be the flexible-layout control\r\n      this.#draggedViewRef = event.target;\r\n\r\n      const views = [...this.el.shadowRoot.querySelectorAll(\"ch-tab-render\")];\r\n\r\n      this.#dragInfo = {\r\n        index: event.detail,\r\n        viewId: viewId\r\n      };\r\n\r\n      // Get all draggable views\r\n      const draggableViewsResult = await Promise.allSettled(\r\n        views.map(view => view.getDraggableViews())\r\n      );\r\n\r\n      // Allocate memory\r\n      this.#draggableViews = [];\r\n\r\n      // Add handlers to manage droppable areas\r\n      draggableViewsResult.forEach((draggableViewResult, index) => {\r\n        if (draggableViewResult.status === \"fulfilled\") {\r\n          const draggableView = draggableViewResult.value;\r\n          const abortController = new AbortController(); // Necessary to remove the event listener\r\n\r\n          const extendedDraggableView = {\r\n            ...draggableView,\r\n            viewId: views[index].id, // All views have an id in the DOM\r\n            abortController: abortController\r\n          };\r\n\r\n          this.#draggableViews.push(extendedDraggableView);\r\n\r\n          const RTL = isRTL();\r\n\r\n          draggableView.mainView.addEventListener(\r\n            \"mousemove\",\r\n            handleWidgetDrag(\r\n              extendedDraggableView,\r\n              this.#droppableAreaRef,\r\n              RTL\r\n            ),\r\n            { capture: true, passive: true, signal: abortController.signal }\r\n          );\r\n\r\n          // Remove pointer events to not interfere on the mousemove event\r\n          extendedDraggableView.tabListView.style.pointerEvents = \"none\";\r\n          extendedDraggableView.pageView.style.pointerEvents = \"none\";\r\n        }\r\n      });\r\n\r\n      document.addEventListener(\"mouseup\", this.#handleWidgetDragEnd, {\r\n        passive: true\r\n      });\r\n      document.addEventListener(\"keydown\", this.#handleWidgetDragEndKeydown, {\r\n        passive: true\r\n      });\r\n\r\n      // Removes view when they are out of a droppable area\r\n      this.#viewsOutOfDroppableZoneController = new AbortController();\r\n      document.addEventListener(\r\n        \"mousemove\",\r\n        () => removeDroppableAreaStyles(this.#droppableAreaRef),\r\n        {\r\n          passive: true,\r\n          signal: this.#viewsOutOfDroppableZoneController.signal\r\n        }\r\n      );\r\n\r\n      // Show droppable area\r\n      this.#droppableAreaRef.showPopover(); // Layer 1\r\n\r\n      // After that, promote the drag preview to the second layer\r\n      this.#draggedViewRef.promoteDragPreviewToTopLayer(); // Layer 2\r\n\r\n      // Disable drag bars in layout-splitter to improve the drag experience\r\n      this.dragBarDisabled = true;\r\n    };\r\n\r\n  #handleWidgetDragEndKeydown = (event: KeyboardEvent) => {\r\n    if (event.code !== ESCAPE_KEY) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n\r\n    // Cancels the drop by removing the drop info\r\n    removeDroppableAreaStyles(this.#droppableAreaRef);\r\n\r\n    this.#handleWidgetDragEnd();\r\n    this.#draggedViewRef.endDragPreview();\r\n  };\r\n\r\n  #handleWidgetDragEnd = () => {\r\n    // Remove mousemove handlers\r\n    this.#draggableViews.forEach(draggableView => {\r\n      draggableView.abortController.abort();\r\n\r\n      // Reset pointer events\r\n      draggableView.tabListView.style.pointerEvents = null;\r\n      draggableView.pageView.style.pointerEvents = null;\r\n    });\r\n\r\n    // Remove mouseup and keydown handlers\r\n    document.removeEventListener(\"mouseup\", this.#handleWidgetDragEnd);\r\n    document.removeEventListener(\"keydown\", this.#handleWidgetDragEndKeydown);\r\n    this.#viewsOutOfDroppableZoneController.abort();\r\n\r\n    // Check if must update the view due to a drop\r\n    const dropInfo = getWidgetDropInfo();\r\n\r\n    if (dropInfo) {\r\n      this.viewItemReorder.emit({ ...this.#dragInfo, ...dropInfo });\r\n    }\r\n\r\n    // Hide droppable area\r\n    this.#droppableAreaRef.hidePopover();\r\n    removeDroppableAreaStyles(this.#droppableAreaRef);\r\n\r\n    // Free the memory\r\n    this.#draggableViews = undefined;\r\n    this.#dragInfo = undefined;\r\n\r\n    // Re-enable drag bars\r\n    this.dragBarDisabled = false;\r\n  };\r\n\r\n  #computePartsToExport = () => {\r\n    const exportPartsSet = new Set<string>([\r\n      ...Object.values(TAB_PARTS_DICTIONARY)\r\n    ]);\r\n    exportPartsSet.add(FLEXIBLE_LAYOUT_PARTS_DICTIONARY.DROPPABLE_AREA);\r\n    exportPartsSet.add(FLEXIBLE_LAYOUT_PARTS_DICTIONARY.LEAF);\r\n    exportPartsSet.add(LAYOUT_SPLITTER_PARTS_DICTIONARY.BAR);\r\n\r\n    // TODO: Test items that have a part with spaces\r\n    this.layoutSplitterParts.forEach(part => exportPartsSet.add(part));\r\n\r\n    // TODO: Revisit this algorithm to simplify definition of exportparts\r\n    this.#leafs.forEach(leaf => {\r\n      if (leaf.type === \"tabbed\") {\r\n        exportPartsSet.add(leaf.id);\r\n        exportPartsSet.add(leaf.tabListPosition ?? DEFAULT_TAB_LIST_POSITION);\r\n        leaf.widgets.forEach(({ id }) => exportPartsSet.add(id));\r\n      }\r\n    });\r\n\r\n    this.#exportParts = [...exportPartsSet.keys()].join(\",\");\r\n\r\n    this.#layoutSplitterExportParts = [\r\n      ...this.layoutSplitterParts.keys(),\r\n      LAYOUT_SPLITTER_PARTS_DICTIONARY.BAR\r\n    ].join(\",\");\r\n  };\r\n\r\n  #renderTab = (viewInfo: FlexibleLayoutLeafInfo<\"tabbed\">) => {\r\n    const dragOutsideEnabled = viewInfo.dragOutside ?? this.dragOutside;\r\n    const sortableEnabled = viewInfo.sortable ?? this.sortable;\r\n    const tabListPosition =\r\n      viewInfo.tabListPosition ?? DEFAULT_TAB_LIST_POSITION;\r\n\r\n    const blockDirection = isBlockDirection(tabListPosition);\r\n    const startDirection = isStartDirection(tabListPosition);\r\n\r\n    return (\r\n      <ch-tab-render\r\n        id={viewInfo.id}\r\n        key={viewInfo.id}\r\n        slot={viewInfo.id}\r\n        contain={this.contain}\r\n        // TODO: Add hostParts property in the ch-tab-render\r\n        part={tokenMap({\r\n          [viewInfo.id]: true,\r\n          [FLEXIBLE_LAYOUT_PARTS_DICTIONARY.LEAF]: true,\r\n          [tabListPosition]: true,\r\n          [TAB_PARTS_DICTIONARY.BLOCK]: blockDirection,\r\n          [TAB_PARTS_DICTIONARY.INLINE]: !blockDirection,\r\n          [TAB_PARTS_DICTIONARY.START]: startDirection,\r\n          [TAB_PARTS_DICTIONARY.END]: !startDirection\r\n        })}\r\n        // TODO: Find a better way to avoid this mapping on every render\r\n        exportparts={`${TAB_EXPORT_PARTS},${tabListPosition},${viewInfo.widgets\r\n          .map(({ id }) => id)\r\n          .join(\",\")}`}\r\n        closeButton={viewInfo.closeButton ?? this.closeButton}\r\n        disabled={viewInfo.disabled}\r\n        dragOutside={dragOutsideEnabled}\r\n        model={viewInfo.widgets}\r\n        overflow={this.overflow}\r\n        selectedId={viewInfo.selectedWidgetId}\r\n        showCaptions={viewInfo.showCaptions}\r\n        sortable={sortableEnabled}\r\n        tabButtonHidden={viewInfo.tabButtonHidden}\r\n        tabListPosition={tabListPosition}\r\n        // onExpandMainGroup={tabType === \"main\" ? this.handleMainGroupExpand : null}\r\n        onItemDragStart={\r\n          dragOutsideEnabled && sortableEnabled\r\n            ? this.#handleDragStart(viewInfo.id)\r\n            : undefined\r\n        }\r\n        onSelectedItemChange={this.#handleItemChange(viewInfo.id)}\r\n      >\r\n        {viewInfo.widgets.map(\r\n          widget =>\r\n            widget.wasRendered && <slot name={widget.id} slot={widget.id} />\r\n        )}\r\n      </ch-tab-render>\r\n    );\r\n  };\r\n\r\n  #renderView = <T extends FlexibleLayoutLeafType>(\r\n    leaf: FlexibleLayoutLeafInfo<T>\r\n  ) =>\r\n    leaf.type === \"single-content\" ? (\r\n      <slot key={leaf.id} slot={leaf.id} name={leaf.id} />\r\n    ) : (\r\n      this.#renderTab(leaf)\r\n    );\r\n\r\n  componentWillRender() {\r\n    this.#leafs = this.#getAllLeafs();\r\n\r\n    // TODO: Find a better life cycle to run this?\r\n    this.#computePartsToExport();\r\n  }\r\n\r\n  render() {\r\n    const layoutModel = this.model;\r\n\r\n    if (layoutModel == null) {\r\n      return \"\";\r\n    }\r\n\r\n    return (\r\n      <Host exportparts={this.#exportParts}>\r\n        <ch-layout-splitter\r\n          dragBarDisabled={this.dragBarDisabled}\r\n          model={layoutModel}\r\n          exportparts={this.#layoutSplitterExportParts}\r\n          ref={el => (this.#layoutSplitterRef = el)}\r\n        >\r\n          {this.#leafs.map(this.#renderView)}\r\n        </ch-layout-splitter>\r\n\r\n        <div\r\n          aria-hidden=\"true\"\r\n          class=\"droppable-area\"\r\n          part={FLEXIBLE_LAYOUT_PARTS_DICTIONARY.DROPPABLE_AREA}\r\n          popover=\"manual\"\r\n          ref={el => (this.#droppableAreaRef = el)}\r\n        ></div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n",":host,\r\n.ch-flexible-layout-render-slot {\r\n  display: contents;\r\n}\r\n","import {\r\n  Component,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  Watch,\r\n  forceUpdate,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  FlexibleLayoutModel,\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutItemExtended,\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutRenders,\r\n  FlexibleLayoutLeafInfo,\r\n  ViewItemCloseInfo,\r\n  ViewSelectedItemInfo,\r\n  WidgetReorderInfo,\r\n  FlexibleLayoutViewRemoveResult,\r\n  FlexibleLayoutGroupModel,\r\n  DroppableArea,\r\n  FlexibleLayoutWidget,\r\n  FlexibleLayoutLeafType,\r\n  FlexibleLayoutWidgetExtended,\r\n  FlexibleLayoutWidgetCloseInfo,\r\n  FlexibleLayoutLeafConfigurationTabbed,\r\n  FlexibleLayoutRenderedWidgets\r\n} from \"./internal/flexible-layout/types\";\r\nimport { ChFlexibleLayoutCustomEvent } from \"../../components\";\r\nimport { removeElement } from \"../../common/array\";\r\nimport { addNewLeafToInfo, getLeafInfo, updateFlexibleModels } from \"./utils\";\r\nimport { CssContainProperty, CssOverflowProperty } from \"../../common/types\";\r\nimport { ThemeModel } from \"../theme/theme-types\";\r\n\r\n// Aliases\r\ntype ItemExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype LeafExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype GroupExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutGroupModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\nconst GENERATE_GUID = () => {\r\n  let currentDate = new Date().getTime();\r\n\r\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\r\n    let randomNumber = Math.random() * 16; // random number in range 0 to 16\r\n    randomNumber = (currentDate + randomNumber) % 16 | 0;\r\n    currentDate = Math.floor(currentDate / 16);\r\n\r\n    return (c === \"x\" ? randomNumber : (randomNumber & 0x3) | 0x8).toString(16);\r\n  });\r\n};\r\n\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"flexible-layout-render.scss\",\r\n  tag: \"ch-flexible-layout-render\"\r\n})\r\nexport class ChFlexibleLayoutRender {\r\n  /**\r\n   * This Set provides optimizations to not render items that were never\r\n   * shown on the screen.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #renderedWidgets: Set<string> = new Set();\r\n  #lastRenderedWidgets = new Set();\r\n\r\n  #widgetsInfo: Map<string, FlexibleLayoutWidgetExtended> = new Map();\r\n\r\n  #itemsInfo: Map<string, ItemExtended> = new Map();\r\n\r\n  #layoutSplitterParts: Set<string> = new Set();\r\n\r\n  // Refs\r\n  #flexibleLayoutRef: HTMLChFlexibleLayoutElement;\r\n\r\n  /**\r\n   * `true` to display a close button for the `\"tabbed\"` type leafs.\r\n   */\r\n  @Prop() readonly closeButton: boolean = false;\r\n\r\n  /**\r\n   * Same as the contain CSS property. This property indicates that an widget\r\n   * and its contents are, as much as possible, independent from the rest of the\r\n   * document tree. Containment enables isolating a subsection of the DOM,\r\n   * providing performance benefits by limiting calculations of layout, style,\r\n   * paint, size, or any combination to a DOM subtree rather than the entire\r\n   * page.\r\n   * Containment can also be used to scope CSS counters and quotes.\r\n   */\r\n  @Prop() readonly contain: CssContainProperty = \"none\";\r\n\r\n  /**\r\n   * When the \"tabbed\" type leafs are sortable, the items can be dragged\r\n   * outside of its tab-list.\r\n   *\r\n   * This property lets you specify if this behavior is enabled.\r\n   */\r\n  @Prop() readonly dragOutside: boolean = false;\r\n\r\n  /**\r\n   * Specifies the distribution of the items in the flexible layout.\r\n   */\r\n  @Prop() readonly model: FlexibleLayoutModel;\r\n  @Watch(\"model\")\r\n  modelChanged(newModel: FlexibleLayoutModel) {\r\n    this.#updateFlexibleModels(newModel);\r\n  }\r\n\r\n  /**\r\n   * Same as the overflow CSS property. This property sets the desired behavior\r\n   * when content does not fit in the widget's padding box (overflows) in the\r\n   * horizontal and/or vertical direction.\r\n   */\r\n  @Prop() readonly overflow:\r\n    | CssOverflowProperty\r\n    | `${CssOverflowProperty} ${CssOverflowProperty}` = \"visible\";\r\n\r\n  /**\r\n   * Specifies the distribution of the items in the flexible layout.\r\n   */\r\n  @Prop() readonly renders: FlexibleLayoutRenders;\r\n\r\n  /**\r\n   * `true` to enable sorting the tab buttons in the `\"tabbed\"` type leafs by\r\n   * dragging them in the tab-list.\r\n   *\r\n   * If `false`, the tab buttons can not be dragged out either.\r\n   */\r\n  @Prop() readonly sortable: boolean = false;\r\n\r\n  /**\r\n   * Specifies whether widgets are rendered outside of the\r\n   * ch-flexible-layout-render by default by projecting a slot.\r\n   */\r\n  @Prop() readonly slottedWidgets: boolean = false;\r\n\r\n  /**\r\n   * Specifies the theme to be used for rendering the control.\r\n   * If `undefined`, no theme will be applied.\r\n   */\r\n  @Prop() readonly theme: ThemeModel | undefined;\r\n\r\n  /**\r\n   * Emitted when the user pressed the close button in a widget.\r\n   */\r\n  @Event() widgetClose: EventEmitter<FlexibleLayoutWidgetCloseInfo>;\r\n\r\n  /**\r\n   * Emitted every time the rendered widgets changes. It contains the detail\r\n   * of which widgets are rendered inside the `ch-flexible-layout-render`\r\n   * (`rendered` member) and those widgets that are rendered in an slot\r\n   * (`slotted` member).\r\n   */\r\n  @Event() renderedWidgetsChange: EventEmitter<FlexibleLayoutRenderedWidgets>;\r\n\r\n  /**\r\n   * Add a view with widgets to render. The view will take the half space of\r\n   * the sibling view that its added with.\r\n   */\r\n  @Method()\r\n  async addSiblingView(\r\n    parentGroup: string,\r\n    siblingItem: string,\r\n    placedInTheSibling: \"before\" | \"after\",\r\n    viewInfo: FlexibleLayoutLeafModel,\r\n    takeHalfTheSpaceOfTheSiblingItem: boolean\r\n  ): Promise<boolean> {\r\n    const success = await this.#flexibleLayoutRef.addSiblingView(\r\n      parentGroup,\r\n      siblingItem,\r\n      placedInTheSibling,\r\n      viewInfo,\r\n      takeHalfTheSpaceOfTheSiblingItem\r\n    );\r\n\r\n    if (!success) {\r\n      return false;\r\n    }\r\n\r\n    addNewLeafToInfo(\r\n      viewInfo,\r\n      this.#itemsInfo.get(parentGroup).item as FlexibleLayoutGroupModel,\r\n      this.#itemsInfo,\r\n      this.#renderedWidgets,\r\n      this.#widgetsInfo\r\n    );\r\n\r\n    // Queue re-render\r\n    forceUpdate(this);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Add a widget in a `\"tabbed\"` type leaf.\r\n   * Only works if the parent leaf is `\"tabbed\"` type.\r\n   * If a widget with the same ID already exists, this method has not effect.\r\n   *\r\n   * To add a widget in a `\"single-content\"` type leaf, use the\r\n   * `addSiblingView` method.\r\n   */\r\n  @Method()\r\n  async addWidget(\r\n    leafId: string,\r\n    widget: FlexibleLayoutWidget,\r\n    selectWidget = true\r\n  ) {\r\n    const leafUIModel = this.#itemsInfo.get(leafId) as LeafExtended;\r\n\r\n    if (\r\n      !leafUIModel ||\r\n      leafUIModel.leafInfo == null ||\r\n      leafUIModel.leafInfo.type === \"single-content\" ||\r\n      this.#widgetsInfo.has(widget.id)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    leafUIModel.leafInfo.widgets.push(widget);\r\n    this.#widgetsInfo.set(widget.id, { parentLeafId: leafId, info: widget });\r\n\r\n    if (selectWidget) {\r\n      this.#updateSelectedWidget(leafUIModel.leafInfo, widget);\r\n\r\n      // Queue re-renders\r\n      forceUpdate(this);\r\n      forceUpdate(this.#flexibleLayoutRef);\r\n    } else {\r\n      // Queue re-render for the specific leaf\r\n      this.#flexibleLayoutRef.refreshLeaf(leafId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a view and optionally all its rendered widget from the render.\r\n   * The reserved space will be given to the closest view.\r\n   */\r\n  @Method()\r\n  async removeView(\r\n    leafId: string,\r\n    removeRenderedWidgets: boolean\r\n  ): Promise<FlexibleLayoutViewRemoveResult> {\r\n    const itemInfo = this.#itemsInfo.get(leafId);\r\n\r\n    // The leaf didn't exist\r\n    if (!itemInfo) {\r\n      return { success: false, reconnectedSubtree: undefined };\r\n    }\r\n    const leafInfoToRemove = (itemInfo as LeafExtended).leafInfo;\r\n\r\n    // The item is not a leaf (it's a group) or is not \"tabbed\".\r\n    if (\r\n      leafInfoToRemove == null ||\r\n      leafInfoToRemove.type === \"single-content\"\r\n    ) {\r\n      return { success: false, reconnectedSubtree: undefined };\r\n    }\r\n\r\n    const result = await this.#flexibleLayoutRef.removeView(leafId);\r\n\r\n    if (!result.success) {\r\n      return result;\r\n    }\r\n\r\n    // Update view info, since it got renamed\r\n    const reconnectedSubtree = result.reconnectedSubtree;\r\n\r\n    if (reconnectedSubtree) {\r\n      // - - - - - - - - - - - - - - - - - - - - - - - - -\r\n      // INPUT MODEL:\r\n      //                       secondParentItem\r\n      //                              / \\\r\n      //                           /       \\\r\n      //                        /             \\\r\n      //        (Id x) nodeToReconnect  Other items...\r\n      //                       / \\\r\n      //                    /       \\\r\n      //                 /             \\\r\n      // (Id y) leafInfoToRemove  (Id z) nodeToRemove\r\n      //                                     / \\\r\n      //                                  /       \\\r\n      //                              subtree or widgets\r\n      //\r\n      //\r\n      // OUTPUT MODEL:\r\n      //                  secondParentItem\r\n      //                         / \\\r\n      //                      /       \\\r\n      //                   /             \\\r\n      //    (Id x) nodeToReconnect  Other items...\r\n      //                / \\\r\n      //             /       \\\r\n      //         subtree or widgets\r\n      // - - - - - - - - - - - - - - - - - - - - - - - - -\r\n\r\n      const nodeToRemoveUIModel = this.#itemsInfo.get(\r\n        reconnectedSubtree.nodeToRemove\r\n      );\r\n\r\n      // The node to reconnect is still a group (since the nodeToRemove is a group).\r\n      // We must reconnect the nodeToRemove's children\r\n      if ((nodeToRemoveUIModel as LeafExtended).leafInfo == null) {\r\n        const itemsOfNodeToRemove = (nodeToRemoveUIModel as GroupExtended).item\r\n          .items;\r\n\r\n        const nodeToReconnectUIModel = this.#itemsInfo.get(\r\n          reconnectedSubtree.nodeToReconnect\r\n        ) as GroupExtended;\r\n\r\n        // Reconnect the parent of the removedNode subtree\r\n        itemsOfNodeToRemove.forEach(itemToUpdateItsParent => {\r\n          this.#itemsInfo.get(itemToUpdateItsParent.id).parentItem =\r\n            nodeToReconnectUIModel.item;\r\n        });\r\n      }\r\n      // The node to reconnect is a leaf, since the nodeToRemove is a leaf\r\n      else {\r\n        const nodeToReconnectUIModel = this.#itemsInfo.get(\r\n          reconnectedSubtree.nodeToReconnect\r\n        ) as LeafExtended;\r\n\r\n        // Add leaf information\r\n        nodeToReconnectUIModel.leafInfo = (\r\n          nodeToRemoveUIModel as LeafExtended\r\n        ).leafInfo;\r\n        const nodeToReconnectLeafInfo = nodeToReconnectUIModel.leafInfo;\r\n\r\n        // Update leaf id\r\n        nodeToReconnectLeafInfo.id = reconnectedSubtree.nodeToReconnect;\r\n\r\n        const widgetsToUpdateParentLeafId: FlexibleLayoutWidget[] =\r\n          nodeToReconnectLeafInfo.type === \"single-content\"\r\n            ? [nodeToReconnectLeafInfo.widget]\r\n            : nodeToReconnectLeafInfo.widgets;\r\n\r\n        // Update the parent leaf id in the reconnected widgets\r\n        widgetsToUpdateParentLeafId.forEach(widget => {\r\n          const widgetUIModel = this.#widgetsInfo.get(widget.id);\r\n          widgetUIModel.parentLeafId = nodeToReconnectLeafInfo.id;\r\n        });\r\n      }\r\n\r\n      // Delete the old item\r\n      this.#itemsInfo.delete(reconnectedSubtree.nodeToRemove);\r\n    }\r\n\r\n    // Remove rendered widgets\r\n    if (removeRenderedWidgets) {\r\n      leafInfoToRemove.widgets.forEach(this.#deleteRenderedWidget);\r\n    }\r\n\r\n    // Delete the view\r\n    this.#itemsInfo.delete(leafId);\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Remove a widget from a `\"tabbed\"` type leaf.\r\n   * Only works if the parent leaf is `\"tabbed\"` type.\r\n   *\r\n   * To remove a widget from a `\"single-content\"` type leaf, use the\r\n   * `removeView` method.\r\n   */\r\n  @Method()\r\n  async removeWidget(widgetId: string) {\r\n    const widgetUIModel = this.#widgetsInfo.get(widgetId);\r\n\r\n    if (!widgetUIModel) {\r\n      return;\r\n    }\r\n    const leafInfo = this.#getLeafInfo(widgetUIModel.parentLeafId);\r\n\r\n    if (leafInfo.type === \"single-content\") {\r\n      return;\r\n    }\r\n\r\n    this.#checkViewStateToRemoveWidget(\r\n      leafInfo,\r\n      widgetUIModel.info,\r\n      leafInfo.widgets.findIndex(widget => widget.id === widgetId) // Find the index of the widget\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update the selected widget from a `\"tabbed\"` type leaf.\r\n   * Only works if the parent leaf is `\"tabbed\"` type.\r\n   */\r\n  @Method()\r\n  async updateSelectedWidget(\r\n    parentLeafId: string,\r\n    newSelectedWidgetId: string\r\n  ) {\r\n    const widgetUIModel = this.#widgetsInfo.get(newSelectedWidgetId);\r\n\r\n    if (!widgetUIModel || widgetUIModel.parentLeafId !== parentLeafId) {\r\n      return;\r\n    }\r\n    const parentLeafInfo = this.#getLeafInfo(widgetUIModel.parentLeafId);\r\n\r\n    if (\r\n      parentLeafInfo.type === \"single-content\" ||\r\n      parentLeafInfo.selectedWidgetId === newSelectedWidgetId\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Select the new item\r\n    this.#updateSelectedWidget(parentLeafInfo, widgetUIModel.info);\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    forceUpdate(this.#flexibleLayoutRef);\r\n  }\r\n\r\n  /**\r\n   * Given the viewId, it updates the info of the view if the view is a leaf.\r\n   * The `type` of the properties argument must match the `type` of the view to\r\n   * update.\r\n   */\r\n  @Method()\r\n  async updateViewInfo(\r\n    viewId: string,\r\n    // TODO: Add support to update sticky at runtime\r\n    properties: Partial<\r\n      Omit<\r\n        FlexibleLayoutLeafConfigurationTabbed,\r\n        \"selectedWidgetId\" | \"widget\" | \"widgets\"\r\n      >\r\n    >\r\n  ) {\r\n    const viewUIModel = this.#itemsInfo.get(viewId) as LeafExtended;\r\n\r\n    if (\r\n      !viewUIModel ||\r\n      !viewUIModel.leafInfo ||\r\n      viewUIModel.item.type !== properties.type\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    for (const key in properties) {\r\n      // TODO: Avoid property duplication. Share the memory between the\r\n      // `leafInfo` member and the `item` member\r\n      viewUIModel.item[key] = properties[key];\r\n      viewUIModel.leafInfo[key] = properties[key];\r\n    }\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    this.#flexibleLayoutRef.refreshLeaf(viewUIModel.item.id);\r\n  }\r\n\r\n  /**\r\n   * Update the widget info.\r\n   */\r\n  @Method()\r\n  async updateWidgetInfo(\r\n    widgetId: string,\r\n    properties: Partial<Omit<FlexibleLayoutWidget, \"id\" | \"wasRendered\">>\r\n  ) {\r\n    const widgetUIModel = this.#widgetsInfo.get(widgetId);\r\n\r\n    if (!widgetUIModel) {\r\n      return;\r\n    }\r\n    const widgetInfo = widgetUIModel.info;\r\n\r\n    Object.entries(properties).forEach(([key, value]) => {\r\n      widgetInfo[key] = value;\r\n    });\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    this.#flexibleLayoutRef.refreshLeaf(widgetUIModel.parentLeafId);\r\n  }\r\n\r\n  #updateFlexibleModels = (layout: FlexibleLayoutModel) => {\r\n    // Partially delete the previous state\r\n    this.#itemsInfo.clear();\r\n    this.#widgetsInfo.clear();\r\n\r\n    // Empty layout\r\n    if (layout == null) {\r\n      this.#renderedWidgets.clear();\r\n      return;\r\n    }\r\n\r\n    this.#layoutSplitterParts.clear();\r\n    const newRenderedWidgets: Set<string> = new Set(); // Temporal Set to store the new rendered widgets\r\n\r\n    updateFlexibleModels(\r\n      layout,\r\n      this.#itemsInfo,\r\n      this.#layoutSplitterParts,\r\n      newRenderedWidgets,\r\n      this.#widgetsInfo\r\n    );\r\n\r\n    // Add the previous rendered widgets if they are still in the new layout\r\n    this.#widgetsInfo.forEach(widget => {\r\n      if (this.#renderedWidgets.has(widget.info.id)) {\r\n        newRenderedWidgets.add(widget.info.id);\r\n      }\r\n    });\r\n\r\n    this.#renderedWidgets = newRenderedWidgets;\r\n  };\r\n\r\n  #getLeafInfo = (\r\n    leafId: string\r\n  ): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> =>\r\n    getLeafInfo(this.#itemsInfo, leafId);\r\n\r\n  #handleLeafSelectedWidgetChange = (\r\n    event: ChFlexibleLayoutCustomEvent<ViewSelectedItemInfo>\r\n  ) => {\r\n    event.stopPropagation();\r\n\r\n    const selectedItemInfo = event.detail;\r\n    const leafInfo = this.#getLeafInfo(\r\n      selectedItemInfo.viewId\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n\r\n    // Mark the item as rendered\r\n    const newSelectedItem = leafInfo.widgets[selectedItemInfo.newSelectedIndex];\r\n\r\n    // Select the new item\r\n    this.#updateSelectedWidget(leafInfo, newSelectedItem);\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    forceUpdate(this.#flexibleLayoutRef);\r\n  };\r\n\r\n  #handleLeafWidgetClose = (\r\n    event: ChFlexibleLayoutCustomEvent<ViewItemCloseInfo>\r\n  ) => {\r\n    event.stopPropagation();\r\n    const itemCloseInfo = event.detail;\r\n\r\n    const eventInfo = this.widgetClose.emit({\r\n      widgetId: itemCloseInfo.itemId,\r\n      viewId: itemCloseInfo.viewId\r\n    });\r\n\r\n    if (eventInfo.defaultPrevented) {\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    const viewInfo = this.#getLeafInfo(\r\n      itemCloseInfo.viewId\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n\r\n    const widgetIndex = itemCloseInfo.itemIndex;\r\n    const widgetInfo = viewInfo.widgets[widgetIndex];\r\n\r\n    this.#checkViewStateToRemoveWidget(viewInfo, widgetInfo, widgetIndex);\r\n  };\r\n\r\n  #checkViewStateToRemoveWidget = (\r\n    viewInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    widgetInfo: FlexibleLayoutWidget,\r\n    widgetIndex: number\r\n  ) => {\r\n    // Last item from the view. Destroy the view and adjust the layout\r\n    if (viewInfo.widgets.length === 1) {\r\n      this.removeView(viewInfo.id, true);\r\n      return;\r\n    }\r\n\r\n    const viewWidgets = viewInfo.widgets;\r\n    const widgetsCount = viewInfo.widgets.length;\r\n\r\n    // If the item was selected, select another item\r\n    if (widgetInfo.id === viewInfo.selectedWidgetId) {\r\n      const newSelectedItem =\r\n        widgetIndex === widgetsCount - 1 // If it's the last item\r\n          ? viewWidgets[widgetsCount - 2] // Select the previous\r\n          : viewWidgets[widgetIndex + 1]; // Otherwise, select the next\r\n\r\n      // Mark the item as selected and rendered\r\n      this.#updateSelectedWidget(viewInfo, newSelectedItem);\r\n    }\r\n\r\n    this.#removeWidget(viewInfo, widgetIndex);\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    forceUpdate(this.#flexibleLayoutRef);\r\n  };\r\n\r\n  /**\r\n   * @param skipRenderRemoval Useful to determine if the render of the widget must not be destroyed.\r\n   * Used when the widget of the leaf must be reconnected in another parent\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #removeWidget = (\r\n    leafInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    itemIndex: number,\r\n    skipRenderRemoval = false\r\n  ) => {\r\n    // Remove the item from the view\r\n    const widgetInfo = removeElement(leafInfo.widgets, itemIndex);\r\n    this.#flexibleLayoutRef.removeItemPageInView(leafInfo.id, widgetInfo.id);\r\n\r\n    // Remove the item from the flexible-layout-render to optimize resources\r\n    if (!skipRenderRemoval) {\r\n      this.#deleteRenderedWidget(widgetInfo);\r\n    }\r\n  };\r\n\r\n  #deleteRenderedWidget = (widgetInfo: FlexibleLayoutWidget) => {\r\n    if (widgetInfo.conserveRenderState === true) {\r\n      return;\r\n    }\r\n\r\n    // Remove the item from the ch-flexible-layout-render to optimize resources\r\n    this.#renderedWidgets.delete(widgetInfo.id);\r\n    this.#widgetsInfo.delete(widgetInfo.id);\r\n  };\r\n\r\n  #updateSelectedWidget = (\r\n    leafInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    widget: FlexibleLayoutWidget\r\n  ) => {\r\n    // Mark the item as rendered\r\n    this.#renderedWidgets.add(widget.id);\r\n\r\n    // Mark the item as rendered\r\n    widget.wasRendered = true;\r\n\r\n    const leafUIModel = this.#itemsInfo.get(leafInfo.id)\r\n      .item as FlexibleLayoutLeafConfigurationTabbed;\r\n\r\n    // TODO: This is a WA to fix the selectedWidgetId update. The leafInfo\r\n    // member should share memory with the leaf to avoid these issues\r\n    leafUIModel.selectedWidgetId = widget.id;\r\n\r\n    leafInfo.selectedWidgetId = widget.id;\r\n  };\r\n\r\n  /**\r\n   * This handler can only be triggered by \"tabbed\" leafs.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #handleLeafWidgetReorder = async (\r\n    event: ChFlexibleLayoutCustomEvent<WidgetReorderInfo>\r\n  ) => {\r\n    const reorderInfo = event.detail;\r\n    const leafId = reorderInfo.viewId;\r\n    const leafIdTarget = reorderInfo.viewIdTarget;\r\n    const dropAreaTarget = reorderInfo.dropAreaTarget;\r\n\r\n    const leafInfo = this.#getLeafInfo(\r\n      leafId\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n\r\n    // Dropping in the same view. Nothing to change\r\n    if (\r\n      leafId === leafIdTarget &&\r\n      (dropAreaTarget === \"center\" || leafInfo.widgets.length === 1)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const leafTargetInfo = this.#getLeafInfo(\r\n      leafIdTarget\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n    const widgetIndex = reorderInfo.index;\r\n    const widgetToMove = leafInfo.widgets[widgetIndex];\r\n\r\n    // Update parent leaf id in the widget to move\r\n    this.#widgetsInfo.get(widgetToMove.id).parentLeafId = leafIdTarget;\r\n\r\n    // Mark the item as rendered, because the drag does not have to trigger item\r\n    // selection (which trigger item rendering)\r\n    this.#renderedWidgets.add(widgetToMove.id);\r\n    widgetToMove.wasRendered = true;\r\n\r\n    // The drop does not create a new view\r\n    if (dropAreaTarget === \"center\") {\r\n      leafTargetInfo.widgets.push(widgetToMove);\r\n\r\n      // Update the selected widget in the target view\r\n      this.#updateSelectedWidget(leafTargetInfo, widgetToMove);\r\n    } else {\r\n      await this.#handleViewItemReorderCreateView(\r\n        widgetToMove,\r\n        leafTargetInfo,\r\n        dropAreaTarget\r\n      );\r\n    }\r\n\r\n    // Remove the view, since it has no more items, but don't destroy the\r\n    // render of the widget, since the widget is only moved\r\n    if (leafInfo.widgets.length === 1) {\r\n      await this.removeView(leafId, false);\r\n\r\n      // Refresh reference to force re-render\r\n      // this.#layoutSplitterModels = { ...this.#layoutSplitterModels }; // TODO: UPDATE THIS\r\n    }\r\n    // Remove the item in the view that belongs\r\n    else {\r\n      // Select the previous item if the removed item was selected\r\n      if (leafInfo.selectedWidgetId === widgetToMove.id) {\r\n        const newSelectedIndex = widgetIndex === 0 ? 1 : widgetIndex - 1;\r\n        const newSelectedItem = leafInfo.widgets[newSelectedIndex];\r\n\r\n        // Mark the item as selected and rendered\r\n        this.#updateSelectedWidget(leafInfo, newSelectedItem);\r\n      }\r\n\r\n      // Remove the item from the view\r\n      this.#removeWidget(leafInfo, widgetIndex, true);\r\n\r\n      // Queue re-renders\r\n      forceUpdate(this); // Update rendered items\r\n      // forceUpdate(this.#flexibleLayoutRef);\r\n    }\r\n\r\n    // this.#flexibleLayoutRef.refreshLayout();\r\n  };\r\n\r\n  #handleViewItemReorderCreateView = async (\r\n    widget: FlexibleLayoutWidget,\r\n    viewTargetInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    dropAreaTarget: DroppableArea\r\n  ) => {\r\n    // Implementation note: If the direction matches the dropAreaTarget\r\n    // (for example, dropAreaTarget === \"block-start\" and parent direction === \"row\")\r\n    // we can use addSiblingView\r\n\r\n    // const viewUIModel = this.#itemsInfo.get(\r\n    //   viewId\r\n    // ) as FlexibleLayoutItemExtended<FlexibleLayoutLeaf>;\r\n    const viewTargetUIModel = this.#itemsInfo.get(\r\n      viewTargetInfo.id\r\n    ) as FlexibleLayoutItemExtended<FlexibleLayoutLeafModel, \"tabbed\">;\r\n    const viewTargetParentInfo = viewTargetUIModel.parentItem; // TODO: CHECK FOR ROOT NODE <------------------\r\n\r\n    const newLeafToAddId = GENERATE_GUID();\r\n    const newLeafToAdd: FlexibleLayoutLeafModel = {\r\n      id: newLeafToAddId,\r\n      selectedWidgetId: widget.id,\r\n      size: undefined,\r\n      tabListPosition: viewTargetUIModel.leafInfo.tabListPosition,\r\n      type: \"tabbed\",\r\n      widgets: [widget],\r\n      dragBar: {\r\n        size: viewTargetUIModel.item.dragBar?.size,\r\n        part: viewTargetUIModel.item.dragBar?.part // TODO: IMPROVE THIS\r\n      }\r\n    };\r\n\r\n    const viewTargetIsContainedInAGroupWithTheSameDirection =\r\n      (viewTargetParentInfo.direction === \"rows\" &&\r\n        (dropAreaTarget === \"block-start\" || dropAreaTarget === \"block-end\")) ||\r\n      (viewTargetParentInfo.direction === \"columns\" &&\r\n        (dropAreaTarget === \"inline-start\" || dropAreaTarget === \"inline-end\"));\r\n\r\n    // Add a sibling\r\n    if (viewTargetIsContainedInAGroupWithTheSameDirection) {\r\n      await this.addSiblingView(\r\n        viewTargetParentInfo.id,\r\n        viewTargetInfo.id,\r\n        dropAreaTarget === \"block-start\" || dropAreaTarget === \"inline-start\"\r\n          ? \"before\"\r\n          : \"after\",\r\n        newLeafToAdd,\r\n        true\r\n      );\r\n    }\r\n\r\n    // The current target must be modified to be a group\r\n    else {\r\n      // TODO: Add implementation\r\n    }\r\n\r\n    // VERIFY THE PARENT NODE\r\n    // HANDLE NEW VIEW CREATION\r\n    // CHECK IF THE PREVIOUS VIEW HAS ONLY ONE ITEM TO REUSE ITS VIEW ID?\r\n  };\r\n\r\n  #renderWidget = (widgetId: string) => {\r\n    const widgetInfo = this.#widgetsInfo.get(widgetId).info;\r\n\r\n    if (this.#widgetIsSlotted(widgetInfo)) {\r\n      return <slot key={widgetId} name={widgetId} slot={widgetId} />;\r\n    }\r\n\r\n    const renderId = widgetInfo.renderId ?? widgetId;\r\n    const widgetRender = this.renders[renderId];\r\n\r\n    if (!widgetRender) {\r\n      console.error(\r\n        `Could not find a render for the \"${widgetId}\" widget. The render \"${renderId}\" does not exists in the \"renders\" property.`\r\n      );\r\n      return;\r\n    }\r\n\r\n    return widgetInfo.addWrapper ? (\r\n      <div\r\n        key={widgetId}\r\n        slot={widgetId}\r\n        class=\"ch-flexible-layout-render-slot\"\r\n      >\r\n        {widgetRender(widgetInfo)}\r\n      </div>\r\n    ) : (\r\n      widgetRender(widgetInfo)\r\n    );\r\n  };\r\n\r\n  #widgetIsSlotted = (widgetInfo: FlexibleLayoutWidget) =>\r\n    widgetInfo.slot ?? this.slottedWidgets;\r\n\r\n  #checkToEmitRenderedWidgetsChange = () => {\r\n    if (\r\n      this.#lastRenderedWidgets.size === this.#renderedWidgets.size &&\r\n      this.#lastRenderedWidgets.size === 0\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // If the Sets have different sizes, we can ensure that the event must be\r\n    // emitted. If not, we should check if both Sets have the same items.\r\n    let shouldEmitRenderedWidgetsChange =\r\n      this.#lastRenderedWidgets.size !== this.#renderedWidgets.size;\r\n    const rendered: string[] = [];\r\n    const slotted: string[] = [];\r\n\r\n    // In the same loop, prepare the event detail while checking to emit the event\r\n    this.#renderedWidgets.forEach(widgetId => {\r\n      const widgetInfo = this.#widgetsInfo.get(widgetId)!.info;\r\n\r\n      if (this.#widgetIsSlotted(widgetInfo)) {\r\n        slotted.push(widgetId);\r\n      } else {\r\n        rendered.push(widgetId);\r\n      }\r\n\r\n      shouldEmitRenderedWidgetsChange ||=\r\n        !this.#lastRenderedWidgets.has(widgetId);\r\n    });\r\n\r\n    if (shouldEmitRenderedWidgetsChange) {\r\n      this.renderedWidgetsChange.emit({ rendered, slotted });\r\n    }\r\n\r\n    // Update the Set using the new rendered widgets, without sharing the reference\r\n    this.#lastRenderedWidgets = new Set(this.#renderedWidgets);\r\n  };\r\n\r\n  componentWillLoad() {\r\n    this.#updateFlexibleModels(this.model);\r\n  }\r\n\r\n  componentDidRender() {\r\n    this.#checkToEmitRenderedWidgetsChange();\r\n  }\r\n\r\n  render() {\r\n    // Check render against the \"layout\" property\r\n    if (this.model == null) {\r\n      return \"\";\r\n    }\r\n\r\n    return (\r\n      <Host>\r\n        {this.theme && <ch-theme model={this.theme}></ch-theme>}\r\n\r\n        <ch-flexible-layout\r\n          closeButton={this.closeButton}\r\n          contain={this.contain}\r\n          dragOutside={this.dragOutside}\r\n          model={this.model}\r\n          layoutSplitterParts={this.#layoutSplitterParts}\r\n          itemsInfo={this.#itemsInfo}\r\n          overflow={this.overflow}\r\n          sortable={this.sortable}\r\n          onViewItemClose={this.#handleLeafWidgetClose}\r\n          onViewItemReorder={this.#handleLeafWidgetReorder}\r\n          onSelectedViewItemChange={this.#handleLeafSelectedWidgetChange}\r\n          ref={el => (this.#flexibleLayoutRef = el)}\r\n        >\r\n          {[...this.#renderedWidgets.values()].map(this.#renderWidget)}\r\n        </ch-flexible-layout>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}