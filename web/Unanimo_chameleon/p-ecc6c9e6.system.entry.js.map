{"version":3,"names":["accordionCss","ChAccordionRenderStyle0","GET_IMAGE_PATH_CALLBACK_REGISTRY","DEFAULT_GET_IMAGE_PATH_CALLBACK","imageSrc","base","ELEMENTS_TO_PREVENT_EXPAND_COLLAPSE","ChAccordionRender","exports","_a","_images","set","this","Map","_expandedItems","Set","_renderedItems","_computeImage","undefined","getImagePathCallback","_b","_this","img","updateDirectionInImageCustomVar","_computeImages","__classPrivateFieldGet","clear","model","forEach","itemUIModel","itemImage","call","startImgSrc","id","_handleHeaderToggle","event","composedPath","headerRef","find","el","tagName","toLowerCase","getRootNode","shadowRoot","includes","itemId","item","disabled","newExpandedValue","expanded","_updateExpandedOnItem","singleItemExpanded","size","itemUIModelToCollapse","expandedChange","emit","add","delete","forceUpdate","_renderItem","index","startImage","get","startImageClasses","classes","isDisabled","_f","h","class","panel","key","part","tokenMap","ACCORDION_PARTS_DICTIONARY","PANEL","DISABLED","EXPANDED","COLLAPSED","concat","accessibleName","_c","header","DISABLED_CLASS","_g","startImgType","_d","headerSlotId","HEADER","style","_h","styles","type","name","caption","has","_e","SECTION","_closeAllExpandedItemsExceptForTheLast","emitExpandedChangeEvent","lastItemId","__spreadArray","keys","at","_computeGridTemplateRows","map","expandedSize","_getCollapsedSizeForUnit","join","class_1","prototype","getImagePathCallbackChanged","modelChanged","singleItemExpandedChanged","connectedCallback","getControlRegisterProperty","render","Host","onClick"],"sources":["src/components/accordion/accordion.scss?tag=ch-accordion-render&encapsulation=shadow","src/components/accordion/accordion.tsx"],"sourcesContent":["@import \"../../common/base\";\r\n@import \"../../common/icons\";\r\n\r\n@include button-reset();\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-accordion__chevron-size:\r\n   * Specifies the box size of the chevron.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-accordion__chevron-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-accordion__chevron-image-size:\r\n   * Specifies the image size of the chevron.\r\n   * @default 100%\r\n   */\r\n  --ch-accordion__chevron-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-accordion__chevron-color:\r\n   * Specifies the color of the chevron.\r\n   * @default 100%\r\n   */\r\n  --ch-accordion__chevron-color: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-accordion-expand-collapse-duration\r\n   * Specifies duration of the expand and collapse animation\r\n   * @default 0ms\r\n   */\r\n  --ch-accordion-expand-collapse-duration: 0ms;\r\n\r\n  /**\r\n   * @prop --ch-accordion-expand-collapse-timing-function\r\n   * Specifies timing function of the expand and collapse animation\r\n   * @default linear\r\n   */\r\n  --ch-accordion-expand-collapse-timing-function: linear;\r\n\r\n  /**\r\n   * @prop --ch-accordion__header-image-size:\r\n   * Specifies the box size that contains the start image of the header.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-accordion__header-image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-accordion__header-background-image-size:\r\n   * Specifies the size of the start image of the header.\r\n   * @default 100%\r\n   */\r\n  --ch-accordion__header-background-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-accordion__header-background-image-size:\r\n   * Specifies the start image of the header.\r\n   * @default #{$expandable-icon}\r\n   */\r\n  --ch-accordion__header-background-image: #{$expandable-icon};\r\n\r\n  --ch-accordion-grid-template-rows: 1fr;\r\n\r\n  display: grid;\r\n  grid-template-rows: var(--ch-accordion-grid-template-rows);\r\n  transition: grid-template-rows var(--ch-accordion-expand-collapse-duration)\r\n    var(--ch-accordion-expand-collapse-timing-function);\r\n\r\n  // Avoid unnecessary click events in the Host\r\n  pointer-events: none;\r\n}\r\n\r\n.panel {\r\n  display: grid;\r\n  grid-template-rows: max-content 0fr;\r\n  transition: grid-template-rows var(--ch-accordion-expand-collapse-duration)\r\n    var(--ch-accordion-expand-collapse-timing-function);\r\n\r\n  // Restore click events\r\n  pointer-events: all;\r\n\r\n  &--expanded {\r\n    grid-template-rows: max-content 1fr;\r\n  }\r\n}\r\n\r\n.header {\r\n  &::after {\r\n    content: \"\";\r\n    inline-size: var(--ch-accordion__chevron-size);\r\n    block-size: var(--ch-accordion__chevron-size);\r\n    margin-inline-start: auto;\r\n    background-color: var(--ch-accordion__chevron-color);\r\n\r\n    -webkit-mask: no-repeat center / var(--ch-accordion__chevron-image-size)\r\n      var(--ch-accordion__header-background-image);\r\n\r\n    transition: transform var(--ch-accordion-expand-collapse-duration)\r\n      var(--ch-accordion-expand-collapse-timing-function);\r\n  }\r\n\r\n  &--expanded::after {\r\n    transform: rotate(-180deg); // TODO: Add support for RTL\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//                 Images\r\n// - - - - - - - - - - - - - - - - - - - -\r\n.header {\r\n  --ch-accordion-header-start-img: var(--ch-start-img--base);\r\n\r\n  &.start-img--hover:hover {\r\n    --ch-accordion-header-start-img: var(--ch-start-img--hover);\r\n  }\r\n\r\n  &.start-img--active:active {\r\n    --ch-accordion-header-start-img: var(--ch-start-img--active);\r\n  }\r\n\r\n  &.start-img--focus:focus {\r\n    --ch-accordion-header-start-img: var(--ch-start-img--focus);\r\n  }\r\n\r\n  &.start-img--disabled.ch-disabled {\r\n    --ch-accordion-header-start-img: var(--ch-start-img--disabled);\r\n  }\r\n}\r\n\r\n.pseudo-img--start::before {\r\n  content: \"\";\r\n  display: block;\r\n  inline-size: var(--ch-accordion__header-image-size);\r\n  block-size: var(--ch-accordion__header-image-size);\r\n  content-visibility: auto;\r\n  contain-intrinsic-size: auto var(--ch-accordion__header-image-size);\r\n}\r\n\r\n// Background\r\n.start-img-type--background::before {\r\n  background: no-repeat center /\r\n    var(--ch-accordion__header-background-image-size)\r\n    var(--ch-accordion-header-start-img);\r\n}\r\n\r\n// Mask\r\n.start-img-type--mask::before {\r\n  -webkit-mask: no-repeat center /\r\n    var(--ch-accordion__header-background-image-size)\r\n    var(--ch-accordion-header-start-img);\r\n  background-color: currentColor;\r\n}\r\n\r\nsection {\r\n  display: grid;\r\n  overflow: hidden;\r\n\r\n  // Delays the visibility application based on the value of var(--ch-accordion-expand-collapse-duration)\r\n  transition: visibility var(--ch-accordion-expand-collapse-duration)\r\n    allow-discrete;\r\n}\r\n\r\n// Necessary to hide the collapsed DOM and remove keyboard interactions\r\n.section--hidden {\r\n  visibility: hidden;\r\n}\r\n\r\n.sub-section {\r\n  display: grid;\r\n}\r\n","import {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  forceUpdate,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  AccordionItemModel,\r\n  AccordionItemExpandedChangeEvent,\r\n  AccordionModel,\r\n  AccordionItemModelExpandedSize\r\n} from \"./types\";\r\nimport { tokenMap, updateDirectionInImageCustomVar } from \"../../common/utils\";\r\nimport {\r\n  ACCORDION_PARTS_DICTIONARY,\r\n  DISABLED_CLASS\r\n} from \"../../common/reserved-names\";\r\nimport { GxImageMultiState, GxImageMultiStateStart } from \"../../common/types\";\r\nimport { getControlRegisterProperty } from \"../../common/registry-properties\";\r\n\r\nlet GET_IMAGE_PATH_CALLBACK_REGISTRY: (\r\n  imageSrc: string\r\n) => GxImageMultiState | undefined;\r\n\r\nconst DEFAULT_GET_IMAGE_PATH_CALLBACK: (\r\n  imageSrc: string\r\n) => GxImageMultiState | undefined = imageSrc => ({ base: imageSrc });\r\n\r\nconst ELEMENTS_TO_PREVENT_EXPAND_COLLAPSE = [\"input\", \"textarea\"];\r\n\r\n/**\r\n * @status experimental\r\n */\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"accordion.scss\",\r\n  tag: \"ch-accordion-render\"\r\n})\r\nexport class ChAccordionRender implements ComponentInterface {\r\n  #images: Map<string, GxImageMultiStateStart | undefined> = new Map();\r\n\r\n  /**\r\n   * Useful to track all expand/collapse interactions in order to close all\r\n   * items expect for the last expanded when switching to `singleItemExpanded`\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #expandedItems: Set<string> = new Set();\r\n\r\n  /**\r\n   * Useful to rendering items after the first expansion.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #renderedItems: Set<string> = new Set();\r\n\r\n  @Element() el: HTMLChAccordionRenderElement;\r\n\r\n  /**\r\n   * This attribute lets you specify if all accordions are disabled.\r\n   * If disabled,accordions will not fire any user interaction related event\r\n   * (for example, `expandedChange` event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * startImgSrc needs to be resolved.\r\n   */\r\n  @Prop() readonly getImagePathCallback?: (\r\n    imageSrc: string\r\n  ) => GxImageMultiState | undefined;\r\n  @Watch(\"getImagePathCallback\")\r\n  getImagePathCallbackChanged() {\r\n    this.#computeImages();\r\n  }\r\n\r\n  /**\r\n   * Specifies the items of the control.\r\n   */\r\n  @Prop() readonly model?: AccordionModel | undefined;\r\n  @Watch(\"model\")\r\n  modelChanged() {\r\n    this.#computeImages();\r\n    this.#expandedItems.clear();\r\n    this.#renderedItems.clear();\r\n\r\n    this.model?.forEach(item => {\r\n      if (item.expanded) {\r\n        this.#expandedItems.add(item.id);\r\n        this.#renderedItems.add(item.id);\r\n      }\r\n    });\r\n\r\n    this.#closeAllExpandedItemsExceptForTheLast(false);\r\n  }\r\n\r\n  /**\r\n   * If `true` only one item will be expanded at the same time.\r\n   */\r\n  @Prop() readonly singleItemExpanded: boolean = false;\r\n  @Watch(\"singleItemExpanded\")\r\n  singleItemExpandedChanged() {\r\n    this.#closeAllExpandedItemsExceptForTheLast(true);\r\n  }\r\n\r\n  /**\r\n   * Fired when an item is expanded or collapsed\r\n   */\r\n  @Event() expandedChange: EventEmitter<AccordionItemExpandedChangeEvent>;\r\n\r\n  #computeImage = (\r\n    imageSrc: string | undefined\r\n  ): GxImageMultiStateStart | undefined => {\r\n    if (!imageSrc) {\r\n      return undefined;\r\n    }\r\n    const getImagePathCallback =\r\n      this.getImagePathCallback ?? GET_IMAGE_PATH_CALLBACK_REGISTRY;\r\n\r\n    if (!getImagePathCallback) {\r\n      return undefined;\r\n    }\r\n    const img = getImagePathCallback(imageSrc);\r\n\r\n    return img\r\n      ? (updateDirectionInImageCustomVar(\r\n          img,\r\n          \"start\"\r\n        ) as GxImageMultiStateStart)\r\n      : undefined;\r\n  };\r\n\r\n  #computeImages = () => {\r\n    this.#images.clear();\r\n\r\n    this.model?.forEach(itemUIModel => {\r\n      const itemImage = this.#computeImage(itemUIModel.startImgSrc);\r\n\r\n      if (itemImage) {\r\n        this.#images.set(itemUIModel.id, itemImage);\r\n      }\r\n    });\r\n  };\r\n\r\n  #handleHeaderToggle = (event: PointerEvent) => {\r\n    const composedPath = event.composedPath();\r\n\r\n    const headerRef = composedPath.find(\r\n      el => (el as HTMLElement).tagName?.toLowerCase() === \"button\"\r\n    ) as HTMLButtonElement;\r\n\r\n    if (\r\n      !headerRef ||\r\n      headerRef.getRootNode() !== this.el.shadowRoot ||\r\n      ELEMENTS_TO_PREVENT_EXPAND_COLLAPSE.includes(\r\n        (composedPath[0] as HTMLElement).tagName?.toLowerCase()\r\n      )\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const itemId = headerRef.id;\r\n    const itemUIModel = this.model.find(item => item.id === itemId);\r\n\r\n    if (itemUIModel.disabled) {\r\n      return;\r\n    }\r\n\r\n    const newExpandedValue = !itemUIModel.expanded;\r\n    this.#updateExpandedOnItem(itemUIModel, newExpandedValue);\r\n  };\r\n\r\n  #updateExpandedOnItem = (\r\n    itemUIModel: AccordionItemModel,\r\n    newExpandedValue: boolean\r\n  ) => {\r\n    // Collapse all opened items and emit expandedChange\r\n    if (this.singleItemExpanded && this.#expandedItems.size > 0) {\r\n      this.model.forEach(itemUIModelToCollapse => {\r\n        if (\r\n          itemUIModelToCollapse.expanded &&\r\n          itemUIModelToCollapse.id !== itemUIModel.id\r\n        ) {\r\n          itemUIModelToCollapse.expanded = false;\r\n\r\n          this.expandedChange.emit({\r\n            id: itemUIModelToCollapse.id,\r\n            expanded: false\r\n          });\r\n        }\r\n      });\r\n\r\n      this.#expandedItems.clear();\r\n    }\r\n\r\n    // If the item is expanded, added it to the Set\r\n    if (newExpandedValue) {\r\n      this.#expandedItems.add(itemUIModel.id);\r\n      this.#renderedItems.add(itemUIModel.id);\r\n    }\r\n    // Otherwise, remove it\r\n    else {\r\n      this.#expandedItems.delete(itemUIModel.id);\r\n    }\r\n\r\n    itemUIModel.expanded = newExpandedValue;\r\n    this.expandedChange.emit({\r\n      id: itemUIModel.id,\r\n      expanded: newExpandedValue\r\n    });\r\n\r\n    forceUpdate(this);\r\n  };\r\n\r\n  #renderItem = (item: AccordionItemModel, index: number) => {\r\n    const startImage = this.#images.get(item.id);\r\n    const startImageClasses = startImage?.classes;\r\n    const isDisabled = item.disabled ?? this.disabled;\r\n\r\n    return (\r\n      <div\r\n        class={{ panel: true, \"panel--expanded\": item.expanded }}\r\n        key={item.id}\r\n        part={tokenMap({\r\n          [item.id]: true,\r\n          [ACCORDION_PARTS_DICTIONARY.PANEL]: true,\r\n          [ACCORDION_PARTS_DICTIONARY.DISABLED]: isDisabled,\r\n          [ACCORDION_PARTS_DICTIONARY.EXPANDED]: item.expanded,\r\n          [ACCORDION_PARTS_DICTIONARY.COLLAPSED]: !item.expanded\r\n        })}\r\n      >\r\n        <button\r\n          id={item.id}\r\n          aria-controls={`section-${index}`}\r\n          aria-label={item.accessibleName || undefined}\r\n          aria-expanded={item.expanded ? \"true\" : \"false\"}\r\n          class={{\r\n            header: true,\r\n            [DISABLED_CLASS]: isDisabled,\r\n            \"header--expanded\": item.expanded,\r\n            [`start-img-type--${\r\n              item.startImgType ?? \"background\"\r\n            } pseudo-img--start`]: !!startImage,\r\n            [startImageClasses]: !!startImageClasses\r\n          }}\r\n          part={tokenMap({\r\n            [item.id]: true,\r\n            [item.headerSlotId]: !!item.headerSlotId,\r\n            [ACCORDION_PARTS_DICTIONARY.HEADER]: true,\r\n            [ACCORDION_PARTS_DICTIONARY.DISABLED]: isDisabled,\r\n            [ACCORDION_PARTS_DICTIONARY.EXPANDED]: item.expanded,\r\n            [ACCORDION_PARTS_DICTIONARY.COLLAPSED]: !item.expanded\r\n          })}\r\n          style={startImage?.styles ?? undefined}\r\n          disabled={isDisabled}\r\n          type=\"button\"\r\n        >\r\n          {item.headerSlotId ? <slot name={item.headerSlotId} /> : item.caption}\r\n        </button>\r\n\r\n        <section\r\n          id={`section-${index}`}\r\n          aria-label={item.accessibleName || undefined}\r\n          aria-labelledby={!item.accessibleName ? item.id : undefined}\r\n          class={!item.expanded ? \"section--hidden\" : undefined}\r\n        >\r\n          {(this.#renderedItems.has(item.id) || !item.id) && (\r\n            <div\r\n              class=\"sub-section\"\r\n              part={tokenMap({\r\n                [item.id]: true,\r\n                [ACCORDION_PARTS_DICTIONARY.SECTION]: true,\r\n                [ACCORDION_PARTS_DICTIONARY.DISABLED]: isDisabled,\r\n                [ACCORDION_PARTS_DICTIONARY.EXPANDED]: item.expanded,\r\n                [ACCORDION_PARTS_DICTIONARY.COLLAPSED]: !item.expanded\r\n              })}\r\n            >\r\n              <slot name={item.id} />\r\n            </div>\r\n          )}\r\n        </section>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  #closeAllExpandedItemsExceptForTheLast = (\r\n    emitExpandedChangeEvent: boolean\r\n  ) => {\r\n    if (!this.singleItemExpanded || this.#expandedItems.size <= 1) {\r\n      return;\r\n    }\r\n\r\n    const lastItemId = [...this.#expandedItems.keys()].at(-1);\r\n\r\n    // Close all items except for the last and emit the expandedChange event\r\n    this.model.forEach(itemUIModel => {\r\n      if (itemUIModel.expanded && itemUIModel.id !== lastItemId) {\r\n        itemUIModel.expanded = false;\r\n\r\n        if (emitExpandedChangeEvent) {\r\n          this.expandedChange.emit({ id: itemUIModel.id, expanded: false });\r\n        }\r\n      }\r\n    });\r\n\r\n    this.#expandedItems.clear();\r\n    this.#expandedItems.add(lastItemId);\r\n  };\r\n\r\n  #computeGridTemplateRows = () =>\r\n    this.model\r\n      .map(item =>\r\n        item.expanded\r\n          ? item.expandedSize ?? \"max-content\"\r\n          : this.#getCollapsedSizeForUnit(item.expandedSize)\r\n      )\r\n      .join(\" \");\r\n\r\n  #getCollapsedSizeForUnit = (expandedSize: AccordionItemModelExpandedSize) =>\r\n    expandedSize && expandedSize.includes(\"fr\") ? \"0fr\" : \"max-content\";\r\n\r\n  connectedCallback(): void {\r\n    // Initialize default getImagePathCallback\r\n    GET_IMAGE_PATH_CALLBACK_REGISTRY ??=\r\n      getControlRegisterProperty(\r\n        \"getImagePathCallback\",\r\n        \"ch-accordion-render\"\r\n      ) ?? DEFAULT_GET_IMAGE_PATH_CALLBACK;\r\n\r\n    this.#computeImages();\r\n\r\n    this.model?.forEach(item => {\r\n      if (item.expanded) {\r\n        this.#expandedItems.add(item.id);\r\n        this.#renderedItems.add(item.id);\r\n      }\r\n    });\r\n\r\n    this.#closeAllExpandedItemsExceptForTheLast(false);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        // TODO: Add support to prevent expand/collapse when pressing the space\r\n        // key on an input/textarea\r\n        style={\r\n          this.model != null\r\n            ? {\r\n                \"--ch-accordion-grid-template-rows\":\r\n                  this.#computeGridTemplateRows()\r\n              }\r\n            : undefined\r\n        }\r\n        onClick={this.#handleHeaderToggle}\r\n      >\r\n        {(this.model ?? []).map(this.#renderItem)}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"07BAAA,IAAMA,EAAe,g/IACrB,IAAAC,EAAeD,ECyBf,IAAIE,EAIJ,IAAMC,EAE+B,SAAAC,GAAQ,OAAOC,KAAMD,EAAb,EAE7C,IAAME,EAAsC,CAAC,QAAS,Y,IAUzCC,EAAiBC,EAAA,uBAAAC,EAAA,W,yBAC5BC,EAAAC,IAAAC,KAA2D,IAAIC,KAO/DC,EAAAH,IAAAC,KAA8B,IAAIG,KAMlCC,EAAAL,IAAAC,KAA8B,IAAIG,KAyDlCE,EAAAN,IAAAC,MAAgB,SACdR,G,MAEA,IAAKA,EAAU,CACb,OAAOc,S,CAET,IAAMC,GACJC,EAAAC,EAAKF,wBAAoB,MAAAC,SAAA,EAAAA,EAAIlB,EAE/B,IAAKiB,EAAsB,CACzB,OAAOD,S,CAET,IAAMI,EAAMH,EAAqBf,GAEjC,OAAOkB,EACFC,EACCD,EACA,SAEFJ,S,IAGNM,EAAAb,IAAAC,MAAiB,W,MACfa,uBAAAJ,EAAIX,EAAA,KAASgB,SAEbN,EAAAC,EAAKM,SAAK,MAAAP,SAAA,SAAAA,EAAEQ,SAAQ,SAAAC,GAClB,IAAMC,EAAYL,uBAAAJ,EAAIJ,EAAA,KAAcc,KAAlBV,EAAmBQ,EAAYG,aAEjD,GAAIF,EAAW,CACbL,uBAAAJ,EAAIX,EAAA,KAASC,IAAIkB,EAAYI,GAAIH,E,QAKvCI,EAAAvB,IAAAC,MAAsB,SAACuB,G,MACrB,IAAMC,EAAeD,EAAMC,eAE3B,IAAMC,EAAYD,EAAaE,MAC7B,SAAAC,GAAE,IAAAnB,EAAK,QAAAA,EAAAmB,EAAmBC,WAAO,MAAApB,SAAA,SAAAA,EAAEqB,iBAAkB,QAAQ,IAG/D,IACGJ,GACDA,EAAUK,gBAAkBrB,EAAKkB,GAAGI,YACpCrC,EAAoCsC,UACjCxB,EAAAgB,EAAa,GAAmBI,WAAO,MAAApB,SAAA,SAAAA,EAAEqB,eAE5C,CACA,M,CAGF,IAAMI,EAASR,EAAUJ,GACzB,IAAMJ,EAAcR,EAAKM,MAAMW,MAAK,SAAAQ,GAAQ,OAAAA,EAAKb,KAAOY,CAAZ,IAE5C,GAAIhB,EAAYkB,SAAU,CACxB,M,CAGF,IAAMC,GAAoBnB,EAAYoB,SACtCxB,uBAAAJ,EAAI6B,EAAA,KAAsBnB,KAA1BV,EAA2BQ,EAAamB,E,IAG1CE,EAAAvC,IAAAC,MAAwB,SACtBiB,EACAmB,GAGA,GAAI3B,EAAK8B,oBAAsB1B,uBAAAJ,EAAIP,EAAA,KAAgBsC,KAAO,EAAG,CAC3D/B,EAAKM,MAAMC,SAAQ,SAAAyB,GACjB,GACEA,EAAsBJ,UACtBI,EAAsBpB,KAAOJ,EAAYI,GACzC,CACAoB,EAAsBJ,SAAW,MAEjC5B,EAAKiC,eAAeC,KAAK,CACvBtB,GAAIoB,EAAsBpB,GAC1BgB,SAAU,O,KAKhBxB,uBAAAJ,EAAIP,EAAA,KAAgBY,O,CAItB,GAAIsB,EAAkB,CACpBvB,uBAAAJ,EAAIP,EAAA,KAAgB0C,IAAI3B,EAAYI,IACpCR,uBAAAJ,EAAIL,EAAA,KAAgBwC,IAAI3B,EAAYI,G,KAGjC,CACHR,uBAAAJ,EAAIP,EAAA,KAAgB2C,OAAO5B,EAAYI,G,CAGzCJ,EAAYoB,SAAWD,EACvB3B,EAAKiC,eAAeC,KAAK,CACvBtB,GAAIJ,EAAYI,GAChBgB,SAAUD,IAGZU,EAAYrC,E,IAGdsC,EAAAhD,IAAAC,MAAc,SAACkC,EAA0Bc,G,sBACvC,IAAMC,EAAapC,uBAAAJ,EAAIX,EAAA,KAASoD,IAAIhB,EAAKb,IACzC,IAAM8B,EAAoBF,IAAU,MAAVA,SAAU,SAAVA,EAAYG,QACtC,IAAMC,GAAaC,EAAApB,EAAKC,YAAQ,MAAAmB,SAAA,EAAAA,EAAI7C,EAAK0B,SAEzC,OACEoB,EAAA,OACEC,MAAO,CAAEC,MAAO,KAAM,kBAAmBvB,EAAKG,UAC9CqB,IAAKxB,EAAKb,GACVsC,KAAMC,GAAQpD,EAAA,GACZA,EAAC0B,EAAKb,IAAK,KACXb,EAACqD,EAA2BC,OAAQ,KACpCtD,EAACqD,EAA2BE,UAAWV,EACvC7C,EAACqD,EAA2BG,UAAW9B,EAAKG,SAC5C7B,EAACqD,EAA2BI,YAAa/B,EAAKG,S,KAGhDkB,EAAA,UACElC,GAAIa,EAAKb,GAAE,gBACI,WAAA6C,OAAWlB,GAAO,aACrBd,EAAKiC,gBAAkB7D,UAAS,gBAC7B4B,EAAKG,SAAW,OAAS,QACxCmB,OAAKY,EAAA,CACHC,OAAQ,MACRD,EAACE,GAAiBjB,EAClBe,EAAA,oBAAoBlC,EAAKG,SACzB+B,EAAC,mBAAAF,QACCK,EAAArC,EAAKsC,gBAAY,MAAAD,SAAA,EAAAA,EAAI,aACvB,yBAAyBtB,EACzBmB,EAACjB,KAAsBA,E,GAEzBQ,KAAMC,GAAQa,EAAA,GACZA,EAACvC,EAAKb,IAAK,KACXoD,EAACvC,EAAKwC,gBAAiBxC,EAAKwC,aAC5BD,EAACZ,EAA2Bc,QAAS,KACrCF,EAACZ,EAA2BE,UAAWV,EACvCoB,EAACZ,EAA2BG,UAAW9B,EAAKG,SAC5CoC,EAACZ,EAA2BI,YAAa/B,EAAKG,S,IAEhDuC,OAAOC,EAAA5B,IAAU,MAAVA,SAAU,SAAVA,EAAY6B,UAAM,MAAAD,SAAA,EAAAA,EAAIvE,UAC7B6B,SAAUkB,EACV0B,KAAK,UAEJ7C,EAAKwC,aAAenB,EAAA,QAAMyB,KAAM9C,EAAKwC,eAAmBxC,EAAK+C,SAGhE1B,EAAA,WACElC,GAAI,WAAA6C,OAAWlB,GAAO,aACVd,EAAKiC,gBAAkB7D,UAAS,mBAC1B4B,EAAKiC,eAAiBjC,EAAKb,GAAKf,UAClDkD,OAAQtB,EAAKG,SAAW,kBAAoB/B,YAE1CO,uBAAAJ,EAAIL,EAAA,KAAgB8E,IAAIhD,EAAKb,MAAQa,EAAKb,KAC1CkC,EAAA,OACEC,MAAM,cACNG,KAAMC,GAAQuB,EAAA,GACZA,EAACjD,EAAKb,IAAK,KACX8D,EAACtB,EAA2BuB,SAAU,KACtCD,EAACtB,EAA2BE,UAAWV,EACvC8B,EAACtB,EAA2BG,UAAW9B,EAAKG,SAC5C8C,EAACtB,EAA2BI,YAAa/B,EAAKG,S,KAGhDkB,EAAA,QAAMyB,KAAM9C,EAAKb,O,IAQ7BgE,EAAAtF,IAAAC,MAAyC,SACvCsF,GAEA,IAAK7E,EAAK8B,oBAAsB1B,uBAAAJ,EAAIP,EAAA,KAAgBsC,MAAQ,EAAG,CAC7D,M,CAGF,IAAM+C,EAAaC,cAAA,GAAI3E,uBAAAJ,EAAIP,EAAA,KAAgBuF,OAAM,MAAEC,IAAI,GAGvDjF,EAAKM,MAAMC,SAAQ,SAAAC,GACjB,GAAIA,EAAYoB,UAAYpB,EAAYI,KAAOkE,EAAY,CACzDtE,EAAYoB,SAAW,MAEvB,GAAIiD,EAAyB,CAC3B7E,EAAKiC,eAAeC,KAAK,CAAEtB,GAAIJ,EAAYI,GAAIgB,SAAU,O,MAK/DxB,uBAAAJ,EAAIP,EAAA,KAAgBY,QACpBD,uBAAAJ,EAAIP,EAAA,KAAgB0C,IAAI2C,E,IAG1BI,EAAA5F,IAAAC,MAA2B,WACzB,OAAAS,EAAKM,MACF6E,KAAI,SAAA1D,G,MACH,OAAAA,EAAKG,UACD7B,EAAA0B,EAAK2D,gBAAY,MAAArF,SAAA,EAAAA,EAAI,cACrBK,uBAAAJ,EAAIqF,EAAA,KAAyB3E,KAA7BV,EAA8ByB,EAAK2D,a,IAExCE,KAAK,IANR,IAQFD,EAAA/F,IAAAC,MAA2B,SAAC6F,GAC1B,OAAAA,GAAgBA,EAAa7D,SAAS,MAAQ,MAAQ,aAAtD,I,uEAjQmC,M,iFAqCU,K,6GA3B/CgE,EAAAC,UAAAC,4BAAA,WACErF,uBAAAb,KAAIY,EAAA,KAAeO,KAAnBnB,K,EAQFgG,EAAAC,UAAAE,aAAA,eAAA1F,EAAAT,K,MACEa,uBAAAb,KAAIY,EAAA,KAAeO,KAAnBnB,MACAa,uBAAAb,KAAIE,EAAA,KAAgBY,QACpBD,uBAAAb,KAAII,EAAA,KAAgBU,SAEpBN,EAAAR,KAAKe,SAAK,MAAAP,SAAA,SAAAA,EAAEQ,SAAQ,SAAAkB,GAClB,GAAIA,EAAKG,SAAU,CACjBxB,uBAAAJ,EAAIP,EAAA,KAAgB0C,IAAIV,EAAKb,IAC7BR,uBAAAJ,EAAIL,EAAA,KAAgBwC,IAAIV,EAAKb,G,KAIjCR,uBAAAb,KAAIqF,EAAA,KAAuClE,KAA3CnB,KAA4C,M,EAQ9CgG,EAAAC,UAAAG,0BAAA,WACEvF,uBAAAb,KAAIqF,EAAA,KAAuClE,KAA3CnB,KAA4C,K,EA2N9CgG,EAAAC,UAAAI,kBAAA,eAAA5F,EAAAT,K,QAEEV,IAAgC,MAAhCA,SAAgC,EAAhCA,KACEkB,EAAA8F,EACE,uBACA,0BACD,MAAA9F,SAAA,EAAAA,EAAIjB,EAEPsB,uBAAAb,KAAIY,EAAA,KAAeO,KAAnBnB,OAEAoE,EAAApE,KAAKe,SAAK,MAAAqD,SAAA,SAAAA,EAAEpD,SAAQ,SAAAkB,GAClB,GAAIA,EAAKG,SAAU,CACjBxB,uBAAAJ,EAAIP,EAAA,KAAgB0C,IAAIV,EAAKb,IAC7BR,uBAAAJ,EAAIL,EAAA,KAAgBwC,IAAIV,EAAKb,G,KAIjCR,uBAAAb,KAAIqF,EAAA,KAAuClE,KAA3CnB,KAA4C,M,EAG9CgG,EAAAC,UAAAM,OAAA,W,MACE,OACEhD,EAACiD,E,gDAGC5B,MACE5E,KAAKe,OAAS,KACV,CACE,oCACEF,uBAAAb,KAAI2F,EAAA,KAAyBxE,KAA7BnB,OAEJM,UAENmG,QAAS5F,uBAAAb,KAAIsB,EAAA,QAEXd,EAAAR,KAAKe,SAAK,MAAAP,SAAA,EAAAA,EAAI,IAAIoF,IAAI/E,uBAAAb,KAAI+C,EAAA,M,yOA7TN,G"}