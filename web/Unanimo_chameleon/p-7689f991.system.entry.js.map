{"version":3,"names":["editCss","ChEditStyle0","GET_IMAGE_PATH_CALLBACK_REGISTRY","DEFAULT_GET_IMAGE_PATH_CALLBACK","imageSrc","base","AUTOFILL_START_ANIMATION_NAME","DATE_TYPES","MAX_DATE_VALUE","date","MIN_DATE_VALUE","TEXTAREA_CLASSES","concat","SCROLLABLE_CLASS","ChEdit","exports","_a","_accessibleNameFromExternalLabel","set","this","_startImage","_debounceId","_shouldComputePictureValue","_inputRef","_textareaRef","_getInputRef","_b","__classPrivateFieldGet","_this","_computeImage","startImgSrc","__classPrivateFieldSet","getImagePathCallback","img","updateDirectionInImageCustomVar","_getValueFromEvent","event","target","value","_setValueAndEmitInputEventWithDebounce","valueToEmit","clearTimeout","debounce","setTimeout","input","emit","_handleAutoFill","autoFilled","animationName","_handleChange","call","change","_handleValueChanging","stopPropagation","validity","valid","_handleTriggerClick","disabled","triggerClick","_clearValue","requestAnimationFrame","el","focus","_hasPictureApplied","picture","pictureCallback","_showPictureOnFocus","isFocusOnControl","_removePictureOnBlur","undefined","class_1","prototype","getImagePathCallbackChanged","pictureChanged","pictureCallbackChanged","startImgSrcChanged","valueChanged","newValue","internals","setFormValue","connectedCallback","adoptCommonThemes","shadowRoot","adoptedStyleSheets","getControlRegisterProperty","_instances","_computePictureValue","labels","getElementInternalsLabel","analyzeLabelExistence","accessibleName","componentWillUpdate","componentDidLoad","autoFocus","render","isDateType","includes","type","showDatePLaceholder","placeholder","shouldDisplayPicture","canAddListeners","readonly","h","Host","key","class","multiline","autoGrow","showTrigger","startImgType","DISABLED_CLASS","part","tokenMap","_c","EDIT_HOST_PARTS","EMPTY_VALUE","hostParts","style","_f","_e","styles","autoCapitalize","autocapitalize","autoComplete","autocomplete","maxLength","readOnly","spellcheck","onChange","onInput","onAnimationStart","ref","inputMode","mode","max","min","pattern","step","pictureValue","onFocus","onBlur","triggerButtonAccessibleName","onClick","name","EDIT_PARTS_DICTIONARY","DATE_PLACEHOLDER","clearSearchButtonAccessibleName","_d","CLEAR_BUTTON","DISABLED","trim"],"sources":["src/components/edit/edit.scss?tag=ch-edit&encapsulation=shadow","src/components/edit/edit.tsx"],"sourcesContent":["@import \"../../common/base\";\r\n@import \"../../common/icons\";\r\n\r\n// Used to change the placeholder color in the input controls\r\n// Opacity property is necessary, because some browsers (e.g., mozilla) change this value\r\n@mixin placeholder-color {\r\n  color: var(--ch-placeholder-color);\r\n  opacity: 1;\r\n}\r\n\r\n@include button-reset();\r\n@include input-reset();\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-edit-auto-fill-background-color:\r\n   * Define the background color when the edit is auto filled.\r\n   * (#e8f0fe by default)\r\n   */\r\n  --ch-edit-auto-fill-background-color: #e8f0fe;\r\n\r\n  /**\r\n   * @prop --ch-edit__image-size:\r\n   * Specifies the box size that contains the start and clear images of the\r\n   * control.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-edit__image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n    * @prop --ch-edit__background-image-size:\r\n    * Specifies the size of the start and clear images of the control.\r\n    * @default 100%\r\n    */\r\n  --ch-edit__background-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-edit-gap:\r\n   * Specifies the gap between the start image and the value of the control.\r\n   * @default 0px\r\n   */\r\n  --ch-edit-gap: 0px;\r\n\r\n  /**\r\n   * @prop --ch-placeholder-color:\r\n   * Define the placeholder color when the edit does not have a value set.\r\n   * (currentColor by default)\r\n   */\r\n  --ch-placeholder-color: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-edit__clear-button-image:\r\n   * Specifies the image for the clear button. \r\n   * @default #{$close-icon}\r\n   */\r\n  --ch-edit__clear-button-image: #{$close-icon};\r\n\r\n  // --ch-edit-trigger-button-inline-size: #{$ch-icon-size};\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  // Base image\r\n  --ch-start-img: var(--ch-start-img--base);\r\n}\r\n\r\n:host(.ch-edit--cursor-text) {\r\n  cursor: text;\r\n}\r\n\r\n// Auto fill color\r\n:host:is(\r\n    .gx-edit--auto-fill,\r\n    .gx-edit--auto-fill:focus-within,\r\n    .gx-edit--auto-fill:hover\r\n  ) {\r\n  background-color: var(--ch-edit-auto-fill-background-color) !important;\r\n}\r\n\r\n.content {\r\n  inline-size: 100%;\r\n  cursor: inherit;\r\n\r\n  &::placeholder {\r\n    @include placeholder-color();\r\n  }\r\n\r\n  // Hide native eye icon from password input in MS Edge\r\n  &::-ms-reveal {\r\n    display: none;\r\n  }\r\n\r\n  // @include scrollbar-customization-for-one-element();\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//                 Images\r\n// - - - - - - - - - - - - - - - - - - - -\r\n:host(:hover) {\r\n  --ch-start-img: var(--ch-start-img--hover, var(--ch-start-img--base));\r\n}\r\n\r\n:host(:active) {\r\n  --ch-start-img: var(--ch-start-img--active, var(--ch-start-img--base));\r\n}\r\n\r\n:host(:focus) {\r\n  --ch-start-img: var(\r\n    --ch-start-img--focus,\r\n    var(--ch-start-img--active, var(--ch-start-img--base))\r\n  );\r\n}\r\n\r\n:host(.ch-disabled) {\r\n  pointer-events: none;\r\n  --ch-start-img: var(--ch-start-img--disabled, var(--ch-start-img--base));\r\n}\r\n\r\n:host(.ch-edit-pseudo-img--start) {\r\n  & > .content {\r\n    margin-inline-start: var(--ch-edit-gap);\r\n  }\r\n\r\n  &::before {\r\n    content: \"\";\r\n    display: block;\r\n    inline-size: var(--ch-edit__image-size);\r\n    // Necessary to properly size the image, due to the Host has display: flex\r\n    min-inline-size: var(--ch-edit__image-size);\r\n    block-size: var(--ch-edit__image-size);\r\n\r\n    // Do not add content-visibility with display: flex. The Tree View control\r\n    // had browser crashes with this combination\r\n    // content-visibility: auto;\r\n    // contain-intrinsic-size: auto var(--ch-edit__image-size);\r\n  }\r\n}\r\n\r\n// Background\r\n:host(.ch-edit-start-img-type--background)::before {\r\n  background: no-repeat center / var(--ch-edit__background-image-size)\r\n    var(--ch-start-img);\r\n}\r\n\r\n// Mask\r\n:host(.ch-edit-start-img-type--mask)::before {\r\n  -webkit-mask: no-repeat center / var(--ch-edit__background-image-size)\r\n    var(--ch-start-img);\r\n  background-color: currentColor;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//           Multiline Auto Grow\r\n// - - - - - - - - - - - - - - - - - - - -\r\n// Hide textarea resize button\r\n.multiline {\r\n  position: absolute;\r\n  inset: 0;\r\n  block-size: 100%; // Necessary for Mozilla Firefox\r\n  padding: inherit;\r\n  resize: unset;\r\n}\r\n\r\n// Auto grow = True and multiline = true\r\n:host(.ch-edit--multiline) {\r\n  overflow: hidden;\r\n}\r\n\r\n// Implements auto-grow when the ch-edit is multiline\r\n.hidden-multiline {\r\n  inline-size: 100%;\r\n  block-size: 100%;\r\n\r\n  // Implement line breaks\r\n  white-space: pre-wrap;\r\n\r\n  // Break words that do not enter in a single line\r\n  word-break: break-word;\r\n\r\n  // Hide from the accessibility tree but take space in the layout\r\n  visibility: hidden;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//                Date type\r\n// - - - - - - - - - - - - - - - - - - - -\r\n.readonly-date {\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n:host(.ch-edit--editable-date) {\r\n  cursor: pointer;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//    Custom placeholder for date types\r\n// - - - - - - - - - - - - - - - - - - - -\r\n// Used when the ch-edit has type=\"datetime-local\" | \"date\" | \"time\"\r\n// and its value is not set\r\n.null-date {\r\n  opacity: 0; // Hide the input by default\r\n\r\n  // When the ch-edit is focused, we hide the placeholder\r\n  &:focus {\r\n    opacity: 1; // Hide the input when focused\r\n\r\n    & ~ .date-placeholder {\r\n      opacity: 0;\r\n    }\r\n  }\r\n}\r\n\r\n// Implements a non-native placeholder for date types\r\n.date-placeholder {\r\n  display: grid;\r\n  align-items: center;\r\n  inset: 0;\r\n  inset-inline-start: calc(var(--ch-edit__image-size) + var(--ch-edit-gap));\r\n  position: absolute;\r\n  padding: inherit;\r\n  pointer-events: none;\r\n\r\n  @include placeholder-color();\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//             Trigger button\r\n// - - - - - - - - - - - - - - - - - - - -\r\n:host(.ch-edit__trigger-button-space)::after {\r\n  content: \"\";\r\n  block-size: 100%;\r\n  margin-inline-start: var(--ch-edit-trigger-button-inline-size);\r\n  padding-inline-start: inherit;\r\n}\r\n\r\n.trigger-button {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-items: center;\r\n  position: absolute;\r\n  inset-block: 0;\r\n  inset-inline-end: 0;\r\n  padding-inline: inherit;\r\n  cursor: pointer;\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//              Clear button\r\n// - - - - - - - - - - - - - - - - - - - -\r\n[type=\"search\"]::-webkit-search-decoration,\r\n[type=\"search\"]::-webkit-search-cancel-button {\r\n  appearance: none;\r\n}\r\n\r\n.clear-button {\r\n  display: inline-grid;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    display: block;\r\n    inline-size: var(--ch-edit__image-size);\r\n    // Necessary to properly size the image, due to the Host has display: flex\r\n    min-inline-size: var(--ch-edit__image-size);\r\n    block-size: var(--ch-edit__image-size);\r\n    -webkit-mask: no-repeat center / var(--ch-edit__background-image-size)\r\n      var(--ch-edit__clear-button-image);\r\n    background-color: currentColor;\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - -\r\n//            Auto Fill\r\n// - - - - - - - - - - - - - - - -\r\n.autofill {\r\n  // Dummy animation to trigger the onAnimationStart event\r\n  &:-webkit-autofill {\r\n    animation: AutoFillStart 0.000001s;\r\n    transition: background-color 99999999s 0s;\r\n  }\r\n\r\n  // Dummy animation to trigger the onAnimationStart event\r\n  &:not(:-webkit-autofill) {\r\n    animation: AutoFillCancel 0.000001s;\r\n  }\r\n}\r\n\r\n@keyframes AutoFillStart {\r\n  0% {\r\n    visibility: inherit;\r\n  }\r\n}\r\n@keyframes AutoFillCancel {\r\n  0% {\r\n    visibility: inherit;\r\n  }\r\n}\r\n","import {\r\n  AttachInternals,\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n  h\r\n} from \"@stencil/core\";\r\n\r\nimport type {\r\n  AccessibleNameComponent,\r\n  DisableableComponent\r\n} from \"../../common/interfaces\";\r\n\r\nimport {\r\n  DISABLED_CLASS,\r\n  EDIT_HOST_PARTS,\r\n  EDIT_PARTS_DICTIONARY,\r\n  SCROLLABLE_CLASS\r\n} from \"../../common/reserved-names\";\r\nimport type { EditInputMode, EditType } from \"./types\";\r\nimport type {\r\n  GxImageMultiState,\r\n  GxImageMultiStateStart,\r\n  ImageRender\r\n} from \"../../common/types\";\r\nimport { tokenMap, updateDirectionInImageCustomVar } from \"../../common/utils\";\r\nimport { getControlRegisterProperty } from \"../../common/registry-properties\";\r\nimport { adoptCommonThemes } from \"../../common/theme\";\r\nimport {\r\n  analyzeLabelExistence,\r\n  getElementInternalsLabel\r\n} from \"../../common/analysis/accessibility\";\r\n\r\nlet GET_IMAGE_PATH_CALLBACK_REGISTRY: (\r\n  imageSrc: string\r\n) => GxImageMultiState | undefined;\r\n\r\nconst DEFAULT_GET_IMAGE_PATH_CALLBACK: (\r\n  imageSrc: string\r\n) => GxImageMultiState | undefined = imageSrc => ({ base: imageSrc });\r\n\r\nconst AUTOFILL_START_ANIMATION_NAME = \"AutoFillStart\";\r\n\r\nconst DATE_TYPES = [\"datetime-local\", \"date\", \"time\"];\r\n\r\nconst MAX_DATE_VALUE: { [key: string]: string } = {\r\n  date: \"9999-12-31\",\r\n  \"datetime-local\": \"9999-12-31T23:59:59\"\r\n};\r\n\r\nconst MIN_DATE_VALUE: { [key: string]: string } = {\r\n  date: \"0001-01-01\",\r\n  \"datetime-local\": \"0001-01-01T00:00:00\"\r\n};\r\n\r\nconst TEXTAREA_CLASSES = `content autofill multiline ${SCROLLABLE_CLASS}`;\r\n\r\n/**\r\n * A wrapper for the input and textarea elements. It additionally provides:\r\n *  - A placeholder for `\"date\"`, `\"datetime-local\"` and `\"time\"` types.\r\n *  - An action button.\r\n *  - Useful style resets.\r\n *  - Support for picture formatting.\r\n *  - Support to auto grow the control when used with multiline (useful to\r\n *    model chat inputs).\r\n *  - An image which can have multiple states.\r\n *  - Support for debouncing the input event.\r\n *\r\n * @part date-placeholder - A placeholder displayed when the control is editable (`readonly=\"false\"`), has no value set, and its type is `\"datetime-local\" | \"date\" | \"time\"`.\r\n * @part hidden-multiline - The auxiliary content rendered in the control to implement the auto-grow. This part only applies when `multiline=\"true\"`.\r\n * @part trigger-button - The trigger button displayed on the right side of the control when `show-trigger=\"true\"`.\r\n *\r\n * @slot trigger-content - The slot used for the content of the trigger button.\r\n */\r\n@Component({\r\n  formAssociated: true,\r\n  shadow: { delegatesFocus: true },\r\n  styleUrl: \"edit.scss\",\r\n  tag: \"ch-edit\"\r\n})\r\nexport class ChEdit implements AccessibleNameComponent, DisableableComponent {\r\n  #accessibleNameFromExternalLabel: string | undefined;\r\n  #startImage: GxImageMultiStateStart | undefined;\r\n\r\n  #debounceId: NodeJS.Timeout | undefined;\r\n  #shouldComputePictureValue = false;\r\n\r\n  // Refs\r\n  // TODO: StencilJS issue. We have to use two refs because StencilJS does not,\r\n  // update the ref when updating the multiline property\r\n  #inputRef: HTMLInputElement | undefined;\r\n  #textareaRef: HTMLTextAreaElement | undefined;\r\n\r\n  @State() isFocusOnControl = false;\r\n\r\n  @State() pictureValue: string;\r\n\r\n  @AttachInternals() internals: ElementInternals;\r\n\r\n  @Element() el!: HTMLChEditElement;\r\n\r\n  /**\r\n   * Determine if the gx-edit's value was auto-completed\r\n   */\r\n  @State() autoFilled = false;\r\n\r\n  /**\r\n   * Specifies a short string, typically 1 to 3 words, that authors associate\r\n   * with an element to provide users of assistive technologies with a label\r\n   * for the element.\r\n   */\r\n  @Prop() readonly accessibleName: string;\r\n\r\n  /**\r\n   * Specifies the auto-capitalization behavior. Same as [autocapitalize](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-autocapitalize)\r\n   * attribute for `input` elements. Only supported by Safari and Chrome.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/reserved-member-names\r\n  @Prop() readonly autocapitalize: string; // TODO: StencilJS' bug. It does not allow to specify a better type\r\n\r\n  /**\r\n   * This attribute indicates whether the value of the control can be\r\n   * automatically completed by the browser. Same as [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly autocomplete: \"on\" | \"off\" = \"off\";\r\n\r\n  /**\r\n   * Specifies if the control automatically get focus when the page loads.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/reserved-member-names\r\n  @Prop() readonly autoFocus: boolean = false;\r\n\r\n  /**\r\n   * This property defines if the control size will grow automatically, to\r\n   * adjust to its content size.\r\n   */\r\n  @Prop() readonly autoGrow: boolean = false;\r\n\r\n  /**\r\n   * This property lets you specify the label for the clear search button.\r\n   * Important for accessibility.\r\n   *\r\n   * Only works if `type = \"search\"` and `multiline = false`.\r\n   */\r\n  @Prop() readonly clearSearchButtonAccessibleName: string = \"Clear search\";\r\n\r\n  /**\r\n   * Specifies a debounce for the input event.\r\n   */\r\n  @Prop() readonly debounce?: number = 0;\r\n\r\n  /**\r\n   * This attribute lets you specify if the element is disabled.\r\n   * If disabled, it will not fire any user interaction related event\r\n   * (for example, click event).\r\n   */\r\n  @Prop({ reflect: true }) readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * startImgSrc needs to be resolved.\r\n   */\r\n  @Prop() readonly getImagePathCallback?: (\r\n    imageSrc: string\r\n  ) => GxImageMultiState | undefined;\r\n  @Watch(\"getImagePathCallback\")\r\n  getImagePathCallbackChanged() {\r\n    this.#computeImage();\r\n  }\r\n\r\n  /**\r\n   * Specifies a set of parts to use in the Host element (`ch-edit`).\r\n   */\r\n  @Prop() readonly hostParts?: string;\r\n\r\n  /**\r\n   * This property defines the maximum string length that the user can enter\r\n   * into the control.\r\n   */\r\n  @Prop() readonly maxLength: number = undefined;\r\n\r\n  /**\r\n   * This attribute hints at the type of data that might be entered by the user\r\n   * while editing the element or its contents. This allows a browser to\r\n   * display an appropriate virtual keyboard. Only works when\r\n   * `multiline === false`.\r\n   */\r\n  @Prop() readonly mode: EditInputMode | undefined;\r\n\r\n  /**\r\n   * Controls if the element accepts multiline text.\r\n   */\r\n  @Prop() readonly multiline: boolean = false;\r\n\r\n  /**\r\n   * This property specifies the `name` of the control when used in a form.\r\n   */\r\n  @Prop({ reflect: true }) readonly name?: string;\r\n\r\n  /**\r\n   * This attribute specifies a regular expression the form control's value\r\n   * should match. Only works when `multiline === false`.\r\n   */\r\n  @Prop() readonly pattern: string = undefined;\r\n\r\n  /**\r\n   * Specifies a picture to apply for the value of the control. Only works if\r\n   * not `multiline`.\r\n   */\r\n  @Prop() readonly picture?: string;\r\n  @Watch(\"picture\")\r\n  pictureChanged() {\r\n    this.#shouldComputePictureValue = true;\r\n  }\r\n\r\n  /**\r\n   * Specifies the callback to execute when the picture must computed for the\r\n   * new value.\r\n   */\r\n  @Prop() readonly pictureCallback?: (value: any, picture: string) => string;\r\n  @Watch(\"pictureCallback\")\r\n  pictureCallbackChanged() {\r\n    this.#shouldComputePictureValue = true;\r\n  }\r\n\r\n  /**\r\n   * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly placeholder: string;\r\n\r\n  /**\r\n   * This attribute indicates that the user cannot modify the value of the control.\r\n   * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)\r\n   * attribute for `input` elements.\r\n   */\r\n  @Prop() readonly readonly: boolean = false;\r\n\r\n  /**\r\n   * If true, a trigger button is shown next to the edit field. The button can\r\n   * be customized adding a child element with `slot=\"trigger-content\"`\r\n   * attribute to specify the content inside the trigger button.\r\n   */\r\n  @Prop() readonly showTrigger: boolean;\r\n\r\n  /**\r\n   * Specifies whether the element may be checked for spelling errors\r\n   */\r\n  // eslint-disable-next-line @stencil-community/reserved-member-names\r\n  @Prop() readonly spellcheck: boolean = false;\r\n\r\n  /**\r\n   * Specifies the source of the start image.\r\n   */\r\n  @Prop() readonly startImgSrc: string;\r\n  @Watch(\"startImgSrc\")\r\n  startImgSrcChanged() {\r\n    this.#computeImage();\r\n  }\r\n\r\n  /**\r\n   * Specifies the source of the start image.\r\n   */\r\n  @Prop() readonly startImgType: Exclude<ImageRender, \"img\"> = \"background\";\r\n\r\n  /**\r\n   * This attribute lets you specify the label for the trigger button.\r\n   * Important for accessibility.\r\n   */\r\n  @Prop() readonly triggerButtonAccessibleName: string;\r\n\r\n  /**\r\n   * The type of control to render. A subset of the types supported by the `input` element is supported:\r\n   *\r\n   * * `\"date\"`\r\n   * * `\"datetime-local\"`\r\n   * * `\"email\"`\r\n   * * `\"file\"`\r\n   * * `\"number\"`\r\n   * * `\"password\"`\r\n   * * `\"search\"`\r\n   * * `\"tel\"`\r\n   * * `\"text\"`\r\n   * * `\"url\"`\r\n   */\r\n  @Prop() readonly type: EditType = \"text\";\r\n\r\n  /**\r\n   * The initial value of the control.\r\n   */\r\n  @Prop({ mutable: true }) value: string;\r\n  @Watch(\"value\")\r\n  valueChanged(newValue: string) {\r\n    this.#shouldComputePictureValue = true;\r\n\r\n    if (!this.#getInputRef()) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Synchronize the input value with value prop. This use case is only\r\n     * needed when the value prop is changed outside of the component.\r\n     * Without this verification, the following case would occur:\r\n     *  - ValueChanging. Input ref: \"X\"\r\n     *  - Render. Value prop: \"X\"\r\n     *  - (Enter key event resets the value). Value prop: \"\" <---- The Angular's UIModel now has value = \"\"\r\n     *  - ChangeEvent. Input ref: \"X\"\r\n     *  Result: Angular's UIModel has value = \"\", but the control has value = \"X\"\r\n     */\r\n    if (this.#getInputRef().value !== this.value) {\r\n      this.#getInputRef().value = this.value;\r\n    }\r\n\r\n    // Update form value\r\n    this.internals.setFormValue(newValue);\r\n  }\r\n\r\n  /**\r\n   * The `change` event is emitted when a change to the element's value is\r\n   * committed by the user. Unlike the `input` event, the `change` event is not\r\n   * necessarily fired for each change to an element's value but when the\r\n   * control loses focus.\r\n   * This event is _NOT_ debounced by the `debounce` property.\r\n   */\r\n  @Event() change: EventEmitter;\r\n\r\n  /**\r\n   * Fired synchronously when the value is changed.\r\n   * This event is debounced by the `debounce` property.\r\n   */\r\n  @Event() input: EventEmitter<string>;\r\n\r\n  /**\r\n   * Fired when the trigger button is clicked.\r\n   */\r\n  @Event() triggerClick: EventEmitter;\r\n\r\n  #getInputRef = () => this.#inputRef ?? this.#textareaRef;\r\n\r\n  #computeImage = () => {\r\n    if (!this.startImgSrc) {\r\n      this.#startImage = null;\r\n      return;\r\n    }\r\n    const getImagePathCallback =\r\n      this.getImagePathCallback ?? GET_IMAGE_PATH_CALLBACK_REGISTRY;\r\n\r\n    if (!getImagePathCallback) {\r\n      this.#startImage = null;\r\n      return;\r\n    }\r\n    const img = getImagePathCallback(this.startImgSrc);\r\n\r\n    if (!img) {\r\n      this.#startImage = null;\r\n      return;\r\n    }\r\n\r\n    this.#startImage = updateDirectionInImageCustomVar(\r\n      img,\r\n      \"start\"\r\n    ) as GxImageMultiStateStart;\r\n  };\r\n\r\n  #getValueFromEvent = (event: InputEvent): string =>\r\n    (event.target as HTMLInputElement).value;\r\n\r\n  #setValueAndEmitInputEventWithDebounce = (valueToEmit: string) => {\r\n    clearTimeout(this.#debounceId);\r\n\r\n    if (this.debounce > 0) {\r\n      this.#debounceId = setTimeout(() => {\r\n        this.value = valueToEmit;\r\n        this.input.emit(valueToEmit);\r\n      }, this.debounce);\r\n    } else {\r\n      this.value = valueToEmit;\r\n      this.input.emit(valueToEmit);\r\n    }\r\n  };\r\n\r\n  #handleAutoFill = (event: AnimationEvent) => {\r\n    this.autoFilled = event.animationName === AUTOFILL_START_ANIMATION_NAME;\r\n  };\r\n\r\n  #handleChange = (event: InputEvent) => {\r\n    this.value = this.#getValueFromEvent(event);\r\n    this.change.emit(event);\r\n  };\r\n\r\n  #handleValueChanging = (event: InputEvent) => {\r\n    event.stopPropagation();\r\n\r\n    // Don't allow invalid values\r\n    if (!this.#getInputRef().validity.valid) {\r\n      this.#getInputRef().value = this.value;\r\n      return;\r\n    }\r\n\r\n    this.#setValueAndEmitInputEventWithDebounce(this.#getValueFromEvent(event));\r\n  };\r\n\r\n  #handleTriggerClick = (event: UIEvent) => {\r\n    if (!this.disabled) {\r\n      event.stopPropagation();\r\n    }\r\n    this.triggerClick.emit(event);\r\n  };\r\n\r\n  #clearValue = (event: PointerEvent) => {\r\n    event.stopPropagation();\r\n    this.#setValueAndEmitInputEventWithDebounce(\"\");\r\n\r\n    requestAnimationFrame(() => this.el.focus());\r\n  };\r\n\r\n  // - - - - - - - - - - - - - - - - - - - - - -\r\n  //                  Pictures\r\n  // - - - - - - - - - - - - - - - - - - - - - -\r\n  #hasPictureApplied = () => this.picture && !!this.pictureCallback;\r\n\r\n  #computePictureValue(value: string | number) {\r\n    if (this.#hasPictureApplied()) {\r\n      this.pictureValue = this.pictureCallback(value, this.picture).trim();\r\n    }\r\n  }\r\n\r\n  #showPictureOnFocus = () => {\r\n    this.isFocusOnControl = true;\r\n  };\r\n\r\n  #removePictureOnBlur = () => {\r\n    this.isFocusOnControl = false;\r\n  };\r\n\r\n  connectedCallback() {\r\n    adoptCommonThemes(this.el.shadowRoot.adoptedStyleSheets);\r\n\r\n    // Initialize default getImagePathCallback\r\n    GET_IMAGE_PATH_CALLBACK_REGISTRY ??=\r\n      getControlRegisterProperty(\"getImagePathCallback\", \"ch-edit\") ??\r\n      DEFAULT_GET_IMAGE_PATH_CALLBACK;\r\n\r\n    this.#computeImage();\r\n    this.#computePictureValue(this.value);\r\n\r\n    // Accessibility\r\n    this.internals.setFormValue(this.value);\r\n    const labels = this.internals.labels;\r\n    this.#accessibleNameFromExternalLabel = getElementInternalsLabel(labels);\r\n\r\n    // Report any accessibility issue\r\n    analyzeLabelExistence(\r\n      this.el,\r\n      \"ch-edit\",\r\n      labels,\r\n      this.#accessibleNameFromExternalLabel,\r\n      this.accessibleName\r\n    );\r\n  }\r\n\r\n  componentWillUpdate() {\r\n    if (this.#shouldComputePictureValue) {\r\n      this.#shouldComputePictureValue = false;\r\n      this.#computePictureValue(this.value);\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    if (this.autoFocus) {\r\n      this.el.focus();\r\n    }\r\n  }\r\n\r\n  // TODO: Remove the icon with multiline and add overflow: clip in the Host with multiline\r\n  render() {\r\n    const isDateType = DATE_TYPES.includes(this.type);\r\n    const showDatePLaceholder = isDateType && this.placeholder && !this.value;\r\n    const shouldDisplayPicture = this.#hasPictureApplied();\r\n    const canAddListeners = !this.disabled && !this.readonly;\r\n\r\n    return (\r\n      <Host\r\n        class={{\r\n          \"ch-edit--auto-fill\": this.autoFilled,\r\n          \"ch-edit--cursor-text\": !isDateType && !this.disabled,\r\n          \"ch-edit--editable-date\": isDateType && !this.readonly,\r\n          \"ch-edit--multiline\": this.multiline && this.autoGrow,\r\n          \"ch-edit__trigger-button-space\": this.showTrigger,\r\n\r\n          [`ch-edit-start-img-type--${this.startImgType} ch-edit-pseudo-img--start`]:\r\n            !!this.#startImage,\r\n\r\n          [DISABLED_CLASS]: this.disabled\r\n        }}\r\n        // TODO: Add unit tests for this feature, since it breaks custom parts\r\n        // rendered outside of the ch-edit render() method\r\n        part={tokenMap({\r\n          [EDIT_HOST_PARTS.EMPTY_VALUE]: !this.value,\r\n          [this.hostParts]: !!this.hostParts\r\n        })}\r\n        style={this.#startImage?.styles ?? undefined}\r\n        // Alignment\r\n        data-text-align=\"\"\r\n        data-valign={!this.multiline ? \"\" : undefined}\r\n      >\r\n        {this.multiline\r\n          ? [\r\n              <textarea\r\n                autoFocus={this.autoFocus}\r\n                aria-label={\r\n                  this.#accessibleNameFromExternalLabel ||\r\n                  this.accessibleName ||\r\n                  null\r\n                }\r\n                autoCapitalize={this.autocapitalize}\r\n                autoComplete={this.autocomplete}\r\n                class={TEXTAREA_CLASSES}\r\n                disabled={this.disabled}\r\n                maxLength={this.maxLength}\r\n                placeholder={this.placeholder}\r\n                readOnly={this.readonly}\r\n                spellcheck={this.spellcheck}\r\n                value={this.value}\r\n                // Event listeners\r\n                onChange={canAddListeners && this.#handleChange}\r\n                onInput={canAddListeners && this.#handleValueChanging}\r\n                onAnimationStart={canAddListeners && this.#handleAutoFill}\r\n                ref={el => (this.#textareaRef = el)}\r\n              ></textarea>,\r\n\r\n              // The space at the end of the value is necessary to correctly display the enters\r\n              this.autoGrow && (\r\n                <div class=\"hidden-multiline\" part=\"hidden-multiline\">\r\n                  {this.value}{\" \"}\r\n                </div>\r\n              )\r\n            ]\r\n          : [\r\n              <input\r\n                autoFocus={this.autoFocus}\r\n                aria-label={\r\n                  this.#accessibleNameFromExternalLabel ||\r\n                  this.accessibleName ||\r\n                  null\r\n                }\r\n                autoCapitalize={this.autocapitalize}\r\n                autoComplete={this.autocomplete}\r\n                class={{\r\n                  \"content autofill\": true,\r\n                  \"null-date\": showDatePLaceholder\r\n                }}\r\n                disabled={this.disabled}\r\n                inputMode={this.mode}\r\n                maxLength={this.maxLength}\r\n                max={MAX_DATE_VALUE[this.type]} // Limit the year to 4 digits\r\n                min={MIN_DATE_VALUE[this.type]} // Extend the minimum value of the date\r\n                pattern={this.pattern || undefined}\r\n                placeholder={this.placeholder}\r\n                readOnly={this.readonly}\r\n                spellcheck={this.spellcheck}\r\n                step={isDateType ? \"1\" : undefined}\r\n                type={this.type}\r\n                value={\r\n                  shouldDisplayPicture && !this.isFocusOnControl\r\n                    ? this.pictureValue\r\n                    : this.value\r\n                }\r\n                // Event listeners\r\n                onAnimationStart={canAddListeners && this.#handleAutoFill}\r\n                onChange={canAddListeners && this.#handleChange}\r\n                onInput={canAddListeners && this.#handleValueChanging}\r\n                onFocus={\r\n                  canAddListeners &&\r\n                  shouldDisplayPicture &&\r\n                  !this.isFocusOnControl &&\r\n                  this.#showPictureOnFocus\r\n                }\r\n                onBlur={\r\n                  canAddListeners &&\r\n                  shouldDisplayPicture &&\r\n                  this.isFocusOnControl &&\r\n                  this.#removePictureOnBlur\r\n                }\r\n                ref={el => (this.#inputRef = el)}\r\n              />,\r\n\r\n              this.showTrigger && (\r\n                <button\r\n                  aria-label={this.triggerButtonAccessibleName}\r\n                  class={{\r\n                    \"trigger-button\": true,\r\n                    disabled: this.disabled\r\n                  }}\r\n                  part=\"trigger-button\"\r\n                  type=\"button\"\r\n                  disabled={this.disabled}\r\n                  onClick={canAddListeners && this.#handleTriggerClick}\r\n                >\r\n                  <slot name=\"trigger-content\" />\r\n                </button>\r\n              ),\r\n\r\n              // Implements a non-native placeholder for date types. TODO: Add unit tests for this\r\n              showDatePLaceholder && (\r\n                <div\r\n                  aria-hidden=\"true\"\r\n                  class=\"date-placeholder\"\r\n                  part={EDIT_PARTS_DICTIONARY.DATE_PLACEHOLDER}\r\n                >\r\n                  {this.placeholder}\r\n                </div>\r\n              ),\r\n\r\n              this.type === \"search\" && !!this.value && (\r\n                <button\r\n                  aria-label={this.clearSearchButtonAccessibleName}\r\n                  class=\"clear-button\"\r\n                  part={tokenMap({\r\n                    [EDIT_PARTS_DICTIONARY.CLEAR_BUTTON]: true,\r\n                    [EDIT_PARTS_DICTIONARY.DISABLED]: this.disabled\r\n                  })}\r\n                  type=\"button\"\r\n                  onClick={!this.disabled && this.#clearValue}\r\n                ></button>\r\n              )\r\n            ]}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"0zCAAA,IAAMA,EAAU,+0JAChB,IAAAC,EAAeD,ECqCf,IAAIE,EAIJ,IAAMC,EAE+B,SAAAC,GAAQ,OAAOC,KAAMD,EAAb,EAE7C,IAAME,EAAgC,gBAEtC,IAAMC,EAAa,CAAC,iBAAkB,OAAQ,QAE9C,IAAMC,EAA4C,CAChDC,KAAM,aACN,iBAAkB,uBAGpB,IAAMC,EAA4C,CAChDD,KAAM,aACN,iBAAkB,uBAGpB,IAAME,EAAmB,8BAAAC,OAA8BC,G,IAyB1CC,EAAMC,EAAA,WAAAC,EAAA,W,qCACjBC,EAAAC,IAAAC,UAAA,GACAC,EAAAF,IAAAC,UAAA,GAEAE,EAAAH,IAAAC,UAAA,GACAG,EAAAJ,IAAAC,KAA6B,OAK7BI,EAAAL,IAAAC,UAAA,GACAK,EAAAN,IAAAC,UAAA,GAuPAM,EAAAP,IAAAC,MAAe,eAAAO,EAAM,OAAAA,EAAAC,uBAAAC,EAAIL,EAAA,QAAU,MAAAG,SAAA,EAAAA,EAAIC,uBAAAC,EAAIJ,EAAA,IAAa,IAExDK,EAAAX,IAAAC,MAAgB,W,MACd,IAAKS,EAAKE,YAAa,CACrBC,uBAAAH,EAAIR,EAAe,KAAI,KACvB,M,CAEF,IAAMY,GACJN,EAAAE,EAAKI,wBAAoB,MAAAN,SAAA,EAAAA,EAAIxB,EAE/B,IAAK8B,EAAsB,CACzBD,uBAAAH,EAAIR,EAAe,KAAI,KACvB,M,CAEF,IAAMa,EAAMD,EAAqBJ,EAAKE,aAEtC,IAAKG,EAAK,CACRF,uBAAAH,EAAIR,EAAe,KAAI,KACvB,M,CAGFW,uBAAAH,EAAIR,EAAec,EACjBD,EACA,SACyB,I,IAG7BE,EAAAjB,IAAAC,MAAqB,SAACiB,GACnB,OAAAA,EAAMC,OAA4BC,KAAlC,IAEHC,EAAArB,IAAAC,MAAyC,SAACqB,GACxCC,aAAad,uBAAAC,EAAIP,EAAA,MAEjB,GAAIO,EAAKc,SAAW,EAAG,CACrBX,uBAAAH,EAAIP,EAAesB,YAAW,WAC5Bf,EAAKU,MAAQE,EACbZ,EAAKgB,MAAMC,KAAKL,E,GACfZ,EAAKc,UAAS,I,KACZ,CACLd,EAAKU,MAAQE,EACbZ,EAAKgB,MAAMC,KAAKL,E,KAIpBM,EAAA5B,IAAAC,MAAkB,SAACiB,GACjBR,EAAKmB,WAAaX,EAAMY,gBAAkB1C,C,IAG5C2C,EAAA/B,IAAAC,MAAgB,SAACiB,GACfR,EAAKU,MAAQX,uBAAAC,EAAIO,EAAA,KAAmBe,KAAvBtB,EAAwBQ,GACrCR,EAAKuB,OAAON,KAAKT,E,IAGnBgB,EAAAlC,IAAAC,MAAuB,SAACiB,GACtBA,EAAMiB,kBAGN,IAAK1B,uBAAAC,EAAIH,EAAA,KAAayB,KAAjBtB,GAAoB0B,SAASC,MAAO,CACvC5B,uBAAAC,EAAIH,EAAA,KAAayB,KAAjBtB,GAAoBU,MAAQV,EAAKU,MACjC,M,CAGFX,uBAAAC,EAAIW,EAAA,KAAuCW,KAA3CtB,EAA4CD,uBAAAC,EAAIO,EAAA,KAAmBe,KAAvBtB,EAAwBQ,G,IAGtEoB,EAAAtC,IAAAC,MAAsB,SAACiB,GACrB,IAAKR,EAAK6B,SAAU,CAClBrB,EAAMiB,iB,CAERzB,EAAK8B,aAAab,KAAKT,E,IAGzBuB,EAAAzC,IAAAC,MAAc,SAACiB,GACbA,EAAMiB,kBACN1B,uBAAAC,EAAIW,EAAA,KAAuCW,KAA3CtB,EAA4C,IAE5CgC,uBAAsB,WAAM,OAAAhC,EAAKiC,GAAGC,OAAR,G,IAM9BC,EAAA7C,IAAAC,MAAqB,WAAM,OAAAS,EAAKoC,WAAapC,EAAKqC,eAAvB,IAQ3BC,EAAAhD,IAAAC,MAAsB,WACpBS,EAAKuC,iBAAmB,I,IAG1BC,EAAAlD,IAAAC,MAAuB,WACrBS,EAAKuC,iBAAmB,K,2SApVE,M,4CAWN,M,8EAqBwB,M,eAMR,M,cAMD,M,qCAQsB,e,cAKtB,E,cAOiB,M,4EAuBjBE,U,mCAaC,M,iCAWHA,U,+FAiCE,M,2CAaE,M,6CAcsB,a,qDAsB3B,O,iIAvHlCC,EAAAC,UAAAC,4BAAA,WACE7C,uBAAAR,KAAIU,EAAA,KAAcqB,KAAlB/B,K,EA4CFmD,EAAAC,UAAAE,eAAA,WACE1C,uBAAAZ,KAAIG,EAA8B,KAAI,I,EASxCgD,EAAAC,UAAAG,uBAAA,WACE3C,uBAAAZ,KAAIG,EAA8B,KAAI,I,EAkCxCgD,EAAAC,UAAAI,mBAAA,WACEhD,uBAAAR,KAAIU,EAAA,KAAcqB,KAAlB/B,K,EAmCFmD,EAAAC,UAAAK,aAAA,SAAaC,GACX9C,uBAAAZ,KAAIG,EAA8B,KAAI,KAEtC,IAAKK,uBAAAR,KAAIM,EAAA,KAAayB,KAAjB/B,MAAqB,CACxB,M,CAaF,GAAIQ,uBAAAR,KAAIM,EAAA,KAAayB,KAAjB/B,MAAoBmB,QAAUnB,KAAKmB,MAAO,CAC5CX,uBAAAR,KAAIM,EAAA,KAAayB,KAAjB/B,MAAoBmB,MAAQnB,KAAKmB,K,CAInCnB,KAAK2D,UAAUC,aAAaF,E,EAyH9BP,EAAAC,UAAAS,kBAAA,W,MACEC,EAAkB9D,KAAK0C,GAAGqB,WAAWC,oBAGrCjF,IAAgC,MAAhCA,SAAgC,EAAhCA,KACEwB,EAAA0D,EAA2B,uBAAwB,cAAU,MAAA1D,SAAA,EAAAA,EAC7DvB,EAEFwB,uBAAAR,KAAIU,EAAA,KAAcqB,KAAlB/B,MACAQ,uBAAAR,KAAIkE,EAAA,IAAAC,GAAqBpC,KAAzB/B,KAA0BA,KAAKmB,OAG/BnB,KAAK2D,UAAUC,aAAa5D,KAAKmB,OACjC,IAAMiD,EAASpE,KAAK2D,UAAUS,OAC9BxD,uBAAAZ,KAAIF,EAAoCuE,EAAyBD,GAAO,KAGxEE,EACEtE,KAAK0C,GACL,UACA0B,EACA5D,uBAAAR,KAAIF,EAAA,KACJE,KAAKuE,e,EAITpB,EAAAC,UAAAoB,oBAAA,WACE,GAAIhE,uBAAAR,KAAIG,EAAA,KAA6B,CACnCS,uBAAAZ,KAAIG,EAA8B,MAAK,KACvCK,uBAAAR,KAAIkE,EAAA,IAAAC,GAAqBpC,KAAzB/B,KAA0BA,KAAKmB,M,GAInCgC,EAAAC,UAAAqB,iBAAA,WACE,GAAIzE,KAAK0E,UAAW,CAClB1E,KAAK0C,GAAGC,O,GAKZQ,EAAAC,UAAAuB,OAAA,W,UAAA,IAAAlE,EAAAT,K,QACE,IAAM4E,EAAaxF,EAAWyF,SAAS7E,KAAK8E,MAC5C,IAAMC,EAAsBH,GAAc5E,KAAKgF,cAAgBhF,KAAKmB,MACpE,IAAM8D,EAAuBzE,uBAAAR,KAAI4C,EAAA,KAAmBb,KAAvB/B,MAC7B,IAAMkF,GAAmBlF,KAAKsC,WAAatC,KAAKmF,SAEhD,OACEC,EAACC,EAAI,CAAAC,IAAA,2CACHC,OAAKhF,EAAA,CACH,qBAAsBP,KAAK4B,WAC3B,wBAAyBgD,IAAe5E,KAAKsC,SAC7C,yBAA0BsC,IAAe5E,KAAKmF,SAC9C,qBAAsBnF,KAAKwF,WAAaxF,KAAKyF,SAC7C,gCAAiCzF,KAAK0F,aAEtCnF,EAAC,2BAAAd,OAA2BO,KAAK2F,aAAY,iCACzCnF,uBAAAR,KAAIC,EAAA,KAERM,EAACqF,GAAiB5F,KAAKsC,S,GAIzBuD,KAAMC,GAAQC,EAAA,GACZA,EAACC,EAAgBC,cAAejG,KAAKmB,MACrC4E,EAAC/F,KAAKkG,aAAclG,KAAKkG,U,IAE3BC,OAAOC,GAAAC,EAAA7F,uBAAAR,KAAIC,EAAA,QAAY,MAAAoG,SAAA,SAAAA,EAAEC,UAAM,MAAAF,SAAA,EAAAA,EAAIlD,UAAS,kBAE5B,GAAE,eACJlD,KAAKwF,UAAY,GAAKtC,WAEnClD,KAAKwF,UACF,CACEJ,EAAA,YACEV,UAAW1E,KAAK0E,UAAS,aAEvBlE,uBAAAR,KAAIF,EAAA,MACJE,KAAKuE,gBACL,KAEFgC,eAAgBvG,KAAKwG,eACrBC,aAAczG,KAAK0G,aACnBnB,MAAO/F,EACP8C,SAAUtC,KAAKsC,SACfqE,UAAW3G,KAAK2G,UAChB3B,YAAahF,KAAKgF,YAClB4B,SAAU5G,KAAKmF,SACf0B,WAAY7G,KAAK6G,WACjB1F,MAAOnB,KAAKmB,MAEZ2F,SAAU5B,GAAmB1E,uBAAAR,KAAI8B,EAAA,KACjCiF,QAAS7B,GAAmB1E,uBAAAR,KAAIiC,EAAA,KAChC+E,iBAAkB9B,GAAmB1E,uBAAAR,KAAI2B,EAAA,KACzCsF,IAAK,SAAAvE,GAAE,OAAK9B,uBAAAH,EAAIJ,EAAgBqC,EAAE,IAA3B,IAIT1C,KAAKyF,UACHL,EAAA,OAAKG,MAAM,mBAAmBM,KAAK,oBAChC7F,KAAKmB,MAAO,MAInB,CACEiE,EAAA,SACEV,UAAW1E,KAAK0E,UAAS,aAEvBlE,uBAAAR,KAAIF,EAAA,MACJE,KAAKuE,gBACL,KAEFgC,eAAgBvG,KAAKwG,eACrBC,aAAczG,KAAK0G,aACnBnB,MAAO,CACL,mBAAoB,KACpB,YAAaR,GAEfzC,SAAUtC,KAAKsC,SACf4E,UAAWlH,KAAKmH,KAChBR,UAAW3G,KAAK2G,UAChBS,IAAK/H,EAAeW,KAAK8E,MACzBuC,IAAK9H,EAAeS,KAAK8E,MACzBwC,QAAStH,KAAKsH,SAAWpE,UACzB8B,YAAahF,KAAKgF,YAClB4B,SAAU5G,KAAKmF,SACf0B,WAAY7G,KAAK6G,WACjBU,KAAM3C,EAAa,IAAM1B,UACzB4B,KAAM9E,KAAK8E,KACX3D,MACE8D,IAAyBjF,KAAKgD,iBAC1BhD,KAAKwH,aACLxH,KAAKmB,MAGX6F,iBAAkB9B,GAAmB1E,uBAAAR,KAAI2B,EAAA,KACzCmF,SAAU5B,GAAmB1E,uBAAAR,KAAI8B,EAAA,KACjCiF,QAAS7B,GAAmB1E,uBAAAR,KAAIiC,EAAA,KAChCwF,QACEvC,GACAD,IACCjF,KAAKgD,kBACNxC,uBAAAR,KAAI+C,EAAA,KAEN2E,OACExC,GACAD,GACAjF,KAAKgD,kBACLxC,uBAAAR,KAAIiD,EAAA,KAENgE,IAAK,SAAAvE,GAAE,OAAK9B,uBAAAH,EAAIL,EAAasC,EAAE,IAAxB,IAGT1C,KAAK0F,aACHN,EAAA,uBACcpF,KAAK2H,4BACjBpC,MAAO,CACL,iBAAkB,KAClBjD,SAAUtC,KAAKsC,UAEjBuD,KAAK,iBACLf,KAAK,SACLxC,SAAUtC,KAAKsC,SACfsF,QAAS1C,GAAmB1E,uBAAAR,KAAIqC,EAAA,MAEhC+C,EAAA,QAAMyC,KAAK,qBAKf9C,GACEK,EAAA,qBACc,OACZG,MAAM,mBACNM,KAAMiC,EAAsBC,kBAE3B/H,KAAKgF,aAIVhF,KAAK8E,OAAS,YAAc9E,KAAKmB,OAC/BiE,EAAA,uBACcpF,KAAKgI,gCACjBzC,MAAM,eACNM,KAAMC,GAAQmC,EAAA,GACZA,EAACH,EAAsBI,cAAe,KACtCD,EAACH,EAAsBK,UAAWnI,KAAKsC,S,IAEzCwC,KAAK,SACL8C,SAAU5H,KAAKsC,UAAY9B,uBAAAR,KAAIwC,EAAA,Q,ufAhiB9B,G,uRAsVIrB,GACnB,GAAIX,uBAAAR,KAAI4C,EAAA,KAAmBb,KAAvB/B,MAA2B,CAC7BA,KAAKwH,aAAexH,KAAK8C,gBAAgB3B,EAAOnB,KAAK6C,SAASuF,M"}