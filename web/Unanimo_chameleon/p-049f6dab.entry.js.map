{"version":3,"names":["BLOCK_START","BLOCK_END","INLINE_START","INLINE_END","START_HALF_THRESHOLD","END_HALF_THRESHOLD","EDGE_SIZE","setProperty","element","property","value","style","inlineStart","mainViewRect","rtl","left","width","inlineEnd","documentRect","right","droppableAreaMap","top","height","center","lastDroppableArea","lastViewId","handleWidgetDrag","draggableView","droppableAreaRef","event","stopPropagation","document","documentElement","getBoundingClientRect","mainView","positionX","clientX","positionY","clientY","distanceToTheLeftEdge","distanceToTheTopEdge","relativePositionX","relativePositionY","droppableArea","inBetween","viewId","droppableAreaSizes","removeDroppableAreaStyles","undefined","removeAttribute","getWidgetDropInfo","dropAreaTarget","viewIdTarget","createAndSetLeafInfo","flexibleLayoutLeaf","renderedWidgets","widgetsInfo","leafId","id","leafType","type","widget","add","set","parentLeafId","info","selectedWidgetId","widgets","forEach","wasRendered","length","selectedWidget","isBlockDirection","tabListPosition","DEFAULT_TAB_LIST_POSITION","closeButton","disabled","dragOutside","showCaptions","sortable","tabButtonHidden","addCustomBehavior","item","layoutSplitterParts","dragBar","part","addNewLeafToInfo","leaf","parentItem","itemsInfo","flexibleLeafExtended","leafInfo","updateFlexibleSubModels","flexibleLayoutItems","flexibleItem","items","group","flexibleItemExtended","updateFlexibleModels","flexibleLayout","ROOT_VIEW","getLeafInfo","get","flexibleLayoutCss","ChFlexibleLayoutStyle0","LEAF_SELECTOR","ESCAPE_KEY","ChFlexibleLayout","exportParts","layoutSplitterExportParts","leafs","draggableViews","dragInfo","viewsOutOfDroppableZoneController","draggedViewRef","layoutSplitterRef","viewItemClose","selectedViewItemChange","viewItemReorder","addSiblingView","parentGroup","siblingItem","placedInTheSibling","viewInfo","takeHalfTheSpaceOfTheSiblingItem","result","this","addSiblingLeaf","success","forceUpdate","refreshLeaf","leafRef","el","shadowRoot","querySelector","removeView","itemId","removeItem","reconnectedSubtree","removeItemPageInView","forceRerender","viewRef","removePage","handleItemClose","composedPath","tagName","toLowerCase","getRootNode","eventDetail","detail","eventInfo","emit","defaultPrevented","preventDefault","getAllLeafs","views","itemView","push","handleItemChange","target","handleDragStart","async","querySelectorAll","index","draggableViewsResult","Promise","allSettled","map","view","getDraggableViews","draggableViewResult","status","abortController","AbortController","extendedDraggableView","RTL","isRTL","addEventListener","capture","passive","signal","tabListView","pointerEvents","pageView","handleWidgetDragEnd","handleWidgetDragEndKeydown","showPopover","promoteDragPreviewToTopLayer","dragBarDisabled","code","endDragPreview","abort","removeEventListener","dropInfo","hidePopover","computePartsToExport","exportPartsSet","Set","Object","values","TAB_PARTS_DICTIONARY","FLEXIBLE_LAYOUT_PARTS_DICTIONARY","DROPPABLE_AREA","LEAF","LAYOUT_SPLITTER_PARTS_DICTIONARY","BAR","keys","join","renderTab","dragOutsideEnabled","sortableEnabled","blockDirection","startDirection","isStartDirection","h","key","slot","contain","tokenMap","BLOCK","INLINE","START","END","exportparts","TAB_EXPORT_PARTS","model","overflow","selectedId","onItemDragStart","onSelectedItemChange","name","renderView","componentWillRender","render","layoutModel","Host","ref","class","popover","flexibleLayoutRenderCss","ChFlexibleLayoutRenderStyle0","GENERATE_GUID","currentDate","Date","getTime","replace","c","randomNumber","Math","random","floor","toString","ChFlexibleLayoutRender","lastRenderedWidgets","Map","flexibleLayoutRef","modelChanged","newModel","widgetClose","renderedWidgetsChange","addWidget","selectWidget","leafUIModel","has","updateSelectedWidget","removeRenderedWidgets","itemInfo","leafInfoToRemove","nodeToRemoveUIModel","nodeToRemove","itemsOfNodeToRemove","nodeToReconnectUIModel","nodeToReconnect","itemToUpdateItsParent","nodeToReconnectLeafInfo","widgetsToUpdateParentLeafId","widgetUIModel","delete","deleteRenderedWidget","removeWidget","widgetId","checkViewStateToRemoveWidget","findIndex","newSelectedWidgetId","parentLeafInfo","updateViewInfo","properties","viewUIModel","updateWidgetInfo","widgetInfo","entries","layout","clear","newRenderedWidgets","handleLeafSelectedWidgetChange","selectedItemInfo","newSelectedItem","newSelectedIndex","handleLeafWidgetClose","itemCloseInfo","widgetIndex","itemIndex","viewWidgets","widgetsCount","skipRenderRemoval","removeElement","conserveRenderState","handleLeafWidgetReorder","reorderInfo","leafIdTarget","leafTargetInfo","widgetToMove","handleViewItemReorderCreateView","viewTargetInfo","viewTargetUIModel","viewTargetParentInfo","newLeafToAddId","newLeafToAdd","size","viewTargetIsContainedInAGroupWithTheSameDirection","direction","renderWidget","widgetIsSlotted","renderId","widgetRender","renders","console","error","addWrapper","slottedWidgets","checkToEmitRenderedWidgetsChange","shouldEmitRenderedWidgetsChange","rendered","slotted","componentWillLoad","componentDidRender","theme","onViewItemClose","onViewItemReorder","onSelectedViewItemChange"],"sources":["src/components/flexible-layout/internal/flexible-layout/utils.ts","src/components/flexible-layout/utils.ts","src/components/flexible-layout/internal/flexible-layout/flexible-layout.scss?tag=ch-flexible-layout&encapsulation=shadow","src/components/flexible-layout/internal/flexible-layout/flexible-layout.tsx","src/components/flexible-layout/flexible-layout-render.scss?tag=ch-flexible-layout-render&encapsulation=shadow","src/components/flexible-layout/flexible-layout-render.tsx"],"sourcesContent":["import { inBetween } from \"../../../../common/utils\";\r\nimport {\r\n  DraggableViewExtendedInfo,\r\n  DroppableArea,\r\n  WidgetDropInfo\r\n} from \"./types\";\r\n\r\n/**\r\n * [block-start, block-end, inline-start, inline-end]\r\n */\r\ntype DroppableAreaSizes = [number, number, number, number];\r\n\r\n// Custom vars\r\nconst BLOCK_START = \"--ch-flexible-layout-drop-area-block-start\";\r\nconst BLOCK_END = \"--ch-flexible-layout-drop-area-block-end\";\r\nconst INLINE_START = \"--ch-flexible-layout-drop-area-inline-start\";\r\nconst INLINE_END = \"--ch-flexible-layout-drop-area-inline-end\";\r\n\r\n/**\r\n * If the mouse position is in the interval [0%, 30%] the droppable area should\r\n * be displayed at the START position with half the size.\r\n */\r\nconst START_HALF_THRESHOLD = 30; // In percentage\r\n\r\n/**\r\n * If the mouse position is in the interval [70%, 100%] the droppable area\r\n * should be displayed at the END position with half the size.\r\n */\r\nconst END_HALF_THRESHOLD = 100 - START_HALF_THRESHOLD; // In percentage\r\n\r\nconst EDGE_SIZE = 0.5;\r\n\r\nconst setProperty = (element: HTMLElement, property: string, value: number) =>\r\n  element.style.setProperty(property, `${value}px`);\r\n\r\nconst inlineStart = (mainViewRect: DOMRect, rtl: boolean) =>\r\n  rtl ? mainViewRect.left + mainViewRect.width * EDGE_SIZE : mainViewRect.left;\r\n\r\nconst inlineEnd = (\r\n  documentRect: DOMRect,\r\n  mainViewRect: DOMRect,\r\n  rtl: boolean\r\n) =>\r\n  rtl\r\n    ? documentRect.width - mainViewRect.right\r\n    : documentRect.width - (mainViewRect.left + mainViewRect.width * EDGE_SIZE);\r\n\r\nconst droppableAreaMap: {\r\n  [key in DroppableArea]: (\r\n    documentRect: DOMRect,\r\n    mainViewRect: DOMRect,\r\n    rtl: boolean\r\n  ) => DroppableAreaSizes;\r\n} = {\r\n  \"block-start\": (documentRect, mainViewRect) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height * EDGE_SIZE),\r\n    mainViewRect.left,\r\n    documentRect.width - mainViewRect.right\r\n  ],\r\n\r\n  \"block-end\": (documentRect, mainViewRect) => [\r\n    mainViewRect.top + mainViewRect.height * EDGE_SIZE,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    mainViewRect.left,\r\n    documentRect.width - mainViewRect.right\r\n  ],\r\n\r\n  \"inline-start\": (documentRect, mainViewRect, rtl) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    inlineStart(mainViewRect, rtl),\r\n    inlineEnd(documentRect, mainViewRect, rtl)\r\n  ],\r\n\r\n  \"inline-end\": (documentRect, mainViewRect, rtl) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    inlineStart(mainViewRect, !rtl),\r\n    inlineEnd(documentRect, mainViewRect, !rtl)\r\n  ],\r\n\r\n  center: (documentRect, mainViewRect) => [\r\n    mainViewRect.top,\r\n    documentRect.height - (mainViewRect.top + mainViewRect.height),\r\n    mainViewRect.left,\r\n    documentRect.width - mainViewRect.right\r\n  ]\r\n};\r\n\r\nlet lastDroppableArea: DroppableArea;\r\nlet lastViewId: string;\r\n\r\nexport const handleWidgetDrag =\r\n  (\r\n    draggableView: DraggableViewExtendedInfo,\r\n    droppableAreaRef: HTMLElement,\r\n    rtl: boolean\r\n  ) =>\r\n  (event: MouseEvent) => {\r\n    event.stopPropagation(); // Prevents the remove of the droppable area\r\n\r\n    // - - - - - - - - - - - DOM read operations - - - - - - - - - - -\r\n    const documentRect = document.documentElement.getBoundingClientRect();\r\n    const mainViewRect = draggableView.mainView.getBoundingClientRect();\r\n    const positionX = event.clientX; // Mouse position X\r\n    const positionY = event.clientY; // Mouse position Y\r\n\r\n    const distanceToTheLeftEdge = rtl\r\n      ? mainViewRect.width - (positionX - mainViewRect.left)\r\n      : positionX - mainViewRect.left;\r\n    const distanceToTheTopEdge = positionY - mainViewRect.top;\r\n\r\n    const relativePositionX =\r\n      (distanceToTheLeftEdge / mainViewRect.width) * 100;\r\n    const relativePositionY =\r\n      (distanceToTheTopEdge / mainViewRect.height) * 100;\r\n\r\n    let droppableArea: DroppableArea;\r\n\r\n    // Block start (Most likely droppable area)\r\n    if (\r\n      relativePositionY <= START_HALF_THRESHOLD &&\r\n      inBetween(relativePositionY, relativePositionX, 100 - relativePositionY)\r\n    ) {\r\n      droppableArea = \"block-start\";\r\n    }\r\n\r\n    // Inline End (second most likely droppable area)\r\n    else if (\r\n      relativePositionX >= END_HALF_THRESHOLD &&\r\n      inBetween(100 - relativePositionX, relativePositionY, relativePositionX)\r\n    ) {\r\n      droppableArea = \"inline-end\";\r\n    }\r\n\r\n    // Inline Start\r\n    else if (\r\n      relativePositionX <= START_HALF_THRESHOLD &&\r\n      inBetween(relativePositionX, relativePositionY, 100 - relativePositionX)\r\n    ) {\r\n      droppableArea = \"inline-start\";\r\n    }\r\n\r\n    // Block end\r\n    else if (\r\n      relativePositionY >= END_HALF_THRESHOLD &&\r\n      inBetween(100 - relativePositionY, relativePositionX, relativePositionY)\r\n    ) {\r\n      droppableArea = \"block-end\";\r\n    }\r\n\r\n    // Center\r\n    else {\r\n      droppableArea = \"center\";\r\n    }\r\n\r\n    // If the droppable area did not change, there is no need to update the DOM\r\n    if (\r\n      lastViewId === draggableView.viewId &&\r\n      lastDroppableArea === droppableArea\r\n    ) {\r\n      return;\r\n    }\r\n    lastDroppableArea = droppableArea;\r\n    lastViewId = draggableView.viewId;\r\n\r\n    const droppableAreaSizes = droppableAreaMap[droppableArea](\r\n      documentRect,\r\n      mainViewRect,\r\n      rtl\r\n    );\r\n\r\n    // - - - - - - - - - - - DOM write operations - - - - - - - - - - -\r\n    setProperty(droppableAreaRef, BLOCK_START, droppableAreaSizes[0]);\r\n    setProperty(droppableAreaRef, BLOCK_END, droppableAreaSizes[1]);\r\n\r\n    setProperty(droppableAreaRef, INLINE_START, droppableAreaSizes[2]);\r\n    setProperty(droppableAreaRef, INLINE_END, droppableAreaSizes[3]);\r\n  };\r\n\r\nexport const removeDroppableAreaStyles = (droppableAreaRef: HTMLElement) => {\r\n  lastDroppableArea = undefined;\r\n  lastViewId = undefined;\r\n  droppableAreaRef.removeAttribute(\"style\");\r\n};\r\n\r\nexport const getWidgetDropInfo = (): WidgetDropInfo | undefined =>\r\n  lastDroppableArea === undefined\r\n    ? undefined\r\n    : { dropAreaTarget: lastDroppableArea, viewIdTarget: lastViewId };\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Build } from \"@stencil/core\";\r\nimport {\r\n  FlexibleLayoutModel,\r\n  FlexibleLayoutGroupModel,\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutItemExtended,\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafInfo,\r\n  FlexibleLayoutLeafType,\r\n  FlexibleLayoutWidgetExtended\r\n} from \"./internal/flexible-layout/types\";\r\nimport { ROOT_VIEW } from \"../../common/utils\";\r\nimport { DEFAULT_TAB_LIST_POSITION, isBlockDirection } from \"../tab/utils\";\r\n\r\n// Aliases\r\ntype ItemExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype LeafExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype GroupExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutGroupModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\nexport const createAndSetLeafInfo = (\r\n  flexibleLayoutLeaf: FlexibleLayoutLeafModel,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>\r\n): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> => {\r\n  const leafId = flexibleLayoutLeaf.id;\r\n  const leafType = flexibleLayoutLeaf.type;\r\n\r\n  if (leafType === \"single-content\") {\r\n    const widget = flexibleLayoutLeaf.widget;\r\n\r\n    // Mark the widget as rendered\r\n    renderedWidgets.add(widget.id);\r\n\r\n    // Store the widget info\r\n    widgetsInfo.set(leafId, { parentLeafId: leafId, info: widget });\r\n\r\n    return {\r\n      id: leafId,\r\n      type: leafType,\r\n      widget: widget\r\n    };\r\n  }\r\n\r\n  let selectedWidgetId = flexibleLayoutLeaf.selectedWidgetId;\r\n  const widgets = flexibleLayoutLeaf.widgets;\r\n\r\n  widgets.forEach(widget => {\r\n    if (widget.wasRendered || selectedWidgetId === widget.id) {\r\n      // Ensure proper initialization\r\n      widget.wasRendered = true;\r\n\r\n      renderedWidgets.add(widget.id);\r\n    }\r\n\r\n    // Store the widget info\r\n    widgetsInfo.set(widget.id, { parentLeafId: leafId, info: widget });\r\n  });\r\n\r\n  if (Build.isDev) {\r\n    if (widgets.length === 0) {\r\n      console.warn(`The view \"${leafId}\" does not have any widget.`);\r\n    }\r\n  }\r\n\r\n  // If there is no widget selected by default, select one\r\n  if (selectedWidgetId == null && widgets.length > 0) {\r\n    const selectedWidget =\r\n      widgets[\r\n        isBlockDirection(\r\n          flexibleLayoutLeaf.tabListPosition ?? DEFAULT_TAB_LIST_POSITION\r\n        )\r\n          ? widgets.length - 1\r\n          : 0\r\n      ];\r\n    selectedWidgetId = selectedWidget.id;\r\n    selectedWidget.wasRendered = true;\r\n\r\n    // Mark the widget as rendered\r\n    renderedWidgets.add(selectedWidgetId);\r\n  }\r\n\r\n  return {\r\n    id: leafId,\r\n    closeButton: flexibleLayoutLeaf.closeButton,\r\n    disabled: flexibleLayoutLeaf.disabled,\r\n    dragOutside: flexibleLayoutLeaf.dragOutside,\r\n    selectedWidgetId: selectedWidgetId,\r\n    showCaptions: flexibleLayoutLeaf.showCaptions ?? true,\r\n    sortable: flexibleLayoutLeaf.sortable,\r\n    tabListPosition: flexibleLayoutLeaf.tabListPosition,\r\n    tabButtonHidden: flexibleLayoutLeaf.tabButtonHidden ?? false,\r\n    type: leafType,\r\n    widgets: widgets\r\n  };\r\n};\r\n\r\nconst addCustomBehavior = (\r\n  item: FlexibleLayoutItemModel,\r\n  layoutSplitterParts: Set<string>\r\n) => {\r\n  if (item.dragBar?.part) {\r\n    layoutSplitterParts.add(item.dragBar?.part);\r\n  }\r\n};\r\n\r\nexport const addNewLeafToInfo = (\r\n  leaf: FlexibleLayoutLeafModel,\r\n  parentItem: FlexibleLayoutGroupModel,\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>\r\n) => {\r\n  const flexibleLeafExtended: LeafExtended = {\r\n    item: leaf,\r\n    parentItem: parentItem,\r\n    leafInfo: createAndSetLeafInfo(leaf, renderedWidgets, widgetsInfo)\r\n  };\r\n\r\n  itemsInfo.set(leaf.id, flexibleLeafExtended);\r\n};\r\n\r\nconst updateFlexibleSubModels = (\r\n  flexibleLayoutItems: FlexibleLayoutItemModel[],\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  layoutSplitterParts: Set<string>,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>,\r\n  parentItem: FlexibleLayoutGroupModel\r\n) => {\r\n  flexibleLayoutItems.forEach(flexibleItem => {\r\n    // Group\r\n    if ((flexibleItem as FlexibleLayoutGroupModel).items != null) {\r\n      const group = flexibleItem as FlexibleLayoutGroupModel;\r\n\r\n      const flexibleItemExtended: GroupExtended = {\r\n        item: group,\r\n        parentItem: parentItem\r\n      };\r\n      itemsInfo.set(group.id, flexibleItemExtended);\r\n\r\n      layoutSplitterParts.add(group.id);\r\n\r\n      updateFlexibleSubModels(\r\n        group.items, // Subitems\r\n        itemsInfo,\r\n        layoutSplitterParts,\r\n        renderedWidgets,\r\n        widgetsInfo,\r\n        group\r\n      );\r\n    }\r\n    // Leaf\r\n    else {\r\n      addNewLeafToInfo(\r\n        flexibleItem as FlexibleLayoutLeafModel,\r\n        parentItem,\r\n        itemsInfo,\r\n        renderedWidgets,\r\n        widgetsInfo\r\n      );\r\n    }\r\n\r\n    // Custom behaviors\r\n    addCustomBehavior(flexibleItem, layoutSplitterParts);\r\n  });\r\n};\r\n\r\nexport const updateFlexibleModels = (\r\n  flexibleLayout: FlexibleLayoutModel,\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  layoutSplitterParts: Set<string>,\r\n  renderedWidgets: Set<string>,\r\n  widgetsInfo: Map<string, FlexibleLayoutWidgetExtended>\r\n) =>\r\n  updateFlexibleSubModels(\r\n    flexibleLayout.items,\r\n    itemsInfo,\r\n    layoutSplitterParts,\r\n    renderedWidgets,\r\n    widgetsInfo,\r\n    ROOT_VIEW // Root item\r\n  );\r\n\r\nexport const getLeafInfo = (\r\n  itemsInfo: Map<string, ItemExtended>,\r\n  leafId: string\r\n): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> =>\r\n  (itemsInfo.get(leafId) as LeafExtended).leafInfo;\r\n",":host {\r\n  display: contents;\r\n}\r\n\r\n.droppable-area {\r\n  // Reset popover's browser defaults\r\n  width: auto;\r\n  height: auto;\r\n  padding: 0;\r\n  margin: 0;\r\n  border: unset;\r\n  color: unset;\r\n\r\n  inset-block: var(--ch-flexible-layout-drop-area-block-start)\r\n    var(--ch-flexible-layout-drop-area-block-end);\r\n\r\n  left: var(--ch-flexible-layout-drop-area-inline-start);\r\n  right: var(--ch-flexible-layout-drop-area-inline-end);\r\n\r\n  background-color: color-mix(in srgb, currentColor 15%, transparent);\r\n\r\n  transition: inset 150ms ease-in-out;\r\n  pointer-events: none; // Avoid the capture of pointer events\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Listen,\r\n  Method,\r\n  Prop,\r\n  State,\r\n  forceUpdate,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  DraggableView,\r\n  DraggableViewExtendedInfo,\r\n  FlexibleLayoutModel,\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutItemExtended,\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafInfo,\r\n  FlexibleLayoutLeafType,\r\n  FlexibleLayoutViewRemoveResult,\r\n  ViewItemCloseInfo,\r\n  ViewSelectedItemInfo,\r\n  WidgetDragInfo,\r\n  WidgetReorderInfo\r\n} from \"./types\";\r\n\r\n// import { mouseEventModifierKey } from \"../../common/helpers\";\r\n\r\nimport { TabItemCloseInfo, TabSelectedItemInfo } from \"../../../tab/types\";\r\nimport { ChTabRenderCustomEvent } from \"../../../../components\";\r\nimport {\r\n  getWidgetDropInfo,\r\n  handleWidgetDrag,\r\n  removeDroppableAreaStyles\r\n} from \"./utils\";\r\nimport { getLeafInfo } from \"../../utils\";\r\nimport { isRTL, tokenMap } from \"../../../../common/utils\";\r\nimport {\r\n  CssContainProperty,\r\n  CssOverflowProperty\r\n} from \"../../../../common/types\";\r\nimport {\r\n  DEFAULT_TAB_LIST_POSITION,\r\n  isBlockDirection,\r\n  isStartDirection\r\n} from \"../../../tab/utils\";\r\nimport {\r\n  FLEXIBLE_LAYOUT_PARTS_DICTIONARY,\r\n  LAYOUT_SPLITTER_PARTS_DICTIONARY,\r\n  TAB_EXPORT_PARTS,\r\n  TAB_PARTS_DICTIONARY\r\n} from \"../../../../common/reserved-names\";\r\n\r\nconst LEAF_SELECTOR = (id: string) => `[id=\"${id}\"]`;\r\n\r\n// Keys\r\nconst ESCAPE_KEY = \"Escape\";\r\n// const KEY_B = \"KeyB\";\r\n\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"flexible-layout.scss\",\r\n  tag: \"ch-flexible-layout\"\r\n})\r\nexport class ChFlexibleLayout {\r\n  #exportParts: string;\r\n  #layoutSplitterExportParts: string;\r\n  #leafs: FlexibleLayoutLeafInfo<FlexibleLayoutLeafType>[] = [];\r\n\r\n  #draggableViews: DraggableViewExtendedInfo[];\r\n\r\n  #dragInfo: WidgetDragInfo;\r\n  #viewsOutOfDroppableZoneController: AbortController; // Allocated at runtime to reduce memory usage\r\n\r\n  // Refs\r\n  #draggedViewRef: DraggableView;\r\n  #droppableAreaRef: HTMLDivElement;\r\n  #layoutSplitterRef: HTMLChLayoutSplitterElement;\r\n\r\n  @Element() el: HTMLChFlexibleLayoutElement;\r\n\r\n  @State() dragBarDisabled = false;\r\n\r\n  /**\r\n   * `true` to display a close button for the `\"tabbed\"` type leafs.\r\n   */\r\n  @Prop() readonly closeButton: boolean = false;\r\n\r\n  /**\r\n   * Same as the contain CSS property. This property indicates that an widget\r\n   * and its contents are, as much as possible, independent from the rest of the\r\n   * document tree. Containment enables isolating a subsection of the DOM,\r\n   * providing performance benefits by limiting calculations of layout, style,\r\n   * paint, size, or any combination to a DOM subtree rather than the entire\r\n   * page.\r\n   * Containment can also be used to scope CSS counters and quotes.\r\n   */\r\n  @Prop() readonly contain: CssContainProperty = \"none\";\r\n\r\n  /**\r\n   * When the \"tabbed\" type leafs are sortable, the items can be dragged\r\n   * outside of its tab-list.\r\n   *\r\n   * This property lets you specify if this behavior is enabled.\r\n   */\r\n  @Prop() readonly dragOutside: boolean = false;\r\n\r\n  /**\r\n   * Specifies the information of each view displayed.\r\n   */\r\n  @Prop() readonly itemsInfo: Map<\r\n    string,\r\n    FlexibleLayoutItemExtended<FlexibleLayoutItemModel, FlexibleLayoutLeafType>\r\n  >;\r\n\r\n  /**\r\n   * Specifies additional parts to export.\r\n   */\r\n  @Prop() readonly layoutSplitterParts: Set<string>;\r\n\r\n  /**\r\n   * Specifies the distribution of the items in the flexible layout.\r\n   */\r\n  @Prop() readonly model: FlexibleLayoutModel;\r\n\r\n  /**\r\n   * Same as the overflow CSS property. This property sets the desired behavior\r\n   * when content does not fit in the widget's padding box (overflows) in the\r\n   * horizontal and/or vertical direction.\r\n   */\r\n  @Prop() readonly overflow:\r\n    | CssOverflowProperty\r\n    | `${CssOverflowProperty} ${CssOverflowProperty}` = \"visible\";\r\n\r\n  /**\r\n   * `true` to enable sorting the tab buttons in the `\"tabbed\"` type leafs by\r\n   * dragging them in the tab-list.\r\n   *\r\n   * If `false`, the tab buttons can not be dragged out either.\r\n   */\r\n  @Prop() readonly sortable: boolean = false;\r\n\r\n  /**\r\n   * Fired when a item of a view request to be closed.\r\n   */\r\n  @Event() viewItemClose: EventEmitter<ViewItemCloseInfo>;\r\n\r\n  /**\r\n   * Fired when the selected item change.\r\n   */\r\n  @Event() selectedViewItemChange: EventEmitter<ViewSelectedItemInfo>;\r\n\r\n  /**\r\n   * Fired when a widget is dragged and dropped into a view.\r\n   */\r\n  @Event() viewItemReorder: EventEmitter<WidgetReorderInfo>;\r\n\r\n  /**\r\n   *\r\n   */\r\n  @Method()\r\n  async addSiblingView(\r\n    parentGroup: string,\r\n    siblingItem: string,\r\n    placedInTheSibling: \"before\" | \"after\",\r\n    viewInfo: FlexibleLayoutLeafModel,\r\n    takeHalfTheSpaceOfTheSiblingItem: boolean\r\n  ): Promise<boolean> {\r\n    const result = await this.#layoutSplitterRef.addSiblingLeaf(\r\n      parentGroup,\r\n      siblingItem,\r\n      placedInTheSibling,\r\n      viewInfo,\r\n      takeHalfTheSpaceOfTheSiblingItem\r\n    );\r\n\r\n    if (result.success) {\r\n      // Queue re-renders\r\n      forceUpdate(this);\r\n    }\r\n\r\n    return result.success;\r\n  }\r\n\r\n  /**\r\n   * Schedules a new render for a leaf even if no state changed.\r\n   */\r\n  @Method()\r\n  async refreshLeaf(leafId: string) {\r\n    const leafRef = this.el.shadowRoot.querySelector(LEAF_SELECTOR(leafId));\r\n\r\n    if (!leafRef) {\r\n      return;\r\n    }\r\n\r\n    forceUpdate(leafRef);\r\n  }\r\n\r\n  /**\r\n   * Removes the view that is identified by the given ID.\r\n   * The layout is rearranged depending on the state of the removed view.\r\n   */\r\n  @Method()\r\n  async removeView(itemId: string): Promise<FlexibleLayoutViewRemoveResult> {\r\n    const result = await this.#layoutSplitterRef.removeItem(itemId);\r\n\r\n    if (result.success) {\r\n      // Queue re-renders\r\n      forceUpdate(this);\r\n    }\r\n\r\n    return {\r\n      success: result.success,\r\n      reconnectedSubtree: result.reconnectedSubtree\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Given the view ID and the item id, remove the page of the item from the view.\r\n   */\r\n  @Method()\r\n  async removeItemPageInView(\r\n    viewId: string,\r\n    itemId: string,\r\n    forceRerender = true\r\n  ) {\r\n    const viewInfo = this.#getLeafInfo(viewId);\r\n    if (!viewInfo) {\r\n      return;\r\n    }\r\n\r\n    const viewRef = this.el.shadowRoot.querySelector(\r\n      LEAF_SELECTOR(viewInfo.id)\r\n    ) as HTMLChTabRenderElement;\r\n    await viewRef.removePage(itemId, forceRerender);\r\n  }\r\n\r\n  @Listen(\"itemClose\")\r\n  handleItemClose(event: ChTabRenderCustomEvent<TabItemCloseInfo>) {\r\n    const viewRef = event.composedPath()[0] as HTMLChTabRenderElement;\r\n\r\n    if (\r\n      viewRef.tagName.toLowerCase() !== \"ch-tab-render\" ||\r\n      viewRef.getRootNode() !== this.el.shadowRoot\r\n    ) {\r\n      return;\r\n    }\r\n    event.stopPropagation();\r\n\r\n    // Add the view id to properly update the render\r\n    const eventDetail: ViewItemCloseInfo = {\r\n      ...event.detail,\r\n      viewId: viewRef.id\r\n    };\r\n\r\n    const eventInfo = this.viewItemClose.emit(eventDetail);\r\n\r\n    // Prevent the tab closing\r\n    if (eventInfo.defaultPrevented) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  #getLeafInfo = (\r\n    leafId: string\r\n  ): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> =>\r\n    getLeafInfo(this.itemsInfo, leafId);\r\n\r\n  #getAllLeafs = (): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType>[] => {\r\n    const views: FlexibleLayoutLeafInfo<FlexibleLayoutLeafType>[] = [];\r\n\r\n    this.itemsInfo.forEach(item => {\r\n      const itemView = (\r\n        item as FlexibleLayoutItemExtended<\r\n          FlexibleLayoutLeafModel,\r\n          FlexibleLayoutLeafType\r\n        >\r\n      ).leafInfo;\r\n\r\n      if (itemView != null) {\r\n        views.push(itemView);\r\n      }\r\n    });\r\n\r\n    return views;\r\n  };\r\n\r\n  // @Listen(\"keydown\", { target: \"document\" })\r\n  // handleKeyDownEvent(event: KeyboardEvent) {\r\n  // if (\r\n  //   !mouseEventModifierKey(event) ||\r\n  //   event.code !== KEY_B ||\r\n  //   this.layout.inlineStart == null\r\n  // ) {\r\n  //   return;\r\n  // }\r\n  // event.stopPropagation();\r\n  // event.preventDefault();\r\n\r\n  // this.layout.inlineStart.expanded = !(\r\n  //   this.layout.inlineStart.expanded ?? true\r\n  // );\r\n  //   forceUpdate(this);\r\n  // }\r\n\r\n  // private handleMainGroupExpand = () => {\r\n  //   // if (this.layout.inlineStart) {\r\n  //   //   this.layout.inlineStart.expanded = false;\r\n  //   // }\r\n\r\n  //   // if (this.layout.inlineEnd) {\r\n  //   //   this.layout.inlineEnd.expanded = false;\r\n  //   // }\r\n\r\n  //   // if (this.layout.blockEnd) {\r\n  //   //   this.layout.blockEnd.expanded = false;\r\n  //   // }\r\n\r\n  //   forceUpdate(this);\r\n  // };\r\n\r\n  #handleItemChange =\r\n    (viewId: string) =>\r\n    (event: ChTabRenderCustomEvent<TabSelectedItemInfo>) => {\r\n      // Check if the selected item change event comes from a tab of the\r\n      // shadowroot, instead of a tab of the light DOM (case where a view has a\r\n      // \"nested\" ch-tab-render control)\r\n      if ((event.target as HTMLElement).getRootNode() !== this.el.shadowRoot) {\r\n        return;\r\n      }\r\n\r\n      event.stopPropagation();\r\n\r\n      // Add the view id to properly update the render\r\n      const eventInfo: ViewSelectedItemInfo = {\r\n        ...event.detail,\r\n        viewId: viewId\r\n      };\r\n\r\n      this.selectedViewItemChange.emit(eventInfo);\r\n    };\r\n\r\n  #handleDragStart =\r\n    (viewId: string) => async (event: ChTabRenderCustomEvent<number>) => {\r\n      event.stopPropagation();\r\n\r\n      // We MUST store the reference before the Promise.allSettle, otherwise\r\n      // the event target will be the flexible-layout control\r\n      this.#draggedViewRef = event.target;\r\n\r\n      const views = [...this.el.shadowRoot.querySelectorAll(\"ch-tab-render\")];\r\n\r\n      this.#dragInfo = {\r\n        index: event.detail,\r\n        viewId: viewId\r\n      };\r\n\r\n      // Get all draggable views\r\n      const draggableViewsResult = await Promise.allSettled(\r\n        views.map(view => view.getDraggableViews())\r\n      );\r\n\r\n      // Allocate memory\r\n      this.#draggableViews = [];\r\n\r\n      // Add handlers to manage droppable areas\r\n      draggableViewsResult.forEach((draggableViewResult, index) => {\r\n        if (draggableViewResult.status === \"fulfilled\") {\r\n          const draggableView = draggableViewResult.value;\r\n          const abortController = new AbortController(); // Necessary to remove the event listener\r\n\r\n          const extendedDraggableView = {\r\n            ...draggableView,\r\n            viewId: views[index].id, // All views have an id in the DOM\r\n            abortController: abortController\r\n          };\r\n\r\n          this.#draggableViews.push(extendedDraggableView);\r\n\r\n          const RTL = isRTL();\r\n\r\n          draggableView.mainView.addEventListener(\r\n            \"mousemove\",\r\n            handleWidgetDrag(\r\n              extendedDraggableView,\r\n              this.#droppableAreaRef,\r\n              RTL\r\n            ),\r\n            { capture: true, passive: true, signal: abortController.signal }\r\n          );\r\n\r\n          // Remove pointer events to not interfere on the mousemove event\r\n          extendedDraggableView.tabListView.style.pointerEvents = \"none\";\r\n          extendedDraggableView.pageView.style.pointerEvents = \"none\";\r\n        }\r\n      });\r\n\r\n      document.addEventListener(\"mouseup\", this.#handleWidgetDragEnd, {\r\n        passive: true\r\n      });\r\n      document.addEventListener(\"keydown\", this.#handleWidgetDragEndKeydown, {\r\n        passive: true\r\n      });\r\n\r\n      // Removes view when they are out of a droppable area\r\n      this.#viewsOutOfDroppableZoneController = new AbortController();\r\n      document.addEventListener(\r\n        \"mousemove\",\r\n        () => removeDroppableAreaStyles(this.#droppableAreaRef),\r\n        {\r\n          passive: true,\r\n          signal: this.#viewsOutOfDroppableZoneController.signal\r\n        }\r\n      );\r\n\r\n      // Show droppable area\r\n      this.#droppableAreaRef.showPopover(); // Layer 1\r\n\r\n      // After that, promote the drag preview to the second layer\r\n      this.#draggedViewRef.promoteDragPreviewToTopLayer(); // Layer 2\r\n\r\n      // Disable drag bars in layout-splitter to improve the drag experience\r\n      this.dragBarDisabled = true;\r\n    };\r\n\r\n  #handleWidgetDragEndKeydown = (event: KeyboardEvent) => {\r\n    if (event.code !== ESCAPE_KEY) {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n\r\n    // Cancels the drop by removing the drop info\r\n    removeDroppableAreaStyles(this.#droppableAreaRef);\r\n\r\n    this.#handleWidgetDragEnd();\r\n    this.#draggedViewRef.endDragPreview();\r\n  };\r\n\r\n  #handleWidgetDragEnd = () => {\r\n    // Remove mousemove handlers\r\n    this.#draggableViews.forEach(draggableView => {\r\n      draggableView.abortController.abort();\r\n\r\n      // Reset pointer events\r\n      draggableView.tabListView.style.pointerEvents = null;\r\n      draggableView.pageView.style.pointerEvents = null;\r\n    });\r\n\r\n    // Remove mouseup and keydown handlers\r\n    document.removeEventListener(\"mouseup\", this.#handleWidgetDragEnd);\r\n    document.removeEventListener(\"keydown\", this.#handleWidgetDragEndKeydown);\r\n    this.#viewsOutOfDroppableZoneController.abort();\r\n\r\n    // Check if must update the view due to a drop\r\n    const dropInfo = getWidgetDropInfo();\r\n\r\n    if (dropInfo) {\r\n      this.viewItemReorder.emit({ ...this.#dragInfo, ...dropInfo });\r\n    }\r\n\r\n    // Hide droppable area\r\n    this.#droppableAreaRef.hidePopover();\r\n    removeDroppableAreaStyles(this.#droppableAreaRef);\r\n\r\n    // Free the memory\r\n    this.#draggableViews = undefined;\r\n    this.#dragInfo = undefined;\r\n\r\n    // Re-enable drag bars\r\n    this.dragBarDisabled = false;\r\n  };\r\n\r\n  #computePartsToExport = () => {\r\n    const exportPartsSet = new Set<string>([\r\n      ...Object.values(TAB_PARTS_DICTIONARY)\r\n    ]);\r\n    exportPartsSet.add(FLEXIBLE_LAYOUT_PARTS_DICTIONARY.DROPPABLE_AREA);\r\n    exportPartsSet.add(FLEXIBLE_LAYOUT_PARTS_DICTIONARY.LEAF);\r\n    exportPartsSet.add(LAYOUT_SPLITTER_PARTS_DICTIONARY.BAR);\r\n\r\n    // TODO: Test items that have a part with spaces\r\n    this.layoutSplitterParts.forEach(part => exportPartsSet.add(part));\r\n\r\n    // TODO: Revisit this algorithm to simplify definition of exportparts\r\n    this.#leafs.forEach(leaf => {\r\n      if (leaf.type === \"tabbed\") {\r\n        exportPartsSet.add(leaf.id);\r\n        exportPartsSet.add(leaf.tabListPosition ?? DEFAULT_TAB_LIST_POSITION);\r\n        leaf.widgets.forEach(({ id }) => exportPartsSet.add(id));\r\n      }\r\n    });\r\n\r\n    this.#exportParts = [...exportPartsSet.keys()].join(\",\");\r\n\r\n    this.#layoutSplitterExportParts = [\r\n      ...this.layoutSplitterParts.keys(),\r\n      LAYOUT_SPLITTER_PARTS_DICTIONARY.BAR\r\n    ].join(\",\");\r\n  };\r\n\r\n  #renderTab = (viewInfo: FlexibleLayoutLeafInfo<\"tabbed\">) => {\r\n    const dragOutsideEnabled = viewInfo.dragOutside ?? this.dragOutside;\r\n    const sortableEnabled = viewInfo.sortable ?? this.sortable;\r\n    const tabListPosition =\r\n      viewInfo.tabListPosition ?? DEFAULT_TAB_LIST_POSITION;\r\n\r\n    const blockDirection = isBlockDirection(tabListPosition);\r\n    const startDirection = isStartDirection(tabListPosition);\r\n\r\n    return (\r\n      <ch-tab-render\r\n        id={viewInfo.id}\r\n        key={viewInfo.id}\r\n        slot={viewInfo.id}\r\n        contain={this.contain}\r\n        // TODO: Add hostParts property in the ch-tab-render\r\n        part={tokenMap({\r\n          [viewInfo.id]: true,\r\n          [FLEXIBLE_LAYOUT_PARTS_DICTIONARY.LEAF]: true,\r\n          [tabListPosition]: true,\r\n          [TAB_PARTS_DICTIONARY.BLOCK]: blockDirection,\r\n          [TAB_PARTS_DICTIONARY.INLINE]: !blockDirection,\r\n          [TAB_PARTS_DICTIONARY.START]: startDirection,\r\n          [TAB_PARTS_DICTIONARY.END]: !startDirection\r\n        })}\r\n        // TODO: Find a better way to avoid this mapping on every render\r\n        exportparts={`${TAB_EXPORT_PARTS},${tabListPosition},${viewInfo.widgets\r\n          .map(({ id }) => id)\r\n          .join(\",\")}`}\r\n        closeButton={viewInfo.closeButton ?? this.closeButton}\r\n        disabled={viewInfo.disabled}\r\n        dragOutside={dragOutsideEnabled}\r\n        model={viewInfo.widgets}\r\n        overflow={this.overflow}\r\n        selectedId={viewInfo.selectedWidgetId}\r\n        showCaptions={viewInfo.showCaptions}\r\n        sortable={sortableEnabled}\r\n        tabButtonHidden={viewInfo.tabButtonHidden}\r\n        tabListPosition={tabListPosition}\r\n        // onExpandMainGroup={tabType === \"main\" ? this.handleMainGroupExpand : null}\r\n        onItemDragStart={\r\n          dragOutsideEnabled && sortableEnabled\r\n            ? this.#handleDragStart(viewInfo.id)\r\n            : undefined\r\n        }\r\n        onSelectedItemChange={this.#handleItemChange(viewInfo.id)}\r\n      >\r\n        {viewInfo.widgets.map(\r\n          widget =>\r\n            widget.wasRendered && <slot name={widget.id} slot={widget.id} />\r\n        )}\r\n      </ch-tab-render>\r\n    );\r\n  };\r\n\r\n  #renderView = <T extends FlexibleLayoutLeafType>(\r\n    leaf: FlexibleLayoutLeafInfo<T>\r\n  ) =>\r\n    leaf.type === \"single-content\" ? (\r\n      <slot key={leaf.id} slot={leaf.id} name={leaf.id} />\r\n    ) : (\r\n      this.#renderTab(leaf)\r\n    );\r\n\r\n  componentWillRender() {\r\n    this.#leafs = this.#getAllLeafs();\r\n\r\n    // TODO: Find a better life cycle to run this?\r\n    this.#computePartsToExport();\r\n  }\r\n\r\n  render() {\r\n    const layoutModel = this.model;\r\n\r\n    if (layoutModel == null) {\r\n      return \"\";\r\n    }\r\n\r\n    return (\r\n      <Host exportparts={this.#exportParts}>\r\n        <ch-layout-splitter\r\n          dragBarDisabled={this.dragBarDisabled}\r\n          model={layoutModel}\r\n          exportparts={this.#layoutSplitterExportParts}\r\n          ref={el => (this.#layoutSplitterRef = el)}\r\n        >\r\n          {this.#leafs.map(this.#renderView)}\r\n        </ch-layout-splitter>\r\n\r\n        <div\r\n          aria-hidden=\"true\"\r\n          class=\"droppable-area\"\r\n          part={FLEXIBLE_LAYOUT_PARTS_DICTIONARY.DROPPABLE_AREA}\r\n          popover=\"manual\"\r\n          ref={el => (this.#droppableAreaRef = el)}\r\n        ></div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n",":host,\r\n.ch-flexible-layout-render-slot {\r\n  display: contents;\r\n}\r\n","import {\r\n  Component,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Method,\r\n  Prop,\r\n  Watch,\r\n  forceUpdate,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  FlexibleLayoutModel,\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutItemExtended,\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutRenders,\r\n  FlexibleLayoutLeafInfo,\r\n  ViewItemCloseInfo,\r\n  ViewSelectedItemInfo,\r\n  WidgetReorderInfo,\r\n  FlexibleLayoutViewRemoveResult,\r\n  FlexibleLayoutGroupModel,\r\n  DroppableArea,\r\n  FlexibleLayoutWidget,\r\n  FlexibleLayoutLeafType,\r\n  FlexibleLayoutWidgetExtended,\r\n  FlexibleLayoutWidgetCloseInfo,\r\n  FlexibleLayoutLeafConfigurationTabbed,\r\n  FlexibleLayoutRenderedWidgets\r\n} from \"./internal/flexible-layout/types\";\r\nimport { ChFlexibleLayoutCustomEvent } from \"../../components\";\r\nimport { removeElement } from \"../../common/array\";\r\nimport { addNewLeafToInfo, getLeafInfo, updateFlexibleModels } from \"./utils\";\r\nimport { CssContainProperty, CssOverflowProperty } from \"../../common/types\";\r\nimport { ThemeModel } from \"../theme/theme-types\";\r\n\r\n// Aliases\r\ntype ItemExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutItemModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype LeafExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutLeafModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\ntype GroupExtended = FlexibleLayoutItemExtended<\r\n  FlexibleLayoutGroupModel,\r\n  FlexibleLayoutLeafType\r\n>;\r\n\r\nconst GENERATE_GUID = () => {\r\n  let currentDate = new Date().getTime();\r\n\r\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\r\n    let randomNumber = Math.random() * 16; // random number in range 0 to 16\r\n    randomNumber = (currentDate + randomNumber) % 16 | 0;\r\n    currentDate = Math.floor(currentDate / 16);\r\n\r\n    return (c === \"x\" ? randomNumber : (randomNumber & 0x3) | 0x8).toString(16);\r\n  });\r\n};\r\n\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"flexible-layout-render.scss\",\r\n  tag: \"ch-flexible-layout-render\"\r\n})\r\nexport class ChFlexibleLayoutRender {\r\n  /**\r\n   * This Set provides optimizations to not render items that were never\r\n   * shown on the screen.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #renderedWidgets: Set<string> = new Set();\r\n  #lastRenderedWidgets = new Set();\r\n\r\n  #widgetsInfo: Map<string, FlexibleLayoutWidgetExtended> = new Map();\r\n\r\n  #itemsInfo: Map<string, ItemExtended> = new Map();\r\n\r\n  #layoutSplitterParts: Set<string> = new Set();\r\n\r\n  // Refs\r\n  #flexibleLayoutRef: HTMLChFlexibleLayoutElement;\r\n\r\n  /**\r\n   * `true` to display a close button for the `\"tabbed\"` type leafs.\r\n   */\r\n  @Prop() readonly closeButton: boolean = false;\r\n\r\n  /**\r\n   * Same as the contain CSS property. This property indicates that an widget\r\n   * and its contents are, as much as possible, independent from the rest of the\r\n   * document tree. Containment enables isolating a subsection of the DOM,\r\n   * providing performance benefits by limiting calculations of layout, style,\r\n   * paint, size, or any combination to a DOM subtree rather than the entire\r\n   * page.\r\n   * Containment can also be used to scope CSS counters and quotes.\r\n   */\r\n  @Prop() readonly contain: CssContainProperty = \"none\";\r\n\r\n  /**\r\n   * When the \"tabbed\" type leafs are sortable, the items can be dragged\r\n   * outside of its tab-list.\r\n   *\r\n   * This property lets you specify if this behavior is enabled.\r\n   */\r\n  @Prop() readonly dragOutside: boolean = false;\r\n\r\n  /**\r\n   * Specifies the distribution of the items in the flexible layout.\r\n   */\r\n  @Prop() readonly model: FlexibleLayoutModel;\r\n  @Watch(\"model\")\r\n  modelChanged(newModel: FlexibleLayoutModel) {\r\n    this.#updateFlexibleModels(newModel);\r\n  }\r\n\r\n  /**\r\n   * Same as the overflow CSS property. This property sets the desired behavior\r\n   * when content does not fit in the widget's padding box (overflows) in the\r\n   * horizontal and/or vertical direction.\r\n   */\r\n  @Prop() readonly overflow:\r\n    | CssOverflowProperty\r\n    | `${CssOverflowProperty} ${CssOverflowProperty}` = \"visible\";\r\n\r\n  /**\r\n   * Specifies the distribution of the items in the flexible layout.\r\n   */\r\n  @Prop() readonly renders: FlexibleLayoutRenders;\r\n\r\n  /**\r\n   * `true` to enable sorting the tab buttons in the `\"tabbed\"` type leafs by\r\n   * dragging them in the tab-list.\r\n   *\r\n   * If `false`, the tab buttons can not be dragged out either.\r\n   */\r\n  @Prop() readonly sortable: boolean = false;\r\n\r\n  /**\r\n   * Specifies whether widgets are rendered outside of the\r\n   * ch-flexible-layout-render by default by projecting a slot.\r\n   */\r\n  @Prop() readonly slottedWidgets: boolean = false;\r\n\r\n  /**\r\n   * Specifies the theme to be used for rendering the control.\r\n   * If `undefined`, no theme will be applied.\r\n   */\r\n  @Prop() readonly theme: ThemeModel | undefined;\r\n\r\n  /**\r\n   * Emitted when the user pressed the close button in a widget.\r\n   */\r\n  @Event() widgetClose: EventEmitter<FlexibleLayoutWidgetCloseInfo>;\r\n\r\n  /**\r\n   * Emitted every time the rendered widgets changes. It contains the detail\r\n   * of which widgets are rendered inside the `ch-flexible-layout-render`\r\n   * (`rendered` member) and those widgets that are rendered in an slot\r\n   * (`slotted` member).\r\n   */\r\n  @Event() renderedWidgetsChange: EventEmitter<FlexibleLayoutRenderedWidgets>;\r\n\r\n  /**\r\n   * Add a view with widgets to render. The view will take the half space of\r\n   * the sibling view that its added with.\r\n   */\r\n  @Method()\r\n  async addSiblingView(\r\n    parentGroup: string,\r\n    siblingItem: string,\r\n    placedInTheSibling: \"before\" | \"after\",\r\n    viewInfo: FlexibleLayoutLeafModel,\r\n    takeHalfTheSpaceOfTheSiblingItem: boolean\r\n  ): Promise<boolean> {\r\n    const success = await this.#flexibleLayoutRef.addSiblingView(\r\n      parentGroup,\r\n      siblingItem,\r\n      placedInTheSibling,\r\n      viewInfo,\r\n      takeHalfTheSpaceOfTheSiblingItem\r\n    );\r\n\r\n    if (!success) {\r\n      return false;\r\n    }\r\n\r\n    addNewLeafToInfo(\r\n      viewInfo,\r\n      this.#itemsInfo.get(parentGroup).item as FlexibleLayoutGroupModel,\r\n      this.#itemsInfo,\r\n      this.#renderedWidgets,\r\n      this.#widgetsInfo\r\n    );\r\n\r\n    // Queue re-render\r\n    forceUpdate(this);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Add a widget in a `\"tabbed\"` type leaf.\r\n   * Only works if the parent leaf is `\"tabbed\"` type.\r\n   * If a widget with the same ID already exists, this method has not effect.\r\n   *\r\n   * To add a widget in a `\"single-content\"` type leaf, use the\r\n   * `addSiblingView` method.\r\n   */\r\n  @Method()\r\n  async addWidget(\r\n    leafId: string,\r\n    widget: FlexibleLayoutWidget,\r\n    selectWidget = true\r\n  ) {\r\n    const leafUIModel = this.#itemsInfo.get(leafId) as LeafExtended;\r\n\r\n    if (\r\n      !leafUIModel ||\r\n      leafUIModel.leafInfo == null ||\r\n      leafUIModel.leafInfo.type === \"single-content\" ||\r\n      this.#widgetsInfo.has(widget.id)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    leafUIModel.leafInfo.widgets.push(widget);\r\n    this.#widgetsInfo.set(widget.id, { parentLeafId: leafId, info: widget });\r\n\r\n    if (selectWidget) {\r\n      this.#updateSelectedWidget(leafUIModel.leafInfo, widget);\r\n\r\n      // Queue re-renders\r\n      forceUpdate(this);\r\n      forceUpdate(this.#flexibleLayoutRef);\r\n    } else {\r\n      // Queue re-render for the specific leaf\r\n      this.#flexibleLayoutRef.refreshLeaf(leafId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a view and optionally all its rendered widget from the render.\r\n   * The reserved space will be given to the closest view.\r\n   */\r\n  @Method()\r\n  async removeView(\r\n    leafId: string,\r\n    removeRenderedWidgets: boolean\r\n  ): Promise<FlexibleLayoutViewRemoveResult> {\r\n    const itemInfo = this.#itemsInfo.get(leafId);\r\n\r\n    // The leaf didn't exist\r\n    if (!itemInfo) {\r\n      return { success: false, reconnectedSubtree: undefined };\r\n    }\r\n    const leafInfoToRemove = (itemInfo as LeafExtended).leafInfo;\r\n\r\n    // The item is not a leaf (it's a group) or is not \"tabbed\".\r\n    if (\r\n      leafInfoToRemove == null ||\r\n      leafInfoToRemove.type === \"single-content\"\r\n    ) {\r\n      return { success: false, reconnectedSubtree: undefined };\r\n    }\r\n\r\n    const result = await this.#flexibleLayoutRef.removeView(leafId);\r\n\r\n    if (!result.success) {\r\n      return result;\r\n    }\r\n\r\n    // Update view info, since it got renamed\r\n    const reconnectedSubtree = result.reconnectedSubtree;\r\n\r\n    if (reconnectedSubtree) {\r\n      // - - - - - - - - - - - - - - - - - - - - - - - - -\r\n      // INPUT MODEL:\r\n      //                       secondParentItem\r\n      //                              / \\\r\n      //                           /       \\\r\n      //                        /             \\\r\n      //        (Id x) nodeToReconnect  Other items...\r\n      //                       / \\\r\n      //                    /       \\\r\n      //                 /             \\\r\n      // (Id y) leafInfoToRemove  (Id z) nodeToRemove\r\n      //                                     / \\\r\n      //                                  /       \\\r\n      //                              subtree or widgets\r\n      //\r\n      //\r\n      // OUTPUT MODEL:\r\n      //                  secondParentItem\r\n      //                         / \\\r\n      //                      /       \\\r\n      //                   /             \\\r\n      //    (Id x) nodeToReconnect  Other items...\r\n      //                / \\\r\n      //             /       \\\r\n      //         subtree or widgets\r\n      // - - - - - - - - - - - - - - - - - - - - - - - - -\r\n\r\n      const nodeToRemoveUIModel = this.#itemsInfo.get(\r\n        reconnectedSubtree.nodeToRemove\r\n      );\r\n\r\n      // The node to reconnect is still a group (since the nodeToRemove is a group).\r\n      // We must reconnect the nodeToRemove's children\r\n      if ((nodeToRemoveUIModel as LeafExtended).leafInfo == null) {\r\n        const itemsOfNodeToRemove = (nodeToRemoveUIModel as GroupExtended).item\r\n          .items;\r\n\r\n        const nodeToReconnectUIModel = this.#itemsInfo.get(\r\n          reconnectedSubtree.nodeToReconnect\r\n        ) as GroupExtended;\r\n\r\n        // Reconnect the parent of the removedNode subtree\r\n        itemsOfNodeToRemove.forEach(itemToUpdateItsParent => {\r\n          this.#itemsInfo.get(itemToUpdateItsParent.id).parentItem =\r\n            nodeToReconnectUIModel.item;\r\n        });\r\n      }\r\n      // The node to reconnect is a leaf, since the nodeToRemove is a leaf\r\n      else {\r\n        const nodeToReconnectUIModel = this.#itemsInfo.get(\r\n          reconnectedSubtree.nodeToReconnect\r\n        ) as LeafExtended;\r\n\r\n        // Add leaf information\r\n        nodeToReconnectUIModel.leafInfo = (\r\n          nodeToRemoveUIModel as LeafExtended\r\n        ).leafInfo;\r\n        const nodeToReconnectLeafInfo = nodeToReconnectUIModel.leafInfo;\r\n\r\n        // Update leaf id\r\n        nodeToReconnectLeafInfo.id = reconnectedSubtree.nodeToReconnect;\r\n\r\n        const widgetsToUpdateParentLeafId: FlexibleLayoutWidget[] =\r\n          nodeToReconnectLeafInfo.type === \"single-content\"\r\n            ? [nodeToReconnectLeafInfo.widget]\r\n            : nodeToReconnectLeafInfo.widgets;\r\n\r\n        // Update the parent leaf id in the reconnected widgets\r\n        widgetsToUpdateParentLeafId.forEach(widget => {\r\n          const widgetUIModel = this.#widgetsInfo.get(widget.id);\r\n          widgetUIModel.parentLeafId = nodeToReconnectLeafInfo.id;\r\n        });\r\n      }\r\n\r\n      // Delete the old item\r\n      this.#itemsInfo.delete(reconnectedSubtree.nodeToRemove);\r\n    }\r\n\r\n    // Remove rendered widgets\r\n    if (removeRenderedWidgets) {\r\n      leafInfoToRemove.widgets.forEach(this.#deleteRenderedWidget);\r\n    }\r\n\r\n    // Delete the view\r\n    this.#itemsInfo.delete(leafId);\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Remove a widget from a `\"tabbed\"` type leaf.\r\n   * Only works if the parent leaf is `\"tabbed\"` type.\r\n   *\r\n   * To remove a widget from a `\"single-content\"` type leaf, use the\r\n   * `removeView` method.\r\n   */\r\n  @Method()\r\n  async removeWidget(widgetId: string) {\r\n    const widgetUIModel = this.#widgetsInfo.get(widgetId);\r\n\r\n    if (!widgetUIModel) {\r\n      return;\r\n    }\r\n    const leafInfo = this.#getLeafInfo(widgetUIModel.parentLeafId);\r\n\r\n    if (leafInfo.type === \"single-content\") {\r\n      return;\r\n    }\r\n\r\n    this.#checkViewStateToRemoveWidget(\r\n      leafInfo,\r\n      widgetUIModel.info,\r\n      leafInfo.widgets.findIndex(widget => widget.id === widgetId) // Find the index of the widget\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update the selected widget from a `\"tabbed\"` type leaf.\r\n   * Only works if the parent leaf is `\"tabbed\"` type.\r\n   */\r\n  @Method()\r\n  async updateSelectedWidget(\r\n    parentLeafId: string,\r\n    newSelectedWidgetId: string\r\n  ) {\r\n    const widgetUIModel = this.#widgetsInfo.get(newSelectedWidgetId);\r\n\r\n    if (!widgetUIModel || widgetUIModel.parentLeafId !== parentLeafId) {\r\n      return;\r\n    }\r\n    const parentLeafInfo = this.#getLeafInfo(widgetUIModel.parentLeafId);\r\n\r\n    if (\r\n      parentLeafInfo.type === \"single-content\" ||\r\n      parentLeafInfo.selectedWidgetId === newSelectedWidgetId\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Select the new item\r\n    this.#updateSelectedWidget(parentLeafInfo, widgetUIModel.info);\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    forceUpdate(this.#flexibleLayoutRef);\r\n  }\r\n\r\n  /**\r\n   * Given the viewId, it updates the info of the view if the view is a leaf.\r\n   * The `type` of the properties argument must match the `type` of the view to\r\n   * update.\r\n   */\r\n  @Method()\r\n  async updateViewInfo(\r\n    viewId: string,\r\n    // TODO: Add support to update sticky at runtime\r\n    properties: Partial<\r\n      Omit<\r\n        FlexibleLayoutLeafConfigurationTabbed,\r\n        \"selectedWidgetId\" | \"widget\" | \"widgets\"\r\n      >\r\n    >\r\n  ) {\r\n    const viewUIModel = this.#itemsInfo.get(viewId) as LeafExtended;\r\n\r\n    if (\r\n      !viewUIModel ||\r\n      !viewUIModel.leafInfo ||\r\n      viewUIModel.item.type !== properties.type\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    for (const key in properties) {\r\n      // TODO: Avoid property duplication. Share the memory between the\r\n      // `leafInfo` member and the `item` member\r\n      viewUIModel.item[key] = properties[key];\r\n      viewUIModel.leafInfo[key] = properties[key];\r\n    }\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    this.#flexibleLayoutRef.refreshLeaf(viewUIModel.item.id);\r\n  }\r\n\r\n  /**\r\n   * Update the widget info.\r\n   */\r\n  @Method()\r\n  async updateWidgetInfo(\r\n    widgetId: string,\r\n    properties: Partial<Omit<FlexibleLayoutWidget, \"id\" | \"wasRendered\">>\r\n  ) {\r\n    const widgetUIModel = this.#widgetsInfo.get(widgetId);\r\n\r\n    if (!widgetUIModel) {\r\n      return;\r\n    }\r\n    const widgetInfo = widgetUIModel.info;\r\n\r\n    Object.entries(properties).forEach(([key, value]) => {\r\n      widgetInfo[key] = value;\r\n    });\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    this.#flexibleLayoutRef.refreshLeaf(widgetUIModel.parentLeafId);\r\n  }\r\n\r\n  #updateFlexibleModels = (layout: FlexibleLayoutModel) => {\r\n    // Partially delete the previous state\r\n    this.#itemsInfo.clear();\r\n    this.#widgetsInfo.clear();\r\n\r\n    // Empty layout\r\n    if (layout == null) {\r\n      this.#renderedWidgets.clear();\r\n      return;\r\n    }\r\n\r\n    this.#layoutSplitterParts.clear();\r\n    const newRenderedWidgets: Set<string> = new Set(); // Temporal Set to store the new rendered widgets\r\n\r\n    updateFlexibleModels(\r\n      layout,\r\n      this.#itemsInfo,\r\n      this.#layoutSplitterParts,\r\n      newRenderedWidgets,\r\n      this.#widgetsInfo\r\n    );\r\n\r\n    // Add the previous rendered widgets if they are still in the new layout\r\n    this.#widgetsInfo.forEach(widget => {\r\n      if (this.#renderedWidgets.has(widget.info.id)) {\r\n        newRenderedWidgets.add(widget.info.id);\r\n      }\r\n    });\r\n\r\n    this.#renderedWidgets = newRenderedWidgets;\r\n  };\r\n\r\n  #getLeafInfo = (\r\n    leafId: string\r\n  ): FlexibleLayoutLeafInfo<FlexibleLayoutLeafType> =>\r\n    getLeafInfo(this.#itemsInfo, leafId);\r\n\r\n  #handleLeafSelectedWidgetChange = (\r\n    event: ChFlexibleLayoutCustomEvent<ViewSelectedItemInfo>\r\n  ) => {\r\n    event.stopPropagation();\r\n\r\n    const selectedItemInfo = event.detail;\r\n    const leafInfo = this.#getLeafInfo(\r\n      selectedItemInfo.viewId\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n\r\n    // Mark the item as rendered\r\n    const newSelectedItem = leafInfo.widgets[selectedItemInfo.newSelectedIndex];\r\n\r\n    // Select the new item\r\n    this.#updateSelectedWidget(leafInfo, newSelectedItem);\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    forceUpdate(this.#flexibleLayoutRef);\r\n  };\r\n\r\n  #handleLeafWidgetClose = (\r\n    event: ChFlexibleLayoutCustomEvent<ViewItemCloseInfo>\r\n  ) => {\r\n    event.stopPropagation();\r\n    const itemCloseInfo = event.detail;\r\n\r\n    const eventInfo = this.widgetClose.emit({\r\n      widgetId: itemCloseInfo.itemId,\r\n      viewId: itemCloseInfo.viewId\r\n    });\r\n\r\n    if (eventInfo.defaultPrevented) {\r\n      event.preventDefault();\r\n      return;\r\n    }\r\n\r\n    const viewInfo = this.#getLeafInfo(\r\n      itemCloseInfo.viewId\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n\r\n    const widgetIndex = itemCloseInfo.itemIndex;\r\n    const widgetInfo = viewInfo.widgets[widgetIndex];\r\n\r\n    this.#checkViewStateToRemoveWidget(viewInfo, widgetInfo, widgetIndex);\r\n  };\r\n\r\n  #checkViewStateToRemoveWidget = (\r\n    viewInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    widgetInfo: FlexibleLayoutWidget,\r\n    widgetIndex: number\r\n  ) => {\r\n    // Last item from the view. Destroy the view and adjust the layout\r\n    if (viewInfo.widgets.length === 1) {\r\n      this.removeView(viewInfo.id, true);\r\n      return;\r\n    }\r\n\r\n    const viewWidgets = viewInfo.widgets;\r\n    const widgetsCount = viewInfo.widgets.length;\r\n\r\n    // If the item was selected, select another item\r\n    if (widgetInfo.id === viewInfo.selectedWidgetId) {\r\n      const newSelectedItem =\r\n        widgetIndex === widgetsCount - 1 // If it's the last item\r\n          ? viewWidgets[widgetsCount - 2] // Select the previous\r\n          : viewWidgets[widgetIndex + 1]; // Otherwise, select the next\r\n\r\n      // Mark the item as selected and rendered\r\n      this.#updateSelectedWidget(viewInfo, newSelectedItem);\r\n    }\r\n\r\n    this.#removeWidget(viewInfo, widgetIndex);\r\n\r\n    // Queue re-renders\r\n    forceUpdate(this);\r\n    forceUpdate(this.#flexibleLayoutRef);\r\n  };\r\n\r\n  /**\r\n   * @param skipRenderRemoval Useful to determine if the render of the widget must not be destroyed.\r\n   * Used when the widget of the leaf must be reconnected in another parent\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #removeWidget = (\r\n    leafInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    itemIndex: number,\r\n    skipRenderRemoval = false\r\n  ) => {\r\n    // Remove the item from the view\r\n    const widgetInfo = removeElement(leafInfo.widgets, itemIndex);\r\n    this.#flexibleLayoutRef.removeItemPageInView(leafInfo.id, widgetInfo.id);\r\n\r\n    // Remove the item from the flexible-layout-render to optimize resources\r\n    if (!skipRenderRemoval) {\r\n      this.#deleteRenderedWidget(widgetInfo);\r\n    }\r\n  };\r\n\r\n  #deleteRenderedWidget = (widgetInfo: FlexibleLayoutWidget) => {\r\n    if (widgetInfo.conserveRenderState === true) {\r\n      return;\r\n    }\r\n\r\n    // Remove the item from the ch-flexible-layout-render to optimize resources\r\n    this.#renderedWidgets.delete(widgetInfo.id);\r\n    this.#widgetsInfo.delete(widgetInfo.id);\r\n  };\r\n\r\n  #updateSelectedWidget = (\r\n    leafInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    widget: FlexibleLayoutWidget\r\n  ) => {\r\n    // Mark the item as rendered\r\n    this.#renderedWidgets.add(widget.id);\r\n\r\n    // Mark the item as rendered\r\n    widget.wasRendered = true;\r\n\r\n    const leafUIModel = this.#itemsInfo.get(leafInfo.id)\r\n      .item as FlexibleLayoutLeafConfigurationTabbed;\r\n\r\n    // TODO: This is a WA to fix the selectedWidgetId update. The leafInfo\r\n    // member should share memory with the leaf to avoid these issues\r\n    leafUIModel.selectedWidgetId = widget.id;\r\n\r\n    leafInfo.selectedWidgetId = widget.id;\r\n  };\r\n\r\n  /**\r\n   * This handler can only be triggered by \"tabbed\" leafs.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #handleLeafWidgetReorder = async (\r\n    event: ChFlexibleLayoutCustomEvent<WidgetReorderInfo>\r\n  ) => {\r\n    const reorderInfo = event.detail;\r\n    const leafId = reorderInfo.viewId;\r\n    const leafIdTarget = reorderInfo.viewIdTarget;\r\n    const dropAreaTarget = reorderInfo.dropAreaTarget;\r\n\r\n    const leafInfo = this.#getLeafInfo(\r\n      leafId\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n\r\n    // Dropping in the same view. Nothing to change\r\n    if (\r\n      leafId === leafIdTarget &&\r\n      (dropAreaTarget === \"center\" || leafInfo.widgets.length === 1)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const leafTargetInfo = this.#getLeafInfo(\r\n      leafIdTarget\r\n    ) as FlexibleLayoutLeafInfo<\"tabbed\">;\r\n    const widgetIndex = reorderInfo.index;\r\n    const widgetToMove = leafInfo.widgets[widgetIndex];\r\n\r\n    // Update parent leaf id in the widget to move\r\n    this.#widgetsInfo.get(widgetToMove.id).parentLeafId = leafIdTarget;\r\n\r\n    // Mark the item as rendered, because the drag does not have to trigger item\r\n    // selection (which trigger item rendering)\r\n    this.#renderedWidgets.add(widgetToMove.id);\r\n    widgetToMove.wasRendered = true;\r\n\r\n    // The drop does not create a new view\r\n    if (dropAreaTarget === \"center\") {\r\n      leafTargetInfo.widgets.push(widgetToMove);\r\n\r\n      // Update the selected widget in the target view\r\n      this.#updateSelectedWidget(leafTargetInfo, widgetToMove);\r\n    } else {\r\n      await this.#handleViewItemReorderCreateView(\r\n        widgetToMove,\r\n        leafTargetInfo,\r\n        dropAreaTarget\r\n      );\r\n    }\r\n\r\n    // Remove the view, since it has no more items, but don't destroy the\r\n    // render of the widget, since the widget is only moved\r\n    if (leafInfo.widgets.length === 1) {\r\n      await this.removeView(leafId, false);\r\n\r\n      // Refresh reference to force re-render\r\n      // this.#layoutSplitterModels = { ...this.#layoutSplitterModels }; // TODO: UPDATE THIS\r\n    }\r\n    // Remove the item in the view that belongs\r\n    else {\r\n      // Select the previous item if the removed item was selected\r\n      if (leafInfo.selectedWidgetId === widgetToMove.id) {\r\n        const newSelectedIndex = widgetIndex === 0 ? 1 : widgetIndex - 1;\r\n        const newSelectedItem = leafInfo.widgets[newSelectedIndex];\r\n\r\n        // Mark the item as selected and rendered\r\n        this.#updateSelectedWidget(leafInfo, newSelectedItem);\r\n      }\r\n\r\n      // Remove the item from the view\r\n      this.#removeWidget(leafInfo, widgetIndex, true);\r\n\r\n      // Queue re-renders\r\n      forceUpdate(this); // Update rendered items\r\n      // forceUpdate(this.#flexibleLayoutRef);\r\n    }\r\n\r\n    // this.#flexibleLayoutRef.refreshLayout();\r\n  };\r\n\r\n  #handleViewItemReorderCreateView = async (\r\n    widget: FlexibleLayoutWidget,\r\n    viewTargetInfo: FlexibleLayoutLeafInfo<\"tabbed\">,\r\n    dropAreaTarget: DroppableArea\r\n  ) => {\r\n    // Implementation note: If the direction matches the dropAreaTarget\r\n    // (for example, dropAreaTarget === \"block-start\" and parent direction === \"row\")\r\n    // we can use addSiblingView\r\n\r\n    // const viewUIModel = this.#itemsInfo.get(\r\n    //   viewId\r\n    // ) as FlexibleLayoutItemExtended<FlexibleLayoutLeaf>;\r\n    const viewTargetUIModel = this.#itemsInfo.get(\r\n      viewTargetInfo.id\r\n    ) as FlexibleLayoutItemExtended<FlexibleLayoutLeafModel, \"tabbed\">;\r\n    const viewTargetParentInfo = viewTargetUIModel.parentItem; // TODO: CHECK FOR ROOT NODE <------------------\r\n\r\n    const newLeafToAddId = GENERATE_GUID();\r\n    const newLeafToAdd: FlexibleLayoutLeafModel = {\r\n      id: newLeafToAddId,\r\n      selectedWidgetId: widget.id,\r\n      size: undefined,\r\n      tabListPosition: viewTargetUIModel.leafInfo.tabListPosition,\r\n      type: \"tabbed\",\r\n      widgets: [widget],\r\n      dragBar: {\r\n        size: viewTargetUIModel.item.dragBar?.size,\r\n        part: viewTargetUIModel.item.dragBar?.part // TODO: IMPROVE THIS\r\n      }\r\n    };\r\n\r\n    const viewTargetIsContainedInAGroupWithTheSameDirection =\r\n      (viewTargetParentInfo.direction === \"rows\" &&\r\n        (dropAreaTarget === \"block-start\" || dropAreaTarget === \"block-end\")) ||\r\n      (viewTargetParentInfo.direction === \"columns\" &&\r\n        (dropAreaTarget === \"inline-start\" || dropAreaTarget === \"inline-end\"));\r\n\r\n    // Add a sibling\r\n    if (viewTargetIsContainedInAGroupWithTheSameDirection) {\r\n      await this.addSiblingView(\r\n        viewTargetParentInfo.id,\r\n        viewTargetInfo.id,\r\n        dropAreaTarget === \"block-start\" || dropAreaTarget === \"inline-start\"\r\n          ? \"before\"\r\n          : \"after\",\r\n        newLeafToAdd,\r\n        true\r\n      );\r\n    }\r\n\r\n    // The current target must be modified to be a group\r\n    else {\r\n      // TODO: Add implementation\r\n    }\r\n\r\n    // VERIFY THE PARENT NODE\r\n    // HANDLE NEW VIEW CREATION\r\n    // CHECK IF THE PREVIOUS VIEW HAS ONLY ONE ITEM TO REUSE ITS VIEW ID?\r\n  };\r\n\r\n  #renderWidget = (widgetId: string) => {\r\n    const widgetInfo = this.#widgetsInfo.get(widgetId).info;\r\n\r\n    if (this.#widgetIsSlotted(widgetInfo)) {\r\n      return <slot key={widgetId} name={widgetId} slot={widgetId} />;\r\n    }\r\n\r\n    const renderId = widgetInfo.renderId ?? widgetId;\r\n    const widgetRender = this.renders[renderId];\r\n\r\n    if (!widgetRender) {\r\n      console.error(\r\n        `Could not find a render for the \"${widgetId}\" widget. The render \"${renderId}\" does not exists in the \"renders\" property.`\r\n      );\r\n      return;\r\n    }\r\n\r\n    return widgetInfo.addWrapper ? (\r\n      <div\r\n        key={widgetId}\r\n        slot={widgetId}\r\n        class=\"ch-flexible-layout-render-slot\"\r\n      >\r\n        {widgetRender(widgetInfo)}\r\n      </div>\r\n    ) : (\r\n      widgetRender(widgetInfo)\r\n    );\r\n  };\r\n\r\n  #widgetIsSlotted = (widgetInfo: FlexibleLayoutWidget) =>\r\n    widgetInfo.slot ?? this.slottedWidgets;\r\n\r\n  #checkToEmitRenderedWidgetsChange = () => {\r\n    if (\r\n      this.#lastRenderedWidgets.size === this.#renderedWidgets.size &&\r\n      this.#lastRenderedWidgets.size === 0\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // If the Sets have different sizes, we can ensure that the event must be\r\n    // emitted. If not, we should check if both Sets have the same items.\r\n    let shouldEmitRenderedWidgetsChange =\r\n      this.#lastRenderedWidgets.size !== this.#renderedWidgets.size;\r\n    const rendered: string[] = [];\r\n    const slotted: string[] = [];\r\n\r\n    // In the same loop, prepare the event detail while checking to emit the event\r\n    this.#renderedWidgets.forEach(widgetId => {\r\n      const widgetInfo = this.#widgetsInfo.get(widgetId)!.info;\r\n\r\n      if (this.#widgetIsSlotted(widgetInfo)) {\r\n        slotted.push(widgetId);\r\n      } else {\r\n        rendered.push(widgetId);\r\n      }\r\n\r\n      shouldEmitRenderedWidgetsChange ||=\r\n        !this.#lastRenderedWidgets.has(widgetId);\r\n    });\r\n\r\n    if (shouldEmitRenderedWidgetsChange) {\r\n      this.renderedWidgetsChange.emit({ rendered, slotted });\r\n    }\r\n\r\n    // Update the Set using the new rendered widgets, without sharing the reference\r\n    this.#lastRenderedWidgets = new Set(this.#renderedWidgets);\r\n  };\r\n\r\n  componentWillLoad() {\r\n    this.#updateFlexibleModels(this.model);\r\n  }\r\n\r\n  componentDidRender() {\r\n    this.#checkToEmitRenderedWidgetsChange();\r\n  }\r\n\r\n  render() {\r\n    // Check render against the \"layout\" property\r\n    if (this.model == null) {\r\n      return \"\";\r\n    }\r\n\r\n    return (\r\n      <Host>\r\n        {this.theme && <ch-theme model={this.theme}></ch-theme>}\r\n\r\n        <ch-flexible-layout\r\n          closeButton={this.closeButton}\r\n          contain={this.contain}\r\n          dragOutside={this.dragOutside}\r\n          model={this.model}\r\n          layoutSplitterParts={this.#layoutSplitterParts}\r\n          itemsInfo={this.#itemsInfo}\r\n          overflow={this.overflow}\r\n          sortable={this.sortable}\r\n          onViewItemClose={this.#handleLeafWidgetClose}\r\n          onViewItemReorder={this.#handleLeafWidgetReorder}\r\n          onSelectedViewItemChange={this.#handleLeafSelectedWidgetChange}\r\n          ref={el => (this.#flexibleLayoutRef = el)}\r\n        >\r\n          {[...this.#renderedWidgets.values()].map(this.#renderWidget)}\r\n        </ch-flexible-layout>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}