{"version":3,"names":["accordionCss","ChAccordionRenderStyle0","GET_IMAGE_PATH_CALLBACK_REGISTRY","DEFAULT_GET_IMAGE_PATH_CALLBACK","imageSrc","base","ELEMENTS_TO_PREVENT_EXPAND_COLLAPSE","ChAccordionRender","images","Map","expandedItems","Set","renderedItems","getImagePathCallbackChanged","this","computeImages","modelChanged","clear","model","forEach","item","expanded","add","id","closeAllExpandedItemsExceptForTheLast","singleItemExpandedChanged","expandedChange","computeImage","undefined","getImagePathCallback","img","updateDirectionInImageCustomVar","itemUIModel","itemImage","startImgSrc","set","handleHeaderToggle","event","composedPath","headerRef","find","el","tagName","toLowerCase","getRootNode","shadowRoot","includes","itemId","disabled","newExpandedValue","updateExpandedOnItem","singleItemExpanded","size","itemUIModelToCollapse","emit","delete","forceUpdate","renderItem","index","startImage","get","startImageClasses","classes","isDisabled","h","class","panel","key","part","tokenMap","ACCORDION_PARTS_DICTIONARY","PANEL","DISABLED","EXPANDED","COLLAPSED","accessibleName","header","DISABLED_CLASS","startImgType","headerSlotId","HEADER","style","styles","type","name","caption","has","SECTION","emitExpandedChangeEvent","lastItemId","keys","at","computeGridTemplateRows","map","expandedSize","getCollapsedSizeForUnit","join","connectedCallback","getControlRegisterProperty","render","Host","onClick"],"sources":["src/components/accordion/accordion.scss?tag=ch-accordion-render&encapsulation=shadow","src/components/accordion/accordion.tsx"],"sourcesContent":["@import \"../../common/base\";\r\n@import \"../../common/icons\";\r\n\r\n@include button-reset();\r\n@include box-sizing();\r\n\r\n:host {\r\n  /**\r\n   * @prop --ch-accordion__chevron-size:\r\n   * Specifies the box size of the chevron.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-accordion__chevron-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-accordion__chevron-image-size:\r\n   * Specifies the image size of the chevron.\r\n   * @default 100%\r\n   */\r\n  --ch-accordion__chevron-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-accordion__chevron-color:\r\n   * Specifies the color of the chevron.\r\n   * @default 100%\r\n   */\r\n  --ch-accordion__chevron-color: currentColor;\r\n\r\n  /**\r\n   * @prop --ch-accordion-expand-collapse-duration\r\n   * Specifies duration of the expand and collapse animation\r\n   * @default 0ms\r\n   */\r\n  --ch-accordion-expand-collapse-duration: 0ms;\r\n\r\n  /**\r\n   * @prop --ch-accordion-expand-collapse-timing-function\r\n   * Specifies timing function of the expand and collapse animation\r\n   * @default linear\r\n   */\r\n  --ch-accordion-expand-collapse-timing-function: linear;\r\n\r\n  /**\r\n   * @prop --ch-accordion__header-image-size:\r\n   * Specifies the box size that contains the start image of the header.\r\n   * @default #{$default-decorative-image-size}\r\n   */\r\n  --ch-accordion__header-image-size: #{$default-decorative-image-size};\r\n\r\n  /**\r\n   * @prop --ch-accordion__header-background-image-size:\r\n   * Specifies the size of the start image of the header.\r\n   * @default 100%\r\n   */\r\n  --ch-accordion__header-background-image-size: 100%;\r\n\r\n  /**\r\n   * @prop --ch-accordion__header-background-image-size:\r\n   * Specifies the start image of the header.\r\n   * @default #{$expandable-icon}\r\n   */\r\n  --ch-accordion__header-background-image: #{$expandable-icon};\r\n\r\n  --ch-accordion-grid-template-rows: 1fr;\r\n\r\n  display: grid;\r\n  grid-template-rows: var(--ch-accordion-grid-template-rows);\r\n  transition: grid-template-rows var(--ch-accordion-expand-collapse-duration)\r\n    var(--ch-accordion-expand-collapse-timing-function);\r\n\r\n  // Avoid unnecessary click events in the Host\r\n  pointer-events: none;\r\n}\r\n\r\n.panel {\r\n  display: grid;\r\n  grid-template-rows: max-content 0fr;\r\n  transition: grid-template-rows var(--ch-accordion-expand-collapse-duration)\r\n    var(--ch-accordion-expand-collapse-timing-function);\r\n\r\n  // Restore click events\r\n  pointer-events: all;\r\n\r\n  &--expanded {\r\n    grid-template-rows: max-content 1fr;\r\n  }\r\n}\r\n\r\n.header {\r\n  &::after {\r\n    content: \"\";\r\n    inline-size: var(--ch-accordion__chevron-size);\r\n    block-size: var(--ch-accordion__chevron-size);\r\n    margin-inline-start: auto;\r\n    background-color: var(--ch-accordion__chevron-color);\r\n\r\n    -webkit-mask: no-repeat center / var(--ch-accordion__chevron-image-size)\r\n      var(--ch-accordion__header-background-image);\r\n\r\n    transition: transform var(--ch-accordion-expand-collapse-duration)\r\n      var(--ch-accordion-expand-collapse-timing-function);\r\n  }\r\n\r\n  &--expanded::after {\r\n    transform: rotate(-180deg); // TODO: Add support for RTL\r\n  }\r\n}\r\n\r\n// - - - - - - - - - - - - - - - - - - - -\r\n//                 Images\r\n// - - - - - - - - - - - - - - - - - - - -\r\n.header {\r\n  --ch-accordion-header-start-img: var(--ch-start-img--base);\r\n\r\n  &.start-img--hover:hover {\r\n    --ch-accordion-header-start-img: var(--ch-start-img--hover);\r\n  }\r\n\r\n  &.start-img--active:active {\r\n    --ch-accordion-header-start-img: var(--ch-start-img--active);\r\n  }\r\n\r\n  &.start-img--focus:focus {\r\n    --ch-accordion-header-start-img: var(--ch-start-img--focus);\r\n  }\r\n\r\n  &.start-img--disabled.ch-disabled {\r\n    --ch-accordion-header-start-img: var(--ch-start-img--disabled);\r\n  }\r\n}\r\n\r\n.pseudo-img--start::before {\r\n  content: \"\";\r\n  display: block;\r\n  inline-size: var(--ch-accordion__header-image-size);\r\n  block-size: var(--ch-accordion__header-image-size);\r\n  content-visibility: auto;\r\n  contain-intrinsic-size: auto var(--ch-accordion__header-image-size);\r\n}\r\n\r\n// Background\r\n.start-img-type--background::before {\r\n  background: no-repeat center /\r\n    var(--ch-accordion__header-background-image-size)\r\n    var(--ch-accordion-header-start-img);\r\n}\r\n\r\n// Mask\r\n.start-img-type--mask::before {\r\n  -webkit-mask: no-repeat center /\r\n    var(--ch-accordion__header-background-image-size)\r\n    var(--ch-accordion-header-start-img);\r\n  background-color: currentColor;\r\n}\r\n\r\nsection {\r\n  display: grid;\r\n  overflow: hidden;\r\n\r\n  // Delays the visibility application based on the value of var(--ch-accordion-expand-collapse-duration)\r\n  transition: visibility var(--ch-accordion-expand-collapse-duration)\r\n    allow-discrete;\r\n}\r\n\r\n// Necessary to hide the collapsed DOM and remove keyboard interactions\r\n.section--hidden {\r\n  visibility: hidden;\r\n}\r\n\r\n.sub-section {\r\n  display: grid;\r\n}\r\n","import {\r\n  Component,\r\n  ComponentInterface,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  forceUpdate,\r\n  h\r\n} from \"@stencil/core\";\r\nimport {\r\n  AccordionItemModel,\r\n  AccordionItemExpandedChangeEvent,\r\n  AccordionModel,\r\n  AccordionItemModelExpandedSize\r\n} from \"./types\";\r\nimport { tokenMap, updateDirectionInImageCustomVar } from \"../../common/utils\";\r\nimport {\r\n  ACCORDION_PARTS_DICTIONARY,\r\n  DISABLED_CLASS\r\n} from \"../../common/reserved-names\";\r\nimport { GxImageMultiState, GxImageMultiStateStart } from \"../../common/types\";\r\nimport { getControlRegisterProperty } from \"../../common/registry-properties\";\r\n\r\nlet GET_IMAGE_PATH_CALLBACK_REGISTRY: (\r\n  imageSrc: string\r\n) => GxImageMultiState | undefined;\r\n\r\nconst DEFAULT_GET_IMAGE_PATH_CALLBACK: (\r\n  imageSrc: string\r\n) => GxImageMultiState | undefined = imageSrc => ({ base: imageSrc });\r\n\r\nconst ELEMENTS_TO_PREVENT_EXPAND_COLLAPSE = [\"input\", \"textarea\"];\r\n\r\n/**\r\n * @status experimental\r\n */\r\n@Component({\r\n  shadow: true,\r\n  styleUrl: \"accordion.scss\",\r\n  tag: \"ch-accordion-render\"\r\n})\r\nexport class ChAccordionRender implements ComponentInterface {\r\n  #images: Map<string, GxImageMultiStateStart | undefined> = new Map();\r\n\r\n  /**\r\n   * Useful to track all expand/collapse interactions in order to close all\r\n   * items expect for the last expanded when switching to `singleItemExpanded`\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #expandedItems: Set<string> = new Set();\r\n\r\n  /**\r\n   * Useful to rendering items after the first expansion.\r\n   */\r\n  // eslint-disable-next-line @stencil-community/own-props-must-be-private\r\n  #renderedItems: Set<string> = new Set();\r\n\r\n  @Element() el: HTMLChAccordionRenderElement;\r\n\r\n  /**\r\n   * This attribute lets you specify if all accordions are disabled.\r\n   * If disabled,accordions will not fire any user interaction related event\r\n   * (for example, `expandedChange` event).\r\n   */\r\n  @Prop() readonly disabled: boolean = false;\r\n\r\n  /**\r\n   * This property specifies a callback that is executed when the path for an\r\n   * startImgSrc needs to be resolved.\r\n   */\r\n  @Prop() readonly getImagePathCallback?: (\r\n    imageSrc: string\r\n  ) => GxImageMultiState | undefined;\r\n  @Watch(\"getImagePathCallback\")\r\n  getImagePathCallbackChanged() {\r\n    this.#computeImages();\r\n  }\r\n\r\n  /**\r\n   * Specifies the items of the control.\r\n   */\r\n  @Prop() readonly model?: AccordionModel | undefined;\r\n  @Watch(\"model\")\r\n  modelChanged() {\r\n    this.#computeImages();\r\n    this.#expandedItems.clear();\r\n    this.#renderedItems.clear();\r\n\r\n    this.model?.forEach(item => {\r\n      if (item.expanded) {\r\n        this.#expandedItems.add(item.id);\r\n        this.#renderedItems.add(item.id);\r\n      }\r\n    });\r\n\r\n    this.#closeAllExpandedItemsExceptForTheLast(false);\r\n  }\r\n\r\n  /**\r\n   * If `true` only one item will be expanded at the same time.\r\n   */\r\n  @Prop() readonly singleItemExpanded: boolean = false;\r\n  @Watch(\"singleItemExpanded\")\r\n  singleItemExpandedChanged() {\r\n    this.#closeAllExpandedItemsExceptForTheLast(true);\r\n  }\r\n\r\n  /**\r\n   * Fired when an item is expanded or collapsed\r\n   */\r\n  @Event() expandedChange: EventEmitter<AccordionItemExpandedChangeEvent>;\r\n\r\n  #computeImage = (\r\n    imageSrc: string | undefined\r\n  ): GxImageMultiStateStart | undefined => {\r\n    if (!imageSrc) {\r\n      return undefined;\r\n    }\r\n    const getImagePathCallback =\r\n      this.getImagePathCallback ?? GET_IMAGE_PATH_CALLBACK_REGISTRY;\r\n\r\n    if (!getImagePathCallback) {\r\n      return undefined;\r\n    }\r\n    const img = getImagePathCallback(imageSrc);\r\n\r\n    return img\r\n      ? (updateDirectionInImageCustomVar(\r\n          img,\r\n          \"start\"\r\n        ) as GxImageMultiStateStart)\r\n      : undefined;\r\n  };\r\n\r\n  #computeImages = () => {\r\n    this.#images.clear();\r\n\r\n    this.model?.forEach(itemUIModel => {\r\n      const itemImage = this.#computeImage(itemUIModel.startImgSrc);\r\n\r\n      if (itemImage) {\r\n        this.#images.set(itemUIModel.id, itemImage);\r\n      }\r\n    });\r\n  };\r\n\r\n  #handleHeaderToggle = (event: PointerEvent) => {\r\n    const composedPath = event.composedPath();\r\n\r\n    const headerRef = composedPath.find(\r\n      el => (el as HTMLElement).tagName?.toLowerCase() === \"button\"\r\n    ) as HTMLButtonElement;\r\n\r\n    if (\r\n      !headerRef ||\r\n      headerRef.getRootNode() !== this.el.shadowRoot ||\r\n      ELEMENTS_TO_PREVENT_EXPAND_COLLAPSE.includes(\r\n        (composedPath[0] as HTMLElement).tagName?.toLowerCase()\r\n      )\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const itemId = headerRef.id;\r\n    const itemUIModel = this.model.find(item => item.id === itemId);\r\n\r\n    if (itemUIModel.disabled) {\r\n      return;\r\n    }\r\n\r\n    const newExpandedValue = !itemUIModel.expanded;\r\n    this.#updateExpandedOnItem(itemUIModel, newExpandedValue);\r\n  };\r\n\r\n  #updateExpandedOnItem = (\r\n    itemUIModel: AccordionItemModel,\r\n    newExpandedValue: boolean\r\n  ) => {\r\n    // Collapse all opened items and emit expandedChange\r\n    if (this.singleItemExpanded && this.#expandedItems.size > 0) {\r\n      this.model.forEach(itemUIModelToCollapse => {\r\n        if (\r\n          itemUIModelToCollapse.expanded &&\r\n          itemUIModelToCollapse.id !== itemUIModel.id\r\n        ) {\r\n          itemUIModelToCollapse.expanded = false;\r\n\r\n          this.expandedChange.emit({\r\n            id: itemUIModelToCollapse.id,\r\n            expanded: false\r\n          });\r\n        }\r\n      });\r\n\r\n      this.#expandedItems.clear();\r\n    }\r\n\r\n    // If the item is expanded, added it to the Set\r\n    if (newExpandedValue) {\r\n      this.#expandedItems.add(itemUIModel.id);\r\n      this.#renderedItems.add(itemUIModel.id);\r\n    }\r\n    // Otherwise, remove it\r\n    else {\r\n      this.#expandedItems.delete(itemUIModel.id);\r\n    }\r\n\r\n    itemUIModel.expanded = newExpandedValue;\r\n    this.expandedChange.emit({\r\n      id: itemUIModel.id,\r\n      expanded: newExpandedValue\r\n    });\r\n\r\n    forceUpdate(this);\r\n  };\r\n\r\n  #renderItem = (item: AccordionItemModel, index: number) => {\r\n    const startImage = this.#images.get(item.id);\r\n    const startImageClasses = startImage?.classes;\r\n    const isDisabled = item.disabled ?? this.disabled;\r\n\r\n    return (\r\n      <div\r\n        class={{ panel: true, \"panel--expanded\": item.expanded }}\r\n        key={item.id}\r\n        part={tokenMap({\r\n          [item.id]: true,\r\n          [ACCORDION_PARTS_DICTIONARY.PANEL]: true,\r\n          [ACCORDION_PARTS_DICTIONARY.DISABLED]: isDisabled,\r\n          [ACCORDION_PARTS_DICTIONARY.EXPANDED]: item.expanded,\r\n          [ACCORDION_PARTS_DICTIONARY.COLLAPSED]: !item.expanded\r\n        })}\r\n      >\r\n        <button\r\n          id={item.id}\r\n          aria-controls={`section-${index}`}\r\n          aria-label={item.accessibleName || undefined}\r\n          aria-expanded={item.expanded ? \"true\" : \"false\"}\r\n          class={{\r\n            header: true,\r\n            [DISABLED_CLASS]: isDisabled,\r\n            \"header--expanded\": item.expanded,\r\n            [`start-img-type--${\r\n              item.startImgType ?? \"background\"\r\n            } pseudo-img--start`]: !!startImage,\r\n            [startImageClasses]: !!startImageClasses\r\n          }}\r\n          part={tokenMap({\r\n            [item.id]: true,\r\n            [item.headerSlotId]: !!item.headerSlotId,\r\n            [ACCORDION_PARTS_DICTIONARY.HEADER]: true,\r\n            [ACCORDION_PARTS_DICTIONARY.DISABLED]: isDisabled,\r\n            [ACCORDION_PARTS_DICTIONARY.EXPANDED]: item.expanded,\r\n            [ACCORDION_PARTS_DICTIONARY.COLLAPSED]: !item.expanded\r\n          })}\r\n          style={startImage?.styles ?? undefined}\r\n          disabled={isDisabled}\r\n          type=\"button\"\r\n        >\r\n          {item.headerSlotId ? <slot name={item.headerSlotId} /> : item.caption}\r\n        </button>\r\n\r\n        <section\r\n          id={`section-${index}`}\r\n          aria-label={item.accessibleName || undefined}\r\n          aria-labelledby={!item.accessibleName ? item.id : undefined}\r\n          class={!item.expanded ? \"section--hidden\" : undefined}\r\n        >\r\n          {(this.#renderedItems.has(item.id) || !item.id) && (\r\n            <div\r\n              class=\"sub-section\"\r\n              part={tokenMap({\r\n                [item.id]: true,\r\n                [ACCORDION_PARTS_DICTIONARY.SECTION]: true,\r\n                [ACCORDION_PARTS_DICTIONARY.DISABLED]: isDisabled,\r\n                [ACCORDION_PARTS_DICTIONARY.EXPANDED]: item.expanded,\r\n                [ACCORDION_PARTS_DICTIONARY.COLLAPSED]: !item.expanded\r\n              })}\r\n            >\r\n              <slot name={item.id} />\r\n            </div>\r\n          )}\r\n        </section>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  #closeAllExpandedItemsExceptForTheLast = (\r\n    emitExpandedChangeEvent: boolean\r\n  ) => {\r\n    if (!this.singleItemExpanded || this.#expandedItems.size <= 1) {\r\n      return;\r\n    }\r\n\r\n    const lastItemId = [...this.#expandedItems.keys()].at(-1);\r\n\r\n    // Close all items except for the last and emit the expandedChange event\r\n    this.model.forEach(itemUIModel => {\r\n      if (itemUIModel.expanded && itemUIModel.id !== lastItemId) {\r\n        itemUIModel.expanded = false;\r\n\r\n        if (emitExpandedChangeEvent) {\r\n          this.expandedChange.emit({ id: itemUIModel.id, expanded: false });\r\n        }\r\n      }\r\n    });\r\n\r\n    this.#expandedItems.clear();\r\n    this.#expandedItems.add(lastItemId);\r\n  };\r\n\r\n  #computeGridTemplateRows = () =>\r\n    this.model\r\n      .map(item =>\r\n        item.expanded\r\n          ? item.expandedSize ?? \"max-content\"\r\n          : this.#getCollapsedSizeForUnit(item.expandedSize)\r\n      )\r\n      .join(\" \");\r\n\r\n  #getCollapsedSizeForUnit = (expandedSize: AccordionItemModelExpandedSize) =>\r\n    expandedSize && expandedSize.includes(\"fr\") ? \"0fr\" : \"max-content\";\r\n\r\n  connectedCallback(): void {\r\n    // Initialize default getImagePathCallback\r\n    GET_IMAGE_PATH_CALLBACK_REGISTRY ??=\r\n      getControlRegisterProperty(\r\n        \"getImagePathCallback\",\r\n        \"ch-accordion-render\"\r\n      ) ?? DEFAULT_GET_IMAGE_PATH_CALLBACK;\r\n\r\n    this.#computeImages();\r\n\r\n    this.model?.forEach(item => {\r\n      if (item.expanded) {\r\n        this.#expandedItems.add(item.id);\r\n        this.#renderedItems.add(item.id);\r\n      }\r\n    });\r\n\r\n    this.#closeAllExpandedItemsExceptForTheLast(false);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host\r\n        // TODO: Add support to prevent expand/collapse when pressing the space\r\n        // key on an input/textarea\r\n        style={\r\n          this.model != null\r\n            ? {\r\n                \"--ch-accordion-grid-template-rows\":\r\n                  this.#computeGridTemplateRows()\r\n              }\r\n            : undefined\r\n        }\r\n        onClick={this.#handleHeaderToggle}\r\n      >\r\n        {(this.model ?? []).map(this.#renderItem)}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"}