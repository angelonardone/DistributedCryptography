{"version":3,"names":["d","Object","defineProperty","s","getOwnPropertyDescriptor","u","getOwnPropertyNames","c","prototype","hasOwnProperty","i","o","e","l","n","t","call","get","enumerable","a","r","p","wordPattern","brackets","autoClosingPairs","open","close","surroundingPairs","onEnterRules","beforeText","RegExp","join","afterText","action","indentAction","languages","IndentAction","IndentOutdent","Indent","w","defaultToken","tokenPostfix","builtinTags","builtinFilters","constants","operators","symbol","identifier","tokenizer","root","token","switchTo","next","comment","otherTag","liquidState","include","liquidRaw","liquidRoot","cases"],"sources":["src/common/monaco/output/liquid-BrC-Ey2T.js"],"sourcesContent":["import { m as a } from \"./monaco-DJfa8MTb.js\";\nvar d = Object.defineProperty, s = Object.getOwnPropertyDescriptor, u = Object.getOwnPropertyNames, c = Object.prototype.hasOwnProperty, i = {};\n((o, e, l, n) => {\n  if (e && typeof e == \"object\" || typeof e == \"function\") for (let t of u(e)) c.call(o, t) || t === l || d(o, t, { get: () => e[t], enumerable: !(n = s(e, t)) || n.enumerable });\n})(i, a, \"default\");\nvar r = [\"area\", \"base\", \"br\", \"col\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"menuitem\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"], p = { wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g, brackets: [[\"<!--\", \"-->\"], [\"<\", \">\"], [\"{{\", \"}}\"], [\"{%\", \"%}\"], [\"{\", \"}\"], [\"(\", \")\"]], autoClosingPairs: [{ open: \"{\", close: \"}\" }, { open: \"%\", close: \"%\" }, { open: \"[\", close: \"]\" }, { open: \"(\", close: \")\" }, { open: '\"', close: '\"' }, { open: \"'\", close: \"'\" }], surroundingPairs: [{ open: \"<\", close: \">\" }, { open: '\"', close: '\"' }, { open: \"'\", close: \"'\" }], onEnterRules: [{ beforeText: new RegExp(`<(?!(?:${r.join(\"|\")}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`, \"i\"), afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i, action: { indentAction: i.languages.IndentAction.IndentOutdent } }, { beforeText: new RegExp(`<(?!(?:${r.join(\"|\")}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`, \"i\"), action: { indentAction: i.languages.IndentAction.Indent } }] }, w = { defaultToken: \"\", tokenPostfix: \"\", builtinTags: [\"if\", \"else\", \"elseif\", \"endif\", \"render\", \"assign\", \"capture\", \"endcapture\", \"case\", \"endcase\", \"comment\", \"endcomment\", \"cycle\", \"decrement\", \"for\", \"endfor\", \"include\", \"increment\", \"layout\", \"raw\", \"endraw\", \"render\", \"tablerow\", \"endtablerow\", \"unless\", \"endunless\"], builtinFilters: [\"abs\", \"append\", \"at_least\", \"at_most\", \"capitalize\", \"ceil\", \"compact\", \"date\", \"default\", \"divided_by\", \"downcase\", \"escape\", \"escape_once\", \"first\", \"floor\", \"join\", \"json\", \"last\", \"lstrip\", \"map\", \"minus\", \"modulo\", \"newline_to_br\", \"plus\", \"prepend\", \"remove\", \"remove_first\", \"replace\", \"replace_first\", \"reverse\", \"round\", \"rstrip\", \"size\", \"slice\", \"sort\", \"sort_natural\", \"split\", \"strip\", \"strip_html\", \"strip_newlines\", \"times\", \"truncate\", \"truncatewords\", \"uniq\", \"upcase\", \"url_decode\", \"url_encode\", \"where\"], constants: [\"true\", \"false\"], operators: [\"==\", \"!=\", \">\", \"<\", \">=\", \"<=\"], symbol: /[=><!]+/, identifier: /[a-zA-Z_][\\w]*/, tokenizer: { root: [[/\\{\\%\\s*comment\\s*\\%\\}/, \"comment.start.liquid\", \"@comment\"], [/\\{\\{/, { token: \"@rematch\", switchTo: \"@liquidState.root\" }], [/\\{\\%/, { token: \"@rematch\", switchTo: \"@liquidState.root\" }], [/(<)([\\w\\-]+)(\\/>)/, [\"delimiter.html\", \"tag.html\", \"delimiter.html\"]], [/(<)([:\\w]+)/, [\"delimiter.html\", { token: \"tag.html\", next: \"@otherTag\" }]], [/(<\\/)([\\w\\-]+)/, [\"delimiter.html\", { token: \"tag.html\", next: \"@otherTag\" }]], [/</, \"delimiter.html\"], [/\\{/, \"delimiter.html\"], [/[^<{]+/]], comment: [[/\\{\\%\\s*endcomment\\s*\\%\\}/, \"comment.end.liquid\", \"@pop\"], [/./, \"comment.content.liquid\"]], otherTag: [[/\\{\\{/, { token: \"@rematch\", switchTo: \"@liquidState.otherTag\" }], [/\\{\\%/, { token: \"@rematch\", switchTo: \"@liquidState.otherTag\" }], [/\\/?>/, \"delimiter.html\", \"@pop\"], [/\"([^\"]*)\"/, \"attribute.value\"], [/'([^']*)'/, \"attribute.value\"], [/[\\w\\-]+/, \"attribute.name\"], [/=/, \"delimiter\"], [/[ \\t\\r\\n]+/]], liquidState: [[/\\{\\{/, \"delimiter.output.liquid\"], [/\\}\\}/, { token: \"delimiter.output.liquid\", switchTo: \"@$S2.$S3\" }], [/\\{\\%/, \"delimiter.tag.liquid\"], [/raw\\s*\\%\\}/, \"delimiter.tag.liquid\", \"@liquidRaw\"], [/\\%\\}/, { token: \"delimiter.tag.liquid\", switchTo: \"@$S2.$S3\" }], { include: \"liquidRoot\" }], liquidRaw: [[/^(?!\\{\\%\\s*endraw\\s*\\%\\}).+/], [/\\{\\%/, \"delimiter.tag.liquid\"], [/@identifier/], [/\\%\\}/, { token: \"delimiter.tag.liquid\", next: \"@root\" }]], liquidRoot: [[/\\d+(\\.\\d+)?/, \"number.liquid\"], [/\"[^\"]*\"/, \"string.liquid\"], [/'[^']*'/, \"string.liquid\"], [/\\s+/], [/@symbol/, { cases: { \"@operators\": \"operator.liquid\", \"@default\": \"\" } }], [/\\./], [/@identifier/, { cases: { \"@constants\": \"keyword.liquid\", \"@builtinFilters\": \"predefined.liquid\", \"@builtinTags\": \"predefined.liquid\", \"@default\": \"variable.liquid\" } }], [/[^}|%]/, \"variable.liquid\"]] } };\nexport {\n  p as conf,\n  w as language\n};\n"],"mappings":"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"}