{"version":3,"names":["__extends","HTMLChGridRowElement","_super","call","this","Object","defineProperty","prototype","connectedCallback","addEventListener","cellCaretClickedHandler","selected","marked","grid","syncRowState","attributeChangedCallback","name","_oldValue","value","_a","parentGrid","loadParentGrid","getAttribute","hasAttribute","highlightedClasses","_c","rowHighlightedClass","split","setAttribute","classList","add","apply","removeAttribute","_b","remove","selectedClasses","rowSelectedClass","markedClasses","rowMarkedClass","focusedClasses","rowFocusedClass","querySelector","dispatchEvent","collapsed","CustomEvent","bubbles","composed","detail","rowId","getCell","column","concat","physicalOrder","isVisible","Array","from","querySelectorAll","some","cell","ensureVisible","getBoundingClientRect","rect","firstElementChild","DOMRect","lastElementChild","firstCellRect","lastCellRect","x","y","width","height","eventInfo","targetRow","currentTarget","hasChildRows","stopPropagation","closest","HTMLElement","customElements","get","define","HTMLChGridRowsetElement","_this","computedLevel","rowsetLegendClickedHandler","defineLevel","computeLevel","paddingTop","parseInt","style","getPropertyValue","paddingbottom","mainRect","shadowRoot","firstRowRect","lastRowRect","setProperty","level","toString","getParentRowset","hasLegend","isNestedRow","tagName","parentElement","node","undefined","ChGridCellType","HTMLChGridCellElement","cellType","Plain","defineFocusHandler","Rich","rowDrag","rowSelector","rowActions","cellIndex","indexOf","row","offsetParent","setSelectorChecked","selector","checked","caretMouseDownHandler","selectorClickHandler","range","shiftKey","selectorLabelClickHandler","dragMouseDownHandler","preventDefault","actionClickHandler","defineRich","TreeNode","defineTreeNode","html","innerHTML","attachShadow","mode","drag","bind","action","selectorLabel","caret","ChGridManagerColumnDrag","columnId","columns","isRTL","lastTargetOrder","map","element","translateX","order","find","item","forEach","setColumnHiddenRect","dragging","position","sourceOrder","sourceFreeze","freeze","targetOrder","targetOrderChanged","filter","columnOrder","dragDirection","shiftDirection","left","right","swapColumnPosition","resetColumnPosition","dragEnd","getColumnStyle","columnItem","getColumnsFirstLast","itemFirst","itemLast","hidden","columnFirst","columnLast","columnSibling","getPreviousSiblingVisible","getNextSiblingVisible","previous","next","ChGridManagerColumns","manager","columnsetObserver","MutationObserver","reloadColumns","columnResizeObserver","ResizeObserver","resizeColumnHandler","columnsDisplay","columnsWidth","observeColumnset","defineColumns","defineColumnsVariables","adjustFreezeOrder","adjustBaseLayer","getColumn","getColumns","sorted","sort","fnSortByOrder","getColumnSelector","columnType","richRowSelector","freezeStart","noFreeze","freezeEnd","defineColumnId","defineColumnIndex","defineColumnOrder","defineColumnSize","defineColumnDisplayObserver","defineColumnResizeObserver","defineColumnType","getColumnUniqueId","size","displayObserverClass","i","push","document","createElement","appendChild","observe","box","type","richRowDrag","richRowActions","root","getRootNode","length","selectors","styleInnerHTML","Document","head","insertAdjacentHTML","ShadowRoot","s","id","dataset","innerText","undefineColumns","unobserve","columnDisplay","childList","columnsAdded","includes","columnsRemoved","adjustOrders","entries","_i","entries_1","entry","target","contentRect","setColumnWidthVariables","uniqueId","Date","now","Math","random","substring","__spreadArray","setBaseLayer","columnA","columnB","ChGridManagerSelection","selectionStateNone","rowFocused","rowsSelected","cellFocused","cellSelected","touchStart","touchEvent","touch","clientX","touches","clientY","isTouchEndSelection","abs","changedTouches","cancelable","select","state","append","rangeStartOn","context","keyboardNavigationMode","rowSelectionMode","rangeStart","rangeValue","lastSelected","rangeRows_1","getRowsRange","Set","preserveInstanceIfSame","getFirstColumn","rowSelected","selectAll","rows","getRows","getFirstRow","selectSet","moveFirstRow","firstRow","movePreviousRow","previousRow","getPreviousRow","moveNextRow","nextRow","getNextRow","moveLastRow","lastRow","getLastRow","movePreviousPageRow","rowsPerPage","getRowsPerPage","previousPageRow","max","moveNextPageRow","nextPageRow","min","movePreviousCell","previousCell","getPreviousCell","moveNextCell","nextCell","getNextCell","markRow","currentRowsMarked","rows_1","lastRowMarked","r","markRows","rowsMarked","markAllRows","syncRowSelector","selectorMode","columnSelector","richRowSelectorMode","indexColumnSelector_1","children","syncColumnSelector","richRowSelectorState","newSelection","oldSelection","every","ChGridManagerRowDrag","dragMouseMoveFn","dragMouseMoveHandler","dragStart","rowIndex","getGridRowIndex","defineListeners","createRowShadow","floatRow","updateRowPosition","rowHover","rowHoverIndex","rowHoverGridPosition","offsetPosition","rowShadow","dragMouseUpHandler","removeEventListener","dropPosition","rowDrop","before","after","unfloatRow","passive","once","rowHeight","getRowHeight","display","getColumnsWidth","opacity","minWidth","gridRowStart","rowWidth","gridLayout","clientWidth","columnPosition","top","ChGridManagerRowActions","showOnRowHover","showOnRowActions","showOnRowContext","ChGridManagerColumnResize","resizingSingle","deltaWidth","columnWidth","columnWidthStart","resizingSplitter","columnSizeStart","convertUnit","columnAfter","columnAfterWidth","columnAfterWidthStart","columnAfterSizeStart","columnResizeMode","resizingFn","resizeEndFn","resizeEndSplitter","parseCSSValue","getNextColumn","resizing","resizeEnd","columnWidthEnd","columnAfterWidthEnd","cssValue","match","number","parseFloat","unit","startSize","startWidth","newWidth","StyleRule","ChGridManager","styleSheet","CSSStyleSheet","insertRule","BASE_LAYER","COLUMNS_WIDTH","adoptedStyleSheets","adoptGlobalStyleSheet","selection","gridLayoutElement","componentDidLoad","getComputedStyle","gridTemplateColumns","getColumnsetHeight","gridColumnsHeight","gridTemplateRows","getScrollOffsetTop","offsetTop","getScrollOffsetLeft","reduce","offsetRight","offsetWidth","getScrollOffsetRight","current","slice","reverse","getPreviousColumn","previousColumn","nextColumn","getRowsetRowIndex","gridRowsHeight","gridHeight","clientHeight","columnsHeight","floor","getRow","start","end","indexStart","indexEnd","getRowEventTarget","composedPath","isRowActionsEventTarget","cellId","getCellEventTarget","columnDragStart","columnDragManager","isRTLDirection","columnDragging","columnDragEnd","columnResizeStart","columnResizeManager","columnResizing","columnResizeEnd","rowDragStart","rowDragManager","getGridStyle","__assign","getGridTemplateColumns","getRowBoxSimulationStyle","getDragTransitionStyle","getColumnsStyle","deleteRule","columnIndex","join","ensureRowVisible","ensureCellVisible","isColumnFreeze","scroll","scrollOffsetTop","scrollOffsetLeft","scrollOffsetRight","scrollTop","scrollBy","offsetHeight","scrollLeft","offsetLeft","getColumnSizeStyle","getColumnOrderStyle","getColumnDisplayStyle","getColumnFreezeStyle","getColumnDraggingStyle","getColumnIndentStyle","getColumnFreezeStartStyle","getColumnFreezeEndStyle","calcItems","direction","chGridCss","ChGridStyle0","ChGrid","exports","class_1","rowFocusedHandler","focused","cellFocusedHandler","rowHighlightedHandler","highlighted","openRowHover","close","rowsMarkedHandler","rowMarkingChanged","emit","getChangedEventDetail","rowsSelectedHandler","selectionChanged","cellSelectedHandler","cellSelectionChanged","componentWillLoad","el","gridStyle","componentShouldUpdate","_newValue","focusHandler","selectByKeyboardEvent","blurHandler","cellFocusedEventHandler","setCellSelected","windowKeyDownHandler","focusComposedPath","key","keyDownHandler","mouseEventModifierKey","spacePressedEvent","setRowCollapsed","moveByKeyboardEvent","enterPressedHandler","mouseMoveHandler","rowHighlightEnabled","rowHighlighted","selectingBlock","selecting","stopSelecting","selectingRow","selectingCell","isKeyModifierPressed","isMouseButtonRightPressed","mouseEventHasButtonPressed","MouseEventButtons","RIGHT","selectByPointerEvent","mouseLeaveHandler","mouseDownHandler","button","MouseEventButton","mouseUpHandler","clickHandler","emitRowClicked","dblclickHandler","rowDoubleClicked","touchstartHandler","touchendHandler","contextmenuHandler","KEY_SHORTCUT","rowContextMenuEventInfo","rowContextMenu","selectedRowsId","openRowContext","defaultPrevented","columnSelectorClickedHandler","cellSelectorClickedHandler","cellRowActionClickedHandler","openRowActions","columnStyleChangedHandler","columnFreezeChangedHandler","columnResizeStartedHandler","columnResizingHandler","columnResizeFinishedHandler","columnDragStartHandler","columnDraggingHandler","positionX","columnDragEndHandler","rowDragStartHandler","rowEnsureVisibleHandler","cellEnsureVisibleHandler","settingsShowClickedHandler","settingsUI","show","settingsCloseClickedHandler","getFocusedRow","getHoveredRow","getSelectedRows","getMarkedRows","getFocusedCell","getSelectedCell","selectRow","rowId_1","selectAllRows","selectCell","cellId_1","columnId_1","expandRow","collapseRow","rowEnsureVisible","cellEnsureVisible","currentRow","syncRowStateSelected","syncRowStateMarked","syncRowStateSelector","index","splice","rowsId","addedRowsId","removedRowsId","unalteredRowsId","rowEnterPressed","ctrl","shift","markByKeyboardEvent","fn","rowClicked","renderSettings","h","ref","exportparts","part","render","Host","tabindex","class","chGridActionRefreshCss","ChGridActionRefreshStyle0","ChGridActionRefresh","class_2","pressedHandler","refreshClicked","role","disabled","chGridActionSettingsCss","ChGridActionSettingsStyle0","ChGridActionSettings","class_3","settingsShowClicked","chGridActionbarCss","ChGridActionbarStyle0","ChGridActionbar","chGridColumnCss","ChGridColumnStyle0","ChGridColumn","settingsClickHandler","showSettings","columnSelectorClicked","selectorTouchEndHandler","class_5","freezeHandler","columnFreezeChanged","hiddenHandler","columnHiddenChanged","orderHandler","columnOrderChanged","sizeHandler","columnSizeChanging","sortDirectionHandler","sortDirection","columnSortChanged","mousedownHandler","sortable","columnSizeChanged","allowColumnReorder","dragMouseMoveStartPositionX","pageX","columnDragStarted","movementX","columnDragEnded","settingsMouseDownHandler","renderSelector","renderName","renderSort","renderResize","onMouseDown","onClick","onTouchEnd","indeterminate","title","columnTooltip","columnNamePosition","columnName","columnIconUrl","columnImage","columnImageSet","src","srcSet","columnNameHidden","settingable","resizable","chGridColumnsetCss","ChGridColumnsetStyle0","ChGridColumnset","class_6","columnSortChangedHandler","chPaginatorCss","ChPaginatorStyle0","ChPaginator","class_7","activePageHandler","activePageChanged","activePage","loadElements","navigateClickedHandler","navigate","pageChangedHandler","page","emitPageNavigationRequested","first","elFirst","focus","elPrevious","elNext","last","_d","elLast","goto","pageNavigationRequested","totalPages","elPages","hasNextPage","chPaginatorNavigateCss","ChPaginatorNavigateStyle0","ChPaginatorNavigate","class_8","navigateClicked","chPaginatorPagesCss","ChPaginatorPagesStyle0","ChPaginatorPages","class_9","pageHandler","pageChanged","maxSizeHandler","validateMaxSize","renderFirstLastPagesHandler","componentDidUpdate","activeElement","buttonActive","getItems","padLeft","ceil","maxSize","padRight","fillLeft","fillStart","fillRight","fillEnd","items","getRangeItems","activeIndex","renderFirstLastPages","textDots","_","GxControlType","GxControlDataType","gxGridChameleonColumnFilterCss","GxGridChameleonColumnFilterStyle0","GridChameleonColumnFilter","filterEnum","applyClickHandler","equal","getControlValue","inputEqual","less","inputLess","greater","inputGreater","columnSettingsChanged","resetClickHandler","class_10","isArray","FilterEnum","input","dataType","gxControl","DATETIME","FilterDateTimeAsDate","DATE","gx","date","ctod","ctot","toControlValue","convertGxDateToISO","gxdate","isDateTime","pad","n","padStart","Value","isNullDate","getFullYear","getMonth","getDate","getHours","getMinutes","getFilterInputType","BOOLEAN","CHAR","VARCHAR","LONGVARCHAR","NUMBER","renderColumnFilterControl","possibleValues","label","replace","toLowerCase","COMBO","Description","EDIT","CHECK","optionValue","optionDescription","FilterCaption","FilterMode","FilterLabelEqual","FilterLabelGreater","FilterLabelLess","buttonResetText","buttonApplyText"],"sources":["src/deprecated-components/grid/grid-row/ch-grid-row.ts","src/deprecated-components/grid/grid-rowset/ch-grid-rowset.tsx","src/deprecated-components/grid/grid-cell/ch-grid-cell.ts","src/deprecated-components/grid/ch-grid-manager-column-drag.ts","src/deprecated-components/grid/ch-grid-manager-columns.ts","src/deprecated-components/grid/ch-grid-manager-selection.ts","src/deprecated-components/grid/ch-grid-manager-row-drag.ts","src/deprecated-components/grid/ch-grid-manager-row-actions.ts","src/deprecated-components/grid/ch-grid-manager-column-resize.ts","src/deprecated-components/grid/ch-grid-manager.ts","src/deprecated-components/grid/ch-grid.scss?tag=ch-grid&encapsulation=shadow","src/deprecated-components/grid/ch-grid.tsx","src/deprecated-components/grid/grid-actionbar/grid-action-refresh/ch-grid-action-refresh.scss?tag=ch-grid-action-refresh","src/deprecated-components/grid/grid-actionbar/grid-action-refresh/ch-grid-action-refresh.tsx","src/deprecated-components/grid/grid-actionbar/grid-action-settings/ch-grid-action-settings.scss?tag=ch-grid-action-settings","src/deprecated-components/grid/grid-actionbar/grid-action-settings/ch-grid-action-settings.tsx","src/deprecated-components/grid/grid-actionbar/ch-grid-actionbar.scss?tag=ch-grid-actionbar","src/deprecated-components/grid/grid-actionbar/ch-grid-actionbar.tsx","src/deprecated-components/grid/grid-column/ch-grid-column.scss?tag=ch-grid-column&encapsulation=shadow","src/deprecated-components/grid/grid-column/ch-grid-column.tsx","src/deprecated-components/grid/grid-columnset/ch-grid-columnset.scss?tag=ch-grid-columnset","src/deprecated-components/grid/grid-columnset/ch-grid-columnset.tsx","src/components/paginator/ch-paginator.scss?tag=ch-paginator","src/components/paginator/ch-paginator.tsx","src/components/paginator/paginator-navigate/ch-paginator-navigate.scss?tag=ch-paginator-navigate","src/components/paginator/paginator-navigate/ch-paginator-navigate.tsx","src/components/paginator/paginator-pages/ch-paginator-pages.scss?tag=ch-paginator-pages&encapsulation=shadow","src/components/paginator/paginator-pages/ch-paginator-pages.tsx","src/components/gx-grid/genexus.ts","src/components/gx-grid/gx-grid-column-filter/gx-grid-chameleon-column-filter.scss?tag=gx-grid-chameleon-column-filter&encapsulation=shadow","src/components/gx-grid/gx-grid-column-filter/gx-grid-chameleon-column-filter.tsx"],"sourcesContent":["import { IChGridCollapsible } from \"../ch-grid-types\";\r\nimport HTMLChGridCellElement from \"../grid-cell/ch-grid-cell\";\r\n\r\n/**\r\n * The `ch-grid-row` component represents a grid row.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-row` instead.\r\n */\r\nexport default class HTMLChGridRowElement\r\n  extends HTMLElement\r\n  implements IChGridCollapsible\r\n{\r\n  private parentGrid: HTMLChGridElement;\r\n\r\n  static get observedAttributes() {\r\n    return [\"selected\", \"marked\"];\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.addEventListener(\"cellCaretClicked\", this.cellCaretClickedHandler);\r\n\r\n    if (this.selected || this.marked) {\r\n      this.grid.syncRowState(this);\r\n    }\r\n  }\r\n\r\n  attributeChangedCallback(name: string, _oldValue: string, value: string) {\r\n    if (name === \"selected\") {\r\n      this.selected = value !== null ? value !== \"false\" : false;\r\n    }\r\n    if (name === \"marked\") {\r\n      this.marked = value !== null ? value !== \"false\" : false;\r\n    }\r\n\r\n    this.grid?.syncRowState(this);\r\n  }\r\n\r\n  /**\r\n   * Returns the parent ch-grid element of the grid row.\r\n   */\r\n  get grid(): HTMLChGridElement {\r\n    return this.parentGrid ?? this.loadParentGrid();\r\n  }\r\n\r\n  /**\r\n   * A unique identifier for the row.\r\n   */\r\n  get rowId(): string {\r\n    return this.getAttribute(\"rowid\") ?? \"\";\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is highlighted.\r\n   */\r\n  get highlighted(): boolean {\r\n    return this.hasAttribute(\"highlighted\");\r\n  }\r\n\r\n  set highlighted(value: boolean) {\r\n    const highlightedClasses = this.grid.rowHighlightedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      this.setAttribute(\"highlighted\", \"\");\r\n      if (this.grid.rowHighlightedClass) {\r\n        this.classList.add(...highlightedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"highlighted\");\r\n      if (this.grid.rowHighlightedClass) {\r\n        this.classList.remove(...highlightedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is selected.\r\n   */\r\n  get selected(): boolean {\r\n    return this.hasAttribute(\"selected\");\r\n  }\r\n\r\n  set selected(value: boolean) {\r\n    const selectedClasses = this.grid.rowSelectedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      if (!this.hasAttribute(\"selected\")) {\r\n        this.setAttribute(\"selected\", \"\");\r\n      }\r\n      if (this.grid.rowSelectedClass) {\r\n        this.classList.add(...selectedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"selected\");\r\n      if (this.grid.rowSelectedClass) {\r\n        this.classList.remove(...selectedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is marked.\r\n   */\r\n  get marked(): boolean {\r\n    return this.hasAttribute(\"marked\");\r\n  }\r\n\r\n  set marked(value: boolean) {\r\n    const markedClasses = this.grid.rowMarkedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      if (!this.hasAttribute(\"marked\")) {\r\n        this.setAttribute(\"marked\", \"\");\r\n      }\r\n      if (this.grid.rowMarkedClass) {\r\n        this.classList.add(...markedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"marked\");\r\n      if (this.grid.rowMarkedClass) {\r\n        this.classList.remove(...markedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the row is focused.\r\n   */\r\n  get focused(): boolean {\r\n    return this.hasAttribute(\"focused\");\r\n  }\r\n\r\n  set focused(value: boolean) {\r\n    const focusedClasses = this.grid.rowFocusedClass?.split(\" \");\r\n\r\n    if (value === true) {\r\n      this.setAttribute(\"focused\", \"\");\r\n      if (this.grid.rowFocusedClass) {\r\n        this.classList.add(...focusedClasses);\r\n      }\r\n    } else {\r\n      this.removeAttribute(\"focused\");\r\n      if (this.grid.rowFocusedClass) {\r\n        this.classList.remove(...focusedClasses);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the grid row has child rows.\r\n   */\r\n  get hasChildRows(): boolean {\r\n    return !!this.querySelector(\"ch-grid-rowset\");\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid row is collapsed.\r\n   */\r\n  get collapsed(): boolean {\r\n    return this.hasAttribute(\"collapsed\");\r\n  }\r\n\r\n  set collapsed(value: boolean) {\r\n    const dispatchEvent = this.collapsed !== value;\r\n\r\n    if (value) {\r\n      this.setAttribute(\"collapsed\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"collapsed\");\r\n    }\r\n\r\n    if (dispatchEvent) {\r\n      this.dispatchEvent(\r\n        new CustomEvent(\"rowCollapsedChanged\", {\r\n          bubbles: true,\r\n          composed: true,\r\n          detail: { rowId: this.rowId, collapsed: value }\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid row is a leaf node.\r\n   */\r\n  get leaf(): boolean {\r\n    return this.hasAttribute(\"leaf\");\r\n  }\r\n\r\n  set leaf(value: boolean) {\r\n    if (value === true) {\r\n      this.setAttribute(\"leaf\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"leaf\");\r\n    }\r\n  }\r\n\r\n  public getCell(column: HTMLChGridColumnElement): HTMLChGridCellElement {\r\n    return this.querySelector(\r\n      `:scope > ch-grid-cell:nth-of-type(${column.physicalOrder})`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid row is visible.\r\n   */\r\n  public isVisible(): boolean {\r\n    return Array.from(this.querySelectorAll(\":scope > ch-grid-cell\")).some(\r\n      (cell: HTMLChGridCellElement) => cell.isVisible()\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Ensures that the row is visible within the control, scrolling the contents of the control if necessary.\r\n   */\r\n  public ensureVisible() {\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"rowEnsureVisible\", { bubbles: true, composed: true })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * returns a `DOMRect` object representing the size of the grid row element.\r\n   */\r\n  public getBoundingClientRect(): DOMRect {\r\n    let rect: DOMRect;\r\n\r\n    if (!this.firstElementChild) {\r\n      rect = new DOMRect();\r\n    } else if (this.firstElementChild === this.lastElementChild) {\r\n      rect = this.firstElementChild.getBoundingClientRect();\r\n    } else {\r\n      const firstCellRect = this.firstElementChild.getBoundingClientRect();\r\n      const lastCellRect = this.lastElementChild.getBoundingClientRect();\r\n\r\n      rect = new DOMRect(\r\n        firstCellRect.x,\r\n        firstCellRect.y,\r\n        lastCellRect.x - firstCellRect.x + lastCellRect.width,\r\n        lastCellRect.y - firstCellRect.y + lastCellRect.height\r\n      );\r\n    }\r\n\r\n    return rect;\r\n  }\r\n\r\n  private cellCaretClickedHandler(eventInfo: PointerEvent) {\r\n    const targetRow = eventInfo.currentTarget as HTMLChGridRowElement;\r\n\r\n    if (targetRow.hasChildRows) {\r\n      this.collapsed = !this.collapsed;\r\n    }\r\n    eventInfo.stopPropagation();\r\n  }\r\n\r\n  private loadParentGrid(): HTMLChGridElement {\r\n    this.parentGrid = this.closest(\"ch-grid\");\r\n    return this.parentGrid;\r\n  }\r\n}\r\n\r\nif (!customElements.get(\"ch-grid-row\")) {\r\n  customElements.define(\"ch-grid-row\", HTMLChGridRowElement);\r\n}\r\n","import { IChGridCollapsible } from \"../ch-grid-types\";\r\n\r\n/**\r\n * The `ch-grid-rowset` component represents a group of rows.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-rowset` instead.\r\n */\r\nexport default class HTMLChGridRowsetElement\r\n  extends HTMLElement\r\n  implements IChGridCollapsible\r\n{\r\n  private computedLevel = 0;\r\n  private grid: HTMLChGridElement;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.addEventListener(\r\n      \"rowsetLegendClicked\",\r\n      this.rowsetLegendClickedHandler\r\n    );\r\n    this.defineLevel();\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid rowset is collapsed.\r\n   */\r\n  get collapsed(): boolean {\r\n    return this.hasAttribute(\"collapsed\");\r\n  }\r\n\r\n  set collapsed(value: boolean) {\r\n    if (value) {\r\n      this.setAttribute(\"collapsed\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"collapsed\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the zero-based depth of the rowset in the tree.\r\n   */\r\n  get level(): number {\r\n    if (!this.computedLevel) {\r\n      this.computeLevel();\r\n    }\r\n\r\n    return this.computedLevel;\r\n  }\r\n\r\n  /**\r\n   * returns a `DOMRect` object representing the size of the grid rowset element.\r\n   */\r\n  public getBoundingClientRect(): DOMRect {\r\n    let rect: DOMRect;\r\n\r\n    const paddingTop = parseInt(this.style.getPropertyValue(\"padding-top\"));\r\n    const paddingbottom = parseInt(\r\n      this.style.getPropertyValue(\"padding-bottom\")\r\n    );\r\n\r\n    if (!this.firstElementChild) {\r\n      const mainRect = this.grid.shadowRoot\r\n        .querySelector(\".main\")\r\n        .getBoundingClientRect();\r\n      rect = new DOMRect(mainRect.x, mainRect.y, mainRect.width, 0);\r\n    } else if (this.firstElementChild === this.lastElementChild) {\r\n      const firstRowRect = this.firstElementChild.getBoundingClientRect();\r\n\r\n      rect = new DOMRect(\r\n        firstRowRect.x,\r\n        firstRowRect.y - paddingTop,\r\n        firstRowRect.x + firstRowRect.width,\r\n        firstRowRect.y + firstRowRect.height + paddingTop + paddingbottom\r\n      );\r\n    } else {\r\n      const firstRowRect = this.firstElementChild.getBoundingClientRect();\r\n      const lastRowRect = this.lastElementChild.getBoundingClientRect();\r\n\r\n      rect = new DOMRect(\r\n        firstRowRect.x,\r\n        firstRowRect.y - paddingTop,\r\n        lastRowRect.x - firstRowRect.x + lastRowRect.width,\r\n        lastRowRect.y -\r\n          firstRowRect.y +\r\n          lastRowRect.height +\r\n          paddingTop +\r\n          paddingbottom\r\n      );\r\n    }\r\n\r\n    return rect;\r\n  }\r\n\r\n  private rowsetLegendClickedHandler(eventInfo: CustomEvent) {\r\n    eventInfo.stopPropagation();\r\n\r\n    this.collapsed = !this.collapsed;\r\n  }\r\n\r\n  private defineLevel() {\r\n    this.style.setProperty(\"--level\", this.level.toString());\r\n  }\r\n\r\n  private computeLevel() {\r\n    this.computedLevel = this.getParentRowset()?.level ?? 0;\r\n\r\n    if (this.hasLegend() || this.isNestedRow()) {\r\n      this.computedLevel++;\r\n    }\r\n  }\r\n\r\n  private hasLegend(): boolean {\r\n    return this.firstElementChild?.tagName === \"CH-GRID-ROWSET-LEGEND\";\r\n  }\r\n\r\n  private isNestedRow(): boolean {\r\n    return this.parentElement.tagName === \"CH-GRID-ROW\";\r\n  }\r\n\r\n  private getParentRowset(): HTMLChGridRowsetElement | undefined {\r\n    const node = this.parentElement.closest(\"ch-grid-rowset, ch-grid\");\r\n\r\n    if (node.tagName === \"CH-GRID-ROWSET\") {\r\n      return node as HTMLChGridRowsetElement;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n}\r\n\r\nif (!customElements.get(\"ch-grid-rowset\")) {\r\n  customElements.define(\"ch-grid-rowset\", HTMLChGridRowsetElement);\r\n}\r\n","import HTMLChGridRowElement from \"../grid-row/ch-grid-row\";\r\n\r\n/**\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `TabularGridCellType` instead.\r\n *\r\n * ChGridCellType indicates the type of cell.\r\n * \"Plain\" is a simple cell that shows the contents of it.\r\n * \"Rich\" is a rich cell that, in addition to displaying its content, enables\r\n * the user to execute different actions on the row.\r\n * The actions are:\r\n * - allow dragging the row to reorder it.\r\n * - allow to select the row by means of a checkbox.\r\n * - allow displaying actions to be executed in the row.\r\n * \"TreeNode\" is a cell that represents a node of the Tree.\r\n */\r\nexport enum ChGridCellType {\r\n  Plain = \"plain\",\r\n  Rich = \"rich\",\r\n  TreeNode = \"node\"\r\n}\r\n\r\n/**\r\n * The `ch-grid-cell` component represents a grid cell.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-cell` instead.\r\n */\r\nexport default class HTMLChGridCellElement extends HTMLElement {\r\n  private cellType = ChGridCellType.Plain;\r\n  private caret: HTMLDivElement;\r\n  private drag: HTMLDivElement;\r\n  private action: HTMLButtonElement;\r\n  private selector: HTMLInputElement;\r\n  private selectorLabel: HTMLLabelElement;\r\n\r\n  public rowDrag: boolean;\r\n  public rowSelector: boolean;\r\n  public rowActions: boolean;\r\n\r\n  static get observedAttributes() {\r\n    return [\"cell-type\", \"row-drag\", \"row-selector\", \"row-actions\"];\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.defineFocusHandler();\r\n  }\r\n\r\n  connectedCallback() {\r\n    if (this.cellType !== ChGridCellType.Plain) {\r\n      this.define();\r\n    }\r\n  }\r\n\r\n  attributeChangedCallback(name: string, _oldValue: string, value: string) {\r\n    if (name === \"cell-type\") {\r\n      this.cellType = value as ChGridCellType;\r\n    }\r\n    if (name === \"row-drag\") {\r\n      this.cellType = ChGridCellType.Rich;\r\n      this.rowDrag = value !== null ? value !== \"false\" : false;\r\n    }\r\n    if (name === \"row-selector\") {\r\n      this.cellType = ChGridCellType.Rich;\r\n      this.rowSelector = value !== null ? value !== \"false\" : false;\r\n    }\r\n    if (name === \"row-actions\") {\r\n      this.cellType = ChGridCellType.Rich;\r\n      this.rowActions = value !== null ? value !== \"false\" : false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * One of \"plain\", \"rich\", or \"node\", indicating the type of cell.\r\n   */\r\n  get type(): ChGridCellType {\r\n    return this.cellType;\r\n  }\r\n\r\n  set type(value: ChGridCellType) {\r\n    if (this.cellType !== value) {\r\n      this.cellType = value;\r\n      this.define();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the parent ch-grid element of the cell.\r\n   */\r\n  get grid(): HTMLChGridElement {\r\n    return this.closest(\"ch-grid\");\r\n  }\r\n\r\n  /**\r\n   * Returns the ch-grid-column element of the cell.\r\n   */\r\n  get column(): HTMLChGridColumnElement {\r\n    const cellIndex = Array.prototype.indexOf.call(\r\n      this.row.querySelectorAll(`:scope > ch-grid-cell`),\r\n      this\r\n    );\r\n    return this.grid.querySelector(\r\n      `ch-grid-column:nth-of-type(${cellIndex + 1})`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the parent ch-grid-row element of the cell.\r\n   */\r\n  get row(): HTMLChGridRowElement {\r\n    return this.parentElement as HTMLChGridRowElement;\r\n  }\r\n\r\n  /**\r\n   * A unique identifier for the cell.\r\n   */\r\n  get cellId(): string {\r\n    return this.getAttribute(\"cellid\") ?? \"\";\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the cell is selected.\r\n   */\r\n  get selected(): boolean {\r\n    return this.hasAttribute(\"selected\");\r\n  }\r\n\r\n  set selected(value: boolean) {\r\n    if (value === true) {\r\n      this.setAttribute(\"selected\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"selected\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicating whether the cell is focused.\r\n   */\r\n  get focused(): boolean {\r\n    return this.hasAttribute(\"focused\");\r\n  }\r\n\r\n  set focused(value: boolean) {\r\n    if (value === true) {\r\n      this.setAttribute(\"focused\", \"\");\r\n    } else {\r\n      this.removeAttribute(\"focused\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the grid cell is visible.\r\n   */\r\n  public isVisible(): boolean {\r\n    return this.offsetParent !== null;\r\n  }\r\n\r\n  /**\r\n   * Ensures that the cell is visible within the control, scrolling the contents of the control if necessary.\r\n   */\r\n  public ensureVisible() {\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"cellEnsureVisible\", { bubbles: true, composed: true })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * A boolean value indicates whether the selector of cell is checked or not.\r\n   */\r\n  public setSelectorChecked(value: boolean) {\r\n    this.selector.checked = value;\r\n\r\n    if (this.selector.checked) {\r\n      this.selector.setAttribute(\"part\", \"selector checked\");\r\n    } else {\r\n      this.selector.setAttribute(\"part\", \"selector\");\r\n    }\r\n  }\r\n\r\n  private defineFocusHandler() {\r\n    this.addEventListener(\"focusin\", () => {\r\n      if (!this.rowSelector) {\r\n        this.dispatchEvent(\r\n          new CustomEvent(\"cellFocused\", { bubbles: true, composed: true })\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  private caretMouseDownHandler(eventInfo: Event) {\r\n    eventInfo.stopPropagation();\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"cellCaretClicked\", { bubbles: true, composed: true })\r\n    );\r\n  }\r\n\r\n  private selectorClickHandler(eventInfo: MouseEvent) {\r\n    eventInfo.stopPropagation();\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent<ChGridCellSelectorClickedEvent>(\"cellSelectorClicked\", {\r\n        bubbles: true,\r\n        composed: true,\r\n        detail: {\r\n          checked: this.selector.checked,\r\n          range: eventInfo.shiftKey\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private selectorLabelClickHandler(eventInfo: MouseEvent) {\r\n    if (!eventInfo.shiftKey) {\r\n      eventInfo.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private dragMouseDownHandler(eventInfo: MouseEvent) {\r\n    eventInfo.preventDefault();\r\n    eventInfo.stopPropagation();\r\n\r\n    this.dispatchEvent(\r\n      new CustomEvent<ChGridRowDragEvent>(\"rowDragStarted\", {\r\n        bubbles: true,\r\n        composed: true,\r\n        detail: {\r\n          row: this.row\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private actionClickHandler() {\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"cellRowActionClicked\", {\r\n        bubbles: true,\r\n        composed: true\r\n      })\r\n    );\r\n  }\r\n\r\n  private define() {\r\n    switch (this.cellType) {\r\n      case ChGridCellType.Rich:\r\n        this.defineRich();\r\n        break;\r\n      case ChGridCellType.TreeNode:\r\n        this.defineTreeNode();\r\n        break;\r\n    }\r\n  }\r\n\r\n  private defineRich() {\r\n    let html = \"\";\r\n\r\n    if (!this.shadowRoot || this.shadowRoot.innerHTML === \"\") {\r\n      this.attachShadow({ mode: \"open\" });\r\n\r\n      if (this.rowDrag) {\r\n        html += `\r\n          <div part=\"drag-icon\"></div>\r\n        `;\r\n      }\r\n\r\n      if (this.rowSelector) {\r\n        html += `\r\n          <style>label {display:flex}</style>\r\n          <label part=\"selector-label\">\r\n            <input type=\"checkbox\" part=\"selector\">\r\n          </label>\r\n        `;\r\n      }\r\n\r\n      if (this.rowActions) {\r\n        html += `\r\n          <button part=\"actions-icon\"></button>\r\n        `;\r\n      }\r\n\r\n      this.shadowRoot.innerHTML = `\r\n        ${html}\r\n        <slot></slot>\r\n      `;\r\n\r\n      if (this.rowDrag) {\r\n        this.drag = this.shadowRoot.querySelector(\"[part='drag-icon']\");\r\n        this.drag.addEventListener(\r\n          \"mousedown\",\r\n          this.dragMouseDownHandler.bind(this)\r\n        );\r\n      }\r\n\r\n      if (this.rowActions) {\r\n        this.action = this.shadowRoot.querySelector(\"[part='actions-icon']\");\r\n        this.action.addEventListener(\r\n          \"click\",\r\n          this.actionClickHandler.bind(this)\r\n        );\r\n      }\r\n\r\n      if (this.rowSelector) {\r\n        this.selector = this.shadowRoot.querySelector(\"[part='selector']\");\r\n        this.selector.addEventListener(\"mousedown\", (eventInfo: MouseEvent) =>\r\n          eventInfo.stopPropagation()\r\n        );\r\n        this.selector.addEventListener(\"touchend\", (eventInfo: TouchEvent) =>\r\n          eventInfo.stopPropagation()\r\n        );\r\n        this.selector.addEventListener(\r\n          \"click\",\r\n          this.selectorClickHandler.bind(this)\r\n        );\r\n\r\n        this.selectorLabel = this.shadowRoot.querySelector(\r\n          \"[part='selector-label']\"\r\n        );\r\n        this.selectorLabel.addEventListener(\r\n          \"mousedown\",\r\n          (eventInfo: MouseEvent) => eventInfo.stopPropagation()\r\n        );\r\n        this.selectorLabel.addEventListener(\r\n          \"touchend\",\r\n          (eventInfo: MouseEvent) => eventInfo.stopPropagation()\r\n        );\r\n        this.selectorLabel.addEventListener(\r\n          \"click\",\r\n          this.selectorLabelClickHandler.bind(this)\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private defineTreeNode() {\r\n    if (!this.shadowRoot || this.shadowRoot.innerHTML === \"\") {\r\n      this.attachShadow({ mode: \"open\" });\r\n      this.shadowRoot.innerHTML = `\r\n        <style>:host::before {content: none !important}</style>\r\n        <div part=\"indent\"></div>\r\n        <div part=\"caret\"></div>\r\n        <input type=\"checkbox\" part=\"node-selector\" hidden>\r\n        <div part=\"node-icon\"></div>\r\n        <slot></slot>\r\n      `;\r\n\r\n      this.caret = this.shadowRoot.querySelector(\"[part='caret']\");\r\n      this.caret.addEventListener(\r\n        \"mousedown\",\r\n        this.caretMouseDownHandler.bind(this)\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * Use `ch-tabular-grid` component instead.\r\n * Use `ChTabularGridCellSelectorClickedEvent` instead.\r\n */\r\nexport interface ChGridCellSelectorClickedEvent {\r\n  checked: boolean;\r\n  range: boolean;\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * Use `ch-tabular-grid` component instead.\r\n * Use `ChTabularGridRowDragEvent` instead.\r\n */\r\nexport interface ChGridRowDragEvent {\r\n  row: HTMLChGridRowElement;\r\n  positionX?: number;\r\n  direction?: \"top\" | \"bottom\";\r\n}\r\n\r\nif (!customElements.get(\"ch-grid-cell\")) {\r\n  customElements.define(\"ch-grid-cell\", HTMLChGridCellElement);\r\n}\r\n","import { CSSProperties } from \"./ch-grid-types\";\r\n\r\nexport class ChGridManagerColumnDrag {\r\n  private column: ChGridManagerColumnDragItem;\r\n  private columns: ChGridManagerColumnDragItem[];\r\n  private isRTL: boolean;\r\n  private lastTargetOrder = 0;\r\n\r\n  constructor(\r\n    columnId: string,\r\n    columns: HTMLChGridColumnElement[],\r\n    isRTL: boolean\r\n  ) {\r\n    this.isRTL = isRTL;\r\n    this.columns = columns.map(column => ({\r\n      element: column,\r\n      rect: column.getBoundingClientRect(),\r\n      translateX: 0,\r\n      order: column.order\r\n    }));\r\n    this.column = this.columns.find(item => item.element.columnId === columnId);\r\n\r\n    this.columns.forEach(this.setColumnHiddenRect.bind(this));\r\n  }\r\n\r\n  dragging(position: number): boolean {\r\n    /**\r\n     * Indica el orden inicial de la columna que se está arrastrando\r\n     */\r\n    const sourceOrder = this.column.element.order;\r\n\r\n    /**\r\n     * Indica a qué grupo de fijación pertenece la columna que se está arrastrando\r\n     */\r\n    const sourceFreeze = this.column.element.freeze;\r\n\r\n    let targetOrder = 0;\r\n    let targetOrderChanged = false;\r\n\r\n    this.column.translateX = 0;\r\n    this.columns\r\n      .filter(column => column.element.freeze === sourceFreeze)\r\n      .forEach(column => {\r\n        /**\r\n         * Indica el orden de la columna actual\r\n         */\r\n        const columnOrder = column.element.order;\r\n\r\n        /**\r\n         * Indica si la columna que se está arrastrando estaba a la derecha o\r\n         * a la izquierda de la actual cuando se inició el arrastre para\r\n         * incrementar el orden según corresponda.\r\n         */\r\n        const dragDirection = sourceOrder > columnOrder ? 1 : -1;\r\n\r\n        /**\r\n         * Indica si la columna actual hay que desplazarla a la derecha o\r\n         * a la izquierda cuando se cruce con la columna arrastrada.\r\n         */\r\n        const shiftDirection =\r\n          (sourceOrder > columnOrder ? 1 : -1) * (this.isRTL ? -1 : 1);\r\n\r\n        if (\r\n          column.rect.left < position &&\r\n          position < column.rect.right &&\r\n          columnOrder !== sourceOrder\r\n        ) {\r\n          /*\r\n            La posicion actual del mouse está dentro de la columna actual y\r\n            no es la columna que se está arrastrando\r\n          */\r\n          this.swapColumnPosition(column, shiftDirection);\r\n\r\n          // actualizo el orden de la columna actual\r\n          column.order = column.element.order + dragDirection;\r\n\r\n          targetOrder = columnOrder;\r\n        } else if (\r\n          position < column.rect.left &&\r\n          (this.isRTL ? columnOrder > sourceOrder : columnOrder < sourceOrder)\r\n        ) {\r\n          /*\r\n            La posicion actual del mouse está a la izquierda de la columna actual\r\n            haciendo que la columna arrastrada cruce la actual.\r\n          */\r\n          this.swapColumnPosition(column, shiftDirection);\r\n\r\n          // actualizo el orden de la columna actual\r\n          column.order = column.element.order + dragDirection;\r\n\r\n          if (\r\n            !targetOrder ||\r\n            (this.isRTL ? columnOrder > targetOrder : columnOrder < targetOrder)\r\n          ) {\r\n            targetOrder = columnOrder;\r\n          }\r\n        } else if (\r\n          position > column.rect.right &&\r\n          (this.isRTL ? columnOrder < sourceOrder : columnOrder > sourceOrder)\r\n        ) {\r\n          /*\r\n            La posicion actual del mouse está a la derecha de la columna actual\r\n            haciendo que la columna arrastrada cruce la actual.\r\n          */\r\n          this.swapColumnPosition(column, shiftDirection);\r\n\r\n          // actualizo el orden de la columna actual\r\n          column.order = column.element.order + dragDirection;\r\n\r\n          if (\r\n            !targetOrder ||\r\n            (this.isRTL ? columnOrder < targetOrder : columnOrder > targetOrder)\r\n          ) {\r\n            targetOrder = columnOrder;\r\n          }\r\n        } else if (columnOrder !== sourceOrder) {\r\n          /*\r\n            La posicion actual del mouse NO está dentro de la columna actual ni\r\n            la cruza.\r\n          */\r\n          this.resetColumnPosition(column);\r\n        }\r\n      });\r\n\r\n    this.column.order = targetOrder ? targetOrder : this.column.element.order;\r\n\r\n    targetOrderChanged = targetOrder !== this.lastTargetOrder;\r\n    this.lastTargetOrder = targetOrder;\r\n\r\n    return targetOrderChanged;\r\n  }\r\n\r\n  dragEnd() {\r\n    this.columns.forEach(column => {\r\n      column.element.order = column.order;\r\n      column.translateX = 0;\r\n    });\r\n  }\r\n\r\n  getColumnStyle(column: HTMLChGridColumnElement): CSSProperties {\r\n    return {\r\n      [`--ch-grid-column-${column.physicalOrder}-transform`]: `translateX(${\r\n        this.columns.find(columnItem => columnItem.element === column)\r\n          .translateX\r\n      }px)`\r\n    };\r\n  }\r\n\r\n  getColumnsFirstLast(): {\r\n    columnFirst: HTMLChGridColumnElement;\r\n    columnLast: HTMLChGridColumnElement;\r\n  } {\r\n    let itemFirst: ChGridManagerColumnDragItem;\r\n    let itemLast: ChGridManagerColumnDragItem;\r\n\r\n    this.columns.forEach(item => {\r\n      if (\r\n        !item.element.hidden &&\r\n        (!itemFirst || item.order < itemFirst.order)\r\n      ) {\r\n        itemFirst = item;\r\n      }\r\n      if (!item.element.hidden && (!itemLast || item.order > itemLast.order)) {\r\n        itemLast = item;\r\n      }\r\n    });\r\n\r\n    return {\r\n      columnFirst: itemFirst.element,\r\n      columnLast: itemLast.element\r\n    };\r\n  }\r\n\r\n  private swapColumnPosition(\r\n    column: ChGridManagerColumnDragItem,\r\n    shiftDirection: number\r\n  ) {\r\n    // desplazo la columna actual para ocupar el espacio que dejó\r\n    // la columna arrastrada\r\n    column.translateX = this.column.rect.width * shiftDirection;\r\n\r\n    // desplazo la columna que se está arrastrando para que ocupe el\r\n    // espacio que dejó la columna actual\r\n    this.column.translateX += column.rect.width * (shiftDirection * -1);\r\n  }\r\n\r\n  private resetColumnPosition(column: ChGridManagerColumnDragItem) {\r\n    // no desplazo la columna actual\r\n    column.translateX = 0;\r\n\r\n    // asigno su posición original\r\n    column.order = column.element.order;\r\n  }\r\n\r\n  private setColumnHiddenRect(column: ChGridManagerColumnDragItem) {\r\n    if (column.element.hidden) {\r\n      const columnSibling =\r\n        this.getPreviousSiblingVisible(column) ||\r\n        this.getNextSiblingVisible(column);\r\n\r\n      column.rect = new DOMRect(\r\n        column.element.order < columnSibling.element.order\r\n          ? columnSibling.rect.left\r\n          : columnSibling.rect.right,\r\n        columnSibling.rect.y,\r\n        0,\r\n        columnSibling.rect.height\r\n      );\r\n    }\r\n  }\r\n\r\n  private getPreviousSiblingVisible(\r\n    hidden: ChGridManagerColumnDragItem\r\n  ): ChGridManagerColumnDragItem {\r\n    let previous: ChGridManagerColumnDragItem;\r\n\r\n    this.columns.forEach(column => {\r\n      if (\r\n        !column.element.hidden &&\r\n        column.element.order < hidden.element.order &&\r\n        (!previous || column.element.order > previous.element.order)\r\n      ) {\r\n        previous = column;\r\n      }\r\n    });\r\n\r\n    return previous;\r\n  }\r\n\r\n  private getNextSiblingVisible(\r\n    hidden: ChGridManagerColumnDragItem\r\n  ): ChGridManagerColumnDragItem {\r\n    let next: ChGridManagerColumnDragItem;\r\n\r\n    this.columns.forEach(column => {\r\n      if (\r\n        !column.element.hidden &&\r\n        column.element.order > hidden.element.order &&\r\n        (!next || column.element.order < next.element.order)\r\n      ) {\r\n        next = column;\r\n      }\r\n    });\r\n\r\n    return next;\r\n  }\r\n}\r\n\r\ninterface ChGridManagerColumnDragItem {\r\n  element: HTMLChGridColumnElement;\r\n  rect: DOMRect;\r\n  translateX: number;\r\n  order: number;\r\n}\r\n","import HTMLChGridCellElement, {\r\n  ChGridCellType\r\n} from \"./grid-cell/ch-grid-cell\";\r\nimport { ChGridManager } from \"./ch-grid-manager\";\r\n\r\nexport class ChGridManagerColumns {\r\n  private manager: ChGridManager;\r\n  private columnsetObserver = new MutationObserver(\r\n    this.reloadColumns.bind(this)\r\n  );\r\n  private columnResizeObserver = new ResizeObserver(\r\n    this.resizeColumnHandler.bind(this)\r\n  );\r\n  private columns: HTMLChGridColumnElement[];\r\n  private columnsDisplay: HTMLChGridColumnDisplayElement[] = [];\r\n  private columnsWidth: number[] = [];\r\n\r\n  constructor(manager: ChGridManager) {\r\n    this.manager = manager;\r\n    this.columns = Array.from(\r\n      this.manager.grid.querySelectorAll(\"ch-grid-column\")\r\n    );\r\n\r\n    this.observeColumnset();\r\n\r\n    this.defineColumns(this.columns);\r\n    this.defineColumnsVariables();\r\n\r\n    this.adjustFreezeOrder();\r\n    this.adjustBaseLayer();\r\n  }\r\n\r\n  public getColumn(columnId: string): HTMLChGridColumnElement {\r\n    return this.columns.find(column => column.columnId === columnId);\r\n  }\r\n\r\n  public getColumns(sorted = false): HTMLChGridColumnElement[] {\r\n    if (sorted) {\r\n      return this.columns.sort(this.fnSortByOrder);\r\n    }\r\n    return this.columns;\r\n  }\r\n\r\n  public getColumnsFirstLast(): {\r\n    columnFirst: HTMLChGridColumnElement;\r\n    columnLast: HTMLChGridColumnElement;\r\n  } {\r\n    let columnFirst: HTMLChGridColumnElement;\r\n    let columnLast: HTMLChGridColumnElement;\r\n\r\n    this.columns.forEach(column => {\r\n      if (\r\n        !column.hidden &&\r\n        (!columnFirst || column.order < columnFirst.order)\r\n      ) {\r\n        columnFirst = column;\r\n      }\r\n      if (!column.hidden && (!columnLast || column.order > columnLast.order)) {\r\n        columnLast = column;\r\n      }\r\n    });\r\n\r\n    return {\r\n      columnFirst,\r\n      columnLast\r\n    };\r\n  }\r\n\r\n  public getColumnSelector(): HTMLChGridColumnElement {\r\n    return this.columns.find(\r\n      column => column.columnType === \"rich\" && column.richRowSelector\r\n    );\r\n  }\r\n\r\n  public adjustFreezeOrder() {\r\n    const freezeStart = this.columns\r\n      .filter(column => column.freeze === \"start\")\r\n      .sort(this.fnSortByOrder);\r\n    const noFreeze = this.columns\r\n      .filter(column => column.freeze !== \"start\" && column.freeze !== \"end\")\r\n      .sort(this.fnSortByOrder);\r\n    const freezeEnd = this.columns\r\n      .filter(column => column.freeze === \"end\")\r\n      .sort(this.fnSortByOrder);\r\n    let order = 1;\r\n\r\n    freezeStart.forEach(column => (column.order = order++));\r\n    noFreeze.forEach(column => (column.order = order++));\r\n    freezeEnd.forEach(column => (column.order = order++));\r\n  }\r\n\r\n  private defineColumns(columns: HTMLChGridColumnElement[]) {\r\n    columns.forEach(column => {\r\n      this.defineColumnId(column);\r\n      this.defineColumnIndex(column);\r\n      this.defineColumnOrder(column);\r\n      this.defineColumnSize(column);\r\n      this.defineColumnDisplayObserver(column);\r\n      this.defineColumnResizeObserver(column);\r\n      this.defineColumnType(column);\r\n    });\r\n  }\r\n\r\n  private defineColumnId(column: HTMLChGridColumnElement) {\r\n    column.columnId ||= this.getColumnUniqueId();\r\n  }\r\n\r\n  private defineColumnIndex(column: HTMLChGridColumnElement) {\r\n    column.physicalOrder = this.columns.indexOf(column) + 1;\r\n  }\r\n\r\n  private defineColumnOrder(column: HTMLChGridColumnElement) {\r\n    column.order ||= column.physicalOrder;\r\n  }\r\n\r\n  private defineColumnSize(column: HTMLChGridColumnElement) {\r\n    column.size ||= \"auto\";\r\n  }\r\n\r\n  private defineColumnDisplayObserver(column: HTMLChGridColumnElement) {\r\n    if (column.displayObserverClass && !column.hidden) {\r\n      const i =\r\n        this.columnsDisplay.push(\r\n          document.createElement(\"ch-grid-column-display\")\r\n        ) - 1;\r\n\r\n      this.columnsDisplay[i].setAttribute(\"slot\", \"column-display\");\r\n      this.columnsDisplay[i].setAttribute(\"class\", column.displayObserverClass);\r\n      this.columnsDisplay[i].column = column;\r\n\r\n      this.manager.grid.appendChild(this.columnsDisplay[i]);\r\n    }\r\n  }\r\n\r\n  private defineColumnResizeObserver(column: HTMLChGridColumnElement) {\r\n    this.columnResizeObserver.observe(column, { box: \"border-box\" });\r\n  }\r\n\r\n  private defineColumnType(column: HTMLChGridColumnElement) {\r\n    switch (column.columnType) {\r\n      case \"tree\":\r\n        this.manager.grid\r\n          .querySelectorAll(`ch-grid-cell:nth-child(${column.physicalOrder})`)\r\n          .forEach((cell: HTMLChGridCellElement) => {\r\n            cell.type = ChGridCellType.TreeNode;\r\n          });\r\n        break;\r\n      case \"rich\":\r\n        this.manager.grid\r\n          .querySelectorAll(`ch-grid-cell:nth-child(${column.physicalOrder})`)\r\n          .forEach((cell: HTMLChGridCellElement) => {\r\n            cell.rowDrag = column.richRowDrag;\r\n            cell.rowSelector = column.richRowSelector;\r\n            cell.rowActions = column.richRowActions;\r\n            cell.type = ChGridCellType.Rich;\r\n          });\r\n        break;\r\n    }\r\n  }\r\n\r\n  private defineColumnsVariables() {\r\n    const root: Document | ShadowRoot = this.manager.grid.getRootNode() as\r\n      | Document\r\n      | ShadowRoot;\r\n    const style = root.querySelector(\"#ch-grid-columns-variables\");\r\n\r\n    if (\r\n      !style ||\r\n      parseInt(style.getAttribute(\"data-columns\")) < this.columns.length\r\n    ) {\r\n      let selectors = \"\";\r\n      for (let i = 1; i <= this.columns.length; i++) {\r\n        selectors += `ch-grid-column:nth-child(${i}), ch-grid-cell:nth-child(${i}) {\r\n                        display: var(--ch-grid-column-${i}-display, flex);\r\n                        grid-column: var(--ch-grid-column-${i}-position, ${i});\r\n                        margin-inline-start: var(--ch-grid-column-${i}-margin-start);\r\n                        border-inline-start: var(--ch-grid-column-${i}-border-start);\r\n                        padding-inline-start: var(--ch-grid-column-${i}-padding-start);\r\n                        margin-inline-end: var(--ch-grid-column-${i}-margin-end);\r\n                        border-inline-end: var(--ch-grid-column-${i}-border-end);\r\n                        padding-inline-end: var(--ch-grid-column-${i}-padding-end);\r\n                        left: var(--ch-grid-column-${i}-left-freeze);\r\n                        right: var(--ch-grid-column-${i}-right-freeze);\r\n                    }\r\n                    ch-grid-column:nth-child(${i}) {\r\n                      transform: var(--ch-grid-column-${i}-transform);\r\n                      z-index: calc(var(--ch-grid-column-${i}-z-index-freeze, 0) + var(--ch-grid-column-z-index-head, 0)  + var(--ch-grid-column-z-index-active, 0));\r\n                    }\r\n                    ch-grid-cell:nth-child(${i}) {\r\n                      transform: var(--ch-grid-virtual-scroller-position,) var(--ch-grid-column-${i}-transform,);\r\n                      z-index: calc(var(--ch-grid-column-${i}-z-index-freeze, 0) + var(--ch-grid-cell-z-index-active, 0));\r\n                    }\r\n                    ch-grid-cell:nth-child(${i})::before {\r\n                      content: var(--ch-grid-column-${i}-content);\r\n                    }\r\n                `;\r\n      }\r\n\r\n      const styleInnerHTML = `@layer ch-grid {\r\n        ${selectors}\r\n      }`;\r\n\r\n      if (style) {\r\n        style.setAttribute(\"data-columns\", this.columns.length.toString());\r\n        style.innerHTML = styleInnerHTML;\r\n      } else if (root instanceof Document) {\r\n        root.head.insertAdjacentHTML(\r\n          \"beforeend\",\r\n          `<style id=\"ch-grid-columns-variables\" data-columns=\"${this.columns.length}\">${styleInnerHTML}</style>`\r\n        );\r\n      } else if (root instanceof ShadowRoot) {\r\n        const s = document.createElement(\"style\");\r\n        s.id = \"ch-grid-columns-variables\";\r\n        s.dataset.columns = this.columns.length.toString();\r\n        s.innerText = styleInnerHTML;\r\n        root.appendChild(s);\r\n      }\r\n    }\r\n  }\r\n\r\n  private undefineColumns(columns: HTMLChGridColumnElement[]) {\r\n    columns.forEach(column => {\r\n      this.columnResizeObserver.unobserve(column);\r\n      this.columnsDisplay\r\n        .filter(columnDisplay => columnDisplay.column === column)\r\n        .forEach(item => {\r\n          item.remove();\r\n        });\r\n    });\r\n  }\r\n\r\n  private observeColumnset() {\r\n    this.columnsetObserver.observe(\r\n      this.manager.grid.querySelector(\"ch-grid-columnset\"),\r\n      { childList: true }\r\n    );\r\n  }\r\n\r\n  private reloadColumns() {\r\n    const columns = Array.from(\r\n      this.manager.grid.querySelectorAll(\"ch-grid-column\")\r\n    );\r\n    const columnsAdded = columns.filter(\r\n      column => !this.columns.includes(column)\r\n    );\r\n    const columnsRemoved = this.columns.filter(\r\n      column => !columns.includes(column)\r\n    );\r\n\r\n    if (columnsAdded.length || columnsRemoved.length) {\r\n      this.columns = columns;\r\n\r\n      this.undefineColumns(columnsRemoved);\r\n      this.defineColumns(columnsAdded);\r\n      this.defineColumnsVariables();\r\n\r\n      this.adjustOrders();\r\n      this.adjustBaseLayer();\r\n    }\r\n  }\r\n\r\n  private resizeColumnHandler(entries: ResizeObserverEntry[]) {\r\n    for (const entry of entries) {\r\n      const column = entry.target as HTMLChGridColumnElement;\r\n      this.columnsWidth[column.physicalOrder - 1] = entry.contentRect.width;\r\n    }\r\n\r\n    this.manager.setColumnWidthVariables(this.columnsWidth);\r\n  }\r\n\r\n  private getColumnUniqueId(): string {\r\n    const uniqueId =\r\n      Date.now().toString(36) + Math.random().toString(36).substring(2);\r\n\r\n    return `ch-grid-column-auto-${uniqueId}`;\r\n  }\r\n\r\n  private adjustOrders() {\r\n    // adjust physicalOrder\r\n    this.columns.forEach((column, i) => (column.physicalOrder = i + 1));\r\n\r\n    // adjust order, preserving physicalOrder array\r\n    [...this.columns].sort(this.fnSortByOrder).forEach((column, i) => {\r\n      column.order = i + 1;\r\n    });\r\n  }\r\n\r\n  private adjustBaseLayer() {\r\n    this.manager.setBaseLayer(this.columns.length);\r\n  }\r\n\r\n  private fnSortByOrder(\r\n    columnA: HTMLChGridColumnElement,\r\n    columnB: HTMLChGridColumnElement\r\n  ): number {\r\n    if (columnA.order < columnB.order) {\r\n      return -1;\r\n    }\r\n    if (columnA.order > columnB.order) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n}\r\n","import HTMLChGridCellElement from \"./grid-cell/ch-grid-cell\";\r\nimport HTMLChGridRowElement from \"./grid-row/ch-grid-row\";\r\nimport { ChGridManager } from \"./ch-grid-manager\";\r\n\r\nexport type ManagerSelectionState = {\r\n  rowFocused: HTMLChGridRowElement;\r\n  rowsSelected: HTMLChGridRowElement[];\r\n  cellFocused: HTMLChGridCellElement;\r\n  cellSelected: HTMLChGridCellElement;\r\n};\r\n\r\nexport class ChGridManagerSelection {\r\n  private manager: ChGridManager;\r\n  private rangeStart: HTMLChGridRowElement;\r\n  private rangeValue: boolean;\r\n  private lastSelected: HTMLChGridRowElement;\r\n  private lastRowMarked: HTMLChGridRowElement;\r\n  private selectionStateNone: ManagerSelectionState = {\r\n    rowFocused: null,\r\n    rowsSelected: [],\r\n    cellFocused: null,\r\n    cellSelected: null\r\n  };\r\n  private touch: {\r\n    clientX: number;\r\n    clientY: number;\r\n  };\r\n\r\n  selecting: boolean;\r\n  selectingRow: HTMLChGridRowElement;\r\n  selectingCell: HTMLChGridCellElement;\r\n\r\n  constructor(manager: ChGridManager) {\r\n    this.manager = manager;\r\n  }\r\n\r\n  touchStart(touchEvent: TouchEvent) {\r\n    this.touch = {\r\n      clientX: touchEvent.touches[0].clientX,\r\n      clientY: touchEvent.touches[0].clientY\r\n    };\r\n  }\r\n\r\n  isTouchEndSelection(touchEvent: TouchEvent): boolean {\r\n    return (\r\n      Math.abs(this.touch.clientX - touchEvent.changedTouches[0].clientX) <\r\n        10 &&\r\n      Math.abs(this.touch.clientY - touchEvent.changedTouches[0].clientY) <\r\n        10 &&\r\n      touchEvent.cancelable\r\n    );\r\n  }\r\n\r\n  select(\r\n    state: ManagerSelectionState,\r\n    row: HTMLChGridRowElement,\r\n    cell: HTMLChGridCellElement,\r\n    select: boolean,\r\n    append: boolean,\r\n    range: boolean,\r\n    rangeStartOn: \"focus\" | \"last-selected\",\r\n    context: boolean\r\n  ): ManagerSelectionState {\r\n    const grid = this.manager.grid;\r\n\r\n    if (\r\n      grid.keyboardNavigationMode === \"none\" &&\r\n      grid.rowSelectionMode === \"none\"\r\n    ) {\r\n      return this.selectionStateNone;\r\n    }\r\n    if (grid.rowSelectionMode === \"none\") {\r\n      select = false;\r\n    }\r\n    if (grid.rowSelectionMode !== \"multiple\") {\r\n      append = false;\r\n      range = false;\r\n    }\r\n    if (!row) {\r\n      return state;\r\n    }\r\n\r\n    let { rowFocused, rowsSelected, cellFocused, cellSelected } = state;\r\n\r\n    rowFocused = row;\r\n    cellFocused = cell;\r\n    if (range) {\r\n      if (!this.rangeStart) {\r\n        if (rangeStartOn === \"focus\") {\r\n          this.rangeStart = state.rowFocused;\r\n          this.rangeValue = append ? !state.rowFocused.selected : true;\r\n        } else if (rangeStartOn === \"last-selected\") {\r\n          this.rangeStart = this.lastSelected ?? state.rowFocused;\r\n          this.rangeValue = append ? this.lastSelected.selected : true;\r\n        }\r\n      }\r\n\r\n      const rangeRows = this.manager.getRowsRange(this.rangeStart ?? row, row);\r\n\r\n      if (this.rangeValue) {\r\n        if (append) {\r\n          rowsSelected = Array.from(new Set(rowsSelected.concat(rangeRows)));\r\n        } else {\r\n          rowsSelected = this.preserveInstanceIfSame(\r\n            rangeRows,\r\n            state.rowsSelected\r\n          );\r\n        }\r\n        cellSelected =\r\n          cell ||\r\n          row.getCell(cellSelected?.column || this.manager.getFirstColumn());\r\n      } else {\r\n        rowsSelected = rowsSelected.filter(\r\n          rowSelected => !rangeRows.includes(rowSelected)\r\n        );\r\n        cellSelected = null;\r\n      }\r\n    } else if (append) {\r\n      this.rangeStart = null;\r\n      this.lastSelected = row;\r\n\r\n      if (rowsSelected.includes(row)) {\r\n        rowsSelected = rowsSelected.filter(rowSelected => rowSelected !== row);\r\n        cellSelected = state.cellSelected?.row === row ? null : cellSelected;\r\n      } else {\r\n        rowsSelected = [...rowsSelected, row];\r\n        cellSelected =\r\n          cell ||\r\n          row.getCell(cellSelected?.column || this.manager.getFirstColumn());\r\n      }\r\n    } else if (select) {\r\n      this.rangeStart = null;\r\n      this.lastSelected = row;\r\n\r\n      if (!(context && state.rowsSelected.includes(row))) {\r\n        rowsSelected = this.preserveInstanceIfSame([row], state.rowsSelected);\r\n      }\r\n      cellSelected =\r\n        cell ||\r\n        row.getCell(cellSelected?.column || this.manager.getFirstColumn());\r\n    } else {\r\n      this.rangeStart = null;\r\n    }\r\n\r\n    return { rowFocused, rowsSelected, cellFocused, cellSelected };\r\n  }\r\n\r\n  selectAll(state: ManagerSelectionState, value = true): ManagerSelectionState {\r\n    if (this.manager.grid.rowSelectionMode === \"none\") {\r\n      return this.selectionStateNone;\r\n    }\r\n\r\n    const rows = this.manager.getRows();\r\n    let rowFocused = state.rowFocused;\r\n    let rowsSelected = state.rowsSelected;\r\n    let cellFocused = state.cellFocused;\r\n    let cellSelected = state.cellSelected;\r\n\r\n    rowFocused ??= this.manager.getFirstRow();\r\n    cellFocused ??= rowFocused?.getCell(\r\n      state.cellFocused?.column || this.manager.getFirstColumn()\r\n    );\r\n\r\n    if (value) {\r\n      rowsSelected = rows;\r\n      cellSelected = cellFocused;\r\n    } else {\r\n      rowsSelected = [];\r\n      cellSelected = null;\r\n    }\r\n\r\n    return { rowFocused, rowsSelected, cellFocused, cellSelected };\r\n  }\r\n\r\n  selectSet(\r\n    state: ManagerSelectionState,\r\n    row: HTMLChGridRowElement,\r\n    cell: HTMLChGridCellElement,\r\n    value = true\r\n  ): ManagerSelectionState {\r\n    let append = true;\r\n\r\n    if (this.manager.grid.rowSelectionMode === \"none\") {\r\n      return this.selectionStateNone;\r\n    }\r\n    if (this.manager.grid.rowSelectionMode !== \"multiple\") {\r\n      append = false;\r\n    }\r\n\r\n    let rowFocused = state.rowFocused;\r\n    let rowsSelected = state.rowsSelected;\r\n    let cellFocused = state.cellFocused;\r\n    let cellSelected = state.cellSelected;\r\n\r\n    rowFocused = row;\r\n    cellFocused = cell;\r\n    if (value) {\r\n      if (append) {\r\n        rowsSelected = rowsSelected.includes(row)\r\n          ? rowsSelected\r\n          : [...rowsSelected, row];\r\n      } else {\r\n        rowsSelected = rowsSelected.includes(row) ? rowsSelected : [row];\r\n      }\r\n      cellSelected = cell;\r\n    } else {\r\n      rowsSelected = !rowsSelected.includes(row)\r\n        ? rowsSelected\r\n        : rowsSelected.filter(rowSelected => rowSelected !== row);\r\n      cellSelected = null;\r\n    }\r\n\r\n    return { rowFocused, rowsSelected, cellFocused, cellSelected };\r\n  }\r\n\r\n  moveFirstRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const firstRow = this.manager.getFirstRow();\r\n\r\n    if (firstRow) {\r\n      return this.select(\r\n        state,\r\n        firstRow,\r\n        firstRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  movePreviousRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const previousRow = this.manager.getPreviousRow(state.rowFocused);\r\n\r\n    if (previousRow) {\r\n      return this.select(\r\n        state,\r\n        previousRow,\r\n        previousRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveNextRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const nextRow = this.manager.getNextRow(state.rowFocused);\r\n\r\n    if (nextRow) {\r\n      return this.select(\r\n        state,\r\n        nextRow,\r\n        nextRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveLastRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const lastRow = this.manager.getLastRow();\r\n\r\n    if (lastRow) {\r\n      return this.select(\r\n        state,\r\n        lastRow,\r\n        lastRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  movePreviousPageRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const rows = this.manager.getRows();\r\n    const rowsPerPage = this.manager.getRowsPerPage();\r\n    const previousPageRow =\r\n      rows[Math.max(rows.indexOf(state.rowFocused) - rowsPerPage, 0)];\r\n\r\n    if (previousPageRow) {\r\n      return this.select(\r\n        state,\r\n        previousPageRow,\r\n        previousPageRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveNextPageRow(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean,\r\n    append: boolean\r\n  ): ManagerSelectionState {\r\n    const rows = this.manager.getRows();\r\n    const rowsPerPage = this.manager.getRowsPerPage();\r\n    const nextPageRow =\r\n      rows[\r\n        Math.min(rows.indexOf(state.rowFocused) + rowsPerPage, rows.length - 1)\r\n      ];\r\n\r\n    if (nextPageRow) {\r\n      return this.select(\r\n        state,\r\n        nextPageRow,\r\n        nextPageRow.getCell(state.cellFocused.column),\r\n        select,\r\n        append,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  movePreviousCell(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean\r\n  ): ManagerSelectionState {\r\n    const previousCell = this.manager.getPreviousCell(state.cellFocused);\r\n\r\n    if (previousCell) {\r\n      return this.select(\r\n        state,\r\n        state.rowFocused,\r\n        previousCell,\r\n        select,\r\n        false,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  moveNextCell(\r\n    state: ManagerSelectionState,\r\n    select: boolean,\r\n    range: boolean\r\n  ): ManagerSelectionState {\r\n    const nextCell = this.manager.getNextCell(state.cellFocused);\r\n\r\n    if (nextCell) {\r\n      return this.select(\r\n        state,\r\n        state.rowFocused,\r\n        nextCell,\r\n        select,\r\n        false,\r\n        range,\r\n        \"focus\",\r\n        false\r\n      );\r\n    }\r\n    return state;\r\n  }\r\n\r\n  markRow(\r\n    row: HTMLChGridRowElement,\r\n    checked: boolean,\r\n    range: boolean,\r\n    currentRowsMarked: HTMLChGridRowElement[]\r\n  ): HTMLChGridRowElement[] {\r\n    if (row) {\r\n      if (range) {\r\n        const value = !row.marked;\r\n        const rows = this.manager.getRowsRange(this.lastRowMarked ?? row, row);\r\n\r\n        this.lastRowMarked = row;\r\n\r\n        if (value) {\r\n          return currentRowsMarked.concat(\r\n            rows.filter(row => !currentRowsMarked.includes(row))\r\n          );\r\n        }\r\n        return currentRowsMarked.filter(row => !rows.includes(row));\r\n      }\r\n      this.lastRowMarked = row;\r\n\r\n      if (checked && !currentRowsMarked.includes(row)) {\r\n        return currentRowsMarked.concat([row]);\r\n      }\r\n      if (!checked && currentRowsMarked.includes(row)) {\r\n        return currentRowsMarked.filter(r => r !== row);\r\n      }\r\n    }\r\n\r\n    return currentRowsMarked;\r\n  }\r\n\r\n  markRows(\r\n    rowFocused: HTMLChGridRowElement,\r\n    rowsMarked: HTMLChGridRowElement[],\r\n    rowsSelected: HTMLChGridRowElement[]\r\n  ): HTMLChGridRowElement[] {\r\n    const rows = rowsSelected.includes(rowFocused)\r\n      ? rowsSelected\r\n      : [rowFocused];\r\n\r\n    if (rows.some(row => !row.marked)) {\r\n      return Array.from(new Set(rowsMarked.concat(rows)));\r\n    }\r\n    return rowsMarked.filter(row => !rows.includes(row));\r\n  }\r\n\r\n  markAllRows(value = true): HTMLChGridRowElement[] {\r\n    if (value) {\r\n      return this.manager.getRows();\r\n    }\r\n    return [];\r\n  }\r\n\r\n  syncRowSelector(\r\n    rows: HTMLChGridRowElement[],\r\n    previous: HTMLChGridRowElement[] = [],\r\n    selectorMode: \"select\" | \"mark\"\r\n  ) {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === selectorMode) {\r\n      const indexColumnSelector = columnSelector.physicalOrder - 1;\r\n\r\n      previous\r\n        ?.filter(x => !rows.includes(x))\r\n        .forEach(row => {\r\n          row.marked = false;\r\n          const cell = row.children[\r\n            indexColumnSelector\r\n          ] as HTMLChGridCellElement;\r\n          cell.setSelectorChecked(false);\r\n        });\r\n\r\n      rows?.forEach(row => {\r\n        row.marked = columnSelector.richRowSelectorMode === \"mark\";\r\n        const cell = row.children[indexColumnSelector] as HTMLChGridCellElement;\r\n        cell.setSelectorChecked(true);\r\n      });\r\n\r\n      this.syncColumnSelector(rows.length, columnSelector);\r\n    }\r\n  }\r\n\r\n  syncColumnSelector(length: number, columnSelector?: HTMLChGridColumnElement) {\r\n    columnSelector ??= this.manager.columns.getColumnSelector();\r\n\r\n    if (length === 0) {\r\n      columnSelector.richRowSelectorState = \"\";\r\n    } else if (length === this.manager.getRows().length) {\r\n      columnSelector.richRowSelectorState = \"checked\";\r\n    } else {\r\n      columnSelector.richRowSelectorState = \"indeterminate\";\r\n    }\r\n  }\r\n\r\n  private preserveInstanceIfSame(\r\n    newSelection: HTMLChGridRowElement[],\r\n    oldSelection: HTMLChGridRowElement[]\r\n  ): HTMLChGridRowElement[] {\r\n    return newSelection.length === oldSelection.length &&\r\n      newSelection.every(item => oldSelection.includes(item))\r\n      ? oldSelection\r\n      : newSelection;\r\n  }\r\n}\r\n","import HTMLChGridRowElement from \"./grid-row/ch-grid-row\";\r\nimport HTMLChGridCellElement from \"./grid-cell/ch-grid-cell\";\r\nimport { ChGridManager } from \"./ch-grid-manager\";\r\n\r\nexport class ChGridManagerRowDrag {\r\n  private readonly manager: ChGridManager;\r\n  private row: HTMLChGridRowElement;\r\n  private rowIndex: number;\r\n  private rowShadow: HTMLDivElement;\r\n  private dragMouseMoveFn = this.dragMouseMoveHandler.bind(this);\r\n\r\n  constructor(manager: ChGridManager) {\r\n    this.manager = manager;\r\n  }\r\n\r\n  public dragStart(row: HTMLChGridRowElement) {\r\n    this.row = row;\r\n    this.rowIndex = this.manager.getGridRowIndex(row);\r\n\r\n    this.defineListeners();\r\n    this.createRowShadow();\r\n    this.floatRow();\r\n    this.updateRowPosition();\r\n  }\r\n\r\n  private dragMouseMoveHandler(eventInfo: MouseEvent) {\r\n    const target = eventInfo.target as HTMLElement;\r\n    const rowHover = target.closest(\"ch-grid-row\") as HTMLChGridRowElement;\r\n\r\n    if (\r\n      rowHover &&\r\n      rowHover.parentElement === this.row.parentElement &&\r\n      rowHover.grid === this.manager.grid\r\n    ) {\r\n      const rowHoverIndex = this.manager.getGridRowIndex(rowHover);\r\n      const rowHoverGridPosition = rowHoverIndex + 2; // +1 RowHeaderColumn, +1 array start at 1\r\n      const offsetPosition = this.rowIndex < rowHoverIndex ? -1 : 1;\r\n\r\n      if (\r\n        this.rowShadow.style.getPropertyValue(\"--row-shadow-row-start\") !==\r\n        `${rowHoverGridPosition}`\r\n      ) {\r\n        this.rowShadow.style.setProperty(\r\n          \"--row-shadow-row-start\",\r\n          `${rowHoverGridPosition}`\r\n        );\r\n      } else {\r\n        this.rowShadow.style.setProperty(\r\n          \"--row-shadow-row-start\",\r\n          `${rowHoverGridPosition + offsetPosition}`\r\n        );\r\n      }\r\n\r\n      this.updateRowPosition();\r\n    }\r\n  }\r\n\r\n  private dragMouseUpHandler() {\r\n    document.removeEventListener(\"mousemove\", this.dragMouseMoveFn);\r\n\r\n    const dropPosition = parseInt(\r\n      this.rowShadow.style.getPropertyValue(\"--row-shadow-row-start\")\r\n    );\r\n    const rowDrop = this.manager.grid\r\n      .querySelectorAll(\"ch-grid-row\")\r\n      .item(dropPosition - 2);\r\n\r\n    if (dropPosition < this.rowIndex + 2) {\r\n      rowDrop.before(this.row);\r\n    }\r\n    if (dropPosition > this.rowIndex + 2) {\r\n      rowDrop.after(this.row);\r\n    }\r\n\r\n    this.unfloatRow();\r\n    this.rowShadow.remove();\r\n\r\n    this.row = null;\r\n    this.rowShadow = null;\r\n  }\r\n\r\n  private defineListeners() {\r\n    document.addEventListener(\"mousemove\", this.dragMouseMoveFn, {\r\n      passive: true\r\n    });\r\n    document.addEventListener(\"mouseup\", this.dragMouseUpHandler.bind(this), {\r\n      once: true\r\n    });\r\n  }\r\n\r\n  private createRowShadow() {\r\n    const rowHeight = this.manager.getRowHeight(this.row);\r\n\r\n    this.rowShadow = document.createElement(\"div\");\r\n    this.rowShadow.style.display = \"contents\";\r\n\r\n    this.manager.getColumnsWidth().forEach(width => {\r\n      const column = document.createElement(\"div\");\r\n\r\n      column.style.opacity = \"0\";\r\n      column.style.minWidth = width;\r\n      column.style.height = `${rowHeight}px`;\r\n      column.style.gridRowStart = \"var(--row-shadow-row-start)\";\r\n\r\n      this.rowShadow.append(column);\r\n    });\r\n  }\r\n\r\n  private floatRow() {\r\n    const columnsWidth = this.manager.getColumnsWidth();\r\n    const rowWidth = this.manager.gridLayout.clientWidth;\r\n\r\n    this.row.before(this.rowShadow);\r\n    this.row.setAttribute(\"dragging\", \"\");\r\n    this.row.style.width = `${rowWidth}px`;\r\n\r\n    this.row\r\n      .querySelectorAll(\":scope > ch-grid-cell\")\r\n      .forEach((cell: HTMLChGridCellElement, i) => {\r\n        const columnPosition = parseInt(\r\n          this.manager.gridLayout.style.getPropertyValue(\r\n            `--ch-grid-column-${i + 1}-position`\r\n          )\r\n        );\r\n\r\n        if (!cell.hidden) {\r\n          cell.style.width = columnsWidth[columnPosition - 1];\r\n          cell.style.order = `${columnPosition}`;\r\n        }\r\n      });\r\n  }\r\n\r\n  private unfloatRow() {\r\n    this.row.removeAttribute(\"dragging\");\r\n    this.row.style.width = \"\";\r\n\r\n    this.row\r\n      .querySelectorAll(\":scope > ch-grid-cell\")\r\n      .forEach((cell: HTMLChGridCellElement) => {\r\n        cell.style.width = \"\";\r\n        cell.style.order = \"\";\r\n      });\r\n  }\r\n\r\n  private updateRowPosition() {\r\n    const rect = this.rowShadow.children[0].getBoundingClientRect();\r\n\r\n    this.row.style.top = `${rect.top}px`;\r\n    this.row.style.left = `${rect.left}px`;\r\n  }\r\n}\r\n","import { ChGridManager } from \"./ch-grid-manager\";\r\n\r\nexport class ChGridManagerRowActions {\r\n  private readonly manager: ChGridManager;\r\n\r\n  showOnRowHover: HTMLChGridRowActionsElement;\r\n  showOnRowActions: HTMLChGridRowActionsElement;\r\n  showOnRowContext: HTMLChGridRowActionsElement;\r\n\r\n  constructor(manager: ChGridManager) {\r\n    this.manager = manager;\r\n    this.manager.grid\r\n      .querySelectorAll(\"ch-grid-row-actions\")\r\n      ?.forEach(rowActions => {\r\n        if (rowActions.showOnRowHover) {\r\n          this.showOnRowHover = rowActions;\r\n        }\r\n        if (rowActions.showOnRowActions) {\r\n          this.showOnRowActions = rowActions;\r\n        }\r\n        if (rowActions.showOnRowContext) {\r\n          this.showOnRowContext = rowActions;\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { ChGridManager } from \"./ch-grid-manager\";\r\n\r\nexport class ChGridManagerColumnResize {\r\n  private manager: ChGridManager;\r\n  private column: HTMLChGridColumnElement;\r\n  private columnWidthStart: number;\r\n  private columnSizeStart: CssValue;\r\n  private columnAfter: HTMLChGridColumnElement;\r\n  private columnAfterWidthStart: number;\r\n  private columnAfterSizeStart: CssValue;\r\n  private dragDirection: number;\r\n  private resizingFn: (deltaWidth: number) => void;\r\n  private resizeEndFn: () => void;\r\n\r\n  constructor(manager: ChGridManager, columnId: string, isRTL: boolean) {\r\n    this.manager = manager;\r\n    this.dragDirection = isRTL ? -1 : 1;\r\n\r\n    if (this.manager.grid.columnResizeMode === \"splitter\") {\r\n      this.resizingFn = this.resizingSplitter;\r\n      this.resizeEndFn = this.resizeEndSplitter;\r\n    } else {\r\n      this.resizingFn = this.resizingSingle;\r\n      this.resizeEndFn = null;\r\n    }\r\n\r\n    this.column = this.manager.columns.getColumn(columnId);\r\n    this.columnWidthStart = this.column.getBoundingClientRect().width;\r\n    this.columnSizeStart = this.parseCSSValue(this.column.size);\r\n\r\n    this.columnAfter = this.manager.getNextColumn(this.column);\r\n    this.columnAfterWidthStart =\r\n      this.columnAfter?.getBoundingClientRect().width;\r\n    this.columnAfterSizeStart = this.parseCSSValue(this.columnAfter.size);\r\n  }\r\n\r\n  resizing(deltaWidth: number) {\r\n    this.resizingFn(deltaWidth);\r\n  }\r\n\r\n  resizeEnd() {\r\n    if (this.resizeEndFn) {\r\n      this.resizeEndFn();\r\n    }\r\n  }\r\n\r\n  private resizingSingle = (deltaWidth: number) => {\r\n    const columnWidth = this.columnWidthStart - deltaWidth * this.dragDirection;\r\n    if (columnWidth >= 0) {\r\n      this.column.size = `minmax(min-content, ${columnWidth}px)`;\r\n    }\r\n  };\r\n\r\n  private resizingSplitter = (deltaWidth: number) => {\r\n    const columnWidth = this.columnWidthStart - deltaWidth * this.dragDirection;\r\n    if (columnWidth >= 0) {\r\n      if (this.columnSizeStart) {\r\n        this.column.size = this.convertUnit(\r\n          this.columnSizeStart,\r\n          this.columnWidthStart,\r\n          columnWidth\r\n        );\r\n      } else {\r\n        this.column.size = `minmax(min-content, ${columnWidth}px)`;\r\n      }\r\n    }\r\n\r\n    if (this.columnAfter) {\r\n      const columnAfterWidth =\r\n        this.columnAfterWidthStart + deltaWidth * this.dragDirection;\r\n      if (columnAfterWidth >= 0) {\r\n        if (this.columnAfterSizeStart) {\r\n          this.columnAfter.size = this.convertUnit(\r\n            this.columnAfterSizeStart,\r\n            this.columnAfterWidthStart,\r\n            columnAfterWidth\r\n          );\r\n        } else {\r\n          this.columnAfter.size = `minmax(min-content, ${columnAfterWidth}px)`;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private resizeEndSplitter() {\r\n    const columnWidthEnd = this.column.getBoundingClientRect().width;\r\n    this.column.size = this.convertUnit(\r\n      this.columnSizeStart,\r\n      this.columnWidthStart,\r\n      columnWidthEnd\r\n    );\r\n\r\n    if (this.columnAfter) {\r\n      const columnAfterWidthEnd =\r\n        this.columnAfterWidthStart - (columnWidthEnd - this.columnWidthStart);\r\n      this.columnAfter.size = this.convertUnit(\r\n        this.columnSizeStart,\r\n        this.columnWidthStart,\r\n        columnAfterWidthEnd\r\n      );\r\n    }\r\n  }\r\n\r\n  private parseCSSValue(cssValue: string): CssValue {\r\n    const match = cssValue.match(/([+-]?[\\d.]+)([\\w%]+)/);\r\n    if (match) {\r\n      const number = parseFloat(match[1]);\r\n      const unit = match[2];\r\n      return { number, unit };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private convertUnit(\r\n    startSize: CssValue,\r\n    startWidth: number,\r\n    newWidth: number\r\n  ): string {\r\n    return `${(newWidth * startSize.number) / startWidth}${startSize.unit}`;\r\n  }\r\n}\r\n\r\ntype CssValue = {\r\n  number: number;\r\n  unit: string;\r\n};\r\n","import { IChGridCollapsible, CSSProperties } from \"./ch-grid-types\";\r\nimport { ChGridManagerColumnDrag } from \"./ch-grid-manager-column-drag\";\r\n\r\nimport HTMLChGridRowElement from \"./grid-row/ch-grid-row\";\r\nimport { ChGridManagerColumns } from \"./ch-grid-manager-columns\";\r\nimport HTMLChGridCellElement from \"./grid-cell/ch-grid-cell\";\r\nimport { ChGridManagerSelection } from \"./ch-grid-manager-selection\";\r\nimport { ChGridManagerRowDrag } from \"./ch-grid-manager-row-drag\";\r\nimport { ChGridManagerRowActions } from \"./ch-grid-manager-row-actions\";\r\nimport { adoptGlobalStyleSheet } from \"../../deprecated-components/style/ch-global-stylesheet\";\r\nimport { ChGridManagerColumnResize } from \"./ch-grid-manager-column-resize\";\r\n\r\nenum StyleRule {\r\n  BASE_LAYER,\r\n  COLUMNS_WIDTH\r\n}\r\n\r\nexport class ChGridManager {\r\n  private styleSheet = new CSSStyleSheet();\r\n  private gridLayoutElement: HTMLElement;\r\n  private columnDragManager: ChGridManagerColumnDrag;\r\n  private columnResizeManager: ChGridManagerColumnResize;\r\n  private rowDragManager: ChGridManagerRowDrag;\r\n\r\n  readonly grid: HTMLChGridElement;\r\n  readonly selection: ChGridManagerSelection;\r\n  readonly columns: ChGridManagerColumns;\r\n  readonly rowActions: ChGridManagerRowActions;\r\n\r\n  constructor(grid: HTMLChGridElement) {\r\n    this.grid = grid;\r\n\r\n    this.styleSheet.insertRule(`:host {}`, StyleRule.BASE_LAYER);\r\n    this.styleSheet.insertRule(\".main {}\", StyleRule.COLUMNS_WIDTH);\r\n    this.grid.shadowRoot.adoptedStyleSheets.push(this.styleSheet);\r\n    adoptGlobalStyleSheet(this.grid.shadowRoot.adoptedStyleSheets);\r\n\r\n    this.columns = new ChGridManagerColumns(this);\r\n    this.selection = new ChGridManagerSelection(this);\r\n    this.rowActions = new ChGridManagerRowActions(this);\r\n  }\r\n\r\n  get gridLayout(): HTMLElement {\r\n    return this.gridLayoutElement;\r\n  }\r\n\r\n  componentDidLoad(gridLayout: HTMLElement) {\r\n    this.gridLayoutElement = gridLayout;\r\n  }\r\n\r\n  getColumns() {\r\n    return this.columns.getColumns();\r\n  }\r\n\r\n  getColumnsWidth(): string[] {\r\n    return getComputedStyle(this.gridLayout).gridTemplateColumns.split(\" \");\r\n  }\r\n\r\n  getColumnsetHeight(): number {\r\n    const gridColumnsHeight = getComputedStyle(\r\n      this.gridLayout\r\n    ).gridTemplateRows.split(\" \");\r\n\r\n    return parseInt(gridColumnsHeight[0]) || 0;\r\n  }\r\n\r\n  getFirstColumn(): HTMLChGridColumnElement {\r\n    return this.columns.getColumnsFirstLast().columnFirst;\r\n  }\r\n\r\n  getFirstRow(): HTMLChGridRowElement {\r\n    return this.grid.querySelector(\"ch-grid-row\");\r\n  }\r\n\r\n  getScrollOffsetTop(): number {\r\n    return this.gridLayout.offsetTop + this.getColumnsetHeight();\r\n  }\r\n\r\n  getScrollOffsetLeft(): number {\r\n    return this.columns.getColumns(true).reduce((offsetRight, column) => {\r\n      return column.freeze === \"start\" && !column.hidden\r\n        ? offsetRight + column.offsetWidth\r\n        : offsetRight;\r\n    }, 0);\r\n  }\r\n\r\n  getScrollOffsetRight(): number {\r\n    return this.columns.getColumns(true).reduce((offsetRight, column) => {\r\n      return column.freeze === \"end\" && !column.hidden\r\n        ? offsetRight + column.offsetWidth\r\n        : offsetRight;\r\n    }, 0);\r\n  }\r\n\r\n  getPreviousRow(current: HTMLChGridRowElement): HTMLChGridRowElement {\r\n    const rows = this.getRows();\r\n    const i = rows.indexOf(current);\r\n\r\n    return rows\r\n      .slice(0, i)\r\n      .reverse()\r\n      .find(row => row.isVisible());\r\n  }\r\n\r\n  getNextRow(current: HTMLChGridRowElement): HTMLChGridRowElement {\r\n    const rows = this.getRows();\r\n    const i = rows.indexOf(current);\r\n\r\n    return rows.slice(i + 1).find(row => row.isVisible());\r\n  }\r\n\r\n  getLastRow(): HTMLChGridRowElement {\r\n    const rows = this.getRows();\r\n\r\n    return rows.reverse().find(row => row.isVisible());\r\n  }\r\n\r\n  getPreviousColumn(column: HTMLChGridColumnElement): HTMLChGridColumnElement {\r\n    return this.columns.getColumns().reduce((previous, current) => {\r\n      return current.order < column.order &&\r\n        !current.hidden &&\r\n        (!previous || current.order > previous.order)\r\n        ? current\r\n        : previous;\r\n    }, null);\r\n  }\r\n\r\n  getNextColumn(column: HTMLChGridColumnElement): HTMLChGridColumnElement {\r\n    return this.columns.getColumns().reduce((previous, current) => {\r\n      return current.order > column.order &&\r\n        !current.hidden &&\r\n        (!previous || current.order < previous.order)\r\n        ? current\r\n        : previous;\r\n    }, null);\r\n  }\r\n\r\n  getPreviousCell(\r\n    current: HTMLChGridCellElement\r\n  ): HTMLChGridCellElement | void {\r\n    const previousColumn = this.getPreviousColumn(current.column);\r\n\r\n    if (previousColumn) {\r\n      return current.row.querySelector(\r\n        `:scope > ch-grid-cell:nth-of-type(${previousColumn.physicalOrder})`\r\n      ) as HTMLChGridCellElement;\r\n    }\r\n  }\r\n\r\n  getNextCell(current: HTMLChGridCellElement): HTMLChGridCellElement | void {\r\n    const nextColumn = this.getNextColumn(current.column);\r\n\r\n    if (nextColumn) {\r\n      return current.row.querySelector(\r\n        `:scope > ch-grid-cell:nth-of-type(${nextColumn.physicalOrder})`\r\n      ) as HTMLChGridCellElement;\r\n    }\r\n  }\r\n\r\n  getGridRowIndex(row: HTMLChGridRowElement): number {\r\n    return Array.prototype.indexOf.call(\r\n      this.grid.querySelectorAll(\"ch-grid-row, ch-grid-rowset-legend\"),\r\n      row\r\n    );\r\n  }\r\n\r\n  getRowsetRowIndex(row: HTMLChGridRowElement): number {\r\n    return Array.prototype.indexOf.call(row.parentElement.children, row);\r\n  }\r\n\r\n  getRowHeight(row: HTMLChGridRowElement): number {\r\n    const gridRowsHeight = getComputedStyle(\r\n      this.gridLayout\r\n    ).gridTemplateRows.split(\" \");\r\n    const rowIndex = this.getGridRowIndex(row) + 1;\r\n\r\n    return parseInt(gridRowsHeight[rowIndex]) || 0;\r\n  }\r\n\r\n  getRowsPerPage(): number {\r\n    const gridHeight = this.gridLayout.clientHeight;\r\n    const columnsHeight = this.getColumnsetHeight();\r\n    const rowHeight = this.getRowHeight(this.getFirstRow());\r\n\r\n    return Math.floor((gridHeight - columnsHeight) / rowHeight);\r\n  }\r\n\r\n  getRow(rowId: string): HTMLChGridRowElement {\r\n    return this.grid.querySelector(`ch-grid-row[rowid=\"${rowId}\"]`);\r\n  }\r\n\r\n  getRows(state: \"all\" | \"visible\" = \"all\"): HTMLChGridRowElement[] {\r\n    const rows = Array.from(\r\n      this.grid.querySelectorAll(`ch-grid-row`)\r\n    ) as HTMLChGridRowElement[];\r\n\r\n    if (state === \"visible\") {\r\n      return rows.filter(row => row.isVisible());\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  getRowsRange(\r\n    start: HTMLChGridRowElement,\r\n    end: HTMLChGridRowElement\r\n  ): HTMLChGridRowElement[] {\r\n    const rows = this.getRows();\r\n    const indexStart = rows.indexOf(start);\r\n    const indexEnd = rows.indexOf(end);\r\n\r\n    return rows\r\n      .slice(Math.min(indexStart, indexEnd), Math.max(indexStart, indexEnd) + 1)\r\n      .filter(row => row.isVisible());\r\n  }\r\n\r\n  getRowEventTarget(eventInfo: Event): HTMLChGridRowElement {\r\n    return eventInfo\r\n      .composedPath()\r\n      .find(\r\n        (target: HTMLElement) => target.tagName === \"CH-GRID-ROW\"\r\n      ) as HTMLChGridRowElement;\r\n  }\r\n\r\n  isRowActionsEventTarget(eventInfo: Event): boolean {\r\n    return (\r\n      eventInfo\r\n        .composedPath()\r\n        .find(\r\n          (target: HTMLElement) => target.tagName === \"CH-GRID-ROW-ACTIONS\"\r\n        ) != null\r\n    );\r\n  }\r\n\r\n  getCell(\r\n    cellId?: string,\r\n    rowId?: string,\r\n    columnId?: string\r\n  ): HTMLChGridCellElement | void {\r\n    if (cellId) {\r\n      return this.grid.querySelector(\r\n        `ch-grid-cell[cellid=\"${cellId}\"]`\r\n      ) as HTMLChGridCellElement;\r\n    }\r\n    if (rowId && columnId) {\r\n      const row = this.getRow(rowId);\r\n      const column = this.columns.getColumn(columnId);\r\n\r\n      if (row && column) {\r\n        return row.getCell(column);\r\n      }\r\n    }\r\n  }\r\n\r\n  getCellEventTarget(eventInfo: Event): HTMLChGridCellElement {\r\n    return eventInfo\r\n      .composedPath()\r\n      .find(\r\n        (target: HTMLElement) => target.tagName === \"CH-GRID-CELL\"\r\n      ) as HTMLChGridCellElement;\r\n  }\r\n\r\n  columnDragStart(columnId: string) {\r\n    this.columnDragManager = new ChGridManagerColumnDrag(\r\n      columnId,\r\n      this.columns.getColumns(),\r\n      this.isRTLDirection()\r\n    );\r\n  }\r\n\r\n  columnDragging(position: number): boolean {\r\n    return this.columnDragManager.dragging(position);\r\n  }\r\n\r\n  columnDragEnd() {\r\n    this.columnDragManager.dragEnd();\r\n    this.columnDragManager = null;\r\n  }\r\n\r\n  columnResizeStart(columnId: string) {\r\n    this.columnResizeManager = new ChGridManagerColumnResize(\r\n      this,\r\n      columnId,\r\n      this.isRTLDirection()\r\n    );\r\n  }\r\n\r\n  columnResizing(deltaWidth: number) {\r\n    this.columnResizeManager.resizing(deltaWidth);\r\n  }\r\n\r\n  columnResizeEnd() {\r\n    this.columnResizeManager.resizeEnd();\r\n    this.columnResizeManager = null;\r\n  }\r\n\r\n  rowDragStart(row: HTMLChGridRowElement) {\r\n    this.rowDragManager = new ChGridManagerRowDrag(this);\r\n    this.rowDragManager.dragStart(row);\r\n  }\r\n\r\n  getGridStyle(): CSSProperties {\r\n    return {\r\n      display: \"grid\",\r\n      ...this.getGridTemplateColumns(),\r\n      ...this.getRowBoxSimulationStyle(),\r\n      ...this.getDragTransitionStyle(),\r\n      ...this.getColumnsStyle()\r\n    };\r\n  }\r\n\r\n  setBaseLayer(value: number) {\r\n    this.styleSheet.deleteRule(StyleRule.BASE_LAYER);\r\n    this.styleSheet.insertRule(\r\n      `:host { --ch-grid-base-layer: ${value}; }`,\r\n      StyleRule.BASE_LAYER\r\n    );\r\n  }\r\n\r\n  setColumnWidthVariables(columnsWidth: number[]) {\r\n    this.styleSheet.deleteRule(StyleRule.COLUMNS_WIDTH);\r\n    this.styleSheet.insertRule(\r\n      `.main { ${columnsWidth\r\n        .map(\r\n          (columnWidth, columnIndex) =>\r\n            `--ch-grid-column-${columnIndex + 1}-width:${columnWidth}px;`\r\n        )\r\n        .join(\"\\n\")} }`,\r\n      StyleRule.COLUMNS_WIDTH\r\n    );\r\n  }\r\n\r\n  ensureRowVisible(row: HTMLChGridRowElement) {\r\n    let node: IChGridCollapsible = row.parentElement.closest(\r\n      \"ch-grid-row, ch-grid-rowset\"\r\n    );\r\n    const { columnFirst } = this.columns.getColumnsFirstLast();\r\n\r\n    while (node) {\r\n      node.collapsed = false;\r\n      node = node.parentElement.closest(\"ch-grid-row, ch-grid-rowset\");\r\n    }\r\n\r\n    if (row.children[columnFirst.physicalOrder]) {\r\n      this.ensureVisible(\r\n        row.children[columnFirst.physicalOrder] as HTMLChGridCellElement\r\n      );\r\n    }\r\n  }\r\n\r\n  ensureCellVisible(cell: HTMLChGridCellElement) {\r\n    let node: IChGridCollapsible = cell.closest(\"ch-grid-row, ch-grid-rowset\");\r\n\r\n    while (!cell.isVisible() && node) {\r\n      node.collapsed = false;\r\n      node = node.parentElement.closest(\"ch-grid-row, ch-grid-rowset\");\r\n    }\r\n\r\n    if (!cell.isVisible()) {\r\n      cell.column.hidden = false;\r\n    }\r\n\r\n    this.ensureVisible(cell);\r\n  }\r\n\r\n  private ensureVisible(cell: HTMLChGridCellElement) {\r\n    const isColumnFreeze = [\"start\", \"end\"].includes(cell.column.freeze);\r\n    const scroll = this.gridLayout;\r\n    const scrollOffsetTop = this.getScrollOffsetTop();\r\n    const scrollOffsetLeft = this.getScrollOffsetLeft();\r\n    const scrollOffsetRight = this.getScrollOffsetRight();\r\n\r\n    if (scroll.scrollTop + scrollOffsetTop > cell.offsetTop) {\r\n      scroll.scrollBy({\r\n        top: (scroll.scrollTop - cell.offsetTop + scrollOffsetTop) * -1\r\n      });\r\n    } else if (\r\n      scroll.scrollTop + scroll.offsetHeight <\r\n      cell.offsetTop + cell.offsetHeight\r\n    ) {\r\n      scroll.scrollBy({\r\n        top:\r\n          cell.offsetTop +\r\n          cell.offsetHeight -\r\n          (scroll.scrollTop + scroll.offsetHeight)\r\n      });\r\n    } else if (\r\n      scroll.scrollLeft + scrollOffsetLeft > cell.offsetLeft &&\r\n      !isColumnFreeze\r\n    ) {\r\n      scroll.scrollBy({\r\n        left: (scroll.scrollLeft - cell.offsetLeft + scrollOffsetLeft) * -1\r\n      });\r\n    } else if (\r\n      scroll.scrollLeft + scroll.clientWidth - scrollOffsetRight <\r\n        cell.offsetLeft + cell.offsetWidth &&\r\n      !isColumnFreeze\r\n    ) {\r\n      scroll.scrollBy({\r\n        left:\r\n          cell.offsetLeft +\r\n          cell.offsetWidth -\r\n          (scroll.scrollLeft + scroll.clientWidth - scrollOffsetRight)\r\n      });\r\n    }\r\n  }\r\n\r\n  private getGridTemplateColumns(): CSSProperties {\r\n    return {\r\n      \"grid-template-columns\": this.columns\r\n        .getColumns()\r\n        .map(column => `var(--ch-grid-column-${column.physicalOrder}-size)`)\r\n        .join(\" \")\r\n    };\r\n  }\r\n\r\n  private getRowBoxSimulationStyle(): CSSProperties {\r\n    const { columnFirst, columnLast } = this.columnDragManager\r\n      ? this.columnDragManager.getColumnsFirstLast()\r\n      : this.columns.getColumnsFirstLast();\r\n\r\n    if (!columnFirst || !columnLast) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      [`--ch-grid-column-${columnFirst.physicalOrder}-margin-start`]:\r\n        \"var(--ch-grid-fallback, inherit)\",\r\n      [`--ch-grid-column-${columnFirst.physicalOrder}-border-start`]:\r\n        \"var(--ch-grid-fallback, inherit)\",\r\n      [`--ch-grid-column-${columnFirst.physicalOrder}-padding-start`]:\r\n        \"var(--ch-grid-fallback, inherit)\",\r\n      [`--ch-grid-column-${columnLast.physicalOrder}-margin-end`]:\r\n        \"var(--ch-grid-fallback, inherit)\",\r\n      [`--ch-grid-column-${columnLast.physicalOrder}-border-end`]:\r\n        \"var(--ch-grid-fallback, inherit)\",\r\n      [`--ch-grid-column-${columnLast.physicalOrder}-padding-end`]:\r\n        \"var(--ch-grid-fallback, inherit)\"\r\n    };\r\n  }\r\n\r\n  private getDragTransitionStyle(): CSSProperties {\r\n    return {\r\n      \"--column-drag-transition-duration\": this.columnDragManager ? \".2s\" : \"0s\"\r\n    };\r\n  }\r\n\r\n  private getColumnsStyle(): CSSProperties {\r\n    return this.columns.getColumns().reduce((style, column) => {\r\n      return {\r\n        ...style,\r\n        ...this.getColumnStyle(column)\r\n      };\r\n    }, {} as CSSProperties);\r\n  }\r\n\r\n  private getColumnStyle(column: HTMLChGridColumnElement): CSSProperties {\r\n    return {\r\n      ...this.getColumnSizeStyle(column),\r\n      ...this.getColumnOrderStyle(column),\r\n      ...this.getColumnDisplayStyle(column),\r\n      ...this.getColumnFreezeStyle(column),\r\n      ...this.getColumnDraggingStyle(column),\r\n      ...this.getColumnIndentStyle(column)\r\n    };\r\n  }\r\n\r\n  private getColumnSizeStyle(column: HTMLChGridColumnElement): CSSProperties {\r\n    return {\r\n      [`--ch-grid-column-${column.order}-size`]: column.hidden\r\n        ? \"0px\"\r\n        : column.size\r\n    };\r\n  }\r\n\r\n  private getColumnOrderStyle(column: HTMLChGridColumnElement): CSSProperties {\r\n    return {\r\n      [`--ch-grid-column-${column.physicalOrder}-position`]:\r\n        column.order.toString()\r\n    };\r\n  }\r\n\r\n  private getColumnFreezeStyle(column: HTMLChGridColumnElement): CSSProperties {\r\n    switch (column.freeze) {\r\n      case \"start\":\r\n        return this.getColumnFreezeStartStyle(column);\r\n      case \"end\":\r\n        return this.getColumnFreezeEndStyle(column);\r\n    }\r\n  }\r\n\r\n  private getColumnFreezeStartStyle(\r\n    column: HTMLChGridColumnElement\r\n  ): CSSProperties {\r\n    const calcItems = [\"0px\"];\r\n\r\n    for (let i = 1; i < column.order; i++) {\r\n      calcItems.push(`var(--ch-grid-column-${i}-width)`);\r\n    }\r\n\r\n    return {\r\n      [`--ch-grid-column-${column.physicalOrder}-left-freeze`]: `calc(${calcItems.join(\r\n        \" + \"\r\n      )})`,\r\n      [`--ch-grid-column-${column.physicalOrder}-z-index-freeze`]:\r\n        \"var(--ch-grid-column-freeze-layer)\"\r\n    };\r\n  }\r\n\r\n  private getColumnFreezeEndStyle(\r\n    column: HTMLChGridColumnElement\r\n  ): CSSProperties {\r\n    const calcItems = [\"0px\"];\r\n    for (let i = this.columns.getColumns().length; i > column.order; i--) {\r\n      calcItems.push(`var(--ch-grid-column-${i}-width)`);\r\n    }\r\n\r\n    return {\r\n      [`--ch-grid-column-${column.physicalOrder}-right-freeze`]: `calc(${calcItems.join(\r\n        \" + \"\r\n      )})`,\r\n      [`--ch-grid-column-${column.physicalOrder}-z-index-freeze`]:\r\n        \"var(--ch-grid-column-freeze-layer)\"\r\n    };\r\n  }\r\n\r\n  private getColumnDisplayStyle(\r\n    column: HTMLChGridColumnElement\r\n  ): CSSProperties {\r\n    return column.hidden\r\n      ? {\r\n          [`--ch-grid-column-${column.physicalOrder}-display`]: \"none\"\r\n        }\r\n      : null;\r\n  }\r\n\r\n  private getColumnDraggingStyle(\r\n    column: HTMLChGridColumnElement\r\n  ): CSSProperties {\r\n    return this.columnDragManager\r\n      ? this.columnDragManager.getColumnStyle(column)\r\n      : null;\r\n  }\r\n\r\n  private getColumnIndentStyle(column: HTMLChGridColumnElement): CSSProperties {\r\n    return {\r\n      [`--ch-grid-column-${column.physicalOrder}-content`]:\r\n        column.order === 1 ? \"''\" : \"none\"\r\n    };\r\n  }\r\n\r\n  private isRTLDirection(): boolean {\r\n    return getComputedStyle(this.grid).direction === \"rtl\";\r\n  }\r\n}\r\n",":host {\r\n  display: flex;\r\n  position: relative;\r\n  flex-direction: column;\r\n  inline-size: 100%;\r\n\r\n  --ch-grid-cell-active-layer: calc(var(--ch-grid-base-layer) * 1);\r\n  --ch-grid-column-header-layer: calc(var(--ch-grid-base-layer) * 2);\r\n  --ch-grid-column-freeze-layer: calc(var(--ch-grid-base-layer) * 4);\r\n  --ch-grid-column-active-layer: calc(var(--ch-grid-base-layer) * 8);\r\n  --ch-grid-settings-layer: calc(var(--ch-grid-base-layer) * 16);\r\n}\r\n.main {\r\n  display: none;\r\n  grid-auto-flow: dense; /* necesario para poder reordenar las columnas */\r\n  grid-auto-rows: max-content;\r\n  overflow-x: auto;\r\n  user-select: none;\r\n  block-size: 100%;\r\n}\r\n","import \"./grid-row/ch-grid-row\";\r\nimport \"./grid-rowset/ch-grid-rowset\";\r\nimport \"./grid-cell/ch-grid-cell\";\r\n\r\nimport {\r\n  CSSProperties,\r\n  ChGridSelectionChangedEvent,\r\n  ChGridRowClickedEvent,\r\n  ChGridMarkingChangedEvent,\r\n  ChGridCellSelectionChangedEvent,\r\n  ChGridRowPressedEvent,\r\n  ChGridRowContextMenuEvent\r\n} from \"./ch-grid-types\";\r\nimport {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Listen,\r\n  Prop,\r\n  State,\r\n  Watch,\r\n  h,\r\n  Method\r\n} from \"@stencil/core\";\r\n\r\nimport { ChGridManager } from \"./ch-grid-manager\";\r\nimport HTMLChGridCellElement, {\r\n  ChGridCellSelectorClickedEvent,\r\n  ChGridRowDragEvent\r\n} from \"./grid-cell/ch-grid-cell\";\r\nimport HTMLChGridRowElement from \"./grid-row/ch-grid-row\";\r\nimport {\r\n  ChGridColumnDragEvent,\r\n  ChGridColumnResizeEvent,\r\n  ChGridColumnSelectorClickedEvent\r\n} from \"./grid-column/ch-grid-column-types\";\r\nimport { ManagerSelectionState } from \"./ch-grid-manager-selection\";\r\nimport {\r\n  MouseEventButton,\r\n  MouseEventButtons,\r\n  focusComposedPath,\r\n  mouseEventHasButtonPressed,\r\n  mouseEventModifierKey\r\n} from \"../../components/common/helpers\";\r\n\r\n/**\r\n * The `ch-grid` component represents a Grid/TreeGrid of data, with rows and cells.\r\n * @deprecated Use `ch-tabular-grid` component instead.\r\n */\r\n@Component({\r\n  tag: \"ch-grid\",\r\n  styleUrl: \"ch-grid.scss\",\r\n  shadow: true\r\n})\r\nexport class ChGrid {\r\n  private manager: ChGridManager;\r\n  private gridLayoutElement: HTMLElement;\r\n  private settingsUI: HTMLChGridSettingsElement;\r\n\r\n  @Element() el: HTMLChGridElement;\r\n\r\n  @State() rowFocused: HTMLChGridRowElement;\r\n  @Watch(\"rowFocused\")\r\n  rowFocusedHandler(row: HTMLChGridRowElement, previous: HTMLChGridRowElement) {\r\n    if (row) {\r\n      row.focused = true;\r\n    }\r\n    if (previous) {\r\n      previous.focused = false;\r\n    }\r\n  }\r\n\r\n  @State() cellFocused: HTMLChGridCellElement;\r\n  @Watch(\"cellFocused\")\r\n  cellFocusedHandler(\r\n    cell: HTMLChGridCellElement,\r\n    previous: HTMLChGridCellElement\r\n  ) {\r\n    if (cell) {\r\n      cell.focused = true;\r\n    }\r\n    if (previous) {\r\n      previous.focused = false;\r\n    }\r\n  }\r\n\r\n  @State() rowHighlighted: HTMLChGridRowElement;\r\n  @Watch(\"rowHighlighted\")\r\n  rowHighlightedHandler(\r\n    row: HTMLChGridRowElement,\r\n    previous: HTMLChGridRowElement\r\n  ) {\r\n    // highlight\r\n    if (row) {\r\n      row.highlighted = true;\r\n    }\r\n    if (previous) {\r\n      previous.highlighted = false;\r\n    }\r\n\r\n    // actions\r\n    if (row) {\r\n      this.manager.rowActions.showOnRowHover?.openRowHover(row);\r\n    } else {\r\n      this.manager.rowActions.showOnRowHover?.close();\r\n    }\r\n  }\r\n\r\n  @State() rowsMarked: HTMLChGridRowElement[] = [];\r\n  @Watch(\"rowsMarked\")\r\n  rowsMarkedHandler(\r\n    rows: HTMLChGridRowElement[],\r\n    previous: HTMLChGridRowElement[]\r\n  ) {\r\n    this.manager.selection.syncRowSelector(rows, previous, \"mark\");\r\n    this.rowMarkingChanged.emit(this.getChangedEventDetail(rows, previous));\r\n  }\r\n\r\n  @State() rowsSelected: HTMLChGridRowElement[] = [];\r\n  @Watch(\"rowsSelected\")\r\n  rowsSelectedHandler(\r\n    rows: HTMLChGridRowElement[],\r\n    previous: HTMLChGridRowElement[]\r\n  ) {\r\n    if (previous) {\r\n      previous\r\n        .filter(row => !rows.includes(row))\r\n        .forEach(row => (row.selected = false));\r\n    }\r\n    if (rows) {\r\n      rows.forEach(row => (row.selected = true));\r\n    }\r\n\r\n    this.manager.selection.syncRowSelector(rows, previous, \"select\");\r\n    this.selectionChanged.emit(this.getChangedEventDetail(rows, previous));\r\n  }\r\n\r\n  @State() cellSelected: HTMLChGridCellElement;\r\n  @Watch(\"cellSelected\")\r\n  cellSelectedHandler(\r\n    cell: HTMLChGridCellElement,\r\n    previous: HTMLChGridCellElement\r\n  ) {\r\n    if (cell) {\r\n      cell.selected = true;\r\n    }\r\n    if (previous) {\r\n      previous.selected = false;\r\n    }\r\n\r\n    this.cellSelectionChanged.emit({\r\n      cellId: this.cellSelected ? this.cellSelected.cellId : null,\r\n      rowId: this.cellSelected ? this.cellSelected.row.rowId : null,\r\n      columnId: this.cellSelected ? this.cellSelected.column.columnId : null\r\n    });\r\n  }\r\n\r\n  @State() gridStyle: CSSProperties;\r\n\r\n  /**\r\n   * One of \"none\", \"single\" or \"multiple\", indicating how rows can be selected.\r\n   * It can be set to \"none\" if no rows should be selectable,\r\n   * \"single\" if only one row can be selected at a time, or\r\n   * \"multiple\" if multiple rows can be selected at once.\r\n   */\r\n  @Prop() readonly rowSelectionMode: \"none\" | \"single\" | \"multiple\" = \"single\";\r\n\r\n  /**\r\n   * Specifies the keyboard navigation mode for the component.\r\n   * - \"none\": Disables keyboard navigation for the grid rows.\r\n   * - \"select\": Allows keyboard navigation by changing the selection of grid rows.\r\n   * - \"focus\": Allows keyboard navigation by focusing on grid rows, but does not change the selection.\r\n   */\r\n  @Prop() readonly keyboardNavigationMode: \"none\" | \"select\" | \"focus\" =\r\n    \"select\";\r\n\r\n  /**\r\n   * One of \"false\", \"true\" or \"auto\", indicating whether or not rows can be highlighted.\r\n   * \"auto\", row highlighting will be enabled if the row selection mode is set to \"single\" or \"multiple\".\r\n   */\r\n  @Prop() readonly rowHighlightEnabled: boolean | \"auto\" = \"auto\";\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is selected.\r\n   */\r\n  @Prop() readonly rowSelectedClass: string;\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is hovered.\r\n   */\r\n  @Prop() readonly rowHighlightedClass: string;\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is focused.\r\n   */\r\n  @Prop() readonly rowFocusedClass: string;\r\n\r\n  /**\r\n   * A CSS class name applied to a row when it is marked.\r\n   */\r\n  @Prop() readonly rowMarkedClass: string;\r\n\r\n  /**\r\n   * A boolean indicating whether the user can drag column headers to reorder columns.\r\n   */\r\n  @Prop() readonly allowColumnReorder: boolean = true;\r\n\r\n  /**\r\n   * One of \"single\" or \"splitter\", indicating the behavior of column resizing.\r\n   * \"single\", resize a single column at a time.\r\n   * \"splitter\", when adjusts the width of one column, the neighboring columns\r\n   *    are also resized proportionally, maintaining the overall width.\r\n   */\r\n  @Prop() readonly columnResizeMode: \"single\" | \"splitter\" = \"single\";\r\n\r\n  /**\r\n   * An object that contains localized strings for the grid.\r\n   */\r\n  @Prop() readonly localization: GridLocalization;\r\n\r\n  /**\r\n   * Event emitted when the row selection is changed.\r\n   */\r\n  @Event() selectionChanged: EventEmitter<ChGridSelectionChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the row marking is changed.\r\n   */\r\n  @Event() rowMarkingChanged: EventEmitter<ChGridMarkingChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the cell selection is changed.\r\n   */\r\n  @Event() cellSelectionChanged: EventEmitter<ChGridCellSelectionChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when a row is clicked.\r\n   */\r\n  @Event() rowClicked: EventEmitter<ChGridRowClickedEvent>;\r\n\r\n  /**\r\n   * Event emitted when a row is double clicked.\r\n   */\r\n  @Event() rowDoubleClicked: EventEmitter<ChGridRowClickedEvent>;\r\n\r\n  /**\r\n   * Event emitted when Enter is pressed on a row.\r\n   */\r\n  @Event() rowEnterPressed: EventEmitter<ChGridRowPressedEvent>;\r\n\r\n  /**\r\n   * Event emitted when attempts to open a context menu on a row.\r\n   */\r\n  @Event() rowContextMenu: EventEmitter<ChGridRowContextMenuEvent>;\r\n\r\n  componentWillLoad() {\r\n    this.manager = new ChGridManager(this.el);\r\n    this.gridStyle = this.manager.getGridStyle();\r\n  }\r\n\r\n  componentDidLoad() {\r\n    this.manager.componentDidLoad(this.gridLayoutElement);\r\n  }\r\n\r\n  // @ts-expect-error: TODO: Fix this error\r\n  componentShouldUpdate(_newValue, _oldValue, name: string) {\r\n    if (\r\n      name === \"rowFocused\" ||\r\n      name === \"rowHighlighted\" ||\r\n      name === \"rowSelected\" ||\r\n      name === \"rowsMarked\" ||\r\n      name === \"cellSelected\"\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  @Listen(\"focus\", { passive: true })\r\n  focusHandler() {\r\n    if (this.keyboardNavigationMode !== \"none\") {\r\n      this.rowFocused ||= this.rowsSelected[0] ?? this.manager.getFirstRow();\r\n      this.cellFocused = this.rowFocused?.getCell(\r\n        this.cellSelected?.column || this.manager.getFirstColumn()\r\n      );\r\n\r\n      if (this.keyboardNavigationMode === \"select\") {\r\n        this.selectByKeyboardEvent(false, false, \"focus\");\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"blur\", { passive: true })\r\n  blurHandler(eventInfo: Event) {\r\n    if (!eventInfo.composedPath().includes(this.el)) {\r\n      this.rowFocused = null;\r\n      this.cellFocused = null;\r\n    }\r\n  }\r\n\r\n  @Listen(\"cellFocused\", { passive: true })\r\n  cellFocusedEventHandler(eventInfo: CustomEvent) {\r\n    const cell = eventInfo.target as HTMLChGridCellElement;\r\n    if (this.rowSelectionMode !== \"none\" && !cell.selected) {\r\n      this.setCellSelected(cell);\r\n    }\r\n  }\r\n\r\n  @Listen(\"keydown\", { target: \"window\" })\r\n  windowKeyDownHandler(eventInfo: KeyboardEvent) {\r\n    if (\r\n      focusComposedPath()[0] === this.el &&\r\n      [\r\n        \" \",\r\n        \"+\",\r\n        \"-\",\r\n        \"Home\",\r\n        \"End\",\r\n        \"PageUp\",\r\n        \"PageDown\",\r\n        \"ArrowUp\",\r\n        \"ArrowDown\",\r\n        \"ArrowLeft\",\r\n        \"ArrowRight\"\r\n      ].includes(eventInfo.key)\r\n    ) {\r\n      eventInfo.preventDefault();\r\n    }\r\n  }\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  keyDownHandler(eventInfo: KeyboardEvent) {\r\n    if (\r\n      focusComposedPath()[0] === this.el &&\r\n      this.keyboardNavigationMode !== \"none\"\r\n    ) {\r\n      const range = eventInfo.shiftKey;\r\n      const append = mouseEventModifierKey(eventInfo);\r\n\r\n      switch (eventInfo.key) {\r\n        case \" \":\r\n          this.spacePressedEvent(\r\n            mouseEventModifierKey(eventInfo),\r\n            eventInfo.shiftKey\r\n          );\r\n          break;\r\n        case \"+\":\r\n          this.setRowCollapsed(this.rowFocused, false);\r\n          break;\r\n        case \"-\":\r\n          this.setRowCollapsed(this.rowFocused, true);\r\n          break;\r\n        case \"Home\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveFirstRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"End\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveLastRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"PageUp\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.movePreviousPageRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"PageDown\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveNextPageRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowUp\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.movePreviousRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowDown\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveNextRow,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowLeft\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.movePreviousCell,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"ArrowRight\":\r\n          this.moveByKeyboardEvent(\r\n            this.manager.selection.moveNextCell,\r\n            range,\r\n            append\r\n          );\r\n          break;\r\n        case \"Enter\":\r\n          this.enterPressedHandler();\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"mousemove\", { passive: true })\r\n  mouseMoveHandler(eventInfo: MouseEvent) {\r\n    if (\r\n      (this.rowHighlightEnabled === \"auto\" &&\r\n        this.rowSelectionMode !== \"none\") ||\r\n      this.rowHighlightEnabled === true\r\n    ) {\r\n      this.rowHighlighted =\r\n        this.manager.getRowEventTarget(eventInfo) ||\r\n        (this.manager.isRowActionsEventTarget(eventInfo)\r\n          ? this.rowHighlighted\r\n          : null);\r\n    }\r\n\r\n    selectingBlock: {\r\n      if (this.manager.selection.selecting) {\r\n        if (focusComposedPath()[0] !== this.el) {\r\n          this.stopSelecting();\r\n          break selectingBlock;\r\n        }\r\n\r\n        const row = this.manager.getRowEventTarget(eventInfo);\r\n        const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n        if (\r\n          row &&\r\n          (this.manager.selection.selectingRow !== row ||\r\n            this.manager.selection.selectingCell !== cell)\r\n        ) {\r\n          const isKeyModifierPressed = mouseEventModifierKey(eventInfo);\r\n          const isMouseButtonRightPressed = mouseEventHasButtonPressed(\r\n            eventInfo,\r\n            MouseEventButtons.RIGHT\r\n          );\r\n\r\n          this.selectByPointerEvent(\r\n            row,\r\n            cell,\r\n            isKeyModifierPressed && !isMouseButtonRightPressed,\r\n            !isMouseButtonRightPressed,\r\n            isMouseButtonRightPressed\r\n          );\r\n\r\n          this.manager.selection.selectingRow = row;\r\n          this.manager.selection.selectingCell = cell;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"mouseleave\", { passive: true })\r\n  mouseLeaveHandler() {\r\n    this.rowHighlighted &&= null;\r\n  }\r\n\r\n  @Listen(\"mousedown\", { passive: true })\r\n  mouseDownHandler(eventInfo: MouseEvent) {\r\n    const row = this.manager.getRowEventTarget(eventInfo);\r\n    const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n    if (row) {\r\n      this.manager.selection.selecting = true;\r\n      this.selectByPointerEvent(\r\n        row,\r\n        cell,\r\n        mouseEventModifierKey(eventInfo),\r\n        eventInfo.shiftKey,\r\n        eventInfo.button === MouseEventButton.RIGHT\r\n      );\r\n    }\r\n  }\r\n\r\n  @Listen(\"mouseup\", { passive: true })\r\n  mouseUpHandler() {\r\n    if (this.manager.selection.selecting) {\r\n      this.stopSelecting();\r\n    }\r\n  }\r\n\r\n  @Listen(\"click\", { passive: true })\r\n  clickHandler(eventInfo: MouseEvent) {\r\n    const row = this.manager.getRowEventTarget(eventInfo);\r\n    const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n    if (row) {\r\n      this.emitRowClicked(row, cell);\r\n    }\r\n  }\r\n\r\n  @Listen(\"dblclick\", { passive: true })\r\n  dblclickHandler(eventInfo: MouseEvent) {\r\n    const row = this.manager.getRowEventTarget(eventInfo);\r\n    const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n    if (row) {\r\n      this.rowDoubleClicked.emit({\r\n        rowId: row.rowId,\r\n        cellId: cell?.cellId,\r\n        columnId: cell?.column.columnId\r\n      });\r\n    }\r\n  }\r\n\r\n  @Listen(\"touchstart\", { passive: true })\r\n  touchstartHandler(eventInfo: TouchEvent) {\r\n    this.manager.selection.touchStart(eventInfo);\r\n  }\r\n\r\n  @Listen(\"touchend\", { passive: false })\r\n  touchendHandler(eventInfo: TouchEvent) {\r\n    if (eventInfo.cancelable) {\r\n      eventInfo.preventDefault();\r\n    }\r\n\r\n    if (this.manager.selection.isTouchEndSelection(eventInfo)) {\r\n      const columnSelector = this.manager.columns.getColumnSelector();\r\n      const row = this.manager.getRowEventTarget(eventInfo);\r\n      const cell = this.manager.getCellEventTarget(eventInfo);\r\n\r\n      if (row) {\r\n        this.selectByPointerEvent(\r\n          row,\r\n          cell,\r\n          columnSelector?.richRowSelectorMode !== \"select\",\r\n          false,\r\n          false\r\n        );\r\n\r\n        this.emitRowClicked(row, cell);\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"contextmenu\")\r\n  contextmenuHandler(eventInfo: MouseEvent) {\r\n    let targetRow: HTMLChGridRowElement;\r\n\r\n    if (\r\n      eventInfo.target === this.el &&\r\n      eventInfo.button === MouseEventButton.KEY_SHORTCUT\r\n    ) {\r\n      targetRow = this.rowFocused;\r\n    } else {\r\n      targetRow = this.manager.getRowEventTarget(eventInfo);\r\n    }\r\n\r\n    if (targetRow) {\r\n      const cellFocused =\r\n        this.cellSelected?.row === targetRow ? this.cellSelected : null;\r\n\r\n      const rowContextMenuEventInfo = this.rowContextMenu.emit({\r\n        rowId: targetRow.rowId,\r\n        cellId: cellFocused?.cellId,\r\n        columnId: cellFocused?.column.columnId,\r\n        selectedRowsId: this.rowsSelected.map(row => row.rowId),\r\n        clientX: eventInfo.clientX,\r\n        clientY: eventInfo.clientY\r\n      });\r\n\r\n      this.manager.rowActions.showOnRowContext?.openRowContext(\r\n        eventInfo.clientX,\r\n        eventInfo.clientY\r\n      );\r\n\r\n      if (\r\n        rowContextMenuEventInfo.defaultPrevented ||\r\n        this.manager.rowActions.showOnRowContext\r\n      ) {\r\n        eventInfo.preventDefault();\r\n      }\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnSelectorClicked\", { passive: true })\r\n  columnSelectorClickedHandler(\r\n    eventInfo: CustomEvent<ChGridColumnSelectorClickedEvent>\r\n  ) {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"select\") {\r\n      this.selectAll(eventInfo.detail.checked);\r\n    } else if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markAllRows(\r\n        eventInfo.detail.checked\r\n      );\r\n    }\r\n  }\r\n\r\n  @Listen(\"cellSelectorClicked\", { passive: true })\r\n  cellSelectorClickedHandler(\r\n    eventInfo: CustomEvent<ChGridCellSelectorClickedEvent>\r\n  ) {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"select\") {\r\n      this.selectByPointerEvent(\r\n        this.manager.getRowEventTarget(eventInfo),\r\n        this.manager.getCellEventTarget(eventInfo),\r\n        true,\r\n        eventInfo.detail.range,\r\n        false\r\n      );\r\n    } else if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markRow(\r\n        this.manager.getRowEventTarget(eventInfo),\r\n        eventInfo.detail.checked,\r\n        eventInfo.detail.range,\r\n        this.rowsMarked\r\n      );\r\n    }\r\n  }\r\n\r\n  @Listen(\"cellRowActionClicked\", { passive: true })\r\n  cellRowActionClickedHandler(eventInfo: CustomEvent) {\r\n    const cell = eventInfo.target as HTMLChGridCellElement;\r\n    this.manager.rowActions.showOnRowActions?.openRowActions(cell);\r\n  }\r\n\r\n  @Listen(\"columnHiddenChanged\")\r\n  @Listen(\"columnOrderChanged\")\r\n  @Listen(\"columnFreezeChanged\")\r\n  @Listen(\"columnSizeChanging\")\r\n  columnStyleChangedHandler() {\r\n    if (this.manager) {\r\n      this.gridStyle = this.manager.getGridStyle();\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnFreezeChanged\")\r\n  columnFreezeChangedHandler() {\r\n    this.manager.columns.adjustFreezeOrder();\r\n  }\r\n\r\n  @Listen(\"columnResizeStarted\")\r\n  columnResizeStartedHandler(eventInfo: CustomEvent<ChGridColumnResizeEvent>) {\r\n    this.manager.columnResizeStart(eventInfo.detail.columnId);\r\n  }\r\n\r\n  @Listen(\"columnResizing\")\r\n  columnResizingHandler(eventInfo: CustomEvent<ChGridColumnResizeEvent>) {\r\n    this.manager.columnResizing(eventInfo.detail.deltaWidth);\r\n  }\r\n\r\n  @Listen(\"columnResizeFinished\")\r\n  columnResizeFinishedHandler() {\r\n    this.manager.columnResizeEnd();\r\n  }\r\n\r\n  @Listen(\"columnDragStarted\")\r\n  columnDragStartHandler(eventInfo: CustomEvent<ChGridColumnDragEvent>) {\r\n    this.manager.columnDragStart(eventInfo.detail.columnId);\r\n  }\r\n\r\n  @Listen(\"columnDragging\")\r\n  columnDraggingHandler(eventInfo: CustomEvent<ChGridColumnDragEvent>) {\r\n    if (this.manager.columnDragging(eventInfo.detail.positionX)) {\r\n      this.gridStyle = this.manager.getGridStyle();\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnDragEnded\")\r\n  columnDragEndHandler() {\r\n    this.manager.columnDragEnd();\r\n    this.gridStyle = this.manager.getGridStyle();\r\n  }\r\n\r\n  @Listen(\"rowDragStarted\")\r\n  rowDragStartHandler(eventInfo: CustomEvent<ChGridRowDragEvent>) {\r\n    this.manager.rowDragStart(eventInfo.detail.row);\r\n  }\r\n\r\n  @Listen(\"rowEnsureVisible\")\r\n  rowEnsureVisibleHandler(eventInfo: CustomEvent) {\r\n    this.manager.ensureRowVisible(eventInfo.target as HTMLChGridRowElement);\r\n  }\r\n\r\n  @Listen(\"cellEnsureVisible\")\r\n  cellEnsureVisibleHandler(eventInfo: CustomEvent) {\r\n    this.manager.ensureCellVisible(eventInfo.target as HTMLChGridCellElement);\r\n  }\r\n\r\n  @Listen(\"settingsShowClicked\")\r\n  settingsShowClickedHandler() {\r\n    this.settingsUI.show = true;\r\n  }\r\n\r\n  @Listen(\"settingsCloseClicked\")\r\n  settingsCloseClickedHandler() {\r\n    this.settingsUI.show = false;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the currently focused row.\r\n   */\r\n  @Method()\r\n  async getFocusedRow(): Promise<string> {\r\n    return this.rowFocused?.rowId;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the currently hovered row.\r\n   */\r\n  @Method()\r\n  async getHoveredRow(): Promise<string> {\r\n    return this.rowHighlighted?.rowId;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the list of rowId of the selected rows.\r\n   */\r\n  @Method()\r\n  async getSelectedRows(): Promise<string[]> {\r\n    return this.rowsSelected.map(row => row.rowId);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the list of rowId of the marked rows.\r\n   */\r\n  @Method()\r\n  async getMarkedRows(): Promise<string[]> {\r\n    return this.rowsMarked.map(row => row.rowId);\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the currently focused cell.\r\n   */\r\n  @Method()\r\n  async getFocusedCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    return {\r\n      cellId: this.cellFocused ? this.cellFocused.cellId : null,\r\n      rowId: this.cellFocused ? this.cellFocused.row.rowId : null,\r\n      columnId: this.cellFocused ? this.cellFocused.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getSelectedCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    return {\r\n      cellId: this.cellSelected ? this.cellSelected.cellId : null,\r\n      rowId: this.cellSelected ? this.cellSelected.row.rowId : null,\r\n      columnId: this.cellSelected ? this.cellSelected.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Selects or deselects a row.\r\n   * @param rowId - The rowId of the row to select or deselect.\r\n   * @param selected - A boolean indicating whether to select or deselect the row.\r\n   */\r\n  @Method()\r\n  async selectRow(rowId: string, selected = true): Promise<void> {\r\n    const row = this.manager.getRow(rowId);\r\n\r\n    if (row) {\r\n      const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n        this.manager.selection.selectSet(\r\n          {\r\n            rowFocused: this.rowFocused,\r\n            rowsSelected: this.rowsSelected,\r\n            cellFocused: this.cellFocused,\r\n            cellSelected: this.cellSelected\r\n          },\r\n          row,\r\n          null,\r\n          selected\r\n        );\r\n\r\n      this.rowFocused = rowFocused;\r\n      this.rowsSelected = rowsSelected;\r\n      this.cellFocused = cellFocused;\r\n      this.cellSelected = cellSelected;\r\n\r\n      rowFocused?.ensureVisible();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects or deselects all rows.\r\n   * @param selected - A boolean indicating whether to select or deselect all rows.\r\n   */\r\n  @Method()\r\n  async selectAllRows(selected = true): Promise<void> {\r\n    this.selectAll(selected);\r\n  }\r\n\r\n  /**\r\n   * Select or deselect a cell.\r\n   * The cell can be identified by the cellId parameter or\r\n   * by using the rowId and columnId pair.\r\n   * @param cellId - The cellId of the cell to select or deselect.\r\n   * @param rowId - The rowId of the row containing the cell.\r\n   * @param columnId - The columnId of the column containing the cell.\r\n   * @param selected - A boolean indicating whether to select or deselect the cell.\r\n   */\r\n  @Method()\r\n  async selectCell(\r\n    cellId?: string,\r\n    rowId?: string,\r\n    columnId?: string,\r\n    selected = true\r\n  ): Promise<void> {\r\n    const cell = this.manager.getCell(cellId, rowId, columnId);\r\n\r\n    if (cell) {\r\n      this.setCellSelected(cell, selected);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark or unmark a row.\r\n   * @param rowId - The rowId of the row to select or deselect.\r\n   * @param marked - A boolean indicating whether to mark or unmark the row.\r\n   */\r\n  @Method()\r\n  async markRow(rowId: string, marked = true): Promise<void> {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n    const row = this.manager.getRow(rowId);\r\n\r\n    if (row && columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markRow(\r\n        row,\r\n        marked,\r\n        false,\r\n        this.rowsMarked\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark or unmark all rows.\r\n   * @param marked - A boolean indicating whether to mark or unmark all rows.\r\n   */\r\n  @Method()\r\n  async markAllRows(marked = true): Promise<void> {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markAllRows(marked);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Expands a row, showing its children.\r\n   * @param rowId - The rowId of the row to expand.\r\n   */\r\n  @Method()\r\n  async expandRow(rowId: string): Promise<void> {\r\n    this.setRowCollapsed(this.manager.getRow(rowId), false);\r\n  }\r\n\r\n  /**\r\n   * Collapses a row, hiding its children.\r\n   * @param rowId - The rowId of the row to collapse.\r\n   */\r\n  @Method()\r\n  async collapseRow(rowId: string): Promise<void> {\r\n    this.setRowCollapsed(this.manager.getRow(rowId), true);\r\n  }\r\n\r\n  /**\r\n   * Ensures that the row is visible within the control, scrolling the contents of the control if necessary.\r\n   * @param rowId - The rowId of the row to ensure visibility.\r\n   */\r\n  @Method()\r\n  async rowEnsureVisible(rowId: string): Promise<void> {\r\n    const row = this.manager.getRow(rowId);\r\n\r\n    if (row) {\r\n      this.manager.ensureRowVisible(row);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ensures that the cell is visible within the control, scrolling the contents of the control if necessary.\r\n   * @param cellId - The cellId of the cell to ensure visibility.\r\n   */\r\n  @Method()\r\n  async cellEnsureVisible(cellId: string): Promise<void> {\r\n    const cell = this.manager.getCell(cellId);\r\n\r\n    if (cell) {\r\n      this.manager.ensureCellVisible(cell);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the previous row relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getPreviousRow(): Promise<string | void> {\r\n    const currentRow = this.cellSelected?.row;\r\n\r\n    if (currentRow) {\r\n      return this.manager.getPreviousRow(currentRow)?.rowId || null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the rowId of the next row relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getNextRow(): Promise<string | void> {\r\n    const currentRow = this.cellSelected?.row;\r\n\r\n    if (currentRow) {\r\n      return this.manager.getNextRow(currentRow)?.rowId || null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the previous cell relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getPreviousCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    const previousCell = this.manager.getPreviousCell(this.cellSelected);\r\n\r\n    return {\r\n      cellId: previousCell ? previousCell.cellId : null,\r\n      rowId: previousCell ? previousCell.row.rowId : null,\r\n      columnId: previousCell ? previousCell.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Retrieves information about the next cell relative to the currently selected cell.\r\n   */\r\n  @Method()\r\n  async getNextCell(): Promise<{\r\n    cellId: string;\r\n    rowId: string;\r\n    columnId: string;\r\n  }> {\r\n    const nextCell = this.manager.getNextCell(this.cellSelected);\r\n\r\n    return {\r\n      cellId: nextCell ? nextCell.cellId : null,\r\n      rowId: nextCell ? nextCell.row.rowId : null,\r\n      columnId: nextCell ? nextCell.column.columnId : null\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Synchronizes the state of a row in the grid.\r\n   */\r\n  @Method()\r\n  async syncRowState(el: HTMLElement) {\r\n    const row = el as HTMLChGridRowElement;\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (this.rowSelectionMode !== \"none\") {\r\n      this.syncRowStateSelected(row);\r\n    }\r\n    if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.syncRowStateMarked(row);\r\n    }\r\n\r\n    if (columnSelector) {\r\n      this.syncRowStateSelector(row, columnSelector);\r\n\r\n      if (columnSelector.richRowSelectorMode === \"select\") {\r\n        this.manager.selection.syncColumnSelector(\r\n          this.rowsSelected.length,\r\n          columnSelector\r\n        );\r\n      } else if (columnSelector.richRowSelectorMode === \"mark\") {\r\n        this.manager.selection.syncColumnSelector(\r\n          this.rowsMarked.length,\r\n          columnSelector\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  private syncRowStateSelected(row: HTMLChGridRowElement) {\r\n    if (row.selected && this.rowSelectionMode === \"single\") {\r\n      this.rowsSelected[0] = row;\r\n    }\r\n    if (\r\n      row.selected &&\r\n      this.rowSelectionMode === \"multiple\" &&\r\n      !this.rowsSelected.includes(row)\r\n    ) {\r\n      this.rowsSelected.push(row);\r\n    }\r\n\r\n    if (!row.selected) {\r\n      const index = this.rowsSelected.indexOf(row);\r\n\r\n      if (index !== -1) {\r\n        this.rowsSelected.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  private syncRowStateMarked(row: HTMLChGridRowElement) {\r\n    if (row.marked && !this.rowsMarked.includes(row)) {\r\n      this.rowsMarked.push(row);\r\n    }\r\n\r\n    if (!row.marked) {\r\n      const index = this.rowsMarked.indexOf(row);\r\n\r\n      if (index !== -1) {\r\n        this.rowsMarked.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  private syncRowStateSelector(\r\n    row: HTMLChGridRowElement,\r\n    columnSelector: HTMLChGridColumnElement\r\n  ) {\r\n    const cell = row.getCell(columnSelector);\r\n    const value =\r\n      (columnSelector.richRowSelectorMode === \"select\" && row.selected) ||\r\n      (columnSelector.richRowSelectorMode === \"mark\" && row.marked);\r\n\r\n    cell.setSelectorChecked(value);\r\n  }\r\n\r\n  private getChangedEventDetail(\r\n    rows: HTMLChGridRowElement[],\r\n    previous: HTMLChGridRowElement[]\r\n  ): ChGridSelectionChangedEvent | ChGridMarkingChangedEvent {\r\n    return {\r\n      rowsId: rows.map(row => row.rowId),\r\n      addedRowsId: rows\r\n        .filter(row => !previous.includes(row))\r\n        .map(row => row.rowId),\r\n      removedRowsId: previous\r\n        .filter(row => !rows.includes(row))\r\n        .map(row => row.rowId),\r\n      unalteredRowsId: rows\r\n        .filter(row => previous.includes(row))\r\n        .map(row => row.rowId)\r\n    };\r\n  }\r\n\r\n  private enterPressedHandler() {\r\n    if (this.rowFocused) {\r\n      this.rowEnterPressed.emit({\r\n        rowId: this.rowFocused.rowId,\r\n        cellId: this.cellFocused ? this.cellFocused.cellId : null,\r\n        columnId: this.cellFocused ? this.cellFocused.column.columnId : null\r\n      });\r\n    }\r\n  }\r\n\r\n  private spacePressedEvent(ctrl: boolean, shift: boolean) {\r\n    if (this.keyboardNavigationMode === \"focus\") {\r\n      this.selectByKeyboardEvent(ctrl, shift, \"last-selected\");\r\n    } else if (this.keyboardNavigationMode === \"select\") {\r\n      this.markByKeyboardEvent();\r\n    }\r\n\r\n    this.emitRowClicked(this.rowFocused, this.cellFocused);\r\n  }\r\n\r\n  private markByKeyboardEvent() {\r\n    const columnSelector = this.manager.columns.getColumnSelector();\r\n\r\n    if (columnSelector?.richRowSelectorMode === \"mark\") {\r\n      this.rowsMarked = this.manager.selection.markRows(\r\n        this.rowFocused,\r\n        this.rowsMarked,\r\n        this.rowsSelected\r\n      );\r\n    }\r\n  }\r\n\r\n  private selectByKeyboardEvent(\r\n    append: boolean,\r\n    range: boolean,\r\n    rangeStartOn: \"focus\" | \"last-selected\"\r\n  ) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.select(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        this.rowFocused,\r\n        this.cellFocused,\r\n        true,\r\n        append,\r\n        range,\r\n        rangeStartOn,\r\n        false\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private selectByPointerEvent(\r\n    row: HTMLChGridRowElement,\r\n    cell: HTMLChGridCellElement,\r\n    append: boolean,\r\n    range: boolean,\r\n    context: boolean\r\n  ) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.select(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        row,\r\n        cell,\r\n        true,\r\n        append,\r\n        range,\r\n        \"last-selected\",\r\n        context\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private moveByKeyboardEvent(\r\n    fn: (\r\n      state: ManagerSelectionState,\r\n      select: boolean,\r\n      range: boolean,\r\n      append: boolean\r\n    ) => ManagerSelectionState,\r\n    range: boolean,\r\n    append: boolean\r\n  ) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } = fn.call(\r\n      this.manager.selection,\r\n      {\r\n        rowFocused: this.rowFocused,\r\n        rowsSelected: this.rowsSelected,\r\n        cellFocused: this.cellFocused,\r\n        cellSelected: this.cellSelected\r\n      },\r\n      this.rowSelectionMode !== \"none\" &&\r\n        this.keyboardNavigationMode === \"select\",\r\n      this.rowSelectionMode === \"multiple\" ? range : false,\r\n      this.rowSelectionMode === \"multiple\" ? range && append : false\r\n    );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private selectAll(value = true) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.selectAll(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        value\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private setRowCollapsed(row: HTMLChGridRowElement, collapsed: boolean) {\r\n    if (row && collapsed) {\r\n      if (row && row.hasChildRows) {\r\n        row.collapsed = true;\r\n      }\r\n    } else if (row && !collapsed) {\r\n      row.collapsed = false;\r\n    }\r\n  }\r\n\r\n  private setCellSelected(cell: HTMLChGridCellElement, selected = true) {\r\n    const { rowFocused, rowsSelected, cellFocused, cellSelected } =\r\n      this.manager.selection.selectSet(\r\n        {\r\n          rowFocused: this.rowFocused,\r\n          rowsSelected: this.rowsSelected,\r\n          cellFocused: this.cellFocused,\r\n          cellSelected: this.cellSelected\r\n        },\r\n        cell.row,\r\n        cell,\r\n        selected\r\n      );\r\n\r\n    this.rowFocused = rowFocused;\r\n    this.rowsSelected = rowsSelected;\r\n    this.cellFocused = cellFocused;\r\n    this.cellSelected = cellSelected;\r\n\r\n    (cellFocused || rowFocused)?.ensureVisible();\r\n  }\r\n\r\n  private emitRowClicked(\r\n    row: HTMLChGridRowElement,\r\n    cell: HTMLChGridCellElement\r\n  ) {\r\n    this.rowClicked.emit({\r\n      rowId: row.rowId,\r\n      cellId: cell?.cellId,\r\n      columnId: cell?.column.columnId\r\n    });\r\n  }\r\n\r\n  private stopSelecting() {\r\n    this.manager.selection.selecting = false;\r\n    this.manager.selection.selectingRow = null;\r\n    this.manager.selection.selectingCell = null;\r\n  }\r\n\r\n  private renderSettings() {\r\n    return (\r\n      <ch-grid-settings\r\n        grid={this.el}\r\n        ref={el => (this.settingsUI = el)}\r\n        exportparts=\"\r\n          mask:settings-mask,\r\n          window:settings-window,\r\n          header:settings-header,\r\n          caption:settings-caption,\r\n          close:settings-close,\r\n          main:settings-main,\r\n          footer:settings-footer\r\n        \"\r\n      >\r\n        <slot name=\"settings\">\r\n          <ch-grid-settings-columns\r\n            part=\"settings-columns\"\r\n            columns={[...this.manager.getColumns()]}\r\n            exportparts=\"\r\n              column:settings-columns-item,\r\n              column-label:settings-columns-label,\r\n              column-visible:settings-columns-visible,\r\n              column-visible-checked:settings-columns-visible-checked\r\n            \"\r\n          ></ch-grid-settings-columns>\r\n        </slot>\r\n      </ch-grid-settings>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host tabindex={this.keyboardNavigationMode !== \"none\" ? \"0\" : false}>\r\n        <header part=\"header\">\r\n          <slot name=\"header\"></slot>\r\n        </header>\r\n        <section\r\n          class=\"main\"\r\n          style={this.gridStyle}\r\n          part=\"main\"\r\n          ref={el => (this.gridLayoutElement = el)}\r\n        >\r\n          <slot></slot>\r\n        </section>\r\n        <aside>\r\n          {this.renderSettings()}\r\n          <slot name=\"column-display\"></slot>\r\n          <slot name=\"row-actions\"></slot>\r\n        </aside>\r\n        <footer part=\"footer\">\r\n          <slot name=\"footer\"></slot>\r\n        </footer>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nexport interface GridLocalization {\r\n  settingsCaption: string;\r\n  settingsCloseText: string;\r\n  settingsCloseTooltip: string;\r\n}\r\n","@layer ch-grid {\r\n    ch-grid-action-refresh[disabled] {\r\n        pointer-events: none;\r\n    }\r\n}","import {\r\n  Component,\r\n  Prop,\r\n  Event,\r\n  h,\r\n  Host,\r\n  EventEmitter,\r\n  Listen\r\n} from \"@stencil/core\";\r\n\r\n/**\r\n * The `ch-grid-action-refresh` component represents a refresh button for a grid action bar.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-action-refresh` instead.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-action-refresh\",\r\n  styleUrl: \"ch-grid-action-refresh.scss\",\r\n  shadow: false\r\n})\r\nexport class ChGridActionRefresh {\r\n  /**\r\n   * Indicates whether the refresh button is disabled or not.\r\n   */\r\n  @Prop() readonly disabled: boolean;\r\n\r\n  /**\r\n   * Event emitted when the refresh button is clicked.\r\n   */\r\n  @Event() refreshClicked: EventEmitter;\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  @Listen(\"click\", { passive: true })\r\n  pressedHandler(eventInfo: any) {\r\n    if (!eventInfo.key || eventInfo.key === \"Enter\" || eventInfo.key === \" \") {\r\n      this.refreshClicked.emit();\r\n      eventInfo.stopPropagation();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Host role=\"button\" tabindex=\"0\" disabled={this.disabled}></Host>;\r\n  }\r\n}\r\n","@layer ch-grid {\r\n    ch-grid-action-settings[disabled] {\r\n        pointer-events: none;\r\n    }\r\n}","import {\r\n  Component,\r\n  Prop,\r\n  h,\r\n  Host,\r\n  Event,\r\n  EventEmitter,\r\n  Listen\r\n} from \"@stencil/core\";\r\n\r\n/**\r\n * The `ch-grid-action-settings` component represents a settings button for a grid action bar.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-action-settings` instead.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-action-settings\",\r\n  styleUrl: \"ch-grid-action-settings.scss\",\r\n  shadow: false\r\n})\r\nexport class ChGridActionSettings {\r\n  /**\r\n   * Indicates whether the settings button is disabled or not.\r\n   */\r\n  @Prop() readonly disabled: boolean;\r\n\r\n  /**\r\n   * Event emitted when the settings button is clicked.\r\n   */\r\n  @Event() settingsShowClicked: EventEmitter;\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  @Listen(\"click\", { passive: true })\r\n  pressedHandler(eventInfo: any) {\r\n    if (!eventInfo.key || eventInfo.key === \"Enter\" || eventInfo.key === \" \") {\r\n      this.settingsShowClicked.emit();\r\n      eventInfo.stopPropagation();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Host role=\"button\" tabindex=\"0\" disabled={this.disabled}></Host>;\r\n  }\r\n}\r\n","@layer ch-grid {}","import { Component, Element } from \"@stencil/core\";\r\n\r\n/**\r\n * The `ch-grid-actionbar` component represents a container for a grid actions.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-actionbar` instead.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-actionbar\",\r\n  styleUrl: \"ch-grid-actionbar.scss\",\r\n  shadow: false\r\n})\r\nexport class ChGridActionbar {\r\n  @Element() el: HTMLChGridActionbarElement;\r\n}\r\n","@import \"../../../components/common/reset.scss\";\r\n@import \"../helpers/styles.scss\";\r\n\r\n:host {\r\n  display: flex;\r\n  position: sticky;\r\n  top: 0;\r\n  grid-row: 1;\r\n}\r\n\r\n// column-set box simulation\r\n:host {\r\n  @include box-simulation;\r\n  @include column-drag-transition;\r\n}\r\n\r\n// z-index levels\r\n:host {\r\n  --ch-grid-column-z-index-head: var(--ch-grid-column-header-layer);\r\n}\r\n:host([show-settings]),\r\n:host([resizing]) {\r\n  --ch-grid-column-z-index-active: var(--ch-grid-column-active-layer);\r\n}\r\n\r\n:host([sort-direction=\"asc\"]) .bar .sort .sort-asc {\r\n  visibility: visible;\r\n}\r\n:host([sort-direction=\"desc\"]) .bar .sort .sort-desc {\r\n  visibility: visible;\r\n}\r\n\r\n.bar {\r\n  @include reset-list;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  & .selector {\r\n    overflow: hidden;\r\n    order: 0;\r\n    &:not([hidden]) {\r\n      display: flex;\r\n    }\r\n  }\r\n\r\n  & .name {\r\n    display: flex;\r\n    overflow: hidden;\r\n    order: 1;\r\n\r\n    & .name-text {\r\n      white-space: nowrap;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n    }\r\n  }\r\n\r\n  & .sort {\r\n    position: relative;\r\n    align-items: center;\r\n    order: 2;\r\n    &:not([hidden]) {\r\n      display: flex;\r\n    }\r\n\r\n    & .sort-asc {\r\n      visibility: hidden;\r\n      animation-fill-mode: forwards;\r\n    }\r\n    & .sort-desc {\r\n      position: absolute;\r\n      visibility: hidden;\r\n      animation-fill-mode: forwards;\r\n    }\r\n  }\r\n  & .settings {\r\n    order: 3;\r\n  }\r\n  & .resize {\r\n    align-self: stretch;\r\n    margin-inline-start: auto;\r\n    order: 4;\r\n  }\r\n}\r\n\r\n@keyframes column-sort {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  10% {\r\n    opacity: 1;\r\n  }\r\n  90% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Host,\r\n  Prop,\r\n  Watch,\r\n  h,\r\n  Listen\r\n} from \"@stencil/core\";\r\nimport {\r\n  ChGridColumnDragEvent,\r\n  ChGridColumnFreezeChangedEvent,\r\n  ChGridColumnHiddenChangedEvent,\r\n  ChGridColumnOrderChangedEvent,\r\n  ChGridColumnSelectorClickedEvent,\r\n  ChGridColumnSizeChangedEvent,\r\n  ChGridColumnSortChangedEvent,\r\n  ChGridColumnFreeze,\r\n  ChGridColumnSortDirection\r\n} from \"./ch-grid-column-types\";\r\n\r\n/**\r\n * The `ch-grid-column` component represents a grid column.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-column` instead.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-column\",\r\n  styleUrl: \"ch-grid-column.scss\",\r\n  shadow: true\r\n})\r\nexport class ChGridColumn {\r\n  private dragging = false;\r\n  private dragMouseMoveFn = this.dragMouseMoveHandler.bind(this);\r\n  private dragMouseMoveStartPositionX: number;\r\n\r\n  @Element() el: HTMLChGridColumnElement;\r\n\r\n  /**\r\n   * A unique identifier for the column.\r\n   */\r\n  @Prop() readonly columnId: string;\r\n\r\n  /**\r\n   * One of \"plain\", \"rich\", or \"tree\", indicating the type of cell displayed in the column.\r\n   */\r\n  @Prop() readonly columnType: \"plain\" | \"rich\" | \"tree\" = \"plain\";\r\n\r\n  /**\r\n   * @deprecated Use \"columnImage\" or \"columnImageSet\" instead.\r\n   * A URL to an icon to display in the column header.\r\n   */\r\n  @Prop() readonly columnIconUrl: string;\r\n\r\n  /**\r\n   * A URL to an icon to display in the column header.\r\n   */\r\n  @Prop() readonly columnImage: string;\r\n\r\n  /**\r\n   * A URL to an icon to display in the column header.\r\n   */\r\n  @Prop() readonly columnImageSet: string;\r\n\r\n  /**\r\n   * The text to display in the column header and settings.\r\n   */\r\n  @Prop() readonly columnName: string;\r\n\r\n  /**\r\n   * Indicates whether the text in the column header is visible or not\r\n   */\r\n  @Prop() readonly columnNameHidden: boolean;\r\n\r\n  /**\r\n   * The text to display when the cursor is placed over the column header.\r\n   */\r\n  @Prop() readonly columnTooltip: string;\r\n\r\n  /**\r\n   * @deprecated Use \"columnTooltip\" and \"columnNameHidden\" instead.\r\n   * One of \"text\" or \"title\", indicating whether the `columnName` should be displayed as the column text or as tooltip of the column image.\r\n   */\r\n  @Prop() readonly columnNamePosition: \"text\" | \"title\" = \"text\";\r\n\r\n  /**\r\n   * A boolean value indicating whether the column cells are draggable to reorder the grid rows (only applicable for columnType=\"rich\").\r\n   */\r\n  @Prop() readonly richRowDrag: boolean;\r\n\r\n  /**\r\n   * A boolean indicating whether the column cells in the grid should have a checkbox selector (only applicable for columnType=\"rich\").\r\n   */\r\n  @Prop() readonly richRowSelector: boolean;\r\n\r\n  /**\r\n   * One of \"select\" or \"mark\", indicating the mode of rich row selector.\r\n   * \"select\" indicates that the row selector is bound to the row selection.\r\n   * \"mark\" allows to mark a row independently of the selection.\r\n   */\r\n  @Prop() readonly richRowSelectorMode: \"select\" | \"mark\" = \"select\";\r\n\r\n  /**\r\n   * Indicate the state of the rich row selector.\r\n   * \"\" indicates that all rows are unchecked.\r\n   * \"checked\" indicates that all rows are checked.\r\n   * \"indeterminate\" indicates that some rows are marked.\r\n   */\r\n  @Prop({ mutable: true }) richRowSelectorState:\r\n    | \"\"\r\n    | \"checked\"\r\n    | \"indeterminate\" = \"\";\r\n\r\n  /**\r\n   * A boolean indicating whether the column cells in the grid should have a set of action buttons (only applicable for columnType=\"rich\").\r\n   */\r\n  @Prop() readonly richRowActions: boolean;\r\n\r\n  /**\r\n   * A CSS class name to apply to the display observer element used to detect changes in the column visibility.\r\n   */\r\n  @Prop() readonly displayObserverClass: string;\r\n\r\n  /**\r\n   * One of \"left\" or \"right\", indicating whether the column should be \"frozen\" (i.e. remain visible when the user scrolls horizontally).\r\n   */\r\n  @Prop() readonly freeze?: ChGridColumnFreeze;\r\n\r\n  @Watch(\"freeze\")\r\n  freezeHandler() {\r\n    this.columnFreezeChanged.emit({\r\n      columnId: this.columnId,\r\n      freeze: this.freeze\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be hidden.\r\n   * The user can display it from the grid settings.\r\n   */\r\n  @Prop({ reflect: true }) readonly hidden: boolean = false;\r\n\r\n  @Watch(\"hidden\")\r\n  hiddenHandler() {\r\n    this.columnHiddenChanged.emit({\r\n      columnId: this.columnId,\r\n      hidden: this.hidden\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be hideable (i.e. whether the user should be able to show/hide the column).\r\n   */\r\n  @Prop() readonly hideable: boolean = true;\r\n\r\n  /**\r\n   * A number indicating the order in which the column should appear.\r\n   */\r\n  @Prop({ reflect: true }) readonly order: number;\r\n\r\n  @Watch(\"order\")\r\n  orderHandler() {\r\n    this.columnOrderChanged.emit({\r\n      columnId: this.columnId,\r\n      order: this.order\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A number indicating the physical order of the column (i.e. its position in the DOM).\r\n   */\r\n  @Prop() readonly physicalOrder: number;\r\n\r\n  /**\r\n   * A string indicating the width of the column.\r\n   * Any value supported by the \"grid-template-columns\" CSS property is valid.\r\n   */\r\n  @Prop({ reflect: true }) readonly size: string;\r\n\r\n  @Watch(\"size\")\r\n  sizeHandler() {\r\n    this.columnSizeChanging.emit({\r\n      columnId: this.columnId,\r\n      size: this.size\r\n    });\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be resizable (i.e. whether the user should be able to drag its width).\r\n   */\r\n  @Prop() readonly resizable: boolean = true;\r\n\r\n  /**\r\n   * A boolean indicating whether the column is currently being resized.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) resizing: boolean;\r\n\r\n  /**\r\n   * A boolean indicating whether the column should be sortable (i.e. whether the user should be able to click the column header to sort the data).\r\n   */\r\n  @Prop() readonly sortable: boolean = true;\r\n\r\n  /**\r\n   * A boolean indicating whether the user should be able to open a settings panel for the column.\r\n   */\r\n  @Prop() readonly settingable: boolean = true;\r\n\r\n  /**\r\n   * One of \"asc\" or \"desc\", indicating the current sort direction.\r\n   */\r\n  @Prop({ mutable: true, reflect: true })\r\n  sortDirection?: ChGridColumnSortDirection;\r\n\r\n  @Watch(\"sortDirection\")\r\n  sortDirectionHandler() {\r\n    if (this.sortDirection) {\r\n      this.columnSortChanged.emit({\r\n        columnId: this.columnId,\r\n        sortDirection: this.sortDirection\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A boolean indicating whether the settings panel for the column should be visible.\r\n   */\r\n  @Prop({ reflect: true, mutable: true }) showSettings = false;\r\n\r\n  /**\r\n   * Event emitted when the `hidden` property is changed.\r\n   */\r\n  @Event() columnHiddenChanged: EventEmitter<ChGridColumnHiddenChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `size` property is currently being changed (i.e. when the user is dragging to resize the column).\r\n   */\r\n  @Event() columnSizeChanging: EventEmitter<ChGridColumnSizeChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `size` property has been changed (i.e. when the user finishes dragging to resize the column).\r\n   */\r\n  @Event() columnSizeChanged: EventEmitter<ChGridColumnSizeChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `order` property is changed.\r\n   */\r\n  @Event() columnOrderChanged: EventEmitter<ChGridColumnOrderChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `sortDirection` property is changed.\r\n   */\r\n  @Event() columnSortChanged: EventEmitter<ChGridColumnSortChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the `freeze` property is changed.\r\n   */\r\n  @Event() columnFreezeChanged: EventEmitter<ChGridColumnFreezeChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user is dragging the column header to move it.\r\n   */\r\n  @Event() columnDragStarted: EventEmitter<ChGridColumnDragEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user is dragging the column header to move it.\r\n   */\r\n  @Event() columnDragging: EventEmitter<ChGridColumnDragEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user stops dragging the column header to move it.\r\n   */\r\n  @Event() columnDragEnded: EventEmitter<ChGridColumnDragEvent>;\r\n\r\n  /**\r\n   * Event emitted when the user clicks the row selector checkbox (only applicable for `richRowSelector=\"true\"`.\r\n   */\r\n  @Event()\r\n  columnSelectorClicked: EventEmitter<ChGridColumnSelectorClickedEvent>;\r\n\r\n  componentDidLoad() {\r\n    this.el.addEventListener(\"mousedown\", this.mousedownHandler.bind(this));\r\n  }\r\n\r\n  @Listen(\"click\", { passive: true })\r\n  clickHandler() {\r\n    if (!this.dragging) {\r\n      if (this.sortable) {\r\n        this.sortDirection = this.sortDirection === \"asc\" ? \"desc\" : \"asc\";\r\n      }\r\n    } else {\r\n      this.dragging = false;\r\n    }\r\n  }\r\n\r\n  @Listen(\"columnResizeStarted\")\r\n  columnResizeStartedHandler() {\r\n    this.resizing = true;\r\n  }\r\n\r\n  @Listen(\"columnResizeFinished\")\r\n  columnResizeFinishedHandler() {\r\n    this.resizing = false;\r\n\r\n    this.columnSizeChanged.emit({\r\n      columnId: this.columnId,\r\n      size: this.size\r\n    });\r\n  }\r\n\r\n  private allowColumnReorder(): boolean {\r\n    return this.el.closest(\"ch-grid\").allowColumnReorder;\r\n  }\r\n\r\n  private mousedownHandler(eventInfo: MouseEvent) {\r\n    eventInfo.preventDefault();\r\n    eventInfo.stopPropagation();\r\n\r\n    if (this.allowColumnReorder()) {\r\n      this.dragMouseDownHandler(eventInfo);\r\n\r\n      document.addEventListener(\"mousemove\", this.dragMouseMoveFn, {\r\n        passive: true\r\n      });\r\n      document.addEventListener(\"mouseup\", this.dragMouseUpHandler.bind(this), {\r\n        once: true\r\n      });\r\n    }\r\n  }\r\n\r\n  private dragMouseDownHandler(eventInfo: MouseEvent) {\r\n    this.dragMouseMoveStartPositionX = eventInfo.pageX;\r\n    this.columnDragStarted.emit({ columnId: this.columnId });\r\n  }\r\n\r\n  private dragMouseMoveHandler(eventInfo: MouseEvent) {\r\n    if (\r\n      this.dragging ||\r\n      Math.abs(this.dragMouseMoveStartPositionX - eventInfo.pageX) > 5\r\n    ) {\r\n      this.dragging = true;\r\n\r\n      this.columnDragging.emit({\r\n        columnId: this.columnId,\r\n        positionX: eventInfo.pageX,\r\n        direction: eventInfo.movementX > 0 ? \"right\" : \"left\"\r\n      });\r\n    }\r\n  }\r\n\r\n  private dragMouseUpHandler() {\r\n    document.removeEventListener(\"mousemove\", this.dragMouseMoveFn);\r\n    this.columnDragEnded.emit({ columnId: this.columnId });\r\n  }\r\n\r\n  private settingsMouseDownHandler(eventInfo: MouseEvent) {\r\n    eventInfo.stopPropagation();\r\n  }\r\n\r\n  private settingsClickHandler = (eventInfo: MouseEvent) => {\r\n    eventInfo.stopPropagation();\r\n    this.showSettings = true;\r\n  };\r\n\r\n  private selectorClickHandler = (eventInfo: MouseEvent) => {\r\n    const target = eventInfo.target as HTMLInputElement;\r\n\r\n    this.richRowSelectorState = target.checked ? \"checked\" : \"\";\r\n    this.columnSelectorClicked.emit({\r\n      checked: target.checked\r\n    });\r\n\r\n    eventInfo.stopPropagation();\r\n  };\r\n\r\n  private selectorTouchEndHandler = (eventInfo: TouchEvent) => {\r\n    eventInfo.stopPropagation();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <ul class=\"bar\" part=\"bar\">\r\n          {this.renderSelector()}\r\n          {this.renderName()}\r\n          {this.renderSort()}\r\n          {this.renderSettings()}\r\n          {this.renderResize()}\r\n        </ul>\r\n        <ch-grid-column-settings\r\n          column={this.el}\r\n          onMouseDown={this.settingsMouseDownHandler}\r\n          show={this.showSettings}\r\n          exportparts=\"\r\n            mask:settings-mask,\r\n            window:settings-window,\r\n            header:settings-header,\r\n            caption:settings-caption,\r\n            close:settings-close,\r\n            main:settings-main,\r\n            footer:settings-footer\r\n          \"\r\n        >\r\n          <slot name=\"settings\"></slot>\r\n        </ch-grid-column-settings>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n  private renderSelector() {\r\n    return (\r\n      <li\r\n        class=\"selector\"\r\n        part=\"bar-selector\"\r\n        hidden={!(this.columnType === \"rich\" && this.richRowSelector)}\r\n      >\r\n        <label part=\"selector-label\">\r\n          <input\r\n            type=\"checkbox\"\r\n            part={[\"selector\", this.richRowSelectorState]\r\n              .filter(part => part !== \"\")\r\n              .join(\" \")}\r\n            onClick={this.selectorClickHandler}\r\n            onTouchEnd={this.selectorTouchEndHandler}\r\n            checked={this.richRowSelectorState === \"checked\"}\r\n            indeterminate={this.richRowSelectorState === \"indeterminate\"}\r\n          />\r\n        </label>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderName() {\r\n    return (\r\n      <li\r\n        class=\"name\"\r\n        part=\"bar-name\"\r\n        title={\r\n          this.columnTooltip ||\r\n          (this.columnNamePosition === \"title\" ? this.columnName : null)\r\n        }\r\n      >\r\n        {this.columnIconUrl || this.columnImage || this.columnImageSet ? (\r\n          <img\r\n            class=\"name-icon\"\r\n            part=\"bar-name-icon\"\r\n            src={this.columnImage || this.columnIconUrl}\r\n            srcSet={this.columnImageSet}\r\n          />\r\n        ) : (\r\n          <div class=\"name-icon\" part=\"bar-name-icon\"></div>\r\n        )}\r\n        <span\r\n          class=\"name-text\"\r\n          part=\"bar-name-text\"\r\n          hidden={this.columnNameHidden || this.columnNamePosition !== \"text\"}\r\n        >\r\n          {this.columnName}\r\n        </span>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderSort() {\r\n    return (\r\n      <li class=\"sort\" part=\"bar-sort\" hidden={!this.sortable}>\r\n        <div class=\"sort-asc\" part=\"bar-sort-ascending\"></div>\r\n        <div class=\"sort-desc\" part=\"bar-sort-descending\"></div>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderSettings() {\r\n    return (\r\n      <li class=\"settings\" part=\"bar-settings\" hidden={!this.settingable}>\r\n        <button\r\n          class=\"button\"\r\n          part=\"bar-settings-button\"\r\n          onClick={this.settingsClickHandler}\r\n        ></button>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  private renderResize() {\r\n    return (\r\n      <li class=\"resize\" part=\"bar-resize\" hidden={!this.resizable}>\r\n        <ch-grid-column-resize\r\n          column={this.el}\r\n          class=\"resize-split\"\r\n          part=\"bar-resize-split\"\r\n        ></ch-grid-column-resize>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","@layer ch-grid {\r\n  ch-grid-columnset {\r\n    display: contents;\r\n  }\r\n}\r\n\r\n@import \"../grid-row/ch-grid-row.scss\";\r\n@import \"../grid-rowset/ch-grid-rowset.scss\";\r\n@import \"../grid-cell/ch-grid-cell.scss\";\r\n","import { Component, Element, Listen } from \"@stencil/core\";\r\nimport { ChGridColumnSortChangedEvent } from \"../grid-column/ch-grid-column-types\";\r\n\r\n/**\r\n * The `ch-grid-columnset` component represents a group of columns.\r\n * @deprecated Use `ch-tabular-grid` component instead. Use `ch-tabular-grid-columnset` instead.\r\n */\r\n@Component({\r\n  tag: \"ch-grid-columnset\",\r\n  styleUrl: \"ch-grid-columnset.scss\",\r\n  shadow: false\r\n})\r\nexport class ChGridColumnset {\r\n  @Element() el: HTMLChGridColumnsetElement;\r\n\r\n  @Listen(\"columnSortChanged\")\r\n  columnSortChangedHandler(\r\n    eventInfo: CustomEvent<ChGridColumnSortChangedEvent>\r\n  ) {\r\n    const columns: HTMLChGridColumnElement[] = Array.from(\r\n      this.el.querySelectorAll(\"ch-grid-column\")\r\n    );\r\n\r\n    columns.forEach(column => {\r\n      if (column.columnId !== eventInfo.detail.columnId) {\r\n        column.sortDirection = null;\r\n      }\r\n    });\r\n  }\r\n}\r\n",":host {\r\n  display: flex;\r\n}\r\n","/* eslint-disable @typescript-eslint/no-empty-function */\r\nimport {\r\n  Component,\r\n  Element,\r\n  Event,\r\n  EventEmitter,\r\n  Listen,\r\n  Prop,\r\n  Watch\r\n} from \"@stencil/core\";\r\nimport { ChPaginatorNavigateClickedEvent } from \"./paginator-navigate/ch-paginator-navigate-types\";\r\nimport { ChPaginatorPagesPageChangedEvent } from \"./paginator-pages/ch-paginator-pages\";\r\n\r\n/**\r\n * The 'ch-paginator' component represents a paginator control for navigating through pages.\r\n */\r\n@Component({\r\n  tag: \"ch-paginator\",\r\n  styleUrl: \"ch-paginator.scss\",\r\n  shadow: false\r\n})\r\nexport class ChPaginator {\r\n  private elPages: HTMLChPaginatorPagesElement;\r\n  private elFirst: HTMLChPaginatorNavigateElement;\r\n  private elPrevious: HTMLChPaginatorNavigateElement;\r\n  private elNext: HTMLChPaginatorNavigateElement;\r\n  private elLast: HTMLChPaginatorNavigateElement;\r\n\r\n  @Element() el: HTMLChPaginatorElement;\r\n\r\n  /**\r\n   * The active page number.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) activePage = 1;\r\n\r\n  @Watch(\"activePage\")\r\n  activePageHandler() {\r\n    this.activePageChanged.emit({ activePage: this.activePage });\r\n  }\r\n\r\n  /**\r\n   * The total number of pages.\r\n   * Use -1 if not known and 'hasNextPage' property to indicate\r\n   * that the end has been reached.\r\n   */\r\n  @Prop() readonly totalPages = 1;\r\n\r\n  /**\r\n   * Indicates that the end has been reached.\r\n   * Use when total pages are not known (totalPages = -1).\r\n   */\r\n  @Prop() readonly hasNextPage: boolean = false;\r\n\r\n  /**\r\n   * Event emitted when the active page changes.\r\n   */\r\n  @Event() activePageChanged: EventEmitter<ChPaginatorActivePageChangedEvent>;\r\n\r\n  /**\r\n   * Event emitted when the navigation is requested.\r\n   */\r\n  @Event()\r\n  pageNavigationRequested: EventEmitter<ChPaginatorPageNavigationRequestedEvent>;\r\n\r\n  componentWillLoad() {\r\n    this.loadElements();\r\n  }\r\n\r\n  @Listen(\"navigateClicked\")\r\n  navigateClickedHandler(\r\n    eventInfo: CustomEvent<ChPaginatorNavigateClickedEvent>\r\n  ) {\r\n    eventInfo.stopPropagation();\r\n    this.navigate(eventInfo.detail.type);\r\n  }\r\n\r\n  @Listen(\"pageChanged\")\r\n  pageChangedHandler(eventInfo: CustomEvent<ChPaginatorPagesPageChangedEvent>) {\r\n    eventInfo.stopPropagation();\r\n    this.navigate(\"goto\", eventInfo.detail.page);\r\n  }\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  keyDownHandler(eventInfo: KeyboardEvent) {\r\n    switch (eventInfo.key) {\r\n      case \"Home\":\r\n        this.navigate(\"first\");\r\n        break;\r\n      case \"PageUp\":\r\n        this.navigate(\"previous\");\r\n        break;\r\n      case \"PageDown\":\r\n        this.navigate(\"next\");\r\n        break;\r\n      case \"End\":\r\n        this.navigate(\"last\");\r\n        break;\r\n    }\r\n  }\r\n\r\n  private navigate(\r\n    type: \"first\" | \"previous\" | \"next\" | \"last\" | \"goto\",\r\n    page?: number\r\n  ) {\r\n    const emitPageNavigationRequested = !page || page !== this.activePage;\r\n\r\n    switch (type) {\r\n      case \"first\":\r\n        this.first();\r\n        this.elFirst?.focus();\r\n        break;\r\n      case \"previous\":\r\n        this.previous();\r\n        this.elPrevious?.focus();\r\n        break;\r\n      case \"next\":\r\n        this.next();\r\n        this.elNext?.focus();\r\n        break;\r\n      case \"last\":\r\n        this.last();\r\n        this.elLast?.focus();\r\n        break;\r\n      case \"goto\":\r\n        this.goto(page);\r\n        break;\r\n    }\r\n\r\n    if (emitPageNavigationRequested) {\r\n      this.pageNavigationRequested.emit({ type, page });\r\n    }\r\n  }\r\n\r\n  private first() {\r\n    this.activePage = 1;\r\n  }\r\n  private previous() {\r\n    this.activePage = Math.max(this.activePage - 1, 1);\r\n  }\r\n  private next() {\r\n    this.activePage =\r\n      this.totalPages < 0\r\n        ? this.activePage + 1\r\n        : Math.min(this.activePage + 1, this.totalPages);\r\n  }\r\n  private last() {\r\n    this.activePage = this.totalPages;\r\n  }\r\n\r\n  private goto(page: number) {\r\n    this.activePage = Math.max(Math.min(page, this.totalPages), 1);\r\n  }\r\n\r\n  private loadElements() {\r\n    this.elPages = this.el.querySelector(\"ch-paginator-pages\");\r\n    this.el\r\n      .querySelectorAll(\"ch-paginator-navigate\")\r\n      .forEach((el: HTMLChPaginatorNavigateElement) => {\r\n        switch (el.type) {\r\n          case \"first\":\r\n            this.elFirst = el;\r\n            break;\r\n          case \"previous\":\r\n            this.elPrevious = el;\r\n            break;\r\n          case \"next\":\r\n            this.elNext = el;\r\n            break;\r\n          case \"last\":\r\n            this.elLast = el;\r\n            break;\r\n        }\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (this.elPages) {\r\n      this.elPages.totalPages = this.totalPages;\r\n      this.elPages.page = this.activePage;\r\n    }\r\n    if (this.elFirst) {\r\n      this.elFirst.disabled = this.activePage === 1;\r\n    }\r\n    if (this.elPrevious) {\r\n      this.elPrevious.disabled = this.activePage === 1;\r\n    }\r\n    if (this.elNext) {\r\n      this.elNext.disabled =\r\n        this.activePage === this.totalPages ||\r\n        (this.totalPages < 0 && !this.hasNextPage);\r\n    }\r\n    if (this.elLast) {\r\n      this.elLast.disabled =\r\n        this.activePage === this.totalPages ||\r\n        (this.totalPages < 0 && !this.hasNextPage);\r\n    }\r\n  }\r\n}\r\n\r\nexport interface ChPaginatorActivePageChangedEvent {\r\n  activePage: number;\r\n}\r\nexport interface ChPaginatorPageNavigationRequestedEvent {\r\n  type: \"first\" | \"previous\" | \"next\" | \"last\" | \"goto\";\r\n  page?: number;\r\n}\r\n","ch-paginator-navigate[disabled] {\r\n    pointer-events: none;\r\n}\r\n","import {\r\n  Component,\r\n  Prop,\r\n  Event,\r\n  EventEmitter,\r\n  h,\r\n  Host,\r\n  Listen\r\n} from \"@stencil/core\";\r\nimport {\r\n  ChPaginatorNavigateClickedEvent,\r\n  ChPaginatorNavigateType\r\n} from \"./ch-paginator-navigate-types\";\r\n\r\n/**\r\n * The 'ch-paginator-navigate' component represents the navigation buttons for the 'ch-paginator' component.\r\n */\r\n@Component({\r\n  tag: \"ch-paginator-navigate\",\r\n  styleUrl: \"ch-paginator-navigate.scss\",\r\n  shadow: false\r\n})\r\nexport class ChPaginatorNavigate {\r\n  /**\r\n   * The type of navigation button.\r\n   */\r\n  @Prop({ reflect: true }) readonly type: ChPaginatorNavigateType;\r\n\r\n  /**\r\n   * Flag indicating if the button is disabled.\r\n   */\r\n  @Prop() readonly disabled: boolean;\r\n\r\n  /**\r\n   * Event emitted when the navigation button is pressed.\r\n   */\r\n  @Event() navigateClicked: EventEmitter<ChPaginatorNavigateClickedEvent>; // prettier-ignore\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  @Listen(\"click\", { passive: true })\r\n  pressedHandler(eventInfo) {\r\n    if (!eventInfo.key || eventInfo.key === \"Enter\" || eventInfo.key === \" \") {\r\n      this.navigateClicked.emit({ type: this.type });\r\n      eventInfo.stopPropagation();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Host role=\"button\" tabindex=\"0\" disabled={this.disabled}></Host>;\r\n  }\r\n}\r\n","@import \"../../common/reset.scss\";\r\n\r\nbutton {\r\n  all: unset;\r\n}\r\n\r\n.pages {\r\n  display: flex;\r\n  align-items: center;\r\n  @include reset-list;\r\n}\r\n","import {\r\n  Component,\r\n  h,\r\n  Prop,\r\n  Watch,\r\n  Event,\r\n  EventEmitter,\r\n  Element,\r\n  Listen\r\n} from \"@stencil/core\";\r\n\r\n/**\r\n * The 'ch-paginator-pages' component represents the pagination pages for the 'ch-paginator' component.\r\n */\r\n@Component({\r\n  tag: \"ch-paginator-pages\",\r\n  styleUrl: \"ch-paginator-pages.scss\",\r\n  shadow: true\r\n})\r\nexport class ChPaginatorPages {\r\n  private buttonActive: HTMLButtonElement;\r\n\r\n  @Element() el: HTMLChPaginatorPagesElement;\r\n\r\n  /**\r\n   * The active page number.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) page = 1;\r\n\r\n  @Watch(\"page\")\r\n  pageHandler() {\r\n    this.pageChanged.emit({ page: this.page });\r\n  }\r\n\r\n  /**\r\n   * The total number of pages.\r\n   */\r\n  @Prop({ reflect: true }) readonly totalPages = 1;\r\n\r\n  /**\r\n   * The maximum number of items to display in the pagination.\r\n   */\r\n  @Prop({ mutable: true, reflect: true }) maxSize = 9;\r\n\r\n  @Watch(\"maxSize\")\r\n  maxSizeHandler() {\r\n    this.validateMaxSize();\r\n  }\r\n\r\n  /**\r\n   * Flag to render the first and last pages.\r\n   */\r\n  @Prop() readonly renderFirstLastPages: boolean = true;\r\n\r\n  @Watch(\"renderFirstLastPages\")\r\n  renderFirstLastPagesHandler() {\r\n    this.validateMaxSize();\r\n  }\r\n\r\n  /**\r\n   * The text to display for the dots.\r\n   */\r\n  @Prop() readonly textDots: string = \"...\";\r\n\r\n  /**\r\n   * Event emitted when the page changes.\r\n   */\r\n  @Event() pageChanged: EventEmitter<ChPaginatorPagesPageChangedEvent>;\r\n\r\n  componentDidUpdate() {\r\n    if (document.activeElement === this.el) {\r\n      this.buttonActive.focus();\r\n    }\r\n  }\r\n\r\n  @Listen(\"keydown\", { passive: true })\r\n  keyDownHandler(eventInfo: KeyboardEvent) {\r\n    switch (eventInfo.key) {\r\n      case \"ArrowLeft\":\r\n        this.page = Math.max(this.page - 1, 1);\r\n        break;\r\n      case \"ArrowRight\":\r\n        this.page = Math.min(this.page + 1, this.totalPages);\r\n        break;\r\n    }\r\n  }\r\n\r\n  @Listen(\"focusin\", { passive: true })\r\n  focusHandler() {\r\n    this.buttonActive.focus();\r\n  }\r\n\r\n  private clickHandler = (eventInfo: Event) => {\r\n    const button = eventInfo.target as HTMLButtonElement;\r\n    this.page = parseInt(button.value);\r\n  };\r\n\r\n  private getItems(): { items: (number | string)[]; activeIndex: number } {\r\n    const padLeft = Math.ceil((this.maxSize - 1) / 2);\r\n    const padRight = Math.floor((this.maxSize - 1) / 2);\r\n    let fillLeft: number, fillStart: (number | string)[];\r\n    let fillRight: number, fillEnd: (number | string)[];\r\n\r\n    if (this.maxSize === 0 || this.maxSize >= this.totalPages) {\r\n      fillStart = this.fillStart(false);\r\n      fillLeft = this.page - 1;\r\n      fillRight = this.totalPages - this.page;\r\n      fillEnd = this.fillEnd(false);\r\n    } else if (this.page <= padLeft && this.page < this.totalPages - padRight) {\r\n      fillStart = this.fillStart(false);\r\n      fillLeft = this.page - 1;\r\n      fillEnd = this.fillEnd(true);\r\n      fillRight = padRight - fillEnd.length + (padLeft - fillLeft);\r\n    } else if (this.page > padLeft && this.page < this.totalPages - padRight) {\r\n      fillStart = this.fillStart(true);\r\n      fillLeft = padLeft - fillStart.length;\r\n      fillEnd = this.fillEnd(true);\r\n      fillRight = padRight - fillEnd.length;\r\n    } else if (this.page > padLeft && this.page >= this.totalPages - padRight) {\r\n      fillEnd = this.fillEnd(false);\r\n      fillRight = this.totalPages - this.page;\r\n      fillStart = this.fillStart(true);\r\n      fillLeft = padLeft - fillStart.length + padRight - fillRight;\r\n    }\r\n\r\n    const items: (number | string)[] = fillStart\r\n      .concat(this.getRangeItems(this.page - fillLeft, this.page - 1))\r\n      .concat([this.page])\r\n      .concat(this.getRangeItems(this.page + 1, this.page + fillRight))\r\n      .concat(fillEnd);\r\n\r\n    return {\r\n      items,\r\n      activeIndex: fillStart.length + fillLeft\r\n    };\r\n  }\r\n\r\n  private fillStart(render: boolean) {\r\n    if (render) {\r\n      return this.renderFirstLastPages ? [1, this.textDots] : [this.textDots];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private fillEnd(render: boolean) {\r\n    if (render) {\r\n      return this.renderFirstLastPages\r\n        ? [this.textDots, this.totalPages]\r\n        : [this.textDots];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private getRangeItems(start: number, end: number): number[] {\r\n    return Array.from({ length: end - start + 1 }, (_, i) => start + i);\r\n  }\r\n\r\n  private validateMaxSize() {\r\n    if (this.maxSize > 0) {\r\n      if (!this.renderFirstLastPages && this.maxSize < 3) {\r\n        this.maxSize = 3;\r\n      } else if (this.renderFirstLastPages && this.maxSize < 5) {\r\n        this.maxSize = 5;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { items, activeIndex } = this.getItems();\r\n\r\n    return (\r\n      <ol part=\"pages\" class=\"pages\">\r\n        {items.map((item, i) => {\r\n          if (typeof item === \"number\") {\r\n            return (\r\n              <li>\r\n                <button\r\n                  part={`page button ${i === activeIndex ? \"active\" : \"\"}`}\r\n                  value={item}\r\n                  onClick={this.clickHandler}\r\n                  ref={el =>\r\n                    (this.buttonActive =\r\n                      i === activeIndex ? el : this.buttonActive)\r\n                  }\r\n                >\r\n                  {item}\r\n                </button>\r\n              </li>\r\n            );\r\n          }\r\n          return (\r\n            <li>\r\n              <button part=\"page button dots\" disabled>\r\n                {item}\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ol>\r\n    );\r\n  }\r\n}\r\n\r\nexport interface ChPaginatorPagesPageChangedEvent {\r\n  page: number;\r\n}\r\n","import { GridChameleonColumnFilterEnum } from \"./gx-grid-column-filter/gx-grid-chameleon-column-filter\";\r\n\r\nexport interface Gx {\r\n  fx: {\r\n    obs: {\r\n      notify(eventName: string): void;\r\n    };\r\n  };\r\n  fn: {\r\n    currentGridRowImpl(gxId: number): string;\r\n    setCurrentGridRow(gxId: number, rowGxId: string): void;\r\n  };\r\n  lang: {\r\n    gxBoolean(value: undefined | boolean | number | string): boolean;\r\n  };\r\n  popup: {\r\n    ispopup(): boolean;\r\n  };\r\n  date: {\r\n    ctod(value: string, format?: \"Y4MD\"): gxdate;\r\n    ctot(value: string, format?: \"Y4MD\"): gxdate;\r\n    isNullDate(date: Date | gxdate): boolean;\r\n  };\r\n  getMessage(id: string): string;\r\n}\r\n\r\nexport interface gxdate {\r\n  toString(): string;\r\n  toISOString(): string;\r\n  Value: Date;\r\n}\r\n\r\nexport interface GxGrid {\r\n  readonly gxId: number;\r\n  readonly ControlName: string;\r\n  readonly columns: GxGridColumn[];\r\n  readonly rows: GxGridRow[];\r\n  readonly usePaging: boolean;\r\n  firstRecordOnPage: string;\r\n  eof: number;\r\n  readonly pageSize: number;\r\n  readonly properties: GxGridCellProperties[][];\r\n  readonly ParentObject: GxObject;\r\n  readonly header: string;\r\n  readonly Class: string;\r\n  readonly gxAllowSelection: boolean;\r\n  readonly gxAllowHovering: boolean;\r\n  readonly pagingBarClass: string;\r\n  readonly pagingButtonFirstClass: string;\r\n  readonly pagingButtonLastClass: string;\r\n  readonly pagingButtonNextClass: string;\r\n  readonly pagingButtonPreviousClass: string;\r\n\r\n  getRowByGxId(gxId: string): GxGridRow;\r\n  setSort(columnIndex: number, asc?: boolean): void;\r\n  selectRow(index: number): void;\r\n  execC2VFunctions(): void;\r\n  executeEvent(columnIndex: number, rowIndex: number): void;\r\n  changeGridPage(direction: string, force?: boolean): any;\r\n  isFirstPage(): boolean;\r\n  isLastPage(): boolean;\r\n  getColumnByHtmlName(htmlName: string): GxGridColumn;\r\n\r\n  // UserControl\r\n  readonly SortMode: \"client\" | \"server\";\r\n\r\n  readonly ColumnsetClass: string;\r\n  readonly ColumnClass: string;\r\n  readonly ColumnFilterClass: string;\r\n  readonly RowClass: string;\r\n  readonly RowEvenClass: string;\r\n  readonly RowOddClass: string;\r\n  readonly RowSelectedClass: string;\r\n  readonly RowHighlightedClass: string;\r\n  readonly CellClass: string;\r\n\r\n  readonly FilterButtonApplyText: string;\r\n  readonly FilterButtonResetText: string;\r\n\r\n  readonly PaginatorShow: boolean;\r\n  readonly PaginatorNavigationButtonTextPosition: \"title\" | \"text\";\r\n  readonly PaginatorPagesShow: boolean;\r\n  readonly PaginatorPagesMaxSize: number;\r\n  readonly PaginatorInfoShow: boolean;\r\n  readonly PaginatorInfoClass: string;\r\n  readonly PaginatorInfoTextMask: string;\r\n  readonly PaginatorInfoEmptyTextMask: string;\r\n\r\n  readonly ActionbarHeaderClass: string;\r\n  readonly ActionbarFooterClass: string;\r\n\r\n  readonly ActionRefreshPosition: \"none\" | \"header\" | \"footer\";\r\n  readonly ActionRefreshTextPosition: \"title\" | \"text\";\r\n  readonly ActionRefreshClass: string;\r\n\r\n  readonly ActionSettingsPosition: \"none\" | \"header\" | \"footer\";\r\n  readonly ActionSettingsTextPosition: \"title\" | \"text\";\r\n  readonly ActionSettingsClass: string;\r\n\r\n  readonly SettingsCloseTextPosition: \"title\" | \"text\";\r\n\r\n  OnPaginationFirst(): void;\r\n  OnPaginationPrevious(): void;\r\n  OnPaginationNext(): void;\r\n  OnPaginationLast(): void;\r\n}\r\n\r\nexport interface GxGridColumn {\r\n  readonly title: string;\r\n  readonly visible: boolean;\r\n  readonly gxColumnClass: string;\r\n  readonly gxControl: GxControl;\r\n  readonly gxAttId: string;\r\n  readonly gxAttName: string;\r\n  readonly htmlName: string;\r\n  readonly index: number;\r\n\r\n  // UserControl\r\n  readonly Icon: string;\r\n  readonly NamePosition: \"title\" | \"text\";\r\n  readonly HeaderClass: string;\r\n  Hidden: number;\r\n  readonly Hideable: number;\r\n  readonly Sortable: number;\r\n  readonly Filterable: number;\r\n  readonly Resizeable: number;\r\n  Size: \"min\" | \"max\" | \"minmax\" | \"auto\" | \"length\" | \"css\";\r\n  SizeLength: string;\r\n  SizeMinLength: string;\r\n  SizeMaxLength: string;\r\n  SizeVariableName: string;\r\n  readonly FilterMode: \"single\" | \"range\";\r\n  readonly FilterEnum: GridChameleonColumnFilterEnum[];\r\n  readonly FilterDateTimeAsDate: number;\r\n  readonly FilterCaption: string;\r\n  readonly FilterLabelEqual: string;\r\n  readonly FilterLabelLess: string;\r\n  readonly FilterLabelGreater: string;\r\n  SortDirection: \"asc\" | \"desc\";\r\n\r\n  order: number;\r\n  filterEqual: string;\r\n  filterLess: string;\r\n  filterGreater: string;\r\n  isFiltering: boolean;\r\n\r\n  render: boolean;\r\n}\r\n\r\nexport interface GxGridRow {\r\n  readonly id: number;\r\n  readonly gxId: string;\r\n  readonly values: string[];\r\n  readonly gxProps: any[];\r\n}\r\n\r\nexport interface GxGridCellProperties {\r\n  column: GxGridColumn;\r\n  visible: boolean;\r\n}\r\n\r\nexport interface GxControl {\r\n  setProperties(): void;\r\n  getHtml(): string;\r\n\r\n  dataType: GxControlDataType;\r\n  type: GxControlType;\r\n  possibleValues: GxControlPossibleValues;\r\n}\r\n\r\nexport type GxControlPossibleValues = [string, string][];\r\n\r\nexport interface GxObject {\r\n  refreshGrid(gridName: string): void;\r\n}\r\n\r\nexport enum GxControlType {\r\n  EDIT = 1,\r\n  RADIO = 4,\r\n  COMBO = 5,\r\n  CHECK = 7\r\n}\r\n\r\nexport enum GxControlDataType {\r\n  NUMBER = 0,\r\n  CHAR = 1,\r\n  DATE = 2,\r\n  DATETIME = 3,\r\n  VARCHAR = 5,\r\n  LONGVARCHAR = 6,\r\n  BOOLEAN = 7\r\n}\r\n",null,"import {\r\n  Element,\r\n  Component,\r\n  h,\r\n  Host,\r\n  Prop,\r\n  Event,\r\n  EventEmitter\r\n} from \"@stencil/core\";\r\nimport {\r\n  Gx,\r\n  GxControlDataType,\r\n  GxControlPossibleValues,\r\n  GxControlType,\r\n  gxdate,\r\n  GxGridColumn\r\n} from \"../genexus\";\r\n\r\ndeclare let gx: Gx;\r\n\r\n/**\r\n * Represents a component that provides filtering controls for a grid column.\r\n */\r\n@Component({\r\n  tag: \"gx-grid-chameleon-column-filter\",\r\n  styleUrl: \"gx-grid-chameleon-column-filter.scss\",\r\n  shadow: true\r\n})\r\n// eslint-disable-next-line @stencil-community/required-prefix\r\nexport class GridChameleonColumnFilter {\r\n  private filterEnum: GridChameleonColumnFilterEnum[] = [];\r\n  private inputEqual: HTMLInputElement | HTMLSelectElement;\r\n  private inputLess: HTMLInputElement | HTMLSelectElement;\r\n  private inputGreater: HTMLInputElement | HTMLSelectElement;\r\n\r\n  @Element() el: HTMLGxGridChameleonColumnFilterElement;\r\n\r\n  /**\r\n   * The grid column associated with this filter.\r\n   */\r\n  @Prop() readonly column!: GxGridColumn;\r\n\r\n  /**\r\n   * The text to display on the \"Apply\" button.\r\n   */\r\n  @Prop() readonly buttonApplyText: string;\r\n\r\n  /**\r\n   * The text to display on the \"Reset\" button.\r\n   */\r\n  @Prop() readonly buttonResetText: string;\r\n\r\n  /**\r\n   * The value to filter for equality comparison.\r\n   */\r\n  @Prop({ mutable: true }) equal: string;\r\n\r\n  /**\r\n   * The value to filter for less-than comparison.\r\n   */\r\n  @Prop({ mutable: true }) less: string;\r\n\r\n  /**\r\n   * The value to filter for greater-than comparison.\r\n   */\r\n  @Prop({ mutable: true }) greater: string;\r\n\r\n  /**\r\n   * Emitted when the filter settings for the column have changed.\r\n   * This event carries the updated filter values.\r\n   */\r\n  @Event()\r\n  columnSettingsChanged: EventEmitter<GridChameleonColumnFilterChanged>;\r\n\r\n  componentWillLoad() {\r\n    if (\r\n      Array.isArray(this.column.FilterEnum) &&\r\n      this.column.FilterEnum.length > 0\r\n    ) {\r\n      this.filterEnum = this.column.FilterEnum;\r\n    }\r\n  }\r\n\r\n  private applyClickHandler = () => {\r\n    this.equal = this.getControlValue(this.inputEqual);\r\n    this.less = this.getControlValue(this.inputLess);\r\n    this.greater = this.getControlValue(this.inputGreater);\r\n\r\n    this.columnSettingsChanged.emit({\r\n      column: this.column,\r\n      equal: this.equal,\r\n      less: this.less,\r\n      greater: this.greater\r\n    });\r\n  };\r\n\r\n  private resetClickHandler = () => {\r\n    this.equal = \"\";\r\n    this.less = \"\";\r\n    this.greater = \"\";\r\n\r\n    this.columnSettingsChanged.emit({\r\n      column: this.column,\r\n      equal: this.equal,\r\n      less: this.less,\r\n      greater: this.greater\r\n    });\r\n  };\r\n\r\n  private getControlValue(input: HTMLInputElement | HTMLSelectElement): string {\r\n    const value = input?.value ?? \"\";\r\n    let dataType = this.column.gxControl.dataType;\r\n\r\n    if (\r\n      dataType === GxControlDataType.DATETIME &&\r\n      this.column.FilterDateTimeAsDate === -1\r\n    ) {\r\n      dataType = GxControlDataType.DATE;\r\n    }\r\n\r\n    switch (dataType) {\r\n      case GxControlDataType.DATE:\r\n        return gx.date.ctod(value, \"Y4MD\").toString();\r\n      case GxControlDataType.DATETIME:\r\n        return gx.date.ctot(value, \"Y4MD\").toString();\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  private toControlValue(value: string): string {\r\n    let dataType = this.column.gxControl.dataType;\r\n\r\n    if (!value) {\r\n      return \"\";\r\n    }\r\n\r\n    if (\r\n      dataType === GxControlDataType.DATETIME &&\r\n      this.column.FilterDateTimeAsDate === -1\r\n    ) {\r\n      dataType = GxControlDataType.DATE;\r\n    }\r\n\r\n    switch (dataType) {\r\n      case GxControlDataType.DATE:\r\n        return this.convertGxDateToISO(gx.date.ctod(value), false);\r\n      case GxControlDataType.DATETIME:\r\n        return this.convertGxDateToISO(gx.date.ctot(value), true);\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  private convertGxDateToISO(gxdate: gxdate, isDateTime: boolean): string {\r\n    const pad = (n: number) => n.toString().padStart(2, \"0\");\r\n    const date = gxdate.Value;\r\n\r\n    if (gx.date.isNullDate(date)) {\r\n      return \"\";\r\n    }\r\n\r\n    if (isDateTime) {\r\n      return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(\r\n        date.getDate()\r\n      )}T${pad(date.getHours())}:${pad(date.getMinutes())}`;\r\n    }\r\n    return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(\r\n      date.getDate()\r\n    )}`;\r\n  }\r\n\r\n  private getFilterInputType(dataType: GxControlDataType): string {\r\n    switch (dataType) {\r\n      case GxControlDataType.BOOLEAN:\r\n        return \"checkbox\";\r\n      case GxControlDataType.CHAR:\r\n      case GxControlDataType.VARCHAR:\r\n      case GxControlDataType.LONGVARCHAR:\r\n        return \"text\";\r\n      case GxControlDataType.DATE:\r\n        return \"date\";\r\n      case GxControlDataType.DATETIME:\r\n        return \"datetime-local\";\r\n      case GxControlDataType.NUMBER:\r\n        return \"number\";\r\n      default:\r\n        return \"text\";\r\n    }\r\n  }\r\n\r\n  private renderColumnFilterControl(\r\n    input: string,\r\n    type: GxControlType,\r\n    dataType: GxControlDataType,\r\n    possibleValues: GxControlPossibleValues,\r\n    label: string,\r\n    value: string\r\n  ) {\r\n    const part = input.replace(\"input\", \"\").toLowerCase();\r\n\r\n    if (this.filterEnum.length > 0) {\r\n      type = GxControlType.COMBO;\r\n      possibleValues = this.filterEnum.map(filter => [\r\n        filter.Value,\r\n        filter.Description\r\n      ]);\r\n    }\r\n\r\n    if (\r\n      dataType === GxControlDataType.DATETIME &&\r\n      this.column.FilterDateTimeAsDate === -1\r\n    ) {\r\n      dataType = GxControlDataType.DATE;\r\n    }\r\n\r\n    switch (type) {\r\n      case GxControlType.EDIT:\r\n      case GxControlType.CHECK:\r\n        return (\r\n          <label part={`label ${part}`}>\r\n            {label}\r\n            <input\r\n              type={this.getFilterInputType(dataType)}\r\n              value={this.toControlValue(value)}\r\n              ref={el => (this[input] = el)}\r\n              part={`field ${part}`}\r\n            />\r\n          </label>\r\n        );\r\n      case GxControlType.COMBO:\r\n        return (\r\n          <label part={`label ${part}`}>\r\n            {label}\r\n            <select ref={el => (this[input] = el)} part={`field ${part}`}>\r\n              {possibleValues.map(([optionValue, optionDescription]) => (\r\n                <option value={optionValue} selected={optionValue === value}>\r\n                  {optionDescription}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n        );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <fieldset part=\"main\">\r\n          <caption part=\"caption\">{this.column.FilterCaption}</caption>\r\n          {this.column.FilterMode === \"single\" &&\r\n            this.renderColumnFilterControl(\r\n              \"inputEqual\",\r\n              this.column.gxControl.type,\r\n              this.column.gxControl.dataType,\r\n              this.column.gxControl.possibleValues,\r\n              this.column.FilterLabelEqual,\r\n              this.equal\r\n            )}\r\n          {this.column.FilterMode === \"range\" &&\r\n            this.renderColumnFilterControl(\r\n              \"inputGreater\",\r\n              this.column.gxControl.type,\r\n              this.column.gxControl.dataType,\r\n              this.column.gxControl.possibleValues,\r\n              this.column.FilterLabelGreater,\r\n              this.greater\r\n            )}\r\n          {this.column.FilterMode === \"range\" &&\r\n            this.renderColumnFilterControl(\r\n              \"inputLess\",\r\n              this.column.gxControl.type,\r\n              this.column.gxControl.dataType,\r\n              this.column.gxControl.possibleValues,\r\n              this.column.FilterLabelLess,\r\n              this.less\r\n            )}\r\n        </fieldset>\r\n        <section part=\"footer\">\r\n          <button part=\"button reset\" onClick={this.resetClickHandler}>\r\n            {this.buttonResetText}\r\n          </button>\r\n          <button part=\"button apply\" onClick={this.applyClickHandler}>\r\n            {this.buttonApplyText}\r\n          </button>\r\n        </section>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n\r\nexport interface GridChameleonColumnFilterEnum {\r\n  Description: string;\r\n  Value: string;\r\n}\r\n\r\nexport interface GridChameleonColumnFilterChanged {\r\n  column: GxGridColumn;\r\n  equal?: string;\r\n  less?: string;\r\n  greater?: string;\r\n}\r\n"],"mappings":"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"}